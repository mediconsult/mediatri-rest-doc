#
# 
#
# Generated by <a href="http://enunciate.webcohesion.com">Enunciate</a>.
#
require 'json'

# adding necessary json serialization methods to standard classes.
class Object
  def to_jaxb_json_hash
    return self
  end
  def self.from_json o
    return o
  end
end

class String
  def self.from_json o
    return o
  end
end

class Boolean
  def self.from_json o
    return o
  end
end

class Numeric
  def self.from_json o
    return o
  end
end

class Time
  #json time is represented as number of milliseconds since epoch
  def to_jaxb_json_hash
    return (to_i * 1000) + (usec / 1000)
  end
  def self.from_json o
    if o.nil?
      return nil
    else
      return Time.at(o / 1000, (o % 1000) * 1000)
    end
  end
end

class Array
  def to_jaxb_json_hash
    a = Array.new
    each { | _item | a.push _item.to_jaxb_json_hash }
    return a
  end
end

class Hash
  def to_jaxb_json_hash
    h = Hash.new
    each { | _key, _value | h[_key.to_jaxb_json_hash] = _value.to_jaxb_json_hash }
    return h
  end
end

module EnunciateHelpers
  LAMB_CLASS_AWARE = ->(_item) do
    java_clazz = _item['@class']
    clazz_array_parts = java_clazz.split('.')
    short_clazz = clazz_array_parts.pop
    clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
    clazz = clazz_package + "::" + short_clazz
    Object.const_get(clazz).send(:from_json, _item)
  end
end


module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class Palvelutapahtuma 

    # (no documentation provided)
    attr_accessor :palvelunantaja
    # (no documentation provided)
    attr_accessor :kirjausaika
    # (no documentation provided)
    attr_accessor :tyonantaja
    # (no documentation provided)
    attr_accessor :tapahtumalaji
    # (no documentation provided)
    attr_accessor :rekisteri
    # (no documentation provided)
    attr_accessor :palveluntuottaja
    # (no documentation provided)
    attr_accessor :luovutusHaunPalvelutapahtuma
    # (no documentation provided)
    attr_accessor :kirjaajaInfo
    # (no documentation provided)
    attr_accessor :kirjausyksikko
    # (no documentation provided)
    attr_accessor :aktiivinen
    # (no documentation provided)
    attr_accessor :loppuaika
    # (no documentation provided)
    attr_accessor :kirjausyksikkoId
    # (no documentation provided)
    attr_accessor :oid
    # (no documentation provided)
    attr_accessor :id
    # (no documentation provided)
    attr_accessor :peruuntumisSyyKoodi
    # (no documentation provided)
    attr_accessor :writeUsed
    # (no documentation provided)
    attr_accessor :alkuaika
    # (no documentation provided)
    attr_accessor :omistaja
    # (no documentation provided)
    attr_accessor :kirjaaja
    # (no documentation provided)
    attr_accessor :tyyppi

    # the json hash for this Palvelutapahtuma
    def to_jaxb_json_hash
      _h = {}
      _h['palvelunantaja'] = palvelunantaja.to_jaxb_json_hash unless palvelunantaja.nil?
      _h['kirjausaika'] = kirjausaika.to_jaxb_json_hash unless kirjausaika.nil?
      _h['tyonantaja'] = tyonantaja.to_jaxb_json_hash unless tyonantaja.nil?
      _h['tapahtumalaji'] = tapahtumalaji.to_jaxb_json_hash unless tapahtumalaji.nil?
      _h['rekisteri'] = rekisteri.to_jaxb_json_hash unless rekisteri.nil?
      _h['palveluntuottaja'] = palveluntuottaja.to_jaxb_json_hash unless palveluntuottaja.nil?
      _h['luovutusHaunPalvelutapahtuma'] = luovutusHaunPalvelutapahtuma.to_jaxb_json_hash unless luovutusHaunPalvelutapahtuma.nil?
      _h['kirjaajaInfo'] = kirjaajaInfo.to_jaxb_json_hash unless kirjaajaInfo.nil?
      _h['kirjausyksikko'] = kirjausyksikko.to_jaxb_json_hash unless kirjausyksikko.nil?
      _h['aktiivinen'] = aktiivinen.to_jaxb_json_hash unless aktiivinen.nil?
      _h['loppuaika'] = loppuaika.to_jaxb_json_hash unless loppuaika.nil?
      _h['kirjausyksikkoId'] = kirjausyksikkoId.to_jaxb_json_hash unless kirjausyksikkoId.nil?
      _h['oid'] = oid.to_jaxb_json_hash unless oid.nil?
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['peruuntumisSyyKoodi'] = peruuntumisSyyKoodi.to_jaxb_json_hash unless peruuntumisSyyKoodi.nil?
      _h['writeUsed'] = writeUsed.to_jaxb_json_hash unless writeUsed.nil?
      _h['alkuaika'] = alkuaika.to_jaxb_json_hash unless alkuaika.nil?
      _h['omistaja'] = omistaja.to_jaxb_json_hash unless omistaja.nil?
      _h['kirjaaja'] = kirjaaja.to_jaxb_json_hash unless kirjaaja.nil?
      _h['tyyppi'] = tyyppi.to_jaxb_json_hash unless tyyppi.nil?
      return _h
    end

    # the json (string form) for this Palvelutapahtuma
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Palvelutapahtuma with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['palvelunantaja'].nil?
          _oa = _o['palvelunantaja']
            if(_oa.is_a? Hash)
              @palvelunantaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palvelunantaja =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palvelunantaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palvelunantaja.push String.from_json(_item)
                 else
                   @palvelunantaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palvelunantaja = _oa
            end
          end
        if !_o['kirjausaika'].nil?
          _oa = _o['kirjausaika']
            if(_oa.is_a? Hash)
              @kirjausaika = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kirjausaika =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kirjausaika = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kirjausaika.push Time.from_json(_item)
                 else
                   @kirjausaika.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kirjausaika = _oa
            end
          end
        if !_o['tyonantaja'].nil?
          _oa = _o['tyonantaja']
            if(_oa.is_a? Hash)
              @tyonantaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tyonantaja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tyonantaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tyonantaja.push Fixnum.from_json(_item)
                 else
                   @tyonantaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tyonantaja = _oa
            end
          end
        if !_o['tapahtumalaji'].nil?
          _oa = _o['tapahtumalaji']
            if(_oa.is_a? Hash)
              @tapahtumalaji = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tapahtumalaji =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tapahtumalaji = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tapahtumalaji.push String.from_json(_item)
                 else
                   @tapahtumalaji.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tapahtumalaji = _oa
            end
          end
        if !_o['rekisteri'].nil?
          _oa = _o['rekisteri']
            if(_oa.is_a? Hash)
              @rekisteri = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rekisteri =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rekisteri = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rekisteri.push String.from_json(_item)
                 else
                   @rekisteri.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rekisteri = _oa
            end
          end
        if !_o['palveluntuottaja'].nil?
          _oa = _o['palveluntuottaja']
            if(_oa.is_a? Hash)
              @palveluntuottaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palveluntuottaja =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palveluntuottaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palveluntuottaja.push String.from_json(_item)
                 else
                   @palveluntuottaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palveluntuottaja = _oa
            end
          end
        if !_o['luovutusHaunPalvelutapahtuma'].nil?
          _oa = _o['luovutusHaunPalvelutapahtuma']
            if(_oa.is_a? Hash)
              @luovutusHaunPalvelutapahtuma = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @luovutusHaunPalvelutapahtuma =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @luovutusHaunPalvelutapahtuma = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @luovutusHaunPalvelutapahtuma.push Boolean.from_json(_item)
                 else
                   @luovutusHaunPalvelutapahtuma.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @luovutusHaunPalvelutapahtuma = _oa
            end
          end
        if !_o['kirjaajaInfo'].nil?
          _oa = _o['kirjaajaInfo']
            if(_oa.is_a? Hash)
              @kirjaajaInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kirjaajaInfo =  Fi::Mediconsult::Core::Client::Dto::Omistaja::LazyLoadedDtoOfUser.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kirjaajaInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kirjaajaInfo.push Fi::Mediconsult::Core::Client::Dto::Omistaja::LazyLoadedDtoOfUser.from_json(_item)
                 else
                   @kirjaajaInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kirjaajaInfo = _oa
            end
          end
        if !_o['kirjausyksikko'].nil?
          _oa = _o['kirjausyksikko']
            if(_oa.is_a? Hash)
              @kirjausyksikko = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kirjausyksikko =  Fi::Mediconsult::Core::Client::Dto::Omistaja::LazyLoadedDtoOfUnit.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kirjausyksikko = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kirjausyksikko.push Fi::Mediconsult::Core::Client::Dto::Omistaja::LazyLoadedDtoOfUnit.from_json(_item)
                 else
                   @kirjausyksikko.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kirjausyksikko = _oa
            end
          end
        if !_o['aktiivinen'].nil?
          _oa = _o['aktiivinen']
            if(_oa.is_a? Hash)
              @aktiivinen = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @aktiivinen =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @aktiivinen = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @aktiivinen.push Boolean.from_json(_item)
                 else
                   @aktiivinen.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @aktiivinen = _oa
            end
          end
        if !_o['loppuaika'].nil?
          _oa = _o['loppuaika']
            if(_oa.is_a? Hash)
              @loppuaika = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @loppuaika =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @loppuaika = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @loppuaika.push Time.from_json(_item)
                 else
                   @loppuaika.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @loppuaika = _oa
            end
          end
        if !_o['kirjausyksikkoId'].nil?
          _oa = _o['kirjausyksikkoId']
            if(_oa.is_a? Hash)
              @kirjausyksikkoId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kirjausyksikkoId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kirjausyksikkoId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kirjausyksikkoId.push Fixnum.from_json(_item)
                 else
                   @kirjausyksikkoId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kirjausyksikkoId = _oa
            end
          end
        if !_o['oid'].nil?
          _oa = _o['oid']
            if(_oa.is_a? Hash)
              @oid = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @oid =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @oid = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @oid.push String.from_json(_item)
                 else
                   @oid.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @oid = _oa
            end
          end
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push Fixnum.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
        if !_o['peruuntumisSyyKoodi'].nil?
          _oa = _o['peruuntumisSyyKoodi']
            if(_oa.is_a? Hash)
              @peruuntumisSyyKoodi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @peruuntumisSyyKoodi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @peruuntumisSyyKoodi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @peruuntumisSyyKoodi.push String.from_json(_item)
                 else
                   @peruuntumisSyyKoodi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @peruuntumisSyyKoodi = _oa
            end
          end
        if !_o['writeUsed'].nil?
          _oa = _o['writeUsed']
            if(_oa.is_a? Hash)
              @writeUsed = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @writeUsed =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @writeUsed = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @writeUsed.push Boolean.from_json(_item)
                 else
                   @writeUsed.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @writeUsed = _oa
            end
          end
        if !_o['alkuaika'].nil?
          _oa = _o['alkuaika']
            if(_oa.is_a? Hash)
              @alkuaika = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @alkuaika =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @alkuaika = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @alkuaika.push Time.from_json(_item)
                 else
                   @alkuaika.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @alkuaika = _oa
            end
          end
        if !_o['omistaja'].nil?
          _oa = _o['omistaja']
            if(_oa.is_a? Hash)
              @omistaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @omistaja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @omistaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @omistaja.push Fixnum.from_json(_item)
                 else
                   @omistaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @omistaja = _oa
            end
          end
        if !_o['kirjaaja'].nil?
          _oa = _o['kirjaaja']
            if(_oa.is_a? Hash)
              @kirjaaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kirjaaja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kirjaaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kirjaaja.push Fixnum.from_json(_item)
                 else
                   @kirjaaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kirjaaja = _oa
            end
          end
        if !_o['tyyppi'].nil?
          _oa = _o['tyyppi']
            if(_oa.is_a? Hash)
              @tyyppi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tyyppi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tyyppi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tyyppi.push String.from_json(_item)
                 else
                   @tyyppi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tyyppi = _oa
            end
          end
    end

    # constructs a Palvelutapahtuma from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class UserGroup 

    # (no documentation provided)
    attr_accessor :groupdId
    # (no documentation provided)
    attr_accessor :name

    # the json hash for this UserGroup
    def to_jaxb_json_hash
      _h = {}
      _h['groupdId'] = groupdId.to_jaxb_json_hash unless groupdId.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      return _h
    end

    # the json (string form) for this UserGroup
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this UserGroup with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['groupdId'].nil?
          _oa = _o['groupdId']
            if(_oa.is_a? Hash)
              @groupdId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @groupdId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @groupdId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @groupdId.push Fixnum.from_json(_item)
                 else
                   @groupdId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @groupdId = _oa
            end
          end
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
    end

    # constructs a UserGroup from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

  # (no documentation provided)
  class Person<T extends Fi::Mediconsult::Core::Client::Dto::Omistaja::GenericOmistaja> 

    # the id
    attr_accessor :id
    # the data
    attr_accessor :data

    # the json hash for this Person<T extends Fi::Mediconsult::Core::Client::Dto::Omistaja::GenericOmistaja>
    def to_jaxb_json_hash
      _h = {}
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['data'] = data.to_jaxb_json_hash unless data.nil?
      return _h
    end

    # the json (string form) for this Person<T extends Fi::Mediconsult::Core::Client::Dto::Omistaja::GenericOmistaja>
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Person<T extends Fi::Mediconsult::Core::Client::Dto::Omistaja::GenericOmistaja> with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push Fixnum.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
        if !_o['data'].nil?
          _oa = _o['data']
            if(_oa.is_a? Hash)
              @data = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @data =  Fi::Mediconsult::Core::Client::Dto::Omistaja::GenericOmistaja.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @data = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @data.push Fi::Mediconsult::Core::Client::Dto::Omistaja::GenericOmistaja.from_json(_item)
                 else
                   @data.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @data = _oa
            end
          end
    end

    # constructs a Person<T extends Fi::Mediconsult::Core::Client::Dto::Omistaja::GenericOmistaja> from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Seuranta

  # (no documentation provided)
  class SeurantaFormConfig 

    # (no documentation provided)
    attr_accessor :titles
    # (no documentation provided)
    attr_accessor :permission

    # the json hash for this SeurantaFormConfig
    def to_jaxb_json_hash
      _h = {}
      if !titles.nil?
        _ha = Array.new
        titles.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['titles'] = _ha
      end
      _h['permission'] = permission.to_jaxb_json_hash unless permission.nil?
      return _h
    end

    # the json (string form) for this SeurantaFormConfig
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this SeurantaFormConfig with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['titles'].nil?
          _oa = _o['titles']
            if(_oa.is_a? Hash)
              @titles = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @titles =  Fi::Mediconsult::Core::Client::Dto::Seuranta::SeurantaTitleEditFlag.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @titles = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @titles.push Fi::Mediconsult::Core::Client::Dto::Seuranta::SeurantaTitleEditFlag.from_json(_item)
                 else
                   @titles.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @titles = _oa
            end
          end
        if !_o['permission'].nil?
          _oa = _o['permission']
            if(_oa.is_a? Hash)
              @permission = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @permission =  Fi::Mediconsult::Core::Client::Dto::PermissionDTOOfExtendFormInfo.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @permission = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @permission.push Fi::Mediconsult::Core::Client::Dto::PermissionDTOOfExtendFormInfo.from_json(_item)
                 else
                   @permission.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @permission = _oa
            end
          end
    end

    # constructs a SeurantaFormConfig from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Omistaja

  # (no documentation provided)
  class LazyLoadedDtoOfBasicInfo 

    # (no documentation provided)
    attr_accessor :loaded
    # (no documentation provided)
    attr_accessor :object
    # (no documentation provided)
    attr_accessor :loadUrl
    # (no documentation provided)
    attr_accessor :type

    # the json hash for this LazyLoadedDtoOfBasicInfo
    def to_jaxb_json_hash
      _h = {}
      _h['loaded'] = loaded.to_jaxb_json_hash unless loaded.nil?
      _h['object'] = object.to_jaxb_json_hash unless object.nil?
      _h['loadUrl'] = loadUrl.to_jaxb_json_hash unless loadUrl.nil?
      _h['type'] = type.to_jaxb_json_hash unless type.nil?
      return _h
    end

    # the json (string form) for this LazyLoadedDtoOfBasicInfo
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this LazyLoadedDtoOfBasicInfo with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['loaded'].nil?
          _oa = _o['loaded']
            if(_oa.is_a? Hash)
              @loaded = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @loaded =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @loaded = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @loaded.push Boolean.from_json(_item)
                 else
                   @loaded.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @loaded = _oa
            end
          end
        if !_o['object'].nil?
          _oa = _o['object']
            if(_oa.is_a? Hash)
              @object = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @object =  Fi::Mediconsult::Core::Client::Dto::Omistaja::BasicInfo.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @object = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @object.push Fi::Mediconsult::Core::Client::Dto::Omistaja::BasicInfo.from_json(_item)
                 else
                   @object.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @object = _oa
            end
          end
        if !_o['loadUrl'].nil?
          _oa = _o['loadUrl']
            if(_oa.is_a? Hash)
              @loadUrl = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @loadUrl =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @loadUrl = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @loadUrl.push String.from_json(_item)
                 else
                   @loadUrl.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @loadUrl = _oa
            end
          end
        if !_o['type'].nil?
          _oa = _o['type']
            if(_oa.is_a? Hash)
              @type = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @type =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @type = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @type.push String.from_json(_item)
                 else
                   @type.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @type = _oa
            end
          end
    end

    # constructs a LazyLoadedDtoOfBasicInfo from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

  # (no documentation provided)
  class IdNamePair 

    # (no documentation provided)
    attr_accessor :id
    # (no documentation provided)
    attr_accessor :name

    # the json hash for this IdNamePair
    def to_jaxb_json_hash
      _h = {}
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      return _h
    end

    # the json (string form) for this IdNamePair
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this IdNamePair with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push Bignum.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
    end

    # constructs a IdNamePair from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Omistaja

  # (no documentation provided)
  class OmistajaListConfig 

    # (no documentation provided)
    attr_accessor :basicInfoTitles
    # (no documentation provided)
    attr_accessor :listName
    # (no documentation provided)
    attr_accessor :listOwnerId
    # (no documentation provided)
    attr_accessor :listDataOwnerType
    # (no documentation provided)
    attr_accessor :linkedFormInfo
    # (no documentation provided)
    attr_accessor :listId

    # the json hash for this OmistajaListConfig
    def to_jaxb_json_hash
      _h = {}
      if !basicInfoTitles.nil?
        _ha = Array.new
        basicInfoTitles.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['basicInfoTitles'] = _ha
      end
      _h['listName'] = listName.to_jaxb_json_hash unless listName.nil?
      _h['listOwnerId'] = listOwnerId.to_jaxb_json_hash unless listOwnerId.nil?
      _h['listDataOwnerType'] = listDataOwnerType.to_jaxb_json_hash unless listDataOwnerType.nil?
      _h['linkedFormInfo'] = linkedFormInfo.to_jaxb_json_hash unless linkedFormInfo.nil?
      _h['listId'] = listId.to_jaxb_json_hash unless listId.nil?
      return _h
    end

    # the json (string form) for this OmistajaListConfig
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this OmistajaListConfig with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['basicInfoTitles'].nil?
          _oa = _o['basicInfoTitles']
            if(_oa.is_a? Hash)
              @basicInfoTitles = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @basicInfoTitles =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @basicInfoTitles = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @basicInfoTitles.push String.from_json(_item)
                 else
                   @basicInfoTitles.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @basicInfoTitles = _oa
            end
          end
        if !_o['listName'].nil?
          _oa = _o['listName']
            if(_oa.is_a? Hash)
              @listName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @listName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @listName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @listName.push String.from_json(_item)
                 else
                   @listName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @listName = _oa
            end
          end
        if !_o['listOwnerId'].nil?
          _oa = _o['listOwnerId']
            if(_oa.is_a? Hash)
              @listOwnerId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @listOwnerId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @listOwnerId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @listOwnerId.push Fixnum.from_json(_item)
                 else
                   @listOwnerId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @listOwnerId = _oa
            end
          end
        if !_o['listDataOwnerType'].nil?
          _oa = _o['listDataOwnerType']
            if(_oa.is_a? Hash)
              @listDataOwnerType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @listDataOwnerType =  Fi::Mediconsult::Core::Client::Dto::Omistaja::OwnerTypeInfo.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @listDataOwnerType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @listDataOwnerType.push Fi::Mediconsult::Core::Client::Dto::Omistaja::OwnerTypeInfo.from_json(_item)
                 else
                   @listDataOwnerType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @listDataOwnerType = _oa
            end
          end
        if !_o['linkedFormInfo'].nil?
          _oa = _o['linkedFormInfo']
            if(_oa.is_a? Hash)
              @linkedFormInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @linkedFormInfo =  Fi::Mediconsult::Core::Client::Dto::FormInfo.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @linkedFormInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @linkedFormInfo.push Fi::Mediconsult::Core::Client::Dto::FormInfo.from_json(_item)
                 else
                   @linkedFormInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @linkedFormInfo = _oa
            end
          end
        if !_o['listId'].nil?
          _oa = _o['listId']
            if(_oa.is_a? Hash)
              @listId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @listId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @listId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @listId.push Fixnum.from_json(_item)
                 else
                   @listId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @listId = _oa
            end
          end
    end

    # constructs a OmistajaListConfig from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Kertomus

  # (no documentation provided)
  class ProtectionReason 

    # (no documentation provided)
    attr_accessor :reason
    # (no documentation provided)
    attr_accessor :protection

    # the json hash for this ProtectionReason
    def to_jaxb_json_hash
      _h = {}
      _h['reason'] = reason.to_jaxb_json_hash unless reason.nil?
      _h['protection'] = protection.to_jaxb_json_hash unless protection.nil?
      return _h
    end

    # the json (string form) for this ProtectionReason
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this ProtectionReason with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['reason'].nil?
          _oa = _o['reason']
            if(_oa.is_a? Hash)
              @reason = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @reason =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @reason = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @reason.push String.from_json(_item)
                 else
                   @reason.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @reason = _oa
            end
          end
        if !_o['protection'].nil?
          _oa = _o['protection']
            if(_oa.is_a? Hash)
              @protection = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @protection =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @protection = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @protection.push String.from_json(_item)
                 else
                   @protection.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @protection = _oa
            end
          end
    end

    # constructs a ProtectionReason from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Rights

  # (no documentation provided)
  class CourseSettings 

    # (no documentation provided)
    attr_accessor :coursePeriodTitle
    # (no documentation provided)
    attr_accessor :workerRoleTitle
    # (no documentation provided)
    attr_accessor :skillTitle
    # (no documentation provided)
    attr_accessor :namedGroupTitle
    # (no documentation provided)
    attr_accessor :courseTitle

    # the json hash for this CourseSettings
    def to_jaxb_json_hash
      _h = {}
      _h['coursePeriodTitle'] = coursePeriodTitle.to_jaxb_json_hash unless coursePeriodTitle.nil?
      _h['workerRoleTitle'] = workerRoleTitle.to_jaxb_json_hash unless workerRoleTitle.nil?
      _h['skillTitle'] = skillTitle.to_jaxb_json_hash unless skillTitle.nil?
      _h['namedGroupTitle'] = namedGroupTitle.to_jaxb_json_hash unless namedGroupTitle.nil?
      _h['courseTitle'] = courseTitle.to_jaxb_json_hash unless courseTitle.nil?
      return _h
    end

    # the json (string form) for this CourseSettings
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this CourseSettings with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['coursePeriodTitle'].nil?
          _oa = _o['coursePeriodTitle']
            if(_oa.is_a? Hash)
              @coursePeriodTitle = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @coursePeriodTitle =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @coursePeriodTitle = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @coursePeriodTitle.push String.from_json(_item)
                 else
                   @coursePeriodTitle.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @coursePeriodTitle = _oa
            end
          end
        if !_o['workerRoleTitle'].nil?
          _oa = _o['workerRoleTitle']
            if(_oa.is_a? Hash)
              @workerRoleTitle = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @workerRoleTitle =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @workerRoleTitle = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @workerRoleTitle.push String.from_json(_item)
                 else
                   @workerRoleTitle.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @workerRoleTitle = _oa
            end
          end
        if !_o['skillTitle'].nil?
          _oa = _o['skillTitle']
            if(_oa.is_a? Hash)
              @skillTitle = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @skillTitle =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @skillTitle = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @skillTitle.push String.from_json(_item)
                 else
                   @skillTitle.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @skillTitle = _oa
            end
          end
        if !_o['namedGroupTitle'].nil?
          _oa = _o['namedGroupTitle']
            if(_oa.is_a? Hash)
              @namedGroupTitle = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @namedGroupTitle =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @namedGroupTitle = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @namedGroupTitle.push String.from_json(_item)
                 else
                   @namedGroupTitle.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @namedGroupTitle = _oa
            end
          end
        if !_o['courseTitle'].nil?
          _oa = _o['courseTitle']
            if(_oa.is_a? Hash)
              @courseTitle = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @courseTitle =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @courseTitle = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @courseTitle.push String.from_json(_item)
                 else
                   @courseTitle.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @courseTitle = _oa
            end
          end
    end

    # constructs a CourseSettings from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Medisos

module Dto

  # (no documentation provided)
  class MaksusummaDto 

    # (no documentation provided)
    attr_accessor :palvelutehtava
    # (no documentation provided)
    attr_accessor :palvelusetelienArvo
    # (no documentation provided)
    attr_accessor :maksusitoomuksienArvo
    # (no documentation provided)
    attr_accessor :erityinenTuki

    # the json hash for this MaksusummaDto
    def to_jaxb_json_hash
      _h = {}
      _h['palvelutehtava'] = palvelutehtava.to_jaxb_json_hash unless palvelutehtava.nil?
      _h['palvelusetelienArvo'] = palvelusetelienArvo.to_jaxb_json_hash unless palvelusetelienArvo.nil?
      _h['maksusitoomuksienArvo'] = maksusitoomuksienArvo.to_jaxb_json_hash unless maksusitoomuksienArvo.nil?
      _h['erityinenTuki'] = erityinenTuki.to_jaxb_json_hash unless erityinenTuki.nil?
      return _h
    end

    # the json (string form) for this MaksusummaDto
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this MaksusummaDto with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['palvelutehtava'].nil?
          _oa = _o['palvelutehtava']
            if(_oa.is_a? Hash)
              @palvelutehtava = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palvelutehtava =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palvelutehtava = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palvelutehtava.push Fixnum.from_json(_item)
                 else
                   @palvelutehtava.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palvelutehtava = _oa
            end
          end
        if !_o['palvelusetelienArvo'].nil?
          _oa = _o['palvelusetelienArvo']
            if(_oa.is_a? Hash)
              @palvelusetelienArvo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palvelusetelienArvo =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palvelusetelienArvo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palvelusetelienArvo.push Float.from_json(_item)
                 else
                   @palvelusetelienArvo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palvelusetelienArvo = _oa
            end
          end
        if !_o['maksusitoomuksienArvo'].nil?
          _oa = _o['maksusitoomuksienArvo']
            if(_oa.is_a? Hash)
              @maksusitoomuksienArvo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @maksusitoomuksienArvo =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @maksusitoomuksienArvo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @maksusitoomuksienArvo.push Float.from_json(_item)
                 else
                   @maksusitoomuksienArvo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @maksusitoomuksienArvo = _oa
            end
          end
        if !_o['erityinenTuki'].nil?
          _oa = _o['erityinenTuki']
            if(_oa.is_a? Hash)
              @erityinenTuki = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @erityinenTuki =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @erityinenTuki = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @erityinenTuki.push Float.from_json(_item)
                 else
                   @erityinenTuki.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @erityinenTuki = _oa
            end
          end
    end

    # constructs a MaksusummaDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Java

module Util

  # (no documentation provided)
  class IteratorOfString 


    # the json hash for this IteratorOfString
    def to_jaxb_json_hash
      _h = {}
      return _h
    end

    # the json (string form) for this IteratorOfString
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this IteratorOfString with a json hash
    def init_jaxb_json_hash(_o)
    end

    # constructs a IteratorOfString from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Title

module Config

  # (no documentation provided)
  class ClientTitleConfig 

    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :type
    # (no documentation provided)
    attr_accessor :valueMandatory
    # (no documentation provided)
    attr_accessor :onlyFromList
    # (no documentation provided)
    attr_accessor :optionsUrl
    # (no documentation provided)
    attr_accessor :editableByConfig
    # (no documentation provided)
    attr_accessor :editableByUserRights
    # (no documentation provided)
    attr_accessor :editable
    # (no documentation provided)
    attr_accessor :attribute

    # the json hash for this ClientTitleConfig
    def to_jaxb_json_hash
      _h = {}
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['type'] = type.to_jaxb_json_hash unless type.nil?
      _h['valueMandatory'] = valueMandatory.to_jaxb_json_hash unless valueMandatory.nil?
      _h['onlyFromList'] = onlyFromList.to_jaxb_json_hash unless onlyFromList.nil?
      _h['optionsUrl'] = optionsUrl.to_jaxb_json_hash unless optionsUrl.nil?
      _h['editableByConfig'] = editableByConfig.to_jaxb_json_hash unless editableByConfig.nil?
      _h['editableByUserRights'] = editableByUserRights.to_jaxb_json_hash unless editableByUserRights.nil?
      _h['editable'] = editable.to_jaxb_json_hash unless editable.nil?
      _h['attribute'] = attribute.to_jaxb_json_hash unless attribute.nil?
      return _h
    end

    # the json (string form) for this ClientTitleConfig
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this ClientTitleConfig with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['type'].nil?
          _oa = _o['type']
            if(_oa.is_a? Hash)
              @type = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @type =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @type = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @type.push Fixnum.from_json(_item)
                 else
                   @type.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @type = _oa
            end
          end
        if !_o['valueMandatory'].nil?
          _oa = _o['valueMandatory']
            if(_oa.is_a? Hash)
              @valueMandatory = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @valueMandatory =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @valueMandatory = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @valueMandatory.push Boolean.from_json(_item)
                 else
                   @valueMandatory.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @valueMandatory = _oa
            end
          end
        if !_o['onlyFromList'].nil?
          _oa = _o['onlyFromList']
            if(_oa.is_a? Hash)
              @onlyFromList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @onlyFromList =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @onlyFromList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @onlyFromList.push Boolean.from_json(_item)
                 else
                   @onlyFromList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @onlyFromList = _oa
            end
          end
        if !_o['optionsUrl'].nil?
          _oa = _o['optionsUrl']
            if(_oa.is_a? Hash)
              @optionsUrl = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @optionsUrl =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @optionsUrl = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @optionsUrl.push String.from_json(_item)
                 else
                   @optionsUrl.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @optionsUrl = _oa
            end
          end
        if !_o['editableByConfig'].nil?
          _oa = _o['editableByConfig']
            if(_oa.is_a? Hash)
              @editableByConfig = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @editableByConfig =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @editableByConfig = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @editableByConfig.push Boolean.from_json(_item)
                 else
                   @editableByConfig.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @editableByConfig = _oa
            end
          end
        if !_o['editableByUserRights'].nil?
          _oa = _o['editableByUserRights']
            if(_oa.is_a? Hash)
              @editableByUserRights = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @editableByUserRights =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @editableByUserRights = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @editableByUserRights.push Boolean.from_json(_item)
                 else
                   @editableByUserRights.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @editableByUserRights = _oa
            end
          end
        if !_o['editable'].nil?
          _oa = _o['editable']
            if(_oa.is_a? Hash)
              @editable = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @editable =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @editable = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @editable.push Boolean.from_json(_item)
                 else
                   @editable.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @editable = _oa
            end
          end
        if !_o['attribute'].nil?
          _oa = _o['attribute']
            if(_oa.is_a? Hash)
              @attribute = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @attribute =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @attribute = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @attribute.push Fixnum.from_json(_item)
                 else
                   @attribute.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @attribute = _oa
            end
          end
    end

    # constructs a ClientTitleConfig from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Fi

module Mediconsult

module Medisos

module Dto

  # (no documentation provided)
  class BlockedInfoDto 

    # (no documentation provided)
    attr_accessor :blockedId
    # (no documentation provided)
    attr_accessor :blockedName

    # the json hash for this BlockedInfoDto
    def to_jaxb_json_hash
      _h = {}
      _h['blockedId'] = blockedId.to_jaxb_json_hash unless blockedId.nil?
      _h['blockedName'] = blockedName.to_jaxb_json_hash unless blockedName.nil?
      return _h
    end

    # the json (string form) for this BlockedInfoDto
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this BlockedInfoDto with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['blockedId'].nil?
          _oa = _o['blockedId']
            if(_oa.is_a? Hash)
              @blockedId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @blockedId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @blockedId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @blockedId.push Bignum.from_json(_item)
                 else
                   @blockedId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @blockedId = _oa
            end
          end
        if !_o['blockedName'].nil?
          _oa = _o['blockedName']
            if(_oa.is_a? Hash)
              @blockedName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @blockedName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @blockedName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @blockedName.push String.from_json(_item)
                 else
                   @blockedName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @blockedName = _oa
            end
          end
    end

    # constructs a BlockedInfoDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class FormTypeInfo 

    # (no documentation provided)
    attr_accessor :description
    # (no documentation provided)
    attr_accessor :id
    # (no documentation provided)
    attr_accessor :name

    # the json hash for this FormTypeInfo
    def to_jaxb_json_hash
      _h = {}
      _h['description'] = description.to_jaxb_json_hash unless description.nil?
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      return _h
    end

    # the json (string form) for this FormTypeInfo
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this FormTypeInfo with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['description'].nil?
          _oa = _o['description']
            if(_oa.is_a? Hash)
              @description = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @description =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @description = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @description.push String.from_json(_item)
                 else
                   @description.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @description = _oa
            end
          end
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push Fixnum.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
    end

    # constructs a FormTypeInfo from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Security

  # (no documentation provided)
  class LoginCredentials 

    # (no documentation provided)
    attr_accessor :username
    # (no documentation provided)
    attr_accessor :password
    # (no documentation provided)
    attr_accessor :domainName

    # the json hash for this LoginCredentials
    def to_jaxb_json_hash
      _h = {}
      _h['username'] = username.to_jaxb_json_hash unless username.nil?
      _h['password'] = password.to_jaxb_json_hash unless password.nil?
      _h['domainName'] = domainName.to_jaxb_json_hash unless domainName.nil?
      return _h
    end

    # the json (string form) for this LoginCredentials
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this LoginCredentials with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['username'].nil?
          _oa = _o['username']
            if(_oa.is_a? Hash)
              @username = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @username =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @username = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @username.push String.from_json(_item)
                 else
                   @username.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @username = _oa
            end
          end
        if !_o['password'].nil?
          _oa = _o['password']
            if(_oa.is_a? Hash)
              @password = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @password =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @password = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @password.push String.from_json(_item)
                 else
                   @password.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @password = _oa
            end
          end
        if !_o['domainName'].nil?
          _oa = _o['domainName']
            if(_oa.is_a? Hash)
              @domainName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @domainName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @domainName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @domainName.push String.from_json(_item)
                 else
                   @domainName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @domainName = _oa
            end
          end
    end

    # constructs a LoginCredentials from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class Koodisto 

    # (no documentation provided)
    attr_accessor :headers
    # (no documentation provided)
    attr_accessor :koodisto
    # values
    attr_accessor :values
    # key
    attr_accessor :key

    # the json hash for this Koodisto
    def to_jaxb_json_hash
      _h = {}
      if !headers.nil?
        _ha = Array.new
        headers.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['headers'] = _ha
      end
      if !koodisto.nil?
        _ha = Array.new
        koodisto.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['koodisto'] = _ha
      end
      _h['values'] = values.to_jaxb_json_hash unless values.nil?
      _h['key'] = key.to_jaxb_json_hash unless key.nil?
      return _h
    end

    # the json (string form) for this Koodisto
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Koodisto with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['headers'].nil?
          _oa = _o['headers']
            if(_oa.is_a? Hash)
              @headers = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @headers =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @headers = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @headers.push String.from_json(_item)
                 else
                   @headers.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @headers = _oa
            end
          end
        if !_o['koodisto'].nil?
          _oa = _o['koodisto']
            if(_oa.is_a? Hash)
              @koodisto = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @koodisto =  String[].from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @koodisto = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @koodisto.push String[].from_json(_item)
                 else
                   @koodisto.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @koodisto = _oa
            end
          end
        if !_o['values'].nil?
          _oa = _o['values']
            if(_oa.is_a? Hash)
              @values = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @values =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @values = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @values.push Hash.from_json(_item)
                 else
                   @values.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @values = _oa
            end
          end
        if !_o['key'].nil?
          _oa = _o['key']
            if(_oa.is_a? Hash)
              @key = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @key =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @key = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @key.push String.from_json(_item)
                 else
                   @key.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @key = _oa
            end
          end
    end

    # constructs a Koodisto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class Rekisteri 

    # (no documentation provided)
    attr_accessor :rekisterinpitajanNimi
    # (no documentation provided)
    attr_accessor :code
    # (no documentation provided)
    attr_accessor :rekisterityyppi
    # (no documentation provided)
    attr_accessor :socialCareRegister
    # (no documentation provided)
    attr_accessor :healthCareRegister

    # the json hash for this Rekisteri
    def to_jaxb_json_hash
      _h = {}
      _h['rekisterinpitajanNimi'] = rekisterinpitajanNimi.to_jaxb_json_hash unless rekisterinpitajanNimi.nil?
      _h['code'] = code.to_jaxb_json_hash unless code.nil?
      _h['rekisterityyppi'] = rekisterityyppi.to_jaxb_json_hash unless rekisterityyppi.nil?
      _h['socialCareRegister'] = socialCareRegister.to_jaxb_json_hash unless socialCareRegister.nil?
      _h['healthCareRegister'] = healthCareRegister.to_jaxb_json_hash unless healthCareRegister.nil?
      return _h
    end

    # the json (string form) for this Rekisteri
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Rekisteri with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['rekisterinpitajanNimi'].nil?
          _oa = _o['rekisterinpitajanNimi']
            if(_oa.is_a? Hash)
              @rekisterinpitajanNimi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rekisterinpitajanNimi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rekisterinpitajanNimi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rekisterinpitajanNimi.push String.from_json(_item)
                 else
                   @rekisterinpitajanNimi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rekisterinpitajanNimi = _oa
            end
          end
        if !_o['code'].nil?
          _oa = _o['code']
            if(_oa.is_a? Hash)
              @code = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @code =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @code = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @code.push String.from_json(_item)
                 else
                   @code.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @code = _oa
            end
          end
        if !_o['rekisterityyppi'].nil?
          _oa = _o['rekisterityyppi']
            if(_oa.is_a? Hash)
              @rekisterityyppi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rekisterityyppi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rekisterityyppi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rekisterityyppi.push String.from_json(_item)
                 else
                   @rekisterityyppi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rekisterityyppi = _oa
            end
          end
        if !_o['socialCareRegister'].nil?
          _oa = _o['socialCareRegister']
            if(_oa.is_a? Hash)
              @socialCareRegister = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @socialCareRegister =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @socialCareRegister = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @socialCareRegister.push Boolean.from_json(_item)
                 else
                   @socialCareRegister.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @socialCareRegister = _oa
            end
          end
        if !_o['healthCareRegister'].nil?
          _oa = _o['healthCareRegister']
            if(_oa.is_a? Hash)
              @healthCareRegister = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @healthCareRegister =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @healthCareRegister = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @healthCareRegister.push Boolean.from_json(_item)
                 else
                   @healthCareRegister.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @healthCareRegister = _oa
            end
          end
    end

    # constructs a Rekisteri from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Kanta

module Suostumustenhallinta

  # (no documentation provided)
  class KantaPdfAndCdaIdWrapper 

    # (no documentation provided)
    attr_accessor :oid
    # (no documentation provided)
    attr_accessor :base64pdf

    # the json hash for this KantaPdfAndCdaIdWrapper
    def to_jaxb_json_hash
      _h = {}
      _h['oid'] = oid.to_jaxb_json_hash unless oid.nil?
      _h['base64pdf'] = base64pdf.to_jaxb_json_hash unless base64pdf.nil?
      return _h
    end

    # the json (string form) for this KantaPdfAndCdaIdWrapper
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this KantaPdfAndCdaIdWrapper with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['oid'].nil?
          _oa = _o['oid']
            if(_oa.is_a? Hash)
              @oid = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @oid =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @oid = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @oid.push String.from_json(_item)
                 else
                   @oid.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @oid = _oa
            end
          end
        if !_o['base64pdf'].nil?
          _oa = _o['base64pdf']
            if(_oa.is_a? Hash)
              @base64pdf = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @base64pdf =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @base64pdf = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @base64pdf.push String.from_json(_item)
                 else
                   @base64pdf.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @base64pdf = _oa
            end
          end
    end

    # constructs a KantaPdfAndCdaIdWrapper from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class OsastolistaPaikkatieto 

    # (no documentation provided)
    attr_accessor :patient
    # (no documentation provided)
    attr_accessor :paikka
    # (no documentation provided)
    attr_accessor :tilanneKoodi
    # (no documentation provided)
    attr_accessor :ryhmaKoodit
    # (no documentation provided)
    attr_accessor :riskitietoja
    # (no documentation provided)
    attr_accessor :suunniteltu

    # the json hash for this OsastolistaPaikkatieto
    def to_jaxb_json_hash
      _h = {}
      _h['patient'] = patient.to_jaxb_json_hash unless patient.nil?
      _h['paikka'] = paikka.to_jaxb_json_hash unless paikka.nil?
      _h['tilanneKoodi'] = tilanneKoodi.to_jaxb_json_hash unless tilanneKoodi.nil?
      if !ryhmaKoodit.nil?
        _ha = Array.new
        ryhmaKoodit.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['ryhmaKoodit'] = _ha
      end
      _h['riskitietoja'] = riskitietoja.to_jaxb_json_hash unless riskitietoja.nil?
      _h['suunniteltu'] = suunniteltu.to_jaxb_json_hash unless suunniteltu.nil?
      return _h
    end

    # the json (string form) for this OsastolistaPaikkatieto
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this OsastolistaPaikkatieto with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['patient'].nil?
          _oa = _o['patient']
            if(_oa.is_a? Hash)
              @patient = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @patient =  Fi::Mediconsult::Core::Client::Dto::Omistaja::Patient.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @patient = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @patient.push Fi::Mediconsult::Core::Client::Dto::Omistaja::Patient.from_json(_item)
                 else
                   @patient.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @patient = _oa
            end
          end
        if !_o['paikka'].nil?
          _oa = _o['paikka']
            if(_oa.is_a? Hash)
              @paikka = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @paikka =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @paikka = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @paikka.push String.from_json(_item)
                 else
                   @paikka.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @paikka = _oa
            end
          end
        if !_o['tilanneKoodi'].nil?
          _oa = _o['tilanneKoodi']
            if(_oa.is_a? Hash)
              @tilanneKoodi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tilanneKoodi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tilanneKoodi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tilanneKoodi.push String.from_json(_item)
                 else
                   @tilanneKoodi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tilanneKoodi = _oa
            end
          end
        if !_o['ryhmaKoodit'].nil?
          _oa = _o['ryhmaKoodit']
            if(_oa.is_a? Hash)
              @ryhmaKoodit = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ryhmaKoodit =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ryhmaKoodit = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ryhmaKoodit.push String.from_json(_item)
                 else
                   @ryhmaKoodit.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ryhmaKoodit = _oa
            end
          end
        if !_o['riskitietoja'].nil?
          _oa = _o['riskitietoja']
            if(_oa.is_a? Hash)
              @riskitietoja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @riskitietoja =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @riskitietoja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @riskitietoja.push Boolean.from_json(_item)
                 else
                   @riskitietoja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @riskitietoja = _oa
            end
          end
        if !_o['suunniteltu'].nil?
          _oa = _o['suunniteltu']
            if(_oa.is_a? Hash)
              @suunniteltu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @suunniteltu =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @suunniteltu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @suunniteltu.push Boolean.from_json(_item)
                 else
                   @suunniteltu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @suunniteltu = _oa
            end
          end
    end

    # constructs a OsastolistaPaikkatieto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Event

  # (no documentation provided)
  class EventMissingResourcesDto 

    # the numOfMissingWorkers
    attr_accessor :numOfMissingWorkers
    # the missingSkill
    attr_accessor :missingSkill
    # the numOfMissingEquipmentTypes
    attr_accessor :numOfMissingEquipmentTypes
    # the missingEquipmentType
    attr_accessor :missingEquipmentType
    # the numOfMissingEquipment
    attr_accessor :numOfMissingEquipment
    # the numOfRequiredEquipment
    attr_accessor :numOfRequiredEquipment
    # the numOfMissingRoomGroups
    attr_accessor :numOfMissingRoomGroups
    # the missingRoomGroup
    attr_accessor :missingRoomGroup

    # the json hash for this EventMissingResourcesDto
    def to_jaxb_json_hash
      _h = {}
      _h['numOfMissingWorkers'] = numOfMissingWorkers.to_jaxb_json_hash unless numOfMissingWorkers.nil?
      _h['missingSkill'] = missingSkill.to_jaxb_json_hash unless missingSkill.nil?
      _h['numOfMissingEquipmentTypes'] = numOfMissingEquipmentTypes.to_jaxb_json_hash unless numOfMissingEquipmentTypes.nil?
      _h['missingEquipmentType'] = missingEquipmentType.to_jaxb_json_hash unless missingEquipmentType.nil?
      _h['numOfMissingEquipment'] = numOfMissingEquipment.to_jaxb_json_hash unless numOfMissingEquipment.nil?
      _h['numOfRequiredEquipment'] = numOfRequiredEquipment.to_jaxb_json_hash unless numOfRequiredEquipment.nil?
      _h['numOfMissingRoomGroups'] = numOfMissingRoomGroups.to_jaxb_json_hash unless numOfMissingRoomGroups.nil?
      _h['missingRoomGroup'] = missingRoomGroup.to_jaxb_json_hash unless missingRoomGroup.nil?
      return _h
    end

    # the json (string form) for this EventMissingResourcesDto
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this EventMissingResourcesDto with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['numOfMissingWorkers'].nil?
          _oa = _o['numOfMissingWorkers']
            if(_oa.is_a? Hash)
              @numOfMissingWorkers = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @numOfMissingWorkers =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @numOfMissingWorkers = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @numOfMissingWorkers.push Fixnum.from_json(_item)
                 else
                   @numOfMissingWorkers.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @numOfMissingWorkers = _oa
            end
          end
        if !_o['missingSkill'].nil?
          _oa = _o['missingSkill']
            if(_oa.is_a? Hash)
              @missingSkill = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @missingSkill =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @missingSkill = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @missingSkill.push Bignum.from_json(_item)
                 else
                   @missingSkill.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @missingSkill = _oa
            end
          end
        if !_o['numOfMissingEquipmentTypes'].nil?
          _oa = _o['numOfMissingEquipmentTypes']
            if(_oa.is_a? Hash)
              @numOfMissingEquipmentTypes = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @numOfMissingEquipmentTypes =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @numOfMissingEquipmentTypes = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @numOfMissingEquipmentTypes.push Fixnum.from_json(_item)
                 else
                   @numOfMissingEquipmentTypes.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @numOfMissingEquipmentTypes = _oa
            end
          end
        if !_o['missingEquipmentType'].nil?
          _oa = _o['missingEquipmentType']
            if(_oa.is_a? Hash)
              @missingEquipmentType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @missingEquipmentType =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @missingEquipmentType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @missingEquipmentType.push Bignum.from_json(_item)
                 else
                   @missingEquipmentType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @missingEquipmentType = _oa
            end
          end
        if !_o['numOfMissingEquipment'].nil?
          _oa = _o['numOfMissingEquipment']
            if(_oa.is_a? Hash)
              @numOfMissingEquipment = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @numOfMissingEquipment =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @numOfMissingEquipment = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @numOfMissingEquipment.push Fixnum.from_json(_item)
                 else
                   @numOfMissingEquipment.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @numOfMissingEquipment = _oa
            end
          end
        if !_o['numOfRequiredEquipment'].nil?
          _oa = _o['numOfRequiredEquipment']
            if(_oa.is_a? Hash)
              @numOfRequiredEquipment = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @numOfRequiredEquipment =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @numOfRequiredEquipment = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @numOfRequiredEquipment.push Fixnum.from_json(_item)
                 else
                   @numOfRequiredEquipment.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @numOfRequiredEquipment = _oa
            end
          end
        if !_o['numOfMissingRoomGroups'].nil?
          _oa = _o['numOfMissingRoomGroups']
            if(_oa.is_a? Hash)
              @numOfMissingRoomGroups = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @numOfMissingRoomGroups =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @numOfMissingRoomGroups = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @numOfMissingRoomGroups.push Fixnum.from_json(_item)
                 else
                   @numOfMissingRoomGroups.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @numOfMissingRoomGroups = _oa
            end
          end
        if !_o['missingRoomGroup'].nil?
          _oa = _o['missingRoomGroup']
            if(_oa.is_a? Hash)
              @missingRoomGroup = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @missingRoomGroup =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @missingRoomGroup = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @missingRoomGroup.push Bignum.from_json(_item)
                 else
                   @missingRoomGroup.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @missingRoomGroup = _oa
            end
          end
    end

    # constructs a EventMissingResourcesDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Kanta

  # (no documentation provided)
  class KantaDTO 

    # (no documentation provided)
    attr_accessor :userHetu
    # (no documentation provided)
    attr_accessor :errorCode
    # (no documentation provided)
    attr_accessor :errorMessage
    # (no documentation provided)
    attr_accessor :rootOid
    # (no documentation provided)
    attr_accessor :svnumero
    # (no documentation provided)
    attr_accessor :solmutunnus
    # (no documentation provided)
    attr_accessor :coreVersionInfo
    # (no documentation provided)
    attr_accessor :domainName
    # (no documentation provided)
    attr_accessor :registryInfo
    # (no documentation provided)
    attr_accessor :kantaErrorCode
    # (no documentation provided)
    attr_accessor :patient
    # (no documentation provided)
    attr_accessor :toimintoDescription
    # (no documentation provided)
    attr_accessor :encompassingEncounterOid
    # (no documentation provided)
    attr_accessor :user
    # (no documentation provided)
    attr_accessor :terhikkitunnus
    # (no documentation provided)
    attr_accessor :unit
    # (no documentation provided)
    attr_accessor :toimintoKoodi

    # the json hash for this KantaDTO
    def to_jaxb_json_hash
      _h = {}
      _h['userHetu'] = userHetu.to_jaxb_json_hash unless userHetu.nil?
      _h['errorCode'] = errorCode.to_jaxb_json_hash unless errorCode.nil?
      _h['errorMessage'] = errorMessage.to_jaxb_json_hash unless errorMessage.nil?
      _h['rootOid'] = rootOid.to_jaxb_json_hash unless rootOid.nil?
      _h['svnumero'] = svnumero.to_jaxb_json_hash unless svnumero.nil?
      _h['solmutunnus'] = solmutunnus.to_jaxb_json_hash unless solmutunnus.nil?
      _h['coreVersionInfo'] = coreVersionInfo.to_jaxb_json_hash unless coreVersionInfo.nil?
      _h['domainName'] = domainName.to_jaxb_json_hash unless domainName.nil?
      _h['registryInfo'] = registryInfo.to_jaxb_json_hash unless registryInfo.nil?
      _h['kantaErrorCode'] = kantaErrorCode.to_jaxb_json_hash unless kantaErrorCode.nil?
      _h['patient'] = patient.to_jaxb_json_hash unless patient.nil?
      _h['toimintoDescription'] = toimintoDescription.to_jaxb_json_hash unless toimintoDescription.nil?
      _h['encompassingEncounterOid'] = encompassingEncounterOid.to_jaxb_json_hash unless encompassingEncounterOid.nil?
      _h['user'] = user.to_jaxb_json_hash unless user.nil?
      _h['terhikkitunnus'] = terhikkitunnus.to_jaxb_json_hash unless terhikkitunnus.nil?
      _h['unit'] = unit.to_jaxb_json_hash unless unit.nil?
      _h['toimintoKoodi'] = toimintoKoodi.to_jaxb_json_hash unless toimintoKoodi.nil?
      return _h
    end

    # the json (string form) for this KantaDTO
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this KantaDTO with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['userHetu'].nil?
          _oa = _o['userHetu']
            if(_oa.is_a? Hash)
              @userHetu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @userHetu =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @userHetu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @userHetu.push String.from_json(_item)
                 else
                   @userHetu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @userHetu = _oa
            end
          end
        if !_o['errorCode'].nil?
          _oa = _o['errorCode']
            if(_oa.is_a? Hash)
              @errorCode = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @errorCode =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @errorCode = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @errorCode.push String.from_json(_item)
                 else
                   @errorCode.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @errorCode = _oa
            end
          end
        if !_o['errorMessage'].nil?
          _oa = _o['errorMessage']
            if(_oa.is_a? Hash)
              @errorMessage = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @errorMessage =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @errorMessage = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @errorMessage.push String.from_json(_item)
                 else
                   @errorMessage.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @errorMessage = _oa
            end
          end
        if !_o['rootOid'].nil?
          _oa = _o['rootOid']
            if(_oa.is_a? Hash)
              @rootOid = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rootOid =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rootOid = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rootOid.push String.from_json(_item)
                 else
                   @rootOid.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rootOid = _oa
            end
          end
        if !_o['svnumero'].nil?
          _oa = _o['svnumero']
            if(_oa.is_a? Hash)
              @svnumero = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @svnumero =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @svnumero = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @svnumero.push String.from_json(_item)
                 else
                   @svnumero.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @svnumero = _oa
            end
          end
        if !_o['solmutunnus'].nil?
          _oa = _o['solmutunnus']
            if(_oa.is_a? Hash)
              @solmutunnus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @solmutunnus =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @solmutunnus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @solmutunnus.push String.from_json(_item)
                 else
                   @solmutunnus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @solmutunnus = _oa
            end
          end
        if !_o['coreVersionInfo'].nil?
          _oa = _o['coreVersionInfo']
            if(_oa.is_a? Hash)
              @coreVersionInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @coreVersionInfo =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @coreVersionInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @coreVersionInfo.push String.from_json(_item)
                 else
                   @coreVersionInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @coreVersionInfo = _oa
            end
          end
        if !_o['domainName'].nil?
          _oa = _o['domainName']
            if(_oa.is_a? Hash)
              @domainName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @domainName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @domainName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @domainName.push String.from_json(_item)
                 else
                   @domainName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @domainName = _oa
            end
          end
        if !_o['registryInfo'].nil?
          _oa = _o['registryInfo']
            if(_oa.is_a? Hash)
              @registryInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @registryInfo =  Fi::Mediconsult::Core::Client::Dto::Kanta::RegistryInfo.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @registryInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @registryInfo.push Fi::Mediconsult::Core::Client::Dto::Kanta::RegistryInfo.from_json(_item)
                 else
                   @registryInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @registryInfo = _oa
            end
          end
        if !_o['kantaErrorCode'].nil?
          _oa = _o['kantaErrorCode']
            if(_oa.is_a? Hash)
              @kantaErrorCode = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kantaErrorCode =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kantaErrorCode = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kantaErrorCode.push String.from_json(_item)
                 else
                   @kantaErrorCode.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kantaErrorCode = _oa
            end
          end
        if !_o['patient'].nil?
          _oa = _o['patient']
            if(_oa.is_a? Hash)
              @patient = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @patient =  Fi::Mediconsult::Core::Client::Dto::Omistaja::Patient.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @patient = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @patient.push Fi::Mediconsult::Core::Client::Dto::Omistaja::Patient.from_json(_item)
                 else
                   @patient.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @patient = _oa
            end
          end
        if !_o['toimintoDescription'].nil?
          _oa = _o['toimintoDescription']
            if(_oa.is_a? Hash)
              @toimintoDescription = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @toimintoDescription =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @toimintoDescription = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @toimintoDescription.push String.from_json(_item)
                 else
                   @toimintoDescription.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @toimintoDescription = _oa
            end
          end
        if !_o['encompassingEncounterOid'].nil?
          _oa = _o['encompassingEncounterOid']
            if(_oa.is_a? Hash)
              @encompassingEncounterOid = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @encompassingEncounterOid =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @encompassingEncounterOid = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @encompassingEncounterOid.push String.from_json(_item)
                 else
                   @encompassingEncounterOid.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @encompassingEncounterOid = _oa
            end
          end
        if !_o['user'].nil?
          _oa = _o['user']
            if(_oa.is_a? Hash)
              @user = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @user =  Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @user = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @user.push Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_item)
                 else
                   @user.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @user = _oa
            end
          end
        if !_o['terhikkitunnus'].nil?
          _oa = _o['terhikkitunnus']
            if(_oa.is_a? Hash)
              @terhikkitunnus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @terhikkitunnus =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @terhikkitunnus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @terhikkitunnus.push String.from_json(_item)
                 else
                   @terhikkitunnus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @terhikkitunnus = _oa
            end
          end
        if !_o['unit'].nil?
          _oa = _o['unit']
            if(_oa.is_a? Hash)
              @unit = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @unit =  Fi::Mediconsult::Core::Client::Dto::Omistaja::Unit.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @unit = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @unit.push Fi::Mediconsult::Core::Client::Dto::Omistaja::Unit.from_json(_item)
                 else
                   @unit.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @unit = _oa
            end
          end
        if !_o['toimintoKoodi'].nil?
          _oa = _o['toimintoKoodi']
            if(_oa.is_a? Hash)
              @toimintoKoodi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @toimintoKoodi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @toimintoKoodi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @toimintoKoodi.push String.from_json(_item)
                 else
                   @toimintoKoodi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @toimintoKoodi = _oa
            end
          end
    end

    # constructs a KantaDTO from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Java

module Security

  # (no documentation provided)
  class PublicKey 


    # the json hash for this PublicKey
    def to_jaxb_json_hash
      _h = {}
      return _h
    end

    # the json (string form) for this PublicKey
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this PublicKey with a json hash
    def init_jaxb_json_hash(_o)
    end

    # constructs a PublicKey from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Planner

  # (no documentation provided)
  class TerminationRules 

    # (no documentation provided)
    attr_accessor :optimMaxRunTimeInSeconds
    # (no documentation provided)
    attr_accessor :unimprovedStepCountLimit

    # the json hash for this TerminationRules
    def to_jaxb_json_hash
      _h = {}
      _h['optimMaxRunTimeInSeconds'] = optimMaxRunTimeInSeconds.to_jaxb_json_hash unless optimMaxRunTimeInSeconds.nil?
      _h['unimprovedStepCountLimit'] = unimprovedStepCountLimit.to_jaxb_json_hash unless unimprovedStepCountLimit.nil?
      return _h
    end

    # the json (string form) for this TerminationRules
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this TerminationRules with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['optimMaxRunTimeInSeconds'].nil?
          _oa = _o['optimMaxRunTimeInSeconds']
            if(_oa.is_a? Hash)
              @optimMaxRunTimeInSeconds = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @optimMaxRunTimeInSeconds =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @optimMaxRunTimeInSeconds = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @optimMaxRunTimeInSeconds.push Fixnum.from_json(_item)
                 else
                   @optimMaxRunTimeInSeconds.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @optimMaxRunTimeInSeconds = _oa
            end
          end
        if !_o['unimprovedStepCountLimit'].nil?
          _oa = _o['unimprovedStepCountLimit']
            if(_oa.is_a? Hash)
              @unimprovedStepCountLimit = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @unimprovedStepCountLimit =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @unimprovedStepCountLimit = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @unimprovedStepCountLimit.push Fixnum.from_json(_item)
                 else
                   @unimprovedStepCountLimit.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @unimprovedStepCountLimit = _oa
            end
          end
    end

    # constructs a TerminationRules from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Rights

  # (no documentation provided)
  class PlannerRightsAndSettings 

    # the skillsForm
    attr_accessor :skillsForm
    # the calendarDomain
    attr_accessor :calendarDomains
    # (no documentation provided)
    attr_accessor :mainUser

    # the json hash for this PlannerRightsAndSettings
    def to_jaxb_json_hash
      _h = {}
      _h['skillsForm'] = skillsForm.to_jaxb_json_hash unless skillsForm.nil?
      if !calendarDomains.nil?
        _ha = Array.new
        calendarDomains.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['calendarDomains'] = _ha
      end
      _h['mainUser'] = mainUser.to_jaxb_json_hash unless mainUser.nil?
      return _h
    end

    # the json (string form) for this PlannerRightsAndSettings
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this PlannerRightsAndSettings with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['skillsForm'].nil?
          _oa = _o['skillsForm']
            if(_oa.is_a? Hash)
              @skillsForm = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @skillsForm =  Fi::Mediconsult::Mediplan::Dto::Rights::FormRights.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @skillsForm = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @skillsForm.push Fi::Mediconsult::Mediplan::Dto::Rights::FormRights.from_json(_item)
                 else
                   @skillsForm.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @skillsForm = _oa
            end
          end
        if !_o['calendarDomains'].nil?
          _oa = _o['calendarDomains']
            if(_oa.is_a? Hash)
              @calendarDomains = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @calendarDomains =  Fi::Mediconsult::Mediplan::Dto::Rights::CalendarDomainRightsAndSettings.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @calendarDomains = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @calendarDomains.push Fi::Mediconsult::Mediplan::Dto::Rights::CalendarDomainRightsAndSettings.from_json(_item)
                 else
                   @calendarDomains.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @calendarDomains = _oa
            end
          end
        if !_o['mainUser'].nil?
          _oa = _o['mainUser']
            if(_oa.is_a? Hash)
              @mainUser = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @mainUser =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @mainUser = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @mainUser.push Boolean.from_json(_item)
                 else
                   @mainUser.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @mainUser = _oa
            end
          end
    end

    # constructs a PlannerRightsAndSettings from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class MetadataGroup 

    # (no documentation provided)
    attr_accessor :groupID
    # (no documentation provided)
    attr_accessor :groupName
    # (no documentation provided)
    attr_accessor :startDate
    # (no documentation provided)
    attr_accessor :endDate
    # (no documentation provided)
    attr_accessor :metadata

    # the json hash for this MetadataGroup
    def to_jaxb_json_hash
      _h = {}
      _h['groupID'] = groupID.to_jaxb_json_hash unless groupID.nil?
      _h['groupName'] = groupName.to_jaxb_json_hash unless groupName.nil?
      _h['startDate'] = startDate.to_jaxb_json_hash unless startDate.nil?
      _h['endDate'] = endDate.to_jaxb_json_hash unless endDate.nil?
      if !metadata.nil?
        _ha = Array.new
        metadata.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['metadata'] = _ha
      end
      return _h
    end

    # the json (string form) for this MetadataGroup
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this MetadataGroup with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['groupID'].nil?
          _oa = _o['groupID']
            if(_oa.is_a? Hash)
              @groupID = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @groupID =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @groupID = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @groupID.push Fixnum.from_json(_item)
                 else
                   @groupID.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @groupID = _oa
            end
          end
        if !_o['groupName'].nil?
          _oa = _o['groupName']
            if(_oa.is_a? Hash)
              @groupName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @groupName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @groupName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @groupName.push String.from_json(_item)
                 else
                   @groupName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @groupName = _oa
            end
          end
        if !_o['startDate'].nil?
          _oa = _o['startDate']
            if(_oa.is_a? Hash)
              @startDate = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @startDate =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @startDate = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @startDate.push Time.from_json(_item)
                 else
                   @startDate.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @startDate = _oa
            end
          end
        if !_o['endDate'].nil?
          _oa = _o['endDate']
            if(_oa.is_a? Hash)
              @endDate = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @endDate =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @endDate = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @endDate.push Time.from_json(_item)
                 else
                   @endDate.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @endDate = _oa
            end
          end
        if !_o['metadata'].nil?
          _oa = _o['metadata']
            if(_oa.is_a? Hash)
              @metadata = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @metadata =  Fi::Mediconsult::Core::Client::Dto::Metadata.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @metadata = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @metadata.push Fi::Mediconsult::Core::Client::Dto::Metadata.from_json(_item)
                 else
                   @metadata.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @metadata = _oa
            end
          end
    end

    # constructs a MetadataGroup from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Diagnose

  # (no documentation provided)
  class DiagnoseCodeList 

    # default count of code returned by server as search result.
    # This method requires for Json property generation.
    attr_accessor :defCount
    # (no documentation provided)
    attr_accessor :codes
    # (no documentation provided)
    attr_accessor :maxSize
    # (no documentation provided)
    attr_accessor :type

    # the json hash for this DiagnoseCodeList
    def to_jaxb_json_hash
      _h = {}
      _h['defCount'] = defCount.to_jaxb_json_hash unless defCount.nil?
      if !codes.nil?
        _ha = Array.new
        codes.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['codes'] = _ha
      end
      _h['maxSize'] = maxSize.to_jaxb_json_hash unless maxSize.nil?
      _h['type'] = type.to_jaxb_json_hash unless type.nil?
      return _h
    end

    # the json (string form) for this DiagnoseCodeList
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this DiagnoseCodeList with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['defCount'].nil?
          _oa = _o['defCount']
            if(_oa.is_a? Hash)
              @defCount = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @defCount =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @defCount = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @defCount.push Fixnum.from_json(_item)
                 else
                   @defCount.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @defCount = _oa
            end
          end
        if !_o['codes'].nil?
          _oa = _o['codes']
            if(_oa.is_a? Hash)
              @codes = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @codes =  Fi::Mediconsult::Core::Client::Dto::Diagnose::DiagnoseCode.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @codes = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @codes.push Fi::Mediconsult::Core::Client::Dto::Diagnose::DiagnoseCode.from_json(_item)
                 else
                   @codes.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @codes = _oa
            end
          end
        if !_o['maxSize'].nil?
          _oa = _o['maxSize']
            if(_oa.is_a? Hash)
              @maxSize = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @maxSize =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @maxSize = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @maxSize.push Bignum.from_json(_item)
                 else
                   @maxSize.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @maxSize = _oa
            end
          end
        if !_o['type'].nil?
          _oa = _o['type']
            if(_oa.is_a? Hash)
              @type = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @type =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @type = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @type.push String.from_json(_item)
                 else
                   @type.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @type = _oa
            end
          end
    end

    # constructs a DiagnoseCodeList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Title

module Data

  # (no documentation provided)
  class TitleData 

    # (no documentation provided)
    attr_accessor :valueAsString
    # (no documentation provided)
    attr_accessor :row
    # (no documentation provided)
    attr_accessor :link
    # (no documentation provided)
    attr_accessor :emptyValue
    # (no documentation provided)
    attr_accessor :vakio
    # (no documentation provided)
    attr_accessor :vapaa

    # the json hash for this TitleData
    def to_jaxb_json_hash
      _h = {}
      _h['valueAsString'] = valueAsString.to_jaxb_json_hash unless valueAsString.nil?
      _h['row'] = row.to_jaxb_json_hash unless row.nil?
      _h['link'] = link.to_jaxb_json_hash unless link.nil?
      _h['emptyValue'] = emptyValue.to_jaxb_json_hash unless emptyValue.nil?
      _h['vakio'] = vakio.to_jaxb_json_hash unless vakio.nil?
      _h['vapaa'] = vapaa.to_jaxb_json_hash unless vapaa.nil?
      return _h
    end

    # the json (string form) for this TitleData
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this TitleData with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['valueAsString'].nil?
          _oa = _o['valueAsString']
            if(_oa.is_a? Hash)
              @valueAsString = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @valueAsString =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @valueAsString = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @valueAsString.push String.from_json(_item)
                 else
                   @valueAsString.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @valueAsString = _oa
            end
          end
        if !_o['row'].nil?
          _oa = _o['row']
            if(_oa.is_a? Hash)
              @row = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @row =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @row = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @row.push Fixnum.from_json(_item)
                 else
                   @row.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @row = _oa
            end
          end
        if !_o['link'].nil?
          _oa = _o['link']
            if(_oa.is_a? Hash)
              @link = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @link =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @link = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @link.push Fixnum.from_json(_item)
                 else
                   @link.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @link = _oa
            end
          end
        if !_o['emptyValue'].nil?
          _oa = _o['emptyValue']
            if(_oa.is_a? Hash)
              @emptyValue = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @emptyValue =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @emptyValue = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @emptyValue.push Boolean.from_json(_item)
                 else
                   @emptyValue.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @emptyValue = _oa
            end
          end
        if !_o['vakio'].nil?
          _oa = _o['vakio']
            if(_oa.is_a? Hash)
              @vakio = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vakio =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vakio = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vakio.push String.from_json(_item)
                 else
                   @vakio.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vakio = _oa
            end
          end
        if !_o['vapaa'].nil?
          _oa = _o['vapaa']
            if(_oa.is_a? Hash)
              @vapaa = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vapaa =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vapaa = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vapaa.push String.from_json(_item)
                 else
                   @vapaa.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vapaa = _oa
            end
          end
    end

    # constructs a TitleData from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Kertomus

  # (no documentation provided)
  class KertomusEntryView 

    # (no documentation provided)
    attr_accessor :id
    # (no documentation provided)
    attr_accessor :mainTitle
    # (no documentation provided)
    attr_accessor :unit
    # (no documentation provided)
    attr_accessor :formName
    # (no documentation provided)
    attr_accessor :responsible
    # (no documentation provided)
    attr_accessor :titles
    # (no documentation provided)
    attr_accessor :kirjaaja
    # (no documentation provided)
    attr_accessor :suorittaja
    # (no documentation provided)
    attr_accessor :color
    # (no documentation provided)
    attr_accessor :vanha
    # (no documentation provided)
    attr_accessor :status
    # (no documentation provided)
    attr_accessor :kirjaajaName
    # (no documentation provided)
    attr_accessor :nakyma
    # (no documentation provided)
    attr_accessor :unitId
    # (no documentation provided)
    attr_accessor :kayttajaRyhma
    # (no documentation provided)
    attr_accessor :kayttajaRyhmaId
    # (no documentation provided)
    attr_accessor :lockTime
    # (no documentation provided)
    attr_accessor :editable

    # the json hash for this KertomusEntryView
    def to_jaxb_json_hash
      _h = {}
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['mainTitle'] = mainTitle.to_jaxb_json_hash unless mainTitle.nil?
      _h['unit'] = unit.to_jaxb_json_hash unless unit.nil?
      _h['formName'] = formName.to_jaxb_json_hash unless formName.nil?
      _h['responsible'] = responsible.to_jaxb_json_hash unless responsible.nil?
      if !titles.nil?
        _ha = Array.new
        titles.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['titles'] = _ha
      end
      _h['kirjaaja'] = kirjaaja.to_jaxb_json_hash unless kirjaaja.nil?
      _h['suorittaja'] = suorittaja.to_jaxb_json_hash unless suorittaja.nil?
      _h['color'] = color.to_jaxb_json_hash unless color.nil?
      _h['vanha'] = vanha.to_jaxb_json_hash unless vanha.nil?
      _h['status'] = status.to_jaxb_json_hash unless status.nil?
      _h['kirjaajaName'] = kirjaajaName.to_jaxb_json_hash unless kirjaajaName.nil?
      _h['nakyma'] = nakyma.to_jaxb_json_hash unless nakyma.nil?
      _h['unitId'] = unitId.to_jaxb_json_hash unless unitId.nil?
      _h['kayttajaRyhma'] = kayttajaRyhma.to_jaxb_json_hash unless kayttajaRyhma.nil?
      _h['kayttajaRyhmaId'] = kayttajaRyhmaId.to_jaxb_json_hash unless kayttajaRyhmaId.nil?
      _h['lockTime'] = lockTime.to_jaxb_json_hash unless lockTime.nil?
      _h['editable'] = editable.to_jaxb_json_hash unless editable.nil?
      return _h
    end

    # the json (string form) for this KertomusEntryView
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this KertomusEntryView with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  Fi::Mediconsult::Core::Client::Dto::Kertomus::KertomusID.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push Fi::Mediconsult::Core::Client::Dto::Kertomus::KertomusID.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
        if !_o['mainTitle'].nil?
          _oa = _o['mainTitle']
            if(_oa.is_a? Hash)
              @mainTitle = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @mainTitle =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @mainTitle = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @mainTitle.push String.from_json(_item)
                 else
                   @mainTitle.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @mainTitle = _oa
            end
          end
        if !_o['unit'].nil?
          _oa = _o['unit']
            if(_oa.is_a? Hash)
              @unit = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @unit =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @unit = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @unit.push String.from_json(_item)
                 else
                   @unit.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @unit = _oa
            end
          end
        if !_o['formName'].nil?
          _oa = _o['formName']
            if(_oa.is_a? Hash)
              @formName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @formName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @formName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @formName.push String.from_json(_item)
                 else
                   @formName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @formName = _oa
            end
          end
        if !_o['responsible'].nil?
          _oa = _o['responsible']
            if(_oa.is_a? Hash)
              @responsible = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @responsible =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @responsible = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @responsible.push String.from_json(_item)
                 else
                   @responsible.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @responsible = _oa
            end
          end
        if !_o['titles'].nil?
          _oa = _o['titles']
            if(_oa.is_a? Hash)
              @titles = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @titles =  Fi::Mediconsult::Core::Client::Dto::Title::TitleSettings.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @titles = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @titles.push Fi::Mediconsult::Core::Client::Dto::Title::TitleSettings.from_json(_item)
                 else
                   @titles.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @titles = _oa
            end
          end
        if !_o['kirjaaja'].nil?
          _oa = _o['kirjaaja']
            if(_oa.is_a? Hash)
              @kirjaaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kirjaaja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kirjaaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kirjaaja.push Fixnum.from_json(_item)
                 else
                   @kirjaaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kirjaaja = _oa
            end
          end
        if !_o['suorittaja'].nil?
          _oa = _o['suorittaja']
            if(_oa.is_a? Hash)
              @suorittaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @suorittaja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @suorittaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @suorittaja.push Fixnum.from_json(_item)
                 else
                   @suorittaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @suorittaja = _oa
            end
          end
        if !_o['color'].nil?
          _oa = _o['color']
            if(_oa.is_a? Hash)
              @color = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @color =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @color = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @color.push String.from_json(_item)
                 else
                   @color.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @color = _oa
            end
          end
        if !_o['vanha'].nil?
          _oa = _o['vanha']
            if(_oa.is_a? Hash)
              @vanha = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vanha =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vanha = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vanha.push Boolean.from_json(_item)
                 else
                   @vanha.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vanha = _oa
            end
          end
        if !_o['status'].nil?
          _oa = _o['status']
            if(_oa.is_a? Hash)
              @status = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @status =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @status = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @status.push String.from_json(_item)
                 else
                   @status.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @status = _oa
            end
          end
        if !_o['kirjaajaName'].nil?
          _oa = _o['kirjaajaName']
            if(_oa.is_a? Hash)
              @kirjaajaName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kirjaajaName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kirjaajaName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kirjaajaName.push String.from_json(_item)
                 else
                   @kirjaajaName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kirjaajaName = _oa
            end
          end
        if !_o['nakyma'].nil?
          _oa = _o['nakyma']
            if(_oa.is_a? Hash)
              @nakyma = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @nakyma =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @nakyma = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @nakyma.push String.from_json(_item)
                 else
                   @nakyma.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @nakyma = _oa
            end
          end
        if !_o['unitId'].nil?
          _oa = _o['unitId']
            if(_oa.is_a? Hash)
              @unitId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @unitId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @unitId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @unitId.push Fixnum.from_json(_item)
                 else
                   @unitId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @unitId = _oa
            end
          end
        if !_o['kayttajaRyhma'].nil?
          _oa = _o['kayttajaRyhma']
            if(_oa.is_a? Hash)
              @kayttajaRyhma = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kayttajaRyhma =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kayttajaRyhma = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kayttajaRyhma.push String.from_json(_item)
                 else
                   @kayttajaRyhma.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kayttajaRyhma = _oa
            end
          end
        if !_o['kayttajaRyhmaId'].nil?
          _oa = _o['kayttajaRyhmaId']
            if(_oa.is_a? Hash)
              @kayttajaRyhmaId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kayttajaRyhmaId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kayttajaRyhmaId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kayttajaRyhmaId.push Fixnum.from_json(_item)
                 else
                   @kayttajaRyhmaId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kayttajaRyhmaId = _oa
            end
          end
        if !_o['lockTime'].nil?
          _oa = _o['lockTime']
            if(_oa.is_a? Hash)
              @lockTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lockTime =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lockTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lockTime.push Time.from_json(_item)
                 else
                   @lockTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lockTime = _oa
            end
          end
        if !_o['editable'].nil?
          _oa = _o['editable']
            if(_oa.is_a? Hash)
              @editable = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @editable =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @editable = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @editable.push Boolean.from_json(_item)
                 else
                   @editable.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @editable = _oa
            end
          end
    end

    # constructs a KertomusEntryView from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Kertomus

  # (no documentation provided)
  class KertomusComponentConfig 

    # list of configs for all forms.
    attr_accessor :kertomusConfigs
    # map for client configs
    attr_accessor :titleConfigs
    # (no documentation provided)
    attr_accessor :configurableSettings

    # the json hash for this KertomusComponentConfig
    def to_jaxb_json_hash
      _h = {}
      if !kertomusConfigs.nil?
        _ha = Array.new
        kertomusConfigs.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['kertomusConfigs'] = _ha
      end
      _h['titleConfigs'] = titleConfigs.to_jaxb_json_hash unless titleConfigs.nil?
      _h['configurableSettings'] = configurableSettings.to_jaxb_json_hash unless configurableSettings.nil?
      return _h
    end

    # the json (string form) for this KertomusComponentConfig
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this KertomusComponentConfig with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['kertomusConfigs'].nil?
          _oa = _o['kertomusConfigs']
            if(_oa.is_a? Hash)
              @kertomusConfigs = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kertomusConfigs =  Fi::Mediconsult::Core::Client::Dto::Kertomus::KertomusFormConfig.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kertomusConfigs = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kertomusConfigs.push Fi::Mediconsult::Core::Client::Dto::Kertomus::KertomusFormConfig.from_json(_item)
                 else
                   @kertomusConfigs.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kertomusConfigs = _oa
            end
          end
        if !_o['titleConfigs'].nil?
          _oa = _o['titleConfigs']
            if(_oa.is_a? Hash)
              @titleConfigs = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @titleConfigs =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @titleConfigs = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @titleConfigs.push Hash.from_json(_item)
                 else
                   @titleConfigs.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @titleConfigs = _oa
            end
          end
        if !_o['configurableSettings'].nil?
          _oa = _o['configurableSettings']
            if(_oa.is_a? Hash)
              @configurableSettings = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @configurableSettings =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @configurableSettings = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @configurableSettings.push Hash.from_json(_item)
                 else
                   @configurableSettings.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @configurableSettings = _oa
            end
          end
    end

    # constructs a KertomusComponentConfig from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Medisos

module Dto

  # (no documentation provided)
  class MediSosDtoBase 

    # (no documentation provided)
    attr_accessor :id
    # (no documentation provided)
    attr_accessor :created
    # (no documentation provided)
    attr_accessor :modified

    # the json hash for this MediSosDtoBase
    def to_jaxb_json_hash
      _h = {}
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['created'] = created.to_jaxb_json_hash unless created.nil?
      _h['modified'] = modified.to_jaxb_json_hash unless modified.nil?
      return _h
    end

    # the json (string form) for this MediSosDtoBase
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this MediSosDtoBase with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push Bignum.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
        if !_o['created'].nil?
          _oa = _o['created']
            if(_oa.is_a? Hash)
              @created = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @created =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @created = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @created.push Bignum.from_json(_item)
                 else
                   @created.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @created = _oa
            end
          end
        if !_o['modified'].nil?
          _oa = _o['modified']
            if(_oa.is_a? Hash)
              @modified = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @modified =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @modified = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @modified.push Bignum.from_json(_item)
                 else
                   @modified.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @modified = _oa
            end
          end
    end

    # constructs a MediSosDtoBase from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Medisos

module Dto

  # (no documentation provided)
  class DtoBase 

    # (no documentation provided)
    attr_accessor :id
    # (no documentation provided)
    attr_accessor :created
    # (no documentation provided)
    attr_accessor :modified

    # the json hash for this DtoBase
    def to_jaxb_json_hash
      _h = {}
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['created'] = created.to_jaxb_json_hash unless created.nil?
      _h['modified'] = modified.to_jaxb_json_hash unless modified.nil?
      return _h
    end

    # the json (string form) for this DtoBase
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this DtoBase with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push Bignum.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
        if !_o['created'].nil?
          _oa = _o['created']
            if(_oa.is_a? Hash)
              @created = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @created =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @created = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @created.push Bignum.from_json(_item)
                 else
                   @created.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @created = _oa
            end
          end
        if !_o['modified'].nil?
          _oa = _o['modified']
            if(_oa.is_a? Hash)
              @modified = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @modified =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @modified = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @modified.push Bignum.from_json(_item)
                 else
                   @modified.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @modified = _oa
            end
          end
    end

    # constructs a DtoBase from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Planner

  # (no documentation provided)
  class EmployeeInfo 

    # (no documentation provided)
    attr_accessor :employeeId
    # (no documentation provided)
    attr_accessor :units
    # (no documentation provided)
    attr_accessor :transitionType

    # the json hash for this EmployeeInfo
    def to_jaxb_json_hash
      _h = {}
      _h['employeeId'] = employeeId.to_jaxb_json_hash unless employeeId.nil?
      if !units.nil?
        _ha = Array.new
        units.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['units'] = _ha
      end
      _h['transitionType'] = transitionType.to_jaxb_json_hash unless transitionType.nil?
      return _h
    end

    # the json (string form) for this EmployeeInfo
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this EmployeeInfo with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['employeeId'].nil?
          _oa = _o['employeeId']
            if(_oa.is_a? Hash)
              @employeeId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @employeeId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @employeeId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @employeeId.push Fixnum.from_json(_item)
                 else
                   @employeeId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @employeeId = _oa
            end
          end
        if !_o['units'].nil?
          _oa = _o['units']
            if(_oa.is_a? Hash)
              @units = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @units =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @units = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @units.push Fixnum.from_json(_item)
                 else
                   @units.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @units = _oa
            end
          end
        if !_o['transitionType'].nil?
          _oa = _o['transitionType']
            if(_oa.is_a? Hash)
              @transitionType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @transitionType =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @transitionType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @transitionType.push String.from_json(_item)
                 else
                   @transitionType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @transitionType = _oa
            end
          end
    end

    # constructs a EmployeeInfo from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class Hoitotyoasetukset 

    # (no documentation provided)
    attr_accessor :hoitoprosessinVaiheKoodisto
    # (no documentation provided)
    attr_accessor :permissions
    # (no documentation provided)
    attr_accessor :toimintoluokitusKoodisto
    # (no documentation provided)
    attr_accessor :otsikkoKoodisto
    # (no documentation provided)
    attr_accessor :recordReleaseAdminPermission
    # (no documentation provided)
    attr_accessor :tarveluokitusKoodisto
    # (no documentation provided)
    attr_accessor :tulosluokitus

    # the json hash for this Hoitotyoasetukset
    def to_jaxb_json_hash
      _h = {}
      _h['hoitoprosessinVaiheKoodisto'] = hoitoprosessinVaiheKoodisto.to_jaxb_json_hash unless hoitoprosessinVaiheKoodisto.nil?
      _h['permissions'] = permissions.to_jaxb_json_hash unless permissions.nil?
      _h['toimintoluokitusKoodisto'] = toimintoluokitusKoodisto.to_jaxb_json_hash unless toimintoluokitusKoodisto.nil?
      _h['otsikkoKoodisto'] = otsikkoKoodisto.to_jaxb_json_hash unless otsikkoKoodisto.nil?
      _h['recordReleaseAdminPermission'] = recordReleaseAdminPermission.to_jaxb_json_hash unless recordReleaseAdminPermission.nil?
      _h['tarveluokitusKoodisto'] = tarveluokitusKoodisto.to_jaxb_json_hash unless tarveluokitusKoodisto.nil?
      _h['tulosluokitus'] = tulosluokitus.to_jaxb_json_hash unless tulosluokitus.nil?
      return _h
    end

    # the json (string form) for this Hoitotyoasetukset
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Hoitotyoasetukset with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['hoitoprosessinVaiheKoodisto'].nil?
          _oa = _o['hoitoprosessinVaiheKoodisto']
            if(_oa.is_a? Hash)
              @hoitoprosessinVaiheKoodisto = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @hoitoprosessinVaiheKoodisto =  Fi::Mediconsult::Core::Client::Dto::Koodisto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @hoitoprosessinVaiheKoodisto = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @hoitoprosessinVaiheKoodisto.push Fi::Mediconsult::Core::Client::Dto::Koodisto.from_json(_item)
                 else
                   @hoitoprosessinVaiheKoodisto.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @hoitoprosessinVaiheKoodisto = _oa
            end
          end
        if !_o['permissions'].nil?
          _oa = _o['permissions']
            if(_oa.is_a? Hash)
              @permissions = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @permissions =  Fi::Mediconsult::Core::Client::Dto::PermissionDTOOfExtendFormInfo.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @permissions = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @permissions.push Fi::Mediconsult::Core::Client::Dto::PermissionDTOOfExtendFormInfo.from_json(_item)
                 else
                   @permissions.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @permissions = _oa
            end
          end
        if !_o['toimintoluokitusKoodisto'].nil?
          _oa = _o['toimintoluokitusKoodisto']
            if(_oa.is_a? Hash)
              @toimintoluokitusKoodisto = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @toimintoluokitusKoodisto =  Fi::Mediconsult::Core::Client::Dto::Koodisto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @toimintoluokitusKoodisto = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @toimintoluokitusKoodisto.push Fi::Mediconsult::Core::Client::Dto::Koodisto.from_json(_item)
                 else
                   @toimintoluokitusKoodisto.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @toimintoluokitusKoodisto = _oa
            end
          end
        if !_o['otsikkoKoodisto'].nil?
          _oa = _o['otsikkoKoodisto']
            if(_oa.is_a? Hash)
              @otsikkoKoodisto = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @otsikkoKoodisto =  Fi::Mediconsult::Core::Client::Dto::Koodisto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @otsikkoKoodisto = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @otsikkoKoodisto.push Fi::Mediconsult::Core::Client::Dto::Koodisto.from_json(_item)
                 else
                   @otsikkoKoodisto.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @otsikkoKoodisto = _oa
            end
          end
        if !_o['recordReleaseAdminPermission'].nil?
          _oa = _o['recordReleaseAdminPermission']
            if(_oa.is_a? Hash)
              @recordReleaseAdminPermission = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @recordReleaseAdminPermission =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @recordReleaseAdminPermission = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @recordReleaseAdminPermission.push Boolean.from_json(_item)
                 else
                   @recordReleaseAdminPermission.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @recordReleaseAdminPermission = _oa
            end
          end
        if !_o['tarveluokitusKoodisto'].nil?
          _oa = _o['tarveluokitusKoodisto']
            if(_oa.is_a? Hash)
              @tarveluokitusKoodisto = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tarveluokitusKoodisto =  Fi::Mediconsult::Core::Client::Dto::Koodisto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tarveluokitusKoodisto = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tarveluokitusKoodisto.push Fi::Mediconsult::Core::Client::Dto::Koodisto.from_json(_item)
                 else
                   @tarveluokitusKoodisto.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tarveluokitusKoodisto = _oa
            end
          end
        if !_o['tulosluokitus'].nil?
          _oa = _o['tulosluokitus']
            if(_oa.is_a? Hash)
              @tulosluokitus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tulosluokitus =  Fi::Mediconsult::Core::Client::Dto::Koodisto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tulosluokitus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tulosluokitus.push Fi::Mediconsult::Core::Client::Dto::Koodisto.from_json(_item)
                 else
                   @tulosluokitus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tulosluokitus = _oa
            end
          end
    end

    # constructs a Hoitotyoasetukset from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Team

  # (no documentation provided)
  class TeamConfigDto 

    # (no documentation provided)
    attr_accessor :formId
    # (no documentation provided)
    attr_accessor :formName
    # (no documentation provided)
    attr_accessor :ownerType
    # (no documentation provided)
    attr_accessor :memberType
    # (no documentation provided)
    attr_accessor :titleConfigs

    # the json hash for this TeamConfigDto
    def to_jaxb_json_hash
      _h = {}
      _h['formId'] = formId.to_jaxb_json_hash unless formId.nil?
      _h['formName'] = formName.to_jaxb_json_hash unless formName.nil?
      _h['ownerType'] = ownerType.to_jaxb_json_hash unless ownerType.nil?
      _h['memberType'] = memberType.to_jaxb_json_hash unless memberType.nil?
      if !titleConfigs.nil?
        _ha = Array.new
        titleConfigs.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['titleConfigs'] = _ha
      end
      return _h
    end

    # the json (string form) for this TeamConfigDto
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this TeamConfigDto with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['formId'].nil?
          _oa = _o['formId']
            if(_oa.is_a? Hash)
              @formId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @formId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @formId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @formId.push Fixnum.from_json(_item)
                 else
                   @formId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @formId = _oa
            end
          end
        if !_o['formName'].nil?
          _oa = _o['formName']
            if(_oa.is_a? Hash)
              @formName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @formName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @formName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @formName.push String.from_json(_item)
                 else
                   @formName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @formName = _oa
            end
          end
        if !_o['ownerType'].nil?
          _oa = _o['ownerType']
            if(_oa.is_a? Hash)
              @ownerType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ownerType =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ownerType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ownerType.push String.from_json(_item)
                 else
                   @ownerType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ownerType = _oa
            end
          end
        if !_o['memberType'].nil?
          _oa = _o['memberType']
            if(_oa.is_a? Hash)
              @memberType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @memberType =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @memberType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @memberType.push String.from_json(_item)
                 else
                   @memberType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @memberType = _oa
            end
          end
        if !_o['titleConfigs'].nil?
          _oa = _o['titleConfigs']
            if(_oa.is_a? Hash)
              @titleConfigs = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @titleConfigs =  Fi::Mediconsult::Core::Client::Dto::Title::Config::ClientTitleConfig.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @titleConfigs = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @titleConfigs.push Fi::Mediconsult::Core::Client::Dto::Title::Config::ClientTitleConfig.from_json(_item)
                 else
                   @titleConfigs.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @titleConfigs = _oa
            end
          end
    end

    # constructs a TeamConfigDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Planner

  # (no documentation provided)
  class EventCategoryParameters 

    # (no documentation provided)
    attr_accessor :unit
    # (no documentation provided)
    attr_accessor :reportingCategory
    # (no documentation provided)
    attr_accessor :reAssign
    # (no documentation provided)
    attr_accessor :timeDrift

    # the json hash for this EventCategoryParameters
    def to_jaxb_json_hash
      _h = {}
      _h['unit'] = unit.to_jaxb_json_hash unless unit.nil?
      _h['reportingCategory'] = reportingCategory.to_jaxb_json_hash unless reportingCategory.nil?
      _h['reAssign'] = reAssign.to_jaxb_json_hash unless reAssign.nil?
      _h['timeDrift'] = timeDrift.to_jaxb_json_hash unless timeDrift.nil?
      return _h
    end

    # the json (string form) for this EventCategoryParameters
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this EventCategoryParameters with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['unit'].nil?
          _oa = _o['unit']
            if(_oa.is_a? Hash)
              @unit = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @unit =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @unit = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @unit.push Bignum.from_json(_item)
                 else
                   @unit.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @unit = _oa
            end
          end
        if !_o['reportingCategory'].nil?
          _oa = _o['reportingCategory']
            if(_oa.is_a? Hash)
              @reportingCategory = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @reportingCategory =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @reportingCategory = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @reportingCategory.push Bignum.from_json(_item)
                 else
                   @reportingCategory.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @reportingCategory = _oa
            end
          end
        if !_o['reAssign'].nil?
          _oa = _o['reAssign']
            if(_oa.is_a? Hash)
              @reAssign = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @reAssign =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @reAssign = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @reAssign.push Boolean.from_json(_item)
                 else
                   @reAssign.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @reAssign = _oa
            end
          end
        if !_o['timeDrift'].nil?
          _oa = _o['timeDrift']
            if(_oa.is_a? Hash)
              @timeDrift = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @timeDrift =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @timeDrift = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @timeDrift.push Boolean.from_json(_item)
                 else
                   @timeDrift.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @timeDrift = _oa
            end
          end
    end

    # constructs a EventCategoryParameters from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

  # (no documentation provided)
  class PersonListByUnitAndFormOfUser 

    # (no documentation provided)
    attr_accessor :people
    # (no documentation provided)
    attr_accessor :listId
    # (no documentation provided)
    attr_accessor :unitId

    # the json hash for this PersonListByUnitAndFormOfUser
    def to_jaxb_json_hash
      _h = {}
      if !people.nil?
        _ha = Array.new
        people.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['people'] = _ha
      end
      _h['listId'] = listId.to_jaxb_json_hash unless listId.nil?
      _h['unitId'] = unitId.to_jaxb_json_hash unless unitId.nil?
      return _h
    end

    # the json (string form) for this PersonListByUnitAndFormOfUser
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this PersonListByUnitAndFormOfUser with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['people'].nil?
          _oa = _o['people']
            if(_oa.is_a? Hash)
              @people = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @people =  Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @people = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @people.push Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_item)
                 else
                   @people.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @people = _oa
            end
          end
        if !_o['listId'].nil?
          _oa = _o['listId']
            if(_oa.is_a? Hash)
              @listId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @listId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @listId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @listId.push Fixnum.from_json(_item)
                 else
                   @listId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @listId = _oa
            end
          end
        if !_o['unitId'].nil?
          _oa = _o['unitId']
            if(_oa.is_a? Hash)
              @unitId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @unitId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @unitId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @unitId.push Fixnum.from_json(_item)
                 else
                   @unitId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @unitId = _oa
            end
          end
    end

    # constructs a PersonListByUnitAndFormOfUser from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class PalvelutapahtumaList 

    # (no documentation provided)
    attr_accessor :allItemsCount
    # (no documentation provided)
    attr_accessor :entries
    # (no documentation provided)
    attr_accessor :preferredPalvelutapahtumaReference
    # (no documentation provided)
    attr_accessor :preferredPalvelutapahtumaSelectStatus

    # the json hash for this PalvelutapahtumaList
    def to_jaxb_json_hash
      _h = {}
      _h['allItemsCount'] = allItemsCount.to_jaxb_json_hash unless allItemsCount.nil?
      if !entries.nil?
        _ha = Array.new
        entries.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['entries'] = _ha
      end
      if !preferredPalvelutapahtumaReference.nil?
        _ha = Array.new
        preferredPalvelutapahtumaReference.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['preferredPalvelutapahtumaReference'] = _ha
      end
      _h['preferredPalvelutapahtumaSelectStatus'] = preferredPalvelutapahtumaSelectStatus.to_jaxb_json_hash unless preferredPalvelutapahtumaSelectStatus.nil?
      return _h
    end

    # the json (string form) for this PalvelutapahtumaList
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this PalvelutapahtumaList with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['allItemsCount'].nil?
          _oa = _o['allItemsCount']
            if(_oa.is_a? Hash)
              @allItemsCount = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @allItemsCount =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @allItemsCount = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @allItemsCount.push Fixnum.from_json(_item)
                 else
                   @allItemsCount.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @allItemsCount = _oa
            end
          end
        if !_o['entries'].nil?
          _oa = _o['entries']
            if(_oa.is_a? Hash)
              @entries = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @entries =  Fi::Mediconsult::Core::Client::Dto::Palvelutapahtuma.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @entries = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @entries.push Fi::Mediconsult::Core::Client::Dto::Palvelutapahtuma.from_json(_item)
                 else
                   @entries.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @entries = _oa
            end
          end
        if !_o['preferredPalvelutapahtumaReference'].nil?
          _oa = _o['preferredPalvelutapahtumaReference']
            if(_oa.is_a? Hash)
              @preferredPalvelutapahtumaReference = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @preferredPalvelutapahtumaReference =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @preferredPalvelutapahtumaReference = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @preferredPalvelutapahtumaReference.push Fixnum.from_json(_item)
                 else
                   @preferredPalvelutapahtumaReference.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @preferredPalvelutapahtumaReference = _oa
            end
          end
        if !_o['preferredPalvelutapahtumaSelectStatus'].nil?
          _oa = _o['preferredPalvelutapahtumaSelectStatus']
            if(_oa.is_a? Hash)
              @preferredPalvelutapahtumaSelectStatus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @preferredPalvelutapahtumaSelectStatus =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @preferredPalvelutapahtumaSelectStatus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @preferredPalvelutapahtumaSelectStatus.push String.from_json(_item)
                 else
                   @preferredPalvelutapahtumaSelectStatus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @preferredPalvelutapahtumaSelectStatus = _oa
            end
          end
    end

    # constructs a PalvelutapahtumaList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Omistaja

  # (no documentation provided)
  class GenericOmistaja 

    # (no documentation provided)
    attr_accessor :editTime
    # (no documentation provided)
    attr_accessor :type
    # (no documentation provided)
    attr_accessor :nameExtension
    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :omistajaId
    # (no documentation provided)
    attr_accessor :omistajaListAvailability
    # (no documentation provided)
    attr_accessor :identifier
    # (no documentation provided)
    attr_accessor :alias

    # the json hash for this GenericOmistaja
    def to_jaxb_json_hash
      _h = {}
      _h['editTime'] = editTime.to_jaxb_json_hash unless editTime.nil?
      _h['type'] = type.to_jaxb_json_hash unless type.nil?
      _h['nameExtension'] = nameExtension.to_jaxb_json_hash unless nameExtension.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['omistajaId'] = omistajaId.to_jaxb_json_hash unless omistajaId.nil?
      _h['omistajaListAvailability'] = omistajaListAvailability.to_jaxb_json_hash unless omistajaListAvailability.nil?
      _h['identifier'] = identifier.to_jaxb_json_hash unless identifier.nil?
      _h['alias'] = alias.to_jaxb_json_hash unless alias.nil?
      return _h
    end

    # the json (string form) for this GenericOmistaja
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this GenericOmistaja with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['editTime'].nil?
          _oa = _o['editTime']
            if(_oa.is_a? Hash)
              @editTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @editTime =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @editTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @editTime.push Bignum.from_json(_item)
                 else
                   @editTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @editTime = _oa
            end
          end
        if !_o['type'].nil?
          _oa = _o['type']
            if(_oa.is_a? Hash)
              @type = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @type =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @type = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @type.push String.from_json(_item)
                 else
                   @type.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @type = _oa
            end
          end
        if !_o['nameExtension'].nil?
          _oa = _o['nameExtension']
            if(_oa.is_a? Hash)
              @nameExtension = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @nameExtension =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @nameExtension = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @nameExtension.push String.from_json(_item)
                 else
                   @nameExtension.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @nameExtension = _oa
            end
          end
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['omistajaId'].nil?
          _oa = _o['omistajaId']
            if(_oa.is_a? Hash)
              @omistajaId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @omistajaId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @omistajaId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @omistajaId.push Fixnum.from_json(_item)
                 else
                   @omistajaId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @omistajaId = _oa
            end
          end
        if !_o['omistajaListAvailability'].nil?
          _oa = _o['omistajaListAvailability']
            if(_oa.is_a? Hash)
              @omistajaListAvailability = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @omistajaListAvailability =  Fi::Mediconsult::Core::Client::Dto::Omistaja::TimeInterval.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @omistajaListAvailability = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @omistajaListAvailability.push Fi::Mediconsult::Core::Client::Dto::Omistaja::TimeInterval.from_json(_item)
                 else
                   @omistajaListAvailability.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @omistajaListAvailability = _oa
            end
          end
        if !_o['identifier'].nil?
          _oa = _o['identifier']
            if(_oa.is_a? Hash)
              @identifier = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @identifier =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @identifier = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @identifier.push String.from_json(_item)
                 else
                   @identifier.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @identifier = _oa
            end
          end
        if !_o['alias'].nil?
          _oa = _o['alias']
            if(_oa.is_a? Hash)
              @alias = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @alias =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @alias = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @alias.push Fixnum.from_json(_item)
                 else
                   @alias.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @alias = _oa
            end
          end
    end

    # constructs a GenericOmistaja from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class Osastolista 

    # (no documentation provided)
    attr_accessor :paikkatiedot
    # (no documentation provided)
    attr_accessor :nimi

    # the json hash for this Osastolista
    def to_jaxb_json_hash
      _h = {}
      if !paikkatiedot.nil?
        _ha = Array.new
        paikkatiedot.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['paikkatiedot'] = _ha
      end
      _h['nimi'] = nimi.to_jaxb_json_hash unless nimi.nil?
      return _h
    end

    # the json (string form) for this Osastolista
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Osastolista with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['paikkatiedot'].nil?
          _oa = _o['paikkatiedot']
            if(_oa.is_a? Hash)
              @paikkatiedot = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @paikkatiedot =  Fi::Mediconsult::Core::Client::Dto::OsastolistaPaikkatieto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @paikkatiedot = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @paikkatiedot.push Fi::Mediconsult::Core::Client::Dto::OsastolistaPaikkatieto.from_json(_item)
                 else
                   @paikkatiedot.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @paikkatiedot = _oa
            end
          end
        if !_o['nimi'].nil?
          _oa = _o['nimi']
            if(_oa.is_a? Hash)
              @nimi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @nimi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @nimi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @nimi.push String.from_json(_item)
                 else
                   @nimi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @nimi = _oa
            end
          end
    end

    # constructs a Osastolista from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Title

module View

  # (no documentation provided)
  class MittausTapa 

    # (no documentation provided)
    attr_accessor :code
    # (no documentation provided)
    attr_accessor :description

    # the json hash for this MittausTapa
    def to_jaxb_json_hash
      _h = {}
      _h['code'] = code.to_jaxb_json_hash unless code.nil?
      _h['description'] = description.to_jaxb_json_hash unless description.nil?
      return _h
    end

    # the json (string form) for this MittausTapa
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this MittausTapa with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['code'].nil?
          _oa = _o['code']
            if(_oa.is_a? Hash)
              @code = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @code =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @code = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @code.push String.from_json(_item)
                 else
                   @code.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @code = _oa
            end
          end
        if !_o['description'].nil?
          _oa = _o['description']
            if(_oa.is_a? Hash)
              @description = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @description =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @description = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @description.push String.from_json(_item)
                 else
                   @description.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @description = _oa
            end
          end
    end

    # constructs a MittausTapa from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Java

module Security

module Cert

  # (no documentation provided)
  class Certificate 

    # (no documentation provided)
    attr_accessor :encoded
    # (no documentation provided)
    attr_accessor :publicKey
    # (no documentation provided)
    attr_accessor :type

    # the json hash for this Certificate
    def to_jaxb_json_hash
      _h = {}
      if !encoded.nil?
        _ha = Array.new
        encoded.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['encoded'] = _ha
      end
      _h['publicKey'] = publicKey.to_jaxb_json_hash unless publicKey.nil?
      _h['type'] = type.to_jaxb_json_hash unless type.nil?
      return _h
    end

    # the json (string form) for this Certificate
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Certificate with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['encoded'].nil?
          _oa = _o['encoded']
            if(_oa.is_a? Hash)
              @encoded = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @encoded =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @encoded = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @encoded.push Fixnum.from_json(_item)
                 else
                   @encoded.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @encoded = _oa
            end
          end
        if !_o['publicKey'].nil?
          _oa = _o['publicKey']
            if(_oa.is_a? Hash)
              @publicKey = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @publicKey =  Java::Security::PublicKey.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @publicKey = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @publicKey.push Java::Security::PublicKey.from_json(_item)
                 else
                   @publicKey.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @publicKey = _oa
            end
          end
        if !_o['type'].nil?
          _oa = _o['type']
            if(_oa.is_a? Hash)
              @type = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @type =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @type = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @type.push String.from_json(_item)
                 else
                   @type.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @type = _oa
            end
          end
    end

    # constructs a Certificate from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Event

  # (no documentation provided)
  class EventCoursePeriodDto 

    # the coursePeriodId
    attr_accessor :coursePeriodId
    # the coursePeriodName
    attr_accessor :coursePeriodName
    # the coursePeriodAbbreviation
    attr_accessor :coursePeriodAbbreviation
    # the courseId
    attr_accessor :courseId
    # the courseName
    attr_accessor :courseName
    # the courseAbbreviation
    attr_accessor :courseAbbreviation

    # the json hash for this EventCoursePeriodDto
    def to_jaxb_json_hash
      _h = {}
      _h['coursePeriodId'] = coursePeriodId.to_jaxb_json_hash unless coursePeriodId.nil?
      _h['coursePeriodName'] = coursePeriodName.to_jaxb_json_hash unless coursePeriodName.nil?
      _h['coursePeriodAbbreviation'] = coursePeriodAbbreviation.to_jaxb_json_hash unless coursePeriodAbbreviation.nil?
      _h['courseId'] = courseId.to_jaxb_json_hash unless courseId.nil?
      _h['courseName'] = courseName.to_jaxb_json_hash unless courseName.nil?
      _h['courseAbbreviation'] = courseAbbreviation.to_jaxb_json_hash unless courseAbbreviation.nil?
      return _h
    end

    # the json (string form) for this EventCoursePeriodDto
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this EventCoursePeriodDto with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['coursePeriodId'].nil?
          _oa = _o['coursePeriodId']
            if(_oa.is_a? Hash)
              @coursePeriodId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @coursePeriodId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @coursePeriodId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @coursePeriodId.push Bignum.from_json(_item)
                 else
                   @coursePeriodId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @coursePeriodId = _oa
            end
          end
        if !_o['coursePeriodName'].nil?
          _oa = _o['coursePeriodName']
            if(_oa.is_a? Hash)
              @coursePeriodName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @coursePeriodName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @coursePeriodName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @coursePeriodName.push String.from_json(_item)
                 else
                   @coursePeriodName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @coursePeriodName = _oa
            end
          end
        if !_o['coursePeriodAbbreviation'].nil?
          _oa = _o['coursePeriodAbbreviation']
            if(_oa.is_a? Hash)
              @coursePeriodAbbreviation = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @coursePeriodAbbreviation =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @coursePeriodAbbreviation = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @coursePeriodAbbreviation.push String.from_json(_item)
                 else
                   @coursePeriodAbbreviation.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @coursePeriodAbbreviation = _oa
            end
          end
        if !_o['courseId'].nil?
          _oa = _o['courseId']
            if(_oa.is_a? Hash)
              @courseId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @courseId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @courseId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @courseId.push Bignum.from_json(_item)
                 else
                   @courseId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @courseId = _oa
            end
          end
        if !_o['courseName'].nil?
          _oa = _o['courseName']
            if(_oa.is_a? Hash)
              @courseName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @courseName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @courseName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @courseName.push String.from_json(_item)
                 else
                   @courseName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @courseName = _oa
            end
          end
        if !_o['courseAbbreviation'].nil?
          _oa = _o['courseAbbreviation']
            if(_oa.is_a? Hash)
              @courseAbbreviation = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @courseAbbreviation =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @courseAbbreviation = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @courseAbbreviation.push String.from_json(_item)
                 else
                   @courseAbbreviation.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @courseAbbreviation = _oa
            end
          end
    end

    # constructs a EventCoursePeriodDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class KayttoaiheView 

    # (no documentation provided)
    attr_accessor :numero
    # (no documentation provided)
    attr_accessor :selite
    # (no documentation provided)
    attr_accessor :reseptiteksti
    # (no documentation provided)
    attr_accessor :alkupera
    # (no documentation provided)
    attr_accessor :tyyppi
    # (no documentation provided)
    attr_accessor :poistettu
    # (no documentation provided)
    attr_accessor :muutosaika
    # (no documentation provided)
    attr_accessor :muutospaikka

    # the json hash for this KayttoaiheView
    def to_jaxb_json_hash
      _h = {}
      _h['numero'] = numero.to_jaxb_json_hash unless numero.nil?
      _h['selite'] = selite.to_jaxb_json_hash unless selite.nil?
      _h['reseptiteksti'] = reseptiteksti.to_jaxb_json_hash unless reseptiteksti.nil?
      _h['alkupera'] = alkupera.to_jaxb_json_hash unless alkupera.nil?
      _h['tyyppi'] = tyyppi.to_jaxb_json_hash unless tyyppi.nil?
      _h['poistettu'] = poistettu.to_jaxb_json_hash unless poistettu.nil?
      _h['muutosaika'] = muutosaika.to_jaxb_json_hash unless muutosaika.nil?
      _h['muutospaikka'] = muutospaikka.to_jaxb_json_hash unless muutospaikka.nil?
      return _h
    end

    # the json (string form) for this KayttoaiheView
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this KayttoaiheView with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['numero'].nil?
          _oa = _o['numero']
            if(_oa.is_a? Hash)
              @numero = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @numero =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @numero = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @numero.push Fixnum.from_json(_item)
                 else
                   @numero.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @numero = _oa
            end
          end
        if !_o['selite'].nil?
          _oa = _o['selite']
            if(_oa.is_a? Hash)
              @selite = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @selite =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @selite = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @selite.push String.from_json(_item)
                 else
                   @selite.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @selite = _oa
            end
          end
        if !_o['reseptiteksti'].nil?
          _oa = _o['reseptiteksti']
            if(_oa.is_a? Hash)
              @reseptiteksti = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @reseptiteksti =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @reseptiteksti = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @reseptiteksti.push String.from_json(_item)
                 else
                   @reseptiteksti.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @reseptiteksti = _oa
            end
          end
        if !_o['alkupera'].nil?
          _oa = _o['alkupera']
            if(_oa.is_a? Hash)
              @alkupera = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @alkupera =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @alkupera = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @alkupera.push Fixnum.from_json(_item)
                 else
                   @alkupera.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @alkupera = _oa
            end
          end
        if !_o['tyyppi'].nil?
          _oa = _o['tyyppi']
            if(_oa.is_a? Hash)
              @tyyppi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tyyppi =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tyyppi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tyyppi.push Fixnum.from_json(_item)
                 else
                   @tyyppi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tyyppi = _oa
            end
          end
        if !_o['poistettu'].nil?
          _oa = _o['poistettu']
            if(_oa.is_a? Hash)
              @poistettu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @poistettu =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @poistettu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @poistettu.push Fixnum.from_json(_item)
                 else
                   @poistettu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @poistettu = _oa
            end
          end
        if !_o['muutosaika'].nil?
          _oa = _o['muutosaika']
            if(_oa.is_a? Hash)
              @muutosaika = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @muutosaika =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @muutosaika = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @muutosaika.push Time.from_json(_item)
                 else
                   @muutosaika.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @muutosaika = _oa
            end
          end
        if !_o['muutospaikka'].nil?
          _oa = _o['muutospaikka']
            if(_oa.is_a? Hash)
              @muutospaikka = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @muutospaikka =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @muutospaikka = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @muutospaikka.push Fixnum.from_json(_item)
                 else
                   @muutospaikka.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @muutospaikka = _oa
            end
          end
    end

    # constructs a KayttoaiheView from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Diagnose

  # (no documentation provided)
  class DiagnoseCode 

    # (no documentation provided)
    attr_accessor :type
    # (no documentation provided)
    attr_accessor :code
    # (no documentation provided)
    attr_accessor :symptomCode
    # (no documentation provided)
    attr_accessor :name
    # presentation for the code for UI
    attr_accessor :presentation
    # (no documentation provided)
    attr_accessor :gender
    # (no documentation provided)
    attr_accessor :minAge
    # (no documentation provided)
    attr_accessor :maxAge
    # true if allow
    attr_accessor :symptomCodeAdditionAllowed

    # the json hash for this DiagnoseCode
    def to_jaxb_json_hash
      _h = {}
      _h['type'] = type.to_jaxb_json_hash unless type.nil?
      _h['code'] = code.to_jaxb_json_hash unless code.nil?
      _h['symptomCode'] = symptomCode.to_jaxb_json_hash unless symptomCode.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['presentation'] = presentation.to_jaxb_json_hash unless presentation.nil?
      _h['gender'] = gender.to_jaxb_json_hash unless gender.nil?
      _h['minAge'] = minAge.to_jaxb_json_hash unless minAge.nil?
      _h['maxAge'] = maxAge.to_jaxb_json_hash unless maxAge.nil?
      _h['symptomCodeAdditionAllowed'] = symptomCodeAdditionAllowed.to_jaxb_json_hash unless symptomCodeAdditionAllowed.nil?
      return _h
    end

    # the json (string form) for this DiagnoseCode
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this DiagnoseCode with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['type'].nil?
          _oa = _o['type']
            if(_oa.is_a? Hash)
              @type = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @type =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @type = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @type.push String.from_json(_item)
                 else
                   @type.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @type = _oa
            end
          end
        if !_o['code'].nil?
          _oa = _o['code']
            if(_oa.is_a? Hash)
              @code = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @code =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @code = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @code.push String.from_json(_item)
                 else
                   @code.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @code = _oa
            end
          end
        if !_o['symptomCode'].nil?
          _oa = _o['symptomCode']
            if(_oa.is_a? Hash)
              @symptomCode = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @symptomCode =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @symptomCode = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @symptomCode.push String.from_json(_item)
                 else
                   @symptomCode.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @symptomCode = _oa
            end
          end
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['presentation'].nil?
          _oa = _o['presentation']
            if(_oa.is_a? Hash)
              @presentation = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @presentation =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @presentation = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @presentation.push String.from_json(_item)
                 else
                   @presentation.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @presentation = _oa
            end
          end
        if !_o['gender'].nil?
          _oa = _o['gender']
            if(_oa.is_a? Hash)
              @gender = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @gender =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @gender = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @gender.push String.from_json(_item)
                 else
                   @gender.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @gender = _oa
            end
          end
        if !_o['minAge'].nil?
          _oa = _o['minAge']
            if(_oa.is_a? Hash)
              @minAge = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @minAge =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @minAge = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @minAge.push Fixnum.from_json(_item)
                 else
                   @minAge.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @minAge = _oa
            end
          end
        if !_o['maxAge'].nil?
          _oa = _o['maxAge']
            if(_oa.is_a? Hash)
              @maxAge = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @maxAge =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @maxAge = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @maxAge.push Fixnum.from_json(_item)
                 else
                   @maxAge.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @maxAge = _oa
            end
          end
        if !_o['symptomCodeAdditionAllowed'].nil?
          _oa = _o['symptomCodeAdditionAllowed']
            if(_oa.is_a? Hash)
              @symptomCodeAdditionAllowed = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @symptomCodeAdditionAllowed =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @symptomCodeAdditionAllowed = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @symptomCodeAdditionAllowed.push Boolean.from_json(_item)
                 else
                   @symptomCodeAdditionAllowed.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @symptomCodeAdditionAllowed = _oa
            end
          end
    end

    # constructs a DiagnoseCode from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Kanta

  # (no documentation provided)
  class LomakeTietokentta 

    # (no documentation provided)
    attr_accessor :rootValue
    # (no documentation provided)
    attr_accessor :toistuma
    # (no documentation provided)
    attr_accessor :value
    # (no documentation provided)
    attr_accessor :type
    # (no documentation provided)
    attr_accessor :nakymaKoodistoKoodi
    # (no documentation provided)
    attr_accessor :title
    # (no documentation provided)
    attr_accessor :koodistonOid
    # (no documentation provided)
    attr_accessor :codeSystem
    # (no documentation provided)
    attr_accessor :tayttoOhje
    # (no documentation provided)
    attr_accessor :properties
    # (no documentation provided)
    attr_accessor :taytettava
    # (no documentation provided)
    attr_accessor :dependant
    # (no documentation provided)
    attr_accessor :codeSystemName
    # (no documentation provided)
    attr_accessor :requiresExtension
    # (no documentation provided)
    attr_accessor :code
    # (no documentation provided)
    attr_accessor :koodistoLista
    # (no documentation provided)
    attr_accessor :required
    # (no documentation provided)
    attr_accessor :parent
    # (no documentation provided)
    attr_accessor :description
    # (no documentation provided)
    attr_accessor :jarjestys

    # the json hash for this LomakeTietokentta
    def to_jaxb_json_hash
      _h = {}
      _h['rootValue'] = rootValue.to_jaxb_json_hash unless rootValue.nil?
      _h['toistuma'] = toistuma.to_jaxb_json_hash unless toistuma.nil?
      _h['value'] = value.to_jaxb_json_hash unless value.nil?
      _h['type'] = type.to_jaxb_json_hash unless type.nil?
      _h['nakymaKoodistoKoodi'] = nakymaKoodistoKoodi.to_jaxb_json_hash unless nakymaKoodistoKoodi.nil?
      _h['title'] = title.to_jaxb_json_hash unless title.nil?
      _h['koodistonOid'] = koodistonOid.to_jaxb_json_hash unless koodistonOid.nil?
      _h['codeSystem'] = codeSystem.to_jaxb_json_hash unless codeSystem.nil?
      _h['tayttoOhje'] = tayttoOhje.to_jaxb_json_hash unless tayttoOhje.nil?
      if !properties.nil?
        _ha = Array.new
        properties.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['properties'] = _ha
      end
      _h['taytettava'] = taytettava.to_jaxb_json_hash unless taytettava.nil?
      _h['dependant'] = dependant.to_jaxb_json_hash unless dependant.nil?
      _h['codeSystemName'] = codeSystemName.to_jaxb_json_hash unless codeSystemName.nil?
      _h['requiresExtension'] = requiresExtension.to_jaxb_json_hash unless requiresExtension.nil?
      _h['code'] = code.to_jaxb_json_hash unless code.nil?
      _h['koodistoLista'] = koodistoLista.to_jaxb_json_hash unless koodistoLista.nil?
      _h['required'] = required.to_jaxb_json_hash unless required.nil?
      _h['parent'] = parent.to_jaxb_json_hash unless parent.nil?
      _h['description'] = description.to_jaxb_json_hash unless description.nil?
      _h['jarjestys'] = jarjestys.to_jaxb_json_hash unless jarjestys.nil?
      return _h
    end

    # the json (string form) for this LomakeTietokentta
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this LomakeTietokentta with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['rootValue'].nil?
          _oa = _o['rootValue']
            if(_oa.is_a? Hash)
              @rootValue = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rootValue =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rootValue = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rootValue.push String.from_json(_item)
                 else
                   @rootValue.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rootValue = _oa
            end
          end
        if !_o['toistuma'].nil?
          _oa = _o['toistuma']
            if(_oa.is_a? Hash)
              @toistuma = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @toistuma =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @toistuma = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @toistuma.push String.from_json(_item)
                 else
                   @toistuma.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @toistuma = _oa
            end
          end
        if !_o['value'].nil?
          _oa = _o['value']
            if(_oa.is_a? Hash)
              @value = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @value =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @value = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @value.push String.from_json(_item)
                 else
                   @value.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @value = _oa
            end
          end
        if !_o['type'].nil?
          _oa = _o['type']
            if(_oa.is_a? Hash)
              @type = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @type =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @type = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @type.push String.from_json(_item)
                 else
                   @type.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @type = _oa
            end
          end
        if !_o['nakymaKoodistoKoodi'].nil?
          _oa = _o['nakymaKoodistoKoodi']
            if(_oa.is_a? Hash)
              @nakymaKoodistoKoodi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @nakymaKoodistoKoodi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @nakymaKoodistoKoodi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @nakymaKoodistoKoodi.push String.from_json(_item)
                 else
                   @nakymaKoodistoKoodi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @nakymaKoodistoKoodi = _oa
            end
          end
        if !_o['title'].nil?
          _oa = _o['title']
            if(_oa.is_a? Hash)
              @title = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @title =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @title = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @title.push String.from_json(_item)
                 else
                   @title.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @title = _oa
            end
          end
        if !_o['koodistonOid'].nil?
          _oa = _o['koodistonOid']
            if(_oa.is_a? Hash)
              @koodistonOid = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @koodistonOid =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @koodistonOid = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @koodistonOid.push String.from_json(_item)
                 else
                   @koodistonOid.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @koodistonOid = _oa
            end
          end
        if !_o['codeSystem'].nil?
          _oa = _o['codeSystem']
            if(_oa.is_a? Hash)
              @codeSystem = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @codeSystem =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @codeSystem = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @codeSystem.push String.from_json(_item)
                 else
                   @codeSystem.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @codeSystem = _oa
            end
          end
        if !_o['tayttoOhje'].nil?
          _oa = _o['tayttoOhje']
            if(_oa.is_a? Hash)
              @tayttoOhje = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tayttoOhje =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tayttoOhje = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tayttoOhje.push String.from_json(_item)
                 else
                   @tayttoOhje.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tayttoOhje = _oa
            end
          end
        if !_o['properties'].nil?
          _oa = _o['properties']
            if(_oa.is_a? Hash)
              @properties = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @properties =  Fi::Mediconsult::Core::Client::Dto::Kanta::LomakeTietokentta.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @properties = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @properties.push Fi::Mediconsult::Core::Client::Dto::Kanta::LomakeTietokentta.from_json(_item)
                 else
                   @properties.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @properties = _oa
            end
          end
        if !_o['taytettava'].nil?
          _oa = _o['taytettava']
            if(_oa.is_a? Hash)
              @taytettava = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @taytettava =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @taytettava = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @taytettava.push String.from_json(_item)
                 else
                   @taytettava.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @taytettava = _oa
            end
          end
        if !_o['dependant'].nil?
          _oa = _o['dependant']
            if(_oa.is_a? Hash)
              @dependant = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @dependant =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @dependant = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @dependant.push String.from_json(_item)
                 else
                   @dependant.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @dependant = _oa
            end
          end
        if !_o['codeSystemName'].nil?
          _oa = _o['codeSystemName']
            if(_oa.is_a? Hash)
              @codeSystemName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @codeSystemName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @codeSystemName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @codeSystemName.push String.from_json(_item)
                 else
                   @codeSystemName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @codeSystemName = _oa
            end
          end
        if !_o['requiresExtension'].nil?
          _oa = _o['requiresExtension']
            if(_oa.is_a? Hash)
              @requiresExtension = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @requiresExtension =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @requiresExtension = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @requiresExtension.push Boolean.from_json(_item)
                 else
                   @requiresExtension.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @requiresExtension = _oa
            end
          end
        if !_o['code'].nil?
          _oa = _o['code']
            if(_oa.is_a? Hash)
              @code = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @code =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @code = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @code.push String.from_json(_item)
                 else
                   @code.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @code = _oa
            end
          end
        if !_o['koodistoLista'].nil?
          _oa = _o['koodistoLista']
            if(_oa.is_a? Hash)
              @koodistoLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @koodistoLista =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @koodistoLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @koodistoLista.push String.from_json(_item)
                 else
                   @koodistoLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @koodistoLista = _oa
            end
          end
        if !_o['required'].nil?
          _oa = _o['required']
            if(_oa.is_a? Hash)
              @required = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @required =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @required = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @required.push String.from_json(_item)
                 else
                   @required.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @required = _oa
            end
          end
        if !_o['parent'].nil?
          _oa = _o['parent']
            if(_oa.is_a? Hash)
              @parent = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @parent =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @parent = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @parent.push String.from_json(_item)
                 else
                   @parent.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @parent = _oa
            end
          end
        if !_o['description'].nil?
          _oa = _o['description']
            if(_oa.is_a? Hash)
              @description = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @description =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @description = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @description.push String.from_json(_item)
                 else
                   @description.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @description = _oa
            end
          end
        if !_o['jarjestys'].nil?
          _oa = _o['jarjestys']
            if(_oa.is_a? Hash)
              @jarjestys = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @jarjestys =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @jarjestys = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @jarjestys.push Fixnum.from_json(_item)
                 else
                   @jarjestys.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @jarjestys = _oa
            end
          end
    end

    # constructs a LomakeTietokentta from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Planner

  # (no documentation provided)
  class InvalidAddresses 

    # (no documentation provided)
    attr_accessor :customers
    # (no documentation provided)
    attr_accessor :workers
    # (no documentation provided)
    attr_accessor :units

    # the json hash for this InvalidAddresses
    def to_jaxb_json_hash
      _h = {}
      _h['customers'] = customers.to_jaxb_json_hash unless customers.nil?
      _h['workers'] = workers.to_jaxb_json_hash unless workers.nil?
      _h['units'] = units.to_jaxb_json_hash unless units.nil?
      return _h
    end

    # the json (string form) for this InvalidAddresses
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this InvalidAddresses with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['customers'].nil?
          _oa = _o['customers']
            if(_oa.is_a? Hash)
              @customers = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @customers =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @customers = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @customers.push Hash.from_json(_item)
                 else
                   @customers.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @customers = _oa
            end
          end
        if !_o['workers'].nil?
          _oa = _o['workers']
            if(_oa.is_a? Hash)
              @workers = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @workers =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @workers = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @workers.push Hash.from_json(_item)
                 else
                   @workers.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @workers = _oa
            end
          end
        if !_o['units'].nil?
          _oa = _o['units']
            if(_oa.is_a? Hash)
              @units = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @units =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @units = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @units.push Hash.from_json(_item)
                 else
                   @units.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @units = _oa
            end
          end
    end

    # constructs a InvalidAddresses from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Rights

  # (no documentation provided)
  class CalendarDomainRightsAndSettings 

    # the name
    attr_accessor :name
    # the settings
    attr_accessor :setupForm
    # the patientList
    attr_accessor :patientList
    # (no documentation provided)
    attr_accessor :patientLists
    # (no documentation provided)
    attr_accessor :patientSearchAllowed
    # the workerLists
    attr_accessor :workerLists
    # (no documentation provided)
    attr_accessor :workerSearchAllowed
    # the calendarForm
    attr_accessor :calendarForm
    # the coursesForm
    attr_accessor :coursesForm
    # (no documentation provided)
    attr_accessor :coursesUsed
    # (no documentation provided)
    attr_accessor :courseSettings
    # the workers
    attr_accessor :workerSettingsForm
    # the optimization
    attr_accessor :optimization
    # (no documentation provided)
    attr_accessor :primaryNurseSettings
    # (no documentation provided)
    attr_accessor :viewTitle

    # the json hash for this CalendarDomainRightsAndSettings
    def to_jaxb_json_hash
      _h = {}
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['setupForm'] = setupForm.to_jaxb_json_hash unless setupForm.nil?
      _h['patientList'] = patientList.to_jaxb_json_hash unless patientList.nil?
      if !patientLists.nil?
        _ha = Array.new
        patientLists.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['patientLists'] = _ha
      end
      _h['patientSearchAllowed'] = patientSearchAllowed.to_jaxb_json_hash unless patientSearchAllowed.nil?
      if !workerLists.nil?
        _ha = Array.new
        workerLists.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['workerLists'] = _ha
      end
      _h['workerSearchAllowed'] = workerSearchAllowed.to_jaxb_json_hash unless workerSearchAllowed.nil?
      _h['calendarForm'] = calendarForm.to_jaxb_json_hash unless calendarForm.nil?
      _h['coursesForm'] = coursesForm.to_jaxb_json_hash unless coursesForm.nil?
      _h['coursesUsed'] = coursesUsed.to_jaxb_json_hash unless coursesUsed.nil?
      _h['courseSettings'] = courseSettings.to_jaxb_json_hash unless courseSettings.nil?
      _h['workerSettingsForm'] = workerSettingsForm.to_jaxb_json_hash unless workerSettingsForm.nil?
      _h['optimization'] = optimization.to_jaxb_json_hash unless optimization.nil?
      _h['primaryNurseSettings'] = primaryNurseSettings.to_jaxb_json_hash unless primaryNurseSettings.nil?
      _h['viewTitle'] = viewTitle.to_jaxb_json_hash unless viewTitle.nil?
      return _h
    end

    # the json (string form) for this CalendarDomainRightsAndSettings
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this CalendarDomainRightsAndSettings with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['setupForm'].nil?
          _oa = _o['setupForm']
            if(_oa.is_a? Hash)
              @setupForm = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @setupForm =  Fi::Mediconsult::Mediplan::Dto::Rights::FormRights.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @setupForm = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @setupForm.push Fi::Mediconsult::Mediplan::Dto::Rights::FormRights.from_json(_item)
                 else
                   @setupForm.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @setupForm = _oa
            end
          end
        if !_o['patientList'].nil?
          _oa = _o['patientList']
            if(_oa.is_a? Hash)
              @patientList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @patientList =  Fi::Mediconsult::Mediplan::Dto::Rights::FormRights.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @patientList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @patientList.push Fi::Mediconsult::Mediplan::Dto::Rights::FormRights.from_json(_item)
                 else
                   @patientList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @patientList = _oa
            end
          end
        if !_o['patientLists'].nil?
          _oa = _o['patientLists']
            if(_oa.is_a? Hash)
              @patientLists = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @patientLists =  Fi::Mediconsult::Mediplan::Dto::Rights::FormRights.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @patientLists = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @patientLists.push Fi::Mediconsult::Mediplan::Dto::Rights::FormRights.from_json(_item)
                 else
                   @patientLists.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @patientLists = _oa
            end
          end
        if !_o['patientSearchAllowed'].nil?
          _oa = _o['patientSearchAllowed']
            if(_oa.is_a? Hash)
              @patientSearchAllowed = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @patientSearchAllowed =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @patientSearchAllowed = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @patientSearchAllowed.push Boolean.from_json(_item)
                 else
                   @patientSearchAllowed.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @patientSearchAllowed = _oa
            end
          end
        if !_o['workerLists'].nil?
          _oa = _o['workerLists']
            if(_oa.is_a? Hash)
              @workerLists = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @workerLists =  Fi::Mediconsult::Mediplan::Dto::Rights::FormRights.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @workerLists = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @workerLists.push Fi::Mediconsult::Mediplan::Dto::Rights::FormRights.from_json(_item)
                 else
                   @workerLists.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @workerLists = _oa
            end
          end
        if !_o['workerSearchAllowed'].nil?
          _oa = _o['workerSearchAllowed']
            if(_oa.is_a? Hash)
              @workerSearchAllowed = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @workerSearchAllowed =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @workerSearchAllowed = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @workerSearchAllowed.push Boolean.from_json(_item)
                 else
                   @workerSearchAllowed.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @workerSearchAllowed = _oa
            end
          end
        if !_o['calendarForm'].nil?
          _oa = _o['calendarForm']
            if(_oa.is_a? Hash)
              @calendarForm = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @calendarForm =  Fi::Mediconsult::Mediplan::Dto::Rights::FormRights.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @calendarForm = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @calendarForm.push Fi::Mediconsult::Mediplan::Dto::Rights::FormRights.from_json(_item)
                 else
                   @calendarForm.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @calendarForm = _oa
            end
          end
        if !_o['coursesForm'].nil?
          _oa = _o['coursesForm']
            if(_oa.is_a? Hash)
              @coursesForm = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @coursesForm =  Fi::Mediconsult::Mediplan::Dto::Rights::FormRights.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @coursesForm = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @coursesForm.push Fi::Mediconsult::Mediplan::Dto::Rights::FormRights.from_json(_item)
                 else
                   @coursesForm.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @coursesForm = _oa
            end
          end
        if !_o['coursesUsed'].nil?
          _oa = _o['coursesUsed']
            if(_oa.is_a? Hash)
              @coursesUsed = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @coursesUsed =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @coursesUsed = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @coursesUsed.push Boolean.from_json(_item)
                 else
                   @coursesUsed.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @coursesUsed = _oa
            end
          end
        if !_o['courseSettings'].nil?
          _oa = _o['courseSettings']
            if(_oa.is_a? Hash)
              @courseSettings = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @courseSettings =  Fi::Mediconsult::Mediplan::Dto::Rights::CourseSettings.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @courseSettings = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @courseSettings.push Fi::Mediconsult::Mediplan::Dto::Rights::CourseSettings.from_json(_item)
                 else
                   @courseSettings.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @courseSettings = _oa
            end
          end
        if !_o['workerSettingsForm'].nil?
          _oa = _o['workerSettingsForm']
            if(_oa.is_a? Hash)
              @workerSettingsForm = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @workerSettingsForm =  Fi::Mediconsult::Mediplan::Dto::Rights::FormRights.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @workerSettingsForm = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @workerSettingsForm.push Fi::Mediconsult::Mediplan::Dto::Rights::FormRights.from_json(_item)
                 else
                   @workerSettingsForm.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @workerSettingsForm = _oa
            end
          end
        if !_o['optimization'].nil?
          _oa = _o['optimization']
            if(_oa.is_a? Hash)
              @optimization = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @optimization =  Fi::Mediconsult::Mediplan::Dto::Rights::OptimizationRightsAndSettings.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @optimization = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @optimization.push Fi::Mediconsult::Mediplan::Dto::Rights::OptimizationRightsAndSettings.from_json(_item)
                 else
                   @optimization.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @optimization = _oa
            end
          end
        if !_o['primaryNurseSettings'].nil?
          _oa = _o['primaryNurseSettings']
            if(_oa.is_a? Hash)
              @primaryNurseSettings = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @primaryNurseSettings =  Fi::Mediconsult::Mediplan::Dto::Rights::PrimaryNurseSettings.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @primaryNurseSettings = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @primaryNurseSettings.push Fi::Mediconsult::Mediplan::Dto::Rights::PrimaryNurseSettings.from_json(_item)
                 else
                   @primaryNurseSettings.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @primaryNurseSettings = _oa
            end
          end
        if !_o['viewTitle'].nil?
          _oa = _o['viewTitle']
            if(_oa.is_a? Hash)
              @viewTitle = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @viewTitle =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @viewTitle = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @viewTitle.push String.from_json(_item)
                 else
                   @viewTitle.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @viewTitle = _oa
            end
          end
    end

    # constructs a CalendarDomainRightsAndSettings from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Omistaja

  # (no documentation provided)
  class BasicInfo 

    # &lt;code&gt;true&lt;/code&gt; if basic information loaded, otherwise &lt;code&gt;false&lt;/code&gt;
    attr_accessor :dataLoaded
    # If #getDataLoaded() returns &lt;code&gt;false&lt;/code&gt;
    # then this method will return URL to fetch the missing data, otherwise &lt;code&gt;null&lt;/code&gt;.
    attr_accessor :href
    # basic info titles
    attr_accessor :titles

    # the json hash for this BasicInfo
    def to_jaxb_json_hash
      _h = {}
      _h['dataLoaded'] = dataLoaded.to_jaxb_json_hash unless dataLoaded.nil?
      _h['href'] = href.to_jaxb_json_hash unless href.nil?
      if !titles.nil?
        _ha = Array.new
        titles.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['titles'] = _ha
      end
      return _h
    end

    # the json (string form) for this BasicInfo
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this BasicInfo with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['dataLoaded'].nil?
          _oa = _o['dataLoaded']
            if(_oa.is_a? Hash)
              @dataLoaded = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @dataLoaded =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @dataLoaded = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @dataLoaded.push Boolean.from_json(_item)
                 else
                   @dataLoaded.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @dataLoaded = _oa
            end
          end
        if !_o['href'].nil?
          _oa = _o['href']
            if(_oa.is_a? Hash)
              @href = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @href =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @href = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @href.push String.from_json(_item)
                 else
                   @href.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @href = _oa
            end
          end
        if !_o['titles'].nil?
          _oa = _o['titles']
            if(_oa.is_a? Hash)
              @titles = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @titles =  Fi::Mediconsult::Core::Client::Dto::Title::TitleSettings.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @titles = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @titles.push Fi::Mediconsult::Core::Client::Dto::Title::TitleSettings.from_json(_item)
                 else
                   @titles.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @titles = _oa
            end
          end
    end

    # constructs a BasicInfo from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Java

module Security

  # (no documentation provided)
  class Timestamp 

    # (no documentation provided)
    attr_accessor :signerCertPath
    # (no documentation provided)
    attr_accessor :timestamp

    # the json hash for this Timestamp
    def to_jaxb_json_hash
      _h = {}
      _h['signerCertPath'] = signerCertPath.to_jaxb_json_hash unless signerCertPath.nil?
      _h['timestamp'] = timestamp.to_jaxb_json_hash unless timestamp.nil?
      return _h
    end

    # the json (string form) for this Timestamp
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Timestamp with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['signerCertPath'].nil?
          _oa = _o['signerCertPath']
            if(_oa.is_a? Hash)
              @signerCertPath = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @signerCertPath =  Java::Security::Cert::CertPath.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @signerCertPath = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @signerCertPath.push Java::Security::Cert::CertPath.from_json(_item)
                 else
                   @signerCertPath.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @signerCertPath = _oa
            end
          end
        if !_o['timestamp'].nil?
          _oa = _o['timestamp']
            if(_oa.is_a? Hash)
              @timestamp = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @timestamp =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @timestamp = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @timestamp.push Time.from_json(_item)
                 else
                   @timestamp.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @timestamp = _oa
            end
          end
    end

    # constructs a Timestamp from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

  # (no documentation provided)
  class PersonListByUnitAndFormOfPatient 

    # (no documentation provided)
    attr_accessor :unitId
    # (no documentation provided)
    attr_accessor :people
    # (no documentation provided)
    attr_accessor :listId

    # the json hash for this PersonListByUnitAndFormOfPatient
    def to_jaxb_json_hash
      _h = {}
      _h['unitId'] = unitId.to_jaxb_json_hash unless unitId.nil?
      if !people.nil?
        _ha = Array.new
        people.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['people'] = _ha
      end
      _h['listId'] = listId.to_jaxb_json_hash unless listId.nil?
      return _h
    end

    # the json (string form) for this PersonListByUnitAndFormOfPatient
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this PersonListByUnitAndFormOfPatient with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['unitId'].nil?
          _oa = _o['unitId']
            if(_oa.is_a? Hash)
              @unitId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @unitId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @unitId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @unitId.push Fixnum.from_json(_item)
                 else
                   @unitId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @unitId = _oa
            end
          end
        if !_o['people'].nil?
          _oa = _o['people']
            if(_oa.is_a? Hash)
              @people = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @people =  Fi::Mediconsult::Core::Client::Dto::Omistaja::Patient.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @people = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @people.push Fi::Mediconsult::Core::Client::Dto::Omistaja::Patient.from_json(_item)
                 else
                   @people.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @people = _oa
            end
          end
        if !_o['listId'].nil?
          _oa = _o['listId']
            if(_oa.is_a? Hash)
              @listId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @listId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @listId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @listId.push Fixnum.from_json(_item)
                 else
                   @listId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @listId = _oa
            end
          end
    end

    # constructs a PersonListByUnitAndFormOfPatient from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class FrameworkSettings 

    # (no documentation provided)
    attr_accessor :passivateBottomBar
    # (no documentation provided)
    attr_accessor :passivateUserMenu
    # (no documentation provided)
    attr_accessor :passivateResourceMenu
    # (no documentation provided)
    attr_accessor :passivateRiskRedirection
    # (no documentation provided)
    attr_accessor :passivateMainMenu
    # (no documentation provided)
    attr_accessor :preloadPatientDataForOffline

    # the json hash for this FrameworkSettings
    def to_jaxb_json_hash
      _h = {}
      _h['passivateBottomBar'] = passivateBottomBar.to_jaxb_json_hash unless passivateBottomBar.nil?
      _h['passivateUserMenu'] = passivateUserMenu.to_jaxb_json_hash unless passivateUserMenu.nil?
      _h['passivateResourceMenu'] = passivateResourceMenu.to_jaxb_json_hash unless passivateResourceMenu.nil?
      _h['passivateRiskRedirection'] = passivateRiskRedirection.to_jaxb_json_hash unless passivateRiskRedirection.nil?
      _h['passivateMainMenu'] = passivateMainMenu.to_jaxb_json_hash unless passivateMainMenu.nil?
      _h['preloadPatientDataForOffline'] = preloadPatientDataForOffline.to_jaxb_json_hash unless preloadPatientDataForOffline.nil?
      return _h
    end

    # the json (string form) for this FrameworkSettings
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this FrameworkSettings with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['passivateBottomBar'].nil?
          _oa = _o['passivateBottomBar']
            if(_oa.is_a? Hash)
              @passivateBottomBar = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @passivateBottomBar =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @passivateBottomBar = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @passivateBottomBar.push Boolean.from_json(_item)
                 else
                   @passivateBottomBar.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @passivateBottomBar = _oa
            end
          end
        if !_o['passivateUserMenu'].nil?
          _oa = _o['passivateUserMenu']
            if(_oa.is_a? Hash)
              @passivateUserMenu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @passivateUserMenu =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @passivateUserMenu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @passivateUserMenu.push Boolean.from_json(_item)
                 else
                   @passivateUserMenu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @passivateUserMenu = _oa
            end
          end
        if !_o['passivateResourceMenu'].nil?
          _oa = _o['passivateResourceMenu']
            if(_oa.is_a? Hash)
              @passivateResourceMenu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @passivateResourceMenu =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @passivateResourceMenu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @passivateResourceMenu.push Boolean.from_json(_item)
                 else
                   @passivateResourceMenu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @passivateResourceMenu = _oa
            end
          end
        if !_o['passivateRiskRedirection'].nil?
          _oa = _o['passivateRiskRedirection']
            if(_oa.is_a? Hash)
              @passivateRiskRedirection = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @passivateRiskRedirection =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @passivateRiskRedirection = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @passivateRiskRedirection.push Boolean.from_json(_item)
                 else
                   @passivateRiskRedirection.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @passivateRiskRedirection = _oa
            end
          end
        if !_o['passivateMainMenu'].nil?
          _oa = _o['passivateMainMenu']
            if(_oa.is_a? Hash)
              @passivateMainMenu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @passivateMainMenu =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @passivateMainMenu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @passivateMainMenu.push Boolean.from_json(_item)
                 else
                   @passivateMainMenu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @passivateMainMenu = _oa
            end
          end
        if !_o['preloadPatientDataForOffline'].nil?
          _oa = _o['preloadPatientDataForOffline']
            if(_oa.is_a? Hash)
              @preloadPatientDataForOffline = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @preloadPatientDataForOffline =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @preloadPatientDataForOffline = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @preloadPatientDataForOffline.push Boolean.from_json(_item)
                 else
                   @preloadPatientDataForOffline.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @preloadPatientDataForOffline = _oa
            end
          end
    end

    # constructs a FrameworkSettings from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Omistaja

module Lists

  # (no documentation provided)
  class OmistajaListDescription 

    # (no documentation provided)
    attr_accessor :formId
    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :numMembersPerOwner

    # the json hash for this OmistajaListDescription
    def to_jaxb_json_hash
      _h = {}
      _h['formId'] = formId.to_jaxb_json_hash unless formId.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      if !numMembersPerOwner.nil?
        _ha = Array.new
        numMembersPerOwner.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['numMembersPerOwner'] = _ha
      end
      return _h
    end

    # the json (string form) for this OmistajaListDescription
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this OmistajaListDescription with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['formId'].nil?
          _oa = _o['formId']
            if(_oa.is_a? Hash)
              @formId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @formId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @formId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @formId.push Fixnum.from_json(_item)
                 else
                   @formId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @formId = _oa
            end
          end
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['numMembersPerOwner'].nil?
          _oa = _o['numMembersPerOwner']
            if(_oa.is_a? Hash)
              @numMembersPerOwner = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @numMembersPerOwner =  Fi::Mediconsult::Core::Client::Dto::Omistaja::Lists::ListOwnerWithMemberCount.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @numMembersPerOwner = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @numMembersPerOwner.push Fi::Mediconsult::Core::Client::Dto::Omistaja::Lists::ListOwnerWithMemberCount.from_json(_item)
                 else
                   @numMembersPerOwner.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @numMembersPerOwner = _oa
            end
          end
    end

    # constructs a OmistajaListDescription from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class Unit 

    # (no documentation provided)
    attr_accessor :omistaja
    # (no documentation provided)
    attr_accessor :unitInfo
    # (no documentation provided)
    attr_accessor :oid
    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :streetAddress
    # (no documentation provided)
    attr_accessor :postCode
    # (no documentation provided)
    attr_accessor :postOffice
    # (no documentation provided)
    attr_accessor :phoneNumber

    # the json hash for this Unit
    def to_jaxb_json_hash
      _h = {}
      _h['omistaja'] = omistaja.to_jaxb_json_hash unless omistaja.nil?
      _h['unitInfo'] = unitInfo.to_jaxb_json_hash unless unitInfo.nil?
      _h['oid'] = oid.to_jaxb_json_hash unless oid.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['streetAddress'] = streetAddress.to_jaxb_json_hash unless streetAddress.nil?
      _h['postCode'] = postCode.to_jaxb_json_hash unless postCode.nil?
      _h['postOffice'] = postOffice.to_jaxb_json_hash unless postOffice.nil?
      _h['phoneNumber'] = phoneNumber.to_jaxb_json_hash unless phoneNumber.nil?
      return _h
    end

    # the json (string form) for this Unit
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Unit with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['omistaja'].nil?
          _oa = _o['omistaja']
            if(_oa.is_a? Hash)
              @omistaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @omistaja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @omistaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @omistaja.push Fixnum.from_json(_item)
                 else
                   @omistaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @omistaja = _oa
            end
          end
        if !_o['unitInfo'].nil?
          _oa = _o['unitInfo']
            if(_oa.is_a? Hash)
              @unitInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @unitInfo =  Fi::Mediconsult::Core::Client::Dto::OrganizationInfo.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @unitInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @unitInfo.push Fi::Mediconsult::Core::Client::Dto::OrganizationInfo.from_json(_item)
                 else
                   @unitInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @unitInfo = _oa
            end
          end
        if !_o['oid'].nil?
          _oa = _o['oid']
            if(_oa.is_a? Hash)
              @oid = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @oid =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @oid = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @oid.push String.from_json(_item)
                 else
                   @oid.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @oid = _oa
            end
          end
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['streetAddress'].nil?
          _oa = _o['streetAddress']
            if(_oa.is_a? Hash)
              @streetAddress = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @streetAddress =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @streetAddress = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @streetAddress.push String.from_json(_item)
                 else
                   @streetAddress.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @streetAddress = _oa
            end
          end
        if !_o['postCode'].nil?
          _oa = _o['postCode']
            if(_oa.is_a? Hash)
              @postCode = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @postCode =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @postCode = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @postCode.push String.from_json(_item)
                 else
                   @postCode.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @postCode = _oa
            end
          end
        if !_o['postOffice'].nil?
          _oa = _o['postOffice']
            if(_oa.is_a? Hash)
              @postOffice = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @postOffice =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @postOffice = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @postOffice.push String.from_json(_item)
                 else
                   @postOffice.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @postOffice = _oa
            end
          end
        if !_o['phoneNumber'].nil?
          _oa = _o['phoneNumber']
            if(_oa.is_a? Hash)
              @phoneNumber = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @phoneNumber =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @phoneNumber = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @phoneNumber.push String.from_json(_item)
                 else
                   @phoneNumber.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @phoneNumber = _oa
            end
          end
    end

    # constructs a Unit from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Team

  # (no documentation provided)
  class TeamBaseDto 

    # (no documentation provided)
    attr_accessor :id
    # (no documentation provided)
    attr_accessor :version

    # the json hash for this TeamBaseDto
    def to_jaxb_json_hash
      _h = {}
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['version'] = version.to_jaxb_json_hash unless version.nil?
      return _h
    end

    # the json (string form) for this TeamBaseDto
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this TeamBaseDto with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push Bignum.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
        if !_o['version'].nil?
          _oa = _o['version']
            if(_oa.is_a? Hash)
              @version = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @version =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @version = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @version.push Fixnum.from_json(_item)
                 else
                   @version.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @version = _oa
            end
          end
    end

    # constructs a TeamBaseDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class Laakityskategoria 

    # (no documentation provided)
    attr_accessor :displayName
    # (no documentation provided)
    attr_accessor :code
    # (no documentation provided)
    attr_accessor :laakityshistoriaList

    # the json hash for this Laakityskategoria
    def to_jaxb_json_hash
      _h = {}
      _h['displayName'] = displayName.to_jaxb_json_hash unless displayName.nil?
      _h['code'] = code.to_jaxb_json_hash unless code.nil?
      if !laakityshistoriaList.nil?
        _ha = Array.new
        laakityshistoriaList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['laakityshistoriaList'] = _ha
      end
      return _h
    end

    # the json (string form) for this Laakityskategoria
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Laakityskategoria with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['displayName'].nil?
          _oa = _o['displayName']
            if(_oa.is_a? Hash)
              @displayName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @displayName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @displayName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @displayName.push String.from_json(_item)
                 else
                   @displayName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @displayName = _oa
            end
          end
        if !_o['code'].nil?
          _oa = _o['code']
            if(_oa.is_a? Hash)
              @code = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @code =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @code = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @code.push String.from_json(_item)
                 else
                   @code.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @code = _oa
            end
          end
        if !_o['laakityshistoriaList'].nil?
          _oa = _o['laakityshistoriaList']
            if(_oa.is_a? Hash)
              @laakityshistoriaList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laakityshistoriaList =  Fi::Mediconsult::Core::Client::Dto::LaakitysHistoria.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laakityshistoriaList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laakityshistoriaList.push Fi::Mediconsult::Core::Client::Dto::LaakitysHistoria.from_json(_item)
                 else
                   @laakityshistoriaList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laakityshistoriaList = _oa
            end
          end
    end

    # constructs a Laakityskategoria from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Planner

  # (no documentation provided)
  class EventInfo 

    # (no documentation provided)
    attr_accessor :eventId
    # (no documentation provided)
    attr_accessor :fixedResponsibles

    # the json hash for this EventInfo
    def to_jaxb_json_hash
      _h = {}
      _h['eventId'] = eventId.to_jaxb_json_hash unless eventId.nil?
      if !fixedResponsibles.nil?
        _ha = Array.new
        fixedResponsibles.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['fixedResponsibles'] = _ha
      end
      return _h
    end

    # the json (string form) for this EventInfo
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this EventInfo with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['eventId'].nil?
          _oa = _o['eventId']
            if(_oa.is_a? Hash)
              @eventId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @eventId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @eventId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @eventId.push Bignum.from_json(_item)
                 else
                   @eventId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @eventId = _oa
            end
          end
        if !_o['fixedResponsibles'].nil?
          _oa = _o['fixedResponsibles']
            if(_oa.is_a? Hash)
              @fixedResponsibles = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @fixedResponsibles =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @fixedResponsibles = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @fixedResponsibles.push Bignum.from_json(_item)
                 else
                   @fixedResponsibles.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @fixedResponsibles = _oa
            end
          end
    end

    # constructs a EventInfo from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class LockInfo 

    # (no documentation provided)
    attr_accessor :lockingTimeStamp

    # the json hash for this LockInfo
    def to_jaxb_json_hash
      _h = {}
      _h['lockingTimeStamp'] = lockingTimeStamp.to_jaxb_json_hash unless lockingTimeStamp.nil?
      return _h
    end

    # the json (string form) for this LockInfo
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this LockInfo with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['lockingTimeStamp'].nil?
          _oa = _o['lockingTimeStamp']
            if(_oa.is_a? Hash)
              @lockingTimeStamp = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lockingTimeStamp =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lockingTimeStamp = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lockingTimeStamp.push String.from_json(_item)
                 else
                   @lockingTimeStamp.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lockingTimeStamp = _oa
            end
          end
    end

    # constructs a LockInfo from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Omistaja

  # (no documentation provided)
  class OwnerTypeInfo 

    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :id

    # the json hash for this OwnerTypeInfo
    def to_jaxb_json_hash
      _h = {}
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      return _h
    end

    # the json (string form) for this OwnerTypeInfo
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this OwnerTypeInfo with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push Fixnum.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
    end

    # constructs a OwnerTypeInfo from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Omistaja

  # (no documentation provided)
  class LazyLoadedDtoOfHoitojakso 

    # (no documentation provided)
    attr_accessor :type
    # (no documentation provided)
    attr_accessor :object
    # (no documentation provided)
    attr_accessor :loaded
    # (no documentation provided)
    attr_accessor :loadUrl

    # the json hash for this LazyLoadedDtoOfHoitojakso
    def to_jaxb_json_hash
      _h = {}
      _h['type'] = type.to_jaxb_json_hash unless type.nil?
      _h['object'] = object.to_jaxb_json_hash unless object.nil?
      _h['loaded'] = loaded.to_jaxb_json_hash unless loaded.nil?
      _h['loadUrl'] = loadUrl.to_jaxb_json_hash unless loadUrl.nil?
      return _h
    end

    # the json (string form) for this LazyLoadedDtoOfHoitojakso
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this LazyLoadedDtoOfHoitojakso with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['type'].nil?
          _oa = _o['type']
            if(_oa.is_a? Hash)
              @type = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @type =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @type = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @type.push String.from_json(_item)
                 else
                   @type.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @type = _oa
            end
          end
        if !_o['object'].nil?
          _oa = _o['object']
            if(_oa.is_a? Hash)
              @object = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @object =  Fi::Mediconsult::Core::Client::Dto::Hoitojakso.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @object = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @object.push Fi::Mediconsult::Core::Client::Dto::Hoitojakso.from_json(_item)
                 else
                   @object.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @object = _oa
            end
          end
        if !_o['loaded'].nil?
          _oa = _o['loaded']
            if(_oa.is_a? Hash)
              @loaded = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @loaded =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @loaded = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @loaded.push Boolean.from_json(_item)
                 else
                   @loaded.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @loaded = _oa
            end
          end
        if !_o['loadUrl'].nil?
          _oa = _o['loadUrl']
            if(_oa.is_a? Hash)
              @loadUrl = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @loadUrl =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @loadUrl = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @loadUrl.push String.from_json(_item)
                 else
                   @loadUrl.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @loadUrl = _oa
            end
          end
    end

    # constructs a LazyLoadedDtoOfHoitojakso from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Kanta

  # (no documentation provided)
  class DenialData 

    # (no documentation provided)
    attr_accessor :denialDocumentSetId
    # (no documentation provided)
    attr_accessor :printed
    # (no documentation provided)
    attr_accessor :nextVersionNumber
    # (no documentation provided)
    attr_accessor :lastSavedDenialDocumentTime
    # (no documentation provided)
    attr_accessor :signerLastName
    # (no documentation provided)
    attr_accessor :denialDocumentId
    # (no documentation provided)
    attr_accessor :patientNotAbleToSign
    # (no documentation provided)
    attr_accessor :documentSavedBy
    # (no documentation provided)
    attr_accessor :allowInCaseEmergency
    # (no documentation provided)
    attr_accessor :signerFirstName
    # (no documentation provided)
    attr_accessor :reasonNotAbleToSign
    # (no documentation provided)
    attr_accessor :versionNumber
    # (no documentation provided)
    attr_accessor :effectiveDenials

    # the json hash for this DenialData
    def to_jaxb_json_hash
      _h = {}
      _h['denialDocumentSetId'] = denialDocumentSetId.to_jaxb_json_hash unless denialDocumentSetId.nil?
      _h['printed'] = printed.to_jaxb_json_hash unless printed.nil?
      _h['nextVersionNumber'] = nextVersionNumber.to_jaxb_json_hash unless nextVersionNumber.nil?
      _h['lastSavedDenialDocumentTime'] = lastSavedDenialDocumentTime.to_jaxb_json_hash unless lastSavedDenialDocumentTime.nil?
      _h['signerLastName'] = signerLastName.to_jaxb_json_hash unless signerLastName.nil?
      _h['denialDocumentId'] = denialDocumentId.to_jaxb_json_hash unless denialDocumentId.nil?
      _h['patientNotAbleToSign'] = patientNotAbleToSign.to_jaxb_json_hash unless patientNotAbleToSign.nil?
      _h['documentSavedBy'] = documentSavedBy.to_jaxb_json_hash unless documentSavedBy.nil?
      _h['allowInCaseEmergency'] = allowInCaseEmergency.to_jaxb_json_hash unless allowInCaseEmergency.nil?
      _h['signerFirstName'] = signerFirstName.to_jaxb_json_hash unless signerFirstName.nil?
      _h['reasonNotAbleToSign'] = reasonNotAbleToSign.to_jaxb_json_hash unless reasonNotAbleToSign.nil?
      _h['versionNumber'] = versionNumber.to_jaxb_json_hash unless versionNumber.nil?
      _h['effectiveDenials'] = effectiveDenials.to_jaxb_json_hash unless effectiveDenials.nil?
      return _h
    end

    # the json (string form) for this DenialData
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this DenialData with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['denialDocumentSetId'].nil?
          _oa = _o['denialDocumentSetId']
            if(_oa.is_a? Hash)
              @denialDocumentSetId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @denialDocumentSetId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @denialDocumentSetId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @denialDocumentSetId.push String.from_json(_item)
                 else
                   @denialDocumentSetId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @denialDocumentSetId = _oa
            end
          end
        if !_o['printed'].nil?
          _oa = _o['printed']
            if(_oa.is_a? Hash)
              @printed = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @printed =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @printed = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @printed.push Time.from_json(_item)
                 else
                   @printed.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @printed = _oa
            end
          end
        if !_o['nextVersionNumber'].nil?
          _oa = _o['nextVersionNumber']
            if(_oa.is_a? Hash)
              @nextVersionNumber = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @nextVersionNumber =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @nextVersionNumber = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @nextVersionNumber.push Fixnum.from_json(_item)
                 else
                   @nextVersionNumber.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @nextVersionNumber = _oa
            end
          end
        if !_o['lastSavedDenialDocumentTime'].nil?
          _oa = _o['lastSavedDenialDocumentTime']
            if(_oa.is_a? Hash)
              @lastSavedDenialDocumentTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lastSavedDenialDocumentTime =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lastSavedDenialDocumentTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lastSavedDenialDocumentTime.push String.from_json(_item)
                 else
                   @lastSavedDenialDocumentTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lastSavedDenialDocumentTime = _oa
            end
          end
        if !_o['signerLastName'].nil?
          _oa = _o['signerLastName']
            if(_oa.is_a? Hash)
              @signerLastName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @signerLastName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @signerLastName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @signerLastName.push String.from_json(_item)
                 else
                   @signerLastName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @signerLastName = _oa
            end
          end
        if !_o['denialDocumentId'].nil?
          _oa = _o['denialDocumentId']
            if(_oa.is_a? Hash)
              @denialDocumentId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @denialDocumentId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @denialDocumentId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @denialDocumentId.push String.from_json(_item)
                 else
                   @denialDocumentId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @denialDocumentId = _oa
            end
          end
        if !_o['patientNotAbleToSign'].nil?
          _oa = _o['patientNotAbleToSign']
            if(_oa.is_a? Hash)
              @patientNotAbleToSign = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @patientNotAbleToSign =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @patientNotAbleToSign = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @patientNotAbleToSign.push Boolean.from_json(_item)
                 else
                   @patientNotAbleToSign.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @patientNotAbleToSign = _oa
            end
          end
        if !_o['documentSavedBy'].nil?
          _oa = _o['documentSavedBy']
            if(_oa.is_a? Hash)
              @documentSavedBy = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @documentSavedBy =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @documentSavedBy = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @documentSavedBy.push String.from_json(_item)
                 else
                   @documentSavedBy.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @documentSavedBy = _oa
            end
          end
        if !_o['allowInCaseEmergency'].nil?
          _oa = _o['allowInCaseEmergency']
            if(_oa.is_a? Hash)
              @allowInCaseEmergency = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @allowInCaseEmergency =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @allowInCaseEmergency = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @allowInCaseEmergency.push Boolean.from_json(_item)
                 else
                   @allowInCaseEmergency.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @allowInCaseEmergency = _oa
            end
          end
        if !_o['signerFirstName'].nil?
          _oa = _o['signerFirstName']
            if(_oa.is_a? Hash)
              @signerFirstName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @signerFirstName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @signerFirstName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @signerFirstName.push String.from_json(_item)
                 else
                   @signerFirstName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @signerFirstName = _oa
            end
          end
        if !_o['reasonNotAbleToSign'].nil?
          _oa = _o['reasonNotAbleToSign']
            if(_oa.is_a? Hash)
              @reasonNotAbleToSign = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @reasonNotAbleToSign =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @reasonNotAbleToSign = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @reasonNotAbleToSign.push String.from_json(_item)
                 else
                   @reasonNotAbleToSign.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @reasonNotAbleToSign = _oa
            end
          end
        if !_o['versionNumber'].nil?
          _oa = _o['versionNumber']
            if(_oa.is_a? Hash)
              @versionNumber = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @versionNumber =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @versionNumber = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @versionNumber.push Fixnum.from_json(_item)
                 else
                   @versionNumber.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @versionNumber = _oa
            end
          end
        if !_o['effectiveDenials'].nil?
          _oa = _o['effectiveDenials']
            if(_oa.is_a? Hash)
              @effectiveDenials = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @effectiveDenials =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @effectiveDenials = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @effectiveDenials.push Boolean.from_json(_item)
                 else
                   @effectiveDenials.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @effectiveDenials = _oa
            end
          end
    end

    # constructs a DenialData from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Java

module Util

  # (no documentation provided)
  class EntryOfStringAndString 

    # (no documentation provided)
    attr_accessor :key
    # (no documentation provided)
    attr_accessor :value

    # the json hash for this EntryOfStringAndString
    def to_jaxb_json_hash
      _h = {}
      _h['key'] = key.to_jaxb_json_hash unless key.nil?
      _h['value'] = value.to_jaxb_json_hash unless value.nil?
      return _h
    end

    # the json (string form) for this EntryOfStringAndString
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this EntryOfStringAndString with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['key'].nil?
          _oa = _o['key']
            if(_oa.is_a? Hash)
              @key = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @key =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @key = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @key.push String.from_json(_item)
                 else
                   @key.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @key = _oa
            end
          end
        if !_o['value'].nil?
          _oa = _o['value']
            if(_oa.is_a? Hash)
              @value = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @value =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @value = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @value.push String.from_json(_item)
                 else
                   @value.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @value = _oa
            end
          end
    end

    # constructs a EntryOfStringAndString from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class Hoitotyo 

    # (no documentation provided)
    attr_accessor :id
    # (no documentation provided)
    attr_accessor :patientId
    # (no documentation provided)
    attr_accessor :locked
    # (no documentation provided)
    attr_accessor :lukitsija
    # (no documentation provided)
    attr_accessor :vastuullinen
    # (no documentation provided)
    attr_accessor :muutosaika
    # (no documentation provided)
    attr_accessor :alkaa
    # (no documentation provided)
    attr_accessor :loppuu
    # (no documentation provided)
    attr_accessor :lastEntry
    # (no documentation provided)
    attr_accessor :firstEntry
    # (no documentation provided)
    attr_accessor :previousEntry
    # (no documentation provided)
    attr_accessor :asetukset
    # (no documentation provided)
    attr_accessor :nextEntry
    # (no documentation provided)
    attr_accessor :merkinnat
    # (no documentation provided)
    attr_accessor :previousVersion
    # (no documentation provided)
    attr_accessor :nextVersion
    # time of read which is of format &quot;yyyy-MM-ddTHH:mm:ss.SSS&quot;,
    # optionally complemented with time zone information.
    attr_accessor :readTime
    # (no documentation provided)
    attr_accessor :lockedDate
    # (no documentation provided)
    attr_accessor :unit

    # the json hash for this Hoitotyo
    def to_jaxb_json_hash
      _h = {}
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['patientId'] = patientId.to_jaxb_json_hash unless patientId.nil?
      _h['locked'] = locked.to_jaxb_json_hash unless locked.nil?
      _h['lukitsija'] = lukitsija.to_jaxb_json_hash unless lukitsija.nil?
      _h['vastuullinen'] = vastuullinen.to_jaxb_json_hash unless vastuullinen.nil?
      _h['muutosaika'] = muutosaika.to_jaxb_json_hash unless muutosaika.nil?
      _h['alkaa'] = alkaa.to_jaxb_json_hash unless alkaa.nil?
      _h['loppuu'] = loppuu.to_jaxb_json_hash unless loppuu.nil?
      _h['lastEntry'] = lastEntry.to_jaxb_json_hash unless lastEntry.nil?
      _h['firstEntry'] = firstEntry.to_jaxb_json_hash unless firstEntry.nil?
      _h['previousEntry'] = previousEntry.to_jaxb_json_hash unless previousEntry.nil?
      _h['asetukset'] = asetukset.to_jaxb_json_hash unless asetukset.nil?
      _h['nextEntry'] = nextEntry.to_jaxb_json_hash unless nextEntry.nil?
      if !merkinnat.nil?
        _ha = Array.new
        merkinnat.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['merkinnat'] = _ha
      end
      _h['previousVersion'] = previousVersion.to_jaxb_json_hash unless previousVersion.nil?
      _h['nextVersion'] = nextVersion.to_jaxb_json_hash unless nextVersion.nil?
      _h['readTime'] = readTime.to_jaxb_json_hash unless readTime.nil?
      _h['lockedDate'] = lockedDate.to_jaxb_json_hash unless lockedDate.nil?
      _h['unit'] = unit.to_jaxb_json_hash unless unit.nil?
      return _h
    end

    # the json (string form) for this Hoitotyo
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Hoitotyo with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push Fixnum.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
        if !_o['patientId'].nil?
          _oa = _o['patientId']
            if(_oa.is_a? Hash)
              @patientId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @patientId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @patientId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @patientId.push Fixnum.from_json(_item)
                 else
                   @patientId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @patientId = _oa
            end
          end
        if !_o['locked'].nil?
          _oa = _o['locked']
            if(_oa.is_a? Hash)
              @locked = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @locked =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @locked = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @locked.push Boolean.from_json(_item)
                 else
                   @locked.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @locked = _oa
            end
          end
        if !_o['lukitsija'].nil?
          _oa = _o['lukitsija']
            if(_oa.is_a? Hash)
              @lukitsija = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lukitsija =  Fi::Mediconsult::Core::Client::Dto::Omistaja::LazyLoadedDtoOfUser.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lukitsija = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lukitsija.push Fi::Mediconsult::Core::Client::Dto::Omistaja::LazyLoadedDtoOfUser.from_json(_item)
                 else
                   @lukitsija.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lukitsija = _oa
            end
          end
        if !_o['vastuullinen'].nil?
          _oa = _o['vastuullinen']
            if(_oa.is_a? Hash)
              @vastuullinen = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vastuullinen =  Fi::Mediconsult::Core::Client::Dto::Omistaja::LazyLoadedDtoOfUser.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vastuullinen = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vastuullinen.push Fi::Mediconsult::Core::Client::Dto::Omistaja::LazyLoadedDtoOfUser.from_json(_item)
                 else
                   @vastuullinen.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vastuullinen = _oa
            end
          end
        if !_o['muutosaika'].nil?
          _oa = _o['muutosaika']
            if(_oa.is_a? Hash)
              @muutosaika = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @muutosaika =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @muutosaika = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @muutosaika.push Time.from_json(_item)
                 else
                   @muutosaika.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @muutosaika = _oa
            end
          end
        if !_o['alkaa'].nil?
          _oa = _o['alkaa']
            if(_oa.is_a? Hash)
              @alkaa = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @alkaa =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @alkaa = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @alkaa.push Time.from_json(_item)
                 else
                   @alkaa.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @alkaa = _oa
            end
          end
        if !_o['loppuu'].nil?
          _oa = _o['loppuu']
            if(_oa.is_a? Hash)
              @loppuu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @loppuu =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @loppuu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @loppuu.push Time.from_json(_item)
                 else
                   @loppuu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @loppuu = _oa
            end
          end
        if !_o['lastEntry'].nil?
          _oa = _o['lastEntry']
            if(_oa.is_a? Hash)
              @lastEntry = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lastEntry =  Fi::Mediconsult::Core::Client::Dto::Omistaja::LazyLoadedDtoOfHoitotyo.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lastEntry = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lastEntry.push Fi::Mediconsult::Core::Client::Dto::Omistaja::LazyLoadedDtoOfHoitotyo.from_json(_item)
                 else
                   @lastEntry.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lastEntry = _oa
            end
          end
        if !_o['firstEntry'].nil?
          _oa = _o['firstEntry']
            if(_oa.is_a? Hash)
              @firstEntry = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @firstEntry =  Fi::Mediconsult::Core::Client::Dto::Omistaja::LazyLoadedDtoOfHoitotyo.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @firstEntry = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @firstEntry.push Fi::Mediconsult::Core::Client::Dto::Omistaja::LazyLoadedDtoOfHoitotyo.from_json(_item)
                 else
                   @firstEntry.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @firstEntry = _oa
            end
          end
        if !_o['previousEntry'].nil?
          _oa = _o['previousEntry']
            if(_oa.is_a? Hash)
              @previousEntry = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @previousEntry =  Fi::Mediconsult::Core::Client::Dto::Omistaja::LazyLoadedDtoOfHoitotyo.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @previousEntry = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @previousEntry.push Fi::Mediconsult::Core::Client::Dto::Omistaja::LazyLoadedDtoOfHoitotyo.from_json(_item)
                 else
                   @previousEntry.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @previousEntry = _oa
            end
          end
        if !_o['asetukset'].nil?
          _oa = _o['asetukset']
            if(_oa.is_a? Hash)
              @asetukset = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asetukset =  Fi::Mediconsult::Core::Client::Dto::Omistaja::LazyLoadedDtoOfHoitotyoasetukset.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asetukset = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asetukset.push Fi::Mediconsult::Core::Client::Dto::Omistaja::LazyLoadedDtoOfHoitotyoasetukset.from_json(_item)
                 else
                   @asetukset.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asetukset = _oa
            end
          end
        if !_o['nextEntry'].nil?
          _oa = _o['nextEntry']
            if(_oa.is_a? Hash)
              @nextEntry = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @nextEntry =  Fi::Mediconsult::Core::Client::Dto::Omistaja::LazyLoadedDtoOfHoitotyo.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @nextEntry = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @nextEntry.push Fi::Mediconsult::Core::Client::Dto::Omistaja::LazyLoadedDtoOfHoitotyo.from_json(_item)
                 else
                   @nextEntry.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @nextEntry = _oa
            end
          end
        if !_o['merkinnat'].nil?
          _oa = _o['merkinnat']
            if(_oa.is_a? Hash)
              @merkinnat = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @merkinnat =  Fi::Mediconsult::Core::Client::Dto::Hoitotyomerkinta.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @merkinnat = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @merkinnat.push Fi::Mediconsult::Core::Client::Dto::Hoitotyomerkinta.from_json(_item)
                 else
                   @merkinnat.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @merkinnat = _oa
            end
          end
        if !_o['previousVersion'].nil?
          _oa = _o['previousVersion']
            if(_oa.is_a? Hash)
              @previousVersion = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @previousVersion =  Fi::Mediconsult::Core::Client::Dto::Omistaja::LazyLoadedDtoOfHoitotyo.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @previousVersion = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @previousVersion.push Fi::Mediconsult::Core::Client::Dto::Omistaja::LazyLoadedDtoOfHoitotyo.from_json(_item)
                 else
                   @previousVersion.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @previousVersion = _oa
            end
          end
        if !_o['nextVersion'].nil?
          _oa = _o['nextVersion']
            if(_oa.is_a? Hash)
              @nextVersion = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @nextVersion =  Fi::Mediconsult::Core::Client::Dto::Omistaja::LazyLoadedDtoOfHoitotyo.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @nextVersion = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @nextVersion.push Fi::Mediconsult::Core::Client::Dto::Omistaja::LazyLoadedDtoOfHoitotyo.from_json(_item)
                 else
                   @nextVersion.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @nextVersion = _oa
            end
          end
        if !_o['readTime'].nil?
          _oa = _o['readTime']
            if(_oa.is_a? Hash)
              @readTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @readTime =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @readTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @readTime.push String.from_json(_item)
                 else
                   @readTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @readTime = _oa
            end
          end
        if !_o['lockedDate'].nil?
          _oa = _o['lockedDate']
            if(_oa.is_a? Hash)
              @lockedDate = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lockedDate =  java.time::LocalDate.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lockedDate = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lockedDate.push java.time::LocalDate.from_json(_item)
                 else
                   @lockedDate.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lockedDate = _oa
            end
          end
        if !_o['unit'].nil?
          _oa = _o['unit']
            if(_oa.is_a? Hash)
              @unit = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @unit =  Fi::Mediconsult::Core::Client::Dto::Omistaja::LazyLoadedDtoOfUnit.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @unit = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @unit.push Fi::Mediconsult::Core::Client::Dto::Omistaja::LazyLoadedDtoOfUnit.from_json(_item)
                 else
                   @unit.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @unit = _oa
            end
          end
    end

    # constructs a Hoitotyo from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class Hoitojakso 

    # (no documentation provided)
    attr_accessor :patientId
    # (no documentation provided)
    attr_accessor :osa
    # (no documentation provided)
    attr_accessor :alkoi
    # (no documentation provided)
    attr_accessor :loppui
    # (no documentation provided)
    attr_accessor :yksikko
    # (no documentation provided)
    attr_accessor :kustannuspaikka
    # (no documentation provided)
    attr_accessor :maksaja
    # (no documentation provided)
    attr_accessor :maksusopimus
    # (no documentation provided)
    attr_accessor :palveluala
    # (no documentation provided)
    attr_accessor :mistatuli
    # (no documentation provided)
    attr_accessor :jatkohoito
    # (no documentation provided)
    attr_accessor :ika
    # (no documentation provided)
    attr_accessor :eihoitoilmoitusta
    # (no documentation provided)
    attr_accessor :hoitojaksolinkki
    # (no documentation provided)
    attr_accessor :poistettu
    # (no documentation provided)
    attr_accessor :muutosoikeus
    # (no documentation provided)
    attr_accessor :projekti
    # (no documentation provided)
    attr_accessor :puutteellinen
    # (no documentation provided)
    attr_accessor :tiedot
    # (no documentation provided)
    attr_accessor :editTime
    # (no documentation provided)
    attr_accessor :muutospaikka
    # (no documentation provided)
    attr_accessor :rekisteri
    # (no documentation provided)
    attr_accessor :palveluntuottaja

    # the json hash for this Hoitojakso
    def to_jaxb_json_hash
      _h = {}
      _h['patientId'] = patientId.to_jaxb_json_hash unless patientId.nil?
      _h['osa'] = osa.to_jaxb_json_hash unless osa.nil?
      _h['alkoi'] = alkoi.to_jaxb_json_hash unless alkoi.nil?
      _h['loppui'] = loppui.to_jaxb_json_hash unless loppui.nil?
      _h['yksikko'] = yksikko.to_jaxb_json_hash unless yksikko.nil?
      _h['kustannuspaikka'] = kustannuspaikka.to_jaxb_json_hash unless kustannuspaikka.nil?
      _h['maksaja'] = maksaja.to_jaxb_json_hash unless maksaja.nil?
      _h['maksusopimus'] = maksusopimus.to_jaxb_json_hash unless maksusopimus.nil?
      _h['palveluala'] = palveluala.to_jaxb_json_hash unless palveluala.nil?
      _h['mistatuli'] = mistatuli.to_jaxb_json_hash unless mistatuli.nil?
      _h['jatkohoito'] = jatkohoito.to_jaxb_json_hash unless jatkohoito.nil?
      _h['ika'] = ika.to_jaxb_json_hash unless ika.nil?
      _h['eihoitoilmoitusta'] = eihoitoilmoitusta.to_jaxb_json_hash unless eihoitoilmoitusta.nil?
      _h['hoitojaksolinkki'] = hoitojaksolinkki.to_jaxb_json_hash unless hoitojaksolinkki.nil?
      _h['poistettu'] = poistettu.to_jaxb_json_hash unless poistettu.nil?
      _h['muutosoikeus'] = muutosoikeus.to_jaxb_json_hash unless muutosoikeus.nil?
      _h['projekti'] = projekti.to_jaxb_json_hash unless projekti.nil?
      _h['puutteellinen'] = puutteellinen.to_jaxb_json_hash unless puutteellinen.nil?
      if !tiedot.nil?
        _ha = Array.new
        tiedot.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['tiedot'] = _ha
      end
      _h['editTime'] = editTime.to_jaxb_json_hash unless editTime.nil?
      _h['muutospaikka'] = muutospaikka.to_jaxb_json_hash unless muutospaikka.nil?
      _h['rekisteri'] = rekisteri.to_jaxb_json_hash unless rekisteri.nil?
      _h['palveluntuottaja'] = palveluntuottaja.to_jaxb_json_hash unless palveluntuottaja.nil?
      return _h
    end

    # the json (string form) for this Hoitojakso
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Hoitojakso with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['patientId'].nil?
          _oa = _o['patientId']
            if(_oa.is_a? Hash)
              @patientId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @patientId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @patientId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @patientId.push Fixnum.from_json(_item)
                 else
                   @patientId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @patientId = _oa
            end
          end
        if !_o['osa'].nil?
          _oa = _o['osa']
            if(_oa.is_a? Hash)
              @osa = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @osa =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @osa = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @osa.push Fixnum.from_json(_item)
                 else
                   @osa.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @osa = _oa
            end
          end
        if !_o['alkoi'].nil?
          _oa = _o['alkoi']
            if(_oa.is_a? Hash)
              @alkoi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @alkoi =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @alkoi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @alkoi.push Time.from_json(_item)
                 else
                   @alkoi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @alkoi = _oa
            end
          end
        if !_o['loppui'].nil?
          _oa = _o['loppui']
            if(_oa.is_a? Hash)
              @loppui = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @loppui =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @loppui = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @loppui.push Time.from_json(_item)
                 else
                   @loppui.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @loppui = _oa
            end
          end
        if !_o['yksikko'].nil?
          _oa = _o['yksikko']
            if(_oa.is_a? Hash)
              @yksikko = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @yksikko =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @yksikko = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @yksikko.push Fixnum.from_json(_item)
                 else
                   @yksikko.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @yksikko = _oa
            end
          end
        if !_o['kustannuspaikka'].nil?
          _oa = _o['kustannuspaikka']
            if(_oa.is_a? Hash)
              @kustannuspaikka = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kustannuspaikka =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kustannuspaikka = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kustannuspaikka.push Fixnum.from_json(_item)
                 else
                   @kustannuspaikka.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kustannuspaikka = _oa
            end
          end
        if !_o['maksaja'].nil?
          _oa = _o['maksaja']
            if(_oa.is_a? Hash)
              @maksaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @maksaja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @maksaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @maksaja.push Fixnum.from_json(_item)
                 else
                   @maksaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @maksaja = _oa
            end
          end
        if !_o['maksusopimus'].nil?
          _oa = _o['maksusopimus']
            if(_oa.is_a? Hash)
              @maksusopimus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @maksusopimus =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @maksusopimus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @maksusopimus.push Fixnum.from_json(_item)
                 else
                   @maksusopimus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @maksusopimus = _oa
            end
          end
        if !_o['palveluala'].nil?
          _oa = _o['palveluala']
            if(_oa.is_a? Hash)
              @palveluala = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palveluala =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palveluala = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palveluala.push String.from_json(_item)
                 else
                   @palveluala.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palveluala = _oa
            end
          end
        if !_o['mistatuli'].nil?
          _oa = _o['mistatuli']
            if(_oa.is_a? Hash)
              @mistatuli = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @mistatuli =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @mistatuli = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @mistatuli.push String.from_json(_item)
                 else
                   @mistatuli.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @mistatuli = _oa
            end
          end
        if !_o['jatkohoito'].nil?
          _oa = _o['jatkohoito']
            if(_oa.is_a? Hash)
              @jatkohoito = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @jatkohoito =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @jatkohoito = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @jatkohoito.push String.from_json(_item)
                 else
                   @jatkohoito.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @jatkohoito = _oa
            end
          end
        if !_o['ika'].nil?
          _oa = _o['ika']
            if(_oa.is_a? Hash)
              @ika = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ika =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ika = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ika.push Fixnum.from_json(_item)
                 else
                   @ika.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ika = _oa
            end
          end
        if !_o['eihoitoilmoitusta'].nil?
          _oa = _o['eihoitoilmoitusta']
            if(_oa.is_a? Hash)
              @eihoitoilmoitusta = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @eihoitoilmoitusta =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @eihoitoilmoitusta = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @eihoitoilmoitusta.push Boolean.from_json(_item)
                 else
                   @eihoitoilmoitusta.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @eihoitoilmoitusta = _oa
            end
          end
        if !_o['hoitojaksolinkki'].nil?
          _oa = _o['hoitojaksolinkki']
            if(_oa.is_a? Hash)
              @hoitojaksolinkki = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @hoitojaksolinkki =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @hoitojaksolinkki = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @hoitojaksolinkki.push Fixnum.from_json(_item)
                 else
                   @hoitojaksolinkki.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @hoitojaksolinkki = _oa
            end
          end
        if !_o['poistettu'].nil?
          _oa = _o['poistettu']
            if(_oa.is_a? Hash)
              @poistettu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @poistettu =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @poistettu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @poistettu.push String.from_json(_item)
                 else
                   @poistettu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @poistettu = _oa
            end
          end
        if !_o['muutosoikeus'].nil?
          _oa = _o['muutosoikeus']
            if(_oa.is_a? Hash)
              @muutosoikeus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @muutosoikeus =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @muutosoikeus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @muutosoikeus.push Fixnum.from_json(_item)
                 else
                   @muutosoikeus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @muutosoikeus = _oa
            end
          end
        if !_o['projekti'].nil?
          _oa = _o['projekti']
            if(_oa.is_a? Hash)
              @projekti = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @projekti =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @projekti = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @projekti.push Fixnum.from_json(_item)
                 else
                   @projekti.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @projekti = _oa
            end
          end
        if !_o['puutteellinen'].nil?
          _oa = _o['puutteellinen']
            if(_oa.is_a? Hash)
              @puutteellinen = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @puutteellinen =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @puutteellinen = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @puutteellinen.push String.from_json(_item)
                 else
                   @puutteellinen.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @puutteellinen = _oa
            end
          end
        if !_o['tiedot'].nil?
          _oa = _o['tiedot']
            if(_oa.is_a? Hash)
              @tiedot = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tiedot =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tiedot = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tiedot.push String.from_json(_item)
                 else
                   @tiedot.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tiedot = _oa
            end
          end
        if !_o['editTime'].nil?
          _oa = _o['editTime']
            if(_oa.is_a? Hash)
              @editTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @editTime =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @editTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @editTime.push Bignum.from_json(_item)
                 else
                   @editTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @editTime = _oa
            end
          end
        if !_o['muutospaikka'].nil?
          _oa = _o['muutospaikka']
            if(_oa.is_a? Hash)
              @muutospaikka = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @muutospaikka =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @muutospaikka = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @muutospaikka.push Fixnum.from_json(_item)
                 else
                   @muutospaikka.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @muutospaikka = _oa
            end
          end
        if !_o['rekisteri'].nil?
          _oa = _o['rekisteri']
            if(_oa.is_a? Hash)
              @rekisteri = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rekisteri =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rekisteri = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rekisteri.push String.from_json(_item)
                 else
                   @rekisteri.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rekisteri = _oa
            end
          end
        if !_o['palveluntuottaja'].nil?
          _oa = _o['palveluntuottaja']
            if(_oa.is_a? Hash)
              @palveluntuottaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palveluntuottaja =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palveluntuottaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palveluntuottaja.push String.from_json(_item)
                 else
                   @palveluntuottaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palveluntuottaja = _oa
            end
          end
    end

    # constructs a Hoitojakso from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class Metadata 

    # (no documentation provided)
    attr_accessor :groupID
    # (no documentation provided)
    attr_accessor :groupName
    # (no documentation provided)
    attr_accessor :metadataID
    # (no documentation provided)
    attr_accessor :metadataName
    # (no documentation provided)
    attr_accessor :mandatory
    # (no documentation provided)
    attr_accessor :startDate
    # (no documentation provided)
    attr_accessor :endDate

    # the json hash for this Metadata
    def to_jaxb_json_hash
      _h = {}
      _h['groupID'] = groupID.to_jaxb_json_hash unless groupID.nil?
      _h['groupName'] = groupName.to_jaxb_json_hash unless groupName.nil?
      _h['metadataID'] = metadataID.to_jaxb_json_hash unless metadataID.nil?
      _h['metadataName'] = metadataName.to_jaxb_json_hash unless metadataName.nil?
      _h['mandatory'] = mandatory.to_jaxb_json_hash unless mandatory.nil?
      _h['startDate'] = startDate.to_jaxb_json_hash unless startDate.nil?
      _h['endDate'] = endDate.to_jaxb_json_hash unless endDate.nil?
      return _h
    end

    # the json (string form) for this Metadata
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Metadata with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['groupID'].nil?
          _oa = _o['groupID']
            if(_oa.is_a? Hash)
              @groupID = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @groupID =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @groupID = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @groupID.push Fixnum.from_json(_item)
                 else
                   @groupID.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @groupID = _oa
            end
          end
        if !_o['groupName'].nil?
          _oa = _o['groupName']
            if(_oa.is_a? Hash)
              @groupName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @groupName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @groupName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @groupName.push String.from_json(_item)
                 else
                   @groupName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @groupName = _oa
            end
          end
        if !_o['metadataID'].nil?
          _oa = _o['metadataID']
            if(_oa.is_a? Hash)
              @metadataID = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @metadataID =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @metadataID = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @metadataID.push Fixnum.from_json(_item)
                 else
                   @metadataID.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @metadataID = _oa
            end
          end
        if !_o['metadataName'].nil?
          _oa = _o['metadataName']
            if(_oa.is_a? Hash)
              @metadataName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @metadataName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @metadataName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @metadataName.push String.from_json(_item)
                 else
                   @metadataName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @metadataName = _oa
            end
          end
        if !_o['mandatory'].nil?
          _oa = _o['mandatory']
            if(_oa.is_a? Hash)
              @mandatory = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @mandatory =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @mandatory = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @mandatory.push Boolean.from_json(_item)
                 else
                   @mandatory.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @mandatory = _oa
            end
          end
        if !_o['startDate'].nil?
          _oa = _o['startDate']
            if(_oa.is_a? Hash)
              @startDate = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @startDate =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @startDate = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @startDate.push Time.from_json(_item)
                 else
                   @startDate.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @startDate = _oa
            end
          end
        if !_o['endDate'].nil?
          _oa = _o['endDate']
            if(_oa.is_a? Hash)
              @endDate = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @endDate =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @endDate = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @endDate.push Time.from_json(_item)
                 else
                   @endDate.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @endDate = _oa
            end
          end
    end

    # constructs a Metadata from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class AbstractDTO 


    # the json hash for this AbstractDTO
    def to_jaxb_json_hash
      _h = {}
      return _h
    end

    # the json (string form) for this AbstractDTO
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this AbstractDTO with a json hash
    def init_jaxb_json_hash(_o)
    end

    # constructs a AbstractDTO from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Omistaja

  # (no documentation provided)
  class SkillsInfo 

    # &lt;code&gt;true&lt;/code&gt; if basic information loaded, otherwise &lt;code&gt;false&lt;/code&gt;
    attr_accessor :dataLoaded
    # If #getDataLoaded() returns &lt;code&gt;false&lt;/code&gt;
    # then this method will return URL to fetch the missing data, otherwise &lt;code&gt;null&lt;/code&gt;.
    attr_accessor :href
    # all skills
    attr_accessor :skills

    # the json hash for this SkillsInfo
    def to_jaxb_json_hash
      _h = {}
      _h['dataLoaded'] = dataLoaded.to_jaxb_json_hash unless dataLoaded.nil?
      _h['href'] = href.to_jaxb_json_hash unless href.nil?
      if !skills.nil?
        _ha = Array.new
        skills.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['skills'] = _ha
      end
      return _h
    end

    # the json (string form) for this SkillsInfo
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this SkillsInfo with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['dataLoaded'].nil?
          _oa = _o['dataLoaded']
            if(_oa.is_a? Hash)
              @dataLoaded = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @dataLoaded =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @dataLoaded = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @dataLoaded.push Boolean.from_json(_item)
                 else
                   @dataLoaded.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @dataLoaded = _oa
            end
          end
        if !_o['href'].nil?
          _oa = _o['href']
            if(_oa.is_a? Hash)
              @href = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @href =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @href = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @href.push String.from_json(_item)
                 else
                   @href.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @href = _oa
            end
          end
        if !_o['skills'].nil?
          _oa = _o['skills']
            if(_oa.is_a? Hash)
              @skills = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @skills =  Fi::Mediconsult::Mediplan::Dto::Worker::SkillDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @skills = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @skills.push Fi::Mediconsult::Mediplan::Dto::Worker::SkillDto.from_json(_item)
                 else
                   @skills.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @skills = _oa
            end
          end
    end

    # constructs a SkillsInfo from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Rights

  # (no documentation provided)
  class FormRights 

    # the id
    attr_accessor :id
    # the name
    attr_accessor :name
    # the ownerId
    attr_accessor :ownerId
    # the rights
    attr_accessor :rights

    # the json hash for this FormRights
    def to_jaxb_json_hash
      _h = {}
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['ownerId'] = ownerId.to_jaxb_json_hash unless ownerId.nil?
      if !rights.nil?
        _ha = Array.new
        rights.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['rights'] = _ha
      end
      return _h
    end

    # the json (string form) for this FormRights
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this FormRights with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push Fixnum.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['ownerId'].nil?
          _oa = _o['ownerId']
            if(_oa.is_a? Hash)
              @ownerId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ownerId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ownerId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ownerId.push Fixnum.from_json(_item)
                 else
                   @ownerId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ownerId = _oa
            end
          end
        if !_o['rights'].nil?
          _oa = _o['rights']
            if(_oa.is_a? Hash)
              @rights = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rights =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rights = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rights.push String.from_json(_item)
                 else
                   @rights.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rights = _oa
            end
          end
    end

    # constructs a FormRights from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Event

  # (no documentation provided)
  class EventParticipantDto 

    # the id
    attr_accessor :id
    # (no documentation provided)
    attr_accessor :unit
    # (no documentation provided)
    attr_accessor :unitName
    # (no documentation provided)
    attr_accessor :unitAbbreviation
    # the name
    attr_accessor :name
    # the firstName
    attr_accessor :firstName
    # the lastName
    attr_accessor :lastName
    # the delay
    attr_accessor :delay
    # the duration
    attr_accessor :duration
    # the required
    attr_accessor :required
    # the canceled
    attr_accessor :canceled
    # the description
    attr_accessor :cancellationReason
    # the conflicting
    attr_accessor :conflicting
    # the overlapConflicts
    attr_accessor :overlapConflicts
    # the basicInfoTitles
    attr_accessor :basicInfoTitles
    # the participantId
    attr_accessor :participantId

    # the json hash for this EventParticipantDto
    def to_jaxb_json_hash
      _h = {}
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['unit'] = unit.to_jaxb_json_hash unless unit.nil?
      _h['unitName'] = unitName.to_jaxb_json_hash unless unitName.nil?
      _h['unitAbbreviation'] = unitAbbreviation.to_jaxb_json_hash unless unitAbbreviation.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['firstName'] = firstName.to_jaxb_json_hash unless firstName.nil?
      _h['lastName'] = lastName.to_jaxb_json_hash unless lastName.nil?
      _h['delay'] = delay.to_jaxb_json_hash unless delay.nil?
      _h['duration'] = duration.to_jaxb_json_hash unless duration.nil?
      _h['required'] = required.to_jaxb_json_hash unless required.nil?
      _h['canceled'] = canceled.to_jaxb_json_hash unless canceled.nil?
      _h['cancellationReason'] = cancellationReason.to_jaxb_json_hash unless cancellationReason.nil?
      _h['conflicting'] = conflicting.to_jaxb_json_hash unless conflicting.nil?
      if !overlapConflicts.nil?
        _ha = Array.new
        overlapConflicts.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['overlapConflicts'] = _ha
      end
      if !basicInfoTitles.nil?
        _ha = Array.new
        basicInfoTitles.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['basicInfoTitles'] = _ha
      end
      _h['participantId'] = participantId.to_jaxb_json_hash unless participantId.nil?
      return _h
    end

    # the json (string form) for this EventParticipantDto
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this EventParticipantDto with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push Fixnum.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
        if !_o['unit'].nil?
          _oa = _o['unit']
            if(_oa.is_a? Hash)
              @unit = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @unit =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @unit = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @unit.push Fixnum.from_json(_item)
                 else
                   @unit.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @unit = _oa
            end
          end
        if !_o['unitName'].nil?
          _oa = _o['unitName']
            if(_oa.is_a? Hash)
              @unitName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @unitName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @unitName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @unitName.push String.from_json(_item)
                 else
                   @unitName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @unitName = _oa
            end
          end
        if !_o['unitAbbreviation'].nil?
          _oa = _o['unitAbbreviation']
            if(_oa.is_a? Hash)
              @unitAbbreviation = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @unitAbbreviation =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @unitAbbreviation = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @unitAbbreviation.push String.from_json(_item)
                 else
                   @unitAbbreviation.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @unitAbbreviation = _oa
            end
          end
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['firstName'].nil?
          _oa = _o['firstName']
            if(_oa.is_a? Hash)
              @firstName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @firstName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @firstName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @firstName.push String.from_json(_item)
                 else
                   @firstName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @firstName = _oa
            end
          end
        if !_o['lastName'].nil?
          _oa = _o['lastName']
            if(_oa.is_a? Hash)
              @lastName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lastName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lastName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lastName.push String.from_json(_item)
                 else
                   @lastName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lastName = _oa
            end
          end
        if !_o['delay'].nil?
          _oa = _o['delay']
            if(_oa.is_a? Hash)
              @delay = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @delay =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @delay = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @delay.push Fixnum.from_json(_item)
                 else
                   @delay.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @delay = _oa
            end
          end
        if !_o['duration'].nil?
          _oa = _o['duration']
            if(_oa.is_a? Hash)
              @duration = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @duration =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @duration = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @duration.push Fixnum.from_json(_item)
                 else
                   @duration.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @duration = _oa
            end
          end
        if !_o['required'].nil?
          _oa = _o['required']
            if(_oa.is_a? Hash)
              @required = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @required =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @required = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @required.push Boolean.from_json(_item)
                 else
                   @required.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @required = _oa
            end
          end
        if !_o['canceled'].nil?
          _oa = _o['canceled']
            if(_oa.is_a? Hash)
              @canceled = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @canceled =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @canceled = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @canceled.push Boolean.from_json(_item)
                 else
                   @canceled.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @canceled = _oa
            end
          end
        if !_o['cancellationReason'].nil?
          _oa = _o['cancellationReason']
            if(_oa.is_a? Hash)
              @cancellationReason = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @cancellationReason =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @cancellationReason = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @cancellationReason.push String.from_json(_item)
                 else
                   @cancellationReason.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @cancellationReason = _oa
            end
          end
        if !_o['conflicting'].nil?
          _oa = _o['conflicting']
            if(_oa.is_a? Hash)
              @conflicting = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @conflicting =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @conflicting = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @conflicting.push Boolean.from_json(_item)
                 else
                   @conflicting.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @conflicting = _oa
            end
          end
        if !_o['overlapConflicts'].nil?
          _oa = _o['overlapConflicts']
            if(_oa.is_a? Hash)
              @overlapConflicts = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @overlapConflicts =  Fi::Mediconsult::Mediplan::Dto::Event::EventOverlapConflictDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @overlapConflicts = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @overlapConflicts.push Fi::Mediconsult::Mediplan::Dto::Event::EventOverlapConflictDto.from_json(_item)
                 else
                   @overlapConflicts.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @overlapConflicts = _oa
            end
          end
        if !_o['basicInfoTitles'].nil?
          _oa = _o['basicInfoTitles']
            if(_oa.is_a? Hash)
              @basicInfoTitles = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @basicInfoTitles =  Fi::Mediconsult::Core::Client::Dto::Title::TitleSettings.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @basicInfoTitles = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @basicInfoTitles.push Fi::Mediconsult::Core::Client::Dto::Title::TitleSettings.from_json(_item)
                 else
                   @basicInfoTitles.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @basicInfoTitles = _oa
            end
          end
        if !_o['participantId'].nil?
          _oa = _o['participantId']
            if(_oa.is_a? Hash)
              @participantId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @participantId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @participantId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @participantId.push Bignum.from_json(_item)
                 else
                   @participantId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @participantId = _oa
            end
          end
    end

    # constructs a EventParticipantDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Omistaja

module Lists

  # (no documentation provided)
  class ListOwnerWithMemberCount 

    # (no documentation provided)
    attr_accessor :listOwnerId
    # (no documentation provided)
    attr_accessor :numMembers

    # the json hash for this ListOwnerWithMemberCount
    def to_jaxb_json_hash
      _h = {}
      _h['listOwnerId'] = listOwnerId.to_jaxb_json_hash unless listOwnerId.nil?
      _h['numMembers'] = numMembers.to_jaxb_json_hash unless numMembers.nil?
      return _h
    end

    # the json (string form) for this ListOwnerWithMemberCount
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this ListOwnerWithMemberCount with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['listOwnerId'].nil?
          _oa = _o['listOwnerId']
            if(_oa.is_a? Hash)
              @listOwnerId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @listOwnerId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @listOwnerId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @listOwnerId.push Fixnum.from_json(_item)
                 else
                   @listOwnerId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @listOwnerId = _oa
            end
          end
        if !_o['numMembers'].nil?
          _oa = _o['numMembers']
            if(_oa.is_a? Hash)
              @numMembers = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @numMembers =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @numMembers = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @numMembers.push Fixnum.from_json(_item)
                 else
                   @numMembers.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @numMembers = _oa
            end
          end
    end

    # constructs a ListOwnerWithMemberCount from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class LaakitysHistoria 

    # the omistaja
    attr_accessor :omistaja
    # Maps to columns
    # &lt;ul&gt;
    # &lt;li&gt;LaakitysHistoriaPK#getOsa()
    # &lt;/ul&gt;
    attr_accessor :osa
    # Maps to columns
    # &lt;ul&gt;
    # &lt;li&gt;LaakeValmisteEntity#getNimi()
    # &lt;/ul&gt;
    attr_accessor :nimi
    # (no documentation provided)
    attr_accessor :annostus
    # (no documentation provided)
    attr_accessor :aloitusPvm
    # (no documentation provided)
    attr_accessor :lopetusPvm
    # (no documentation provided)
    attr_accessor :kokoNimi
    # (no documentation provided)
    attr_accessor :kertaAnnos
    # (no documentation provided)
    attr_accessor :toistokuvaus
    # (no documentation provided)
    attr_accessor :maaraaja
    # (no documentation provided)
    attr_accessor :kirjaaja
    # (no documentation provided)
    attr_accessor :huomautuksia
    # (no documentation provided)
    attr_accessor :ohjeet
    # (no documentation provided)
    attr_accessor :kellonajat
    # (no documentation provided)
    attr_accessor :annosteluteksti
    # (no documentation provided)
    attr_accessor :kayttotarkoitus
    # (no documentation provided)
    attr_accessor :aikayksikko
    # (no documentation provided)
    attr_accessor :antotahti
    # (no documentation provided)
    attr_accessor :laakeaineet
    # (no documentation provided)
    attr_accessor :kuitattava
    # (no documentation provided)
    attr_accessor :tauonAloitusPvm
    # (no documentation provided)
    attr_accessor :tauonLopetusPvm
    # (no documentation provided)
    attr_accessor :taukohuomautuksia
    # (no documentation provided)
    attr_accessor :reseptityyppi
    # (no documentation provided)
    attr_accessor :laakitysAntoList
    # (no documentation provided)
    attr_accessor :laakitysKayttoaiheList
    # the annettavaMaara
    attr_accessor :annettavaMaara
    # the annettavaMaksimi
    attr_accessor :annettavaMaksimi
    # the annettavaYksikko
    attr_accessor :annettavaYksikko
    # return Medicine VNR Code Maps to columns
    # &lt;ul&gt;
    # &lt;li&gt;LaakeValmisteEntity#getKoodi()
    # &lt;/ul&gt;
    attr_accessor :laake
    # the vrkmaara
    attr_accessor :vrkmaara
    # the vrkmaaraYksikko
    attr_accessor :vrkmaaraYksikko
    # (no documentation provided)
    attr_accessor :vaihtelevaAnnostus
    # (no documentation provided)
    attr_accessor :vaihteleva
    # (no documentation provided)
    attr_accessor :paino
    # (no documentation provided)
    attr_accessor :annettavaMaaraTimesPaino
    # (no documentation provided)
    attr_accessor :vrkkerratCalc
    # (no documentation provided)
    attr_accessor :vrkmaaraCalc
    # (no documentation provided)
    attr_accessor :tauolla
    # (no documentation provided)
    attr_accessor :pysyvyys
    # (no documentation provided)
    attr_accessor :laakitystapaList

    # the json hash for this LaakitysHistoria
    def to_jaxb_json_hash
      _h = {}
      _h['omistaja'] = omistaja.to_jaxb_json_hash unless omistaja.nil?
      _h['osa'] = osa.to_jaxb_json_hash unless osa.nil?
      _h['nimi'] = nimi.to_jaxb_json_hash unless nimi.nil?
      _h['annostus'] = annostus.to_jaxb_json_hash unless annostus.nil?
      _h['aloitusPvm'] = aloitusPvm.to_jaxb_json_hash unless aloitusPvm.nil?
      _h['lopetusPvm'] = lopetusPvm.to_jaxb_json_hash unless lopetusPvm.nil?
      _h['kokoNimi'] = kokoNimi.to_jaxb_json_hash unless kokoNimi.nil?
      _h['kertaAnnos'] = kertaAnnos.to_jaxb_json_hash unless kertaAnnos.nil?
      _h['toistokuvaus'] = toistokuvaus.to_jaxb_json_hash unless toistokuvaus.nil?
      _h['maaraaja'] = maaraaja.to_jaxb_json_hash unless maaraaja.nil?
      _h['kirjaaja'] = kirjaaja.to_jaxb_json_hash unless kirjaaja.nil?
      _h['huomautuksia'] = huomautuksia.to_jaxb_json_hash unless huomautuksia.nil?
      _h['ohjeet'] = ohjeet.to_jaxb_json_hash unless ohjeet.nil?
      _h['kellonajat'] = kellonajat.to_jaxb_json_hash unless kellonajat.nil?
      _h['annosteluteksti'] = annosteluteksti.to_jaxb_json_hash unless annosteluteksti.nil?
      _h['kayttotarkoitus'] = kayttotarkoitus.to_jaxb_json_hash unless kayttotarkoitus.nil?
      _h['aikayksikko'] = aikayksikko.to_jaxb_json_hash unless aikayksikko.nil?
      _h['antotahti'] = antotahti.to_jaxb_json_hash unless antotahti.nil?
      _h['laakeaineet'] = laakeaineet.to_jaxb_json_hash unless laakeaineet.nil?
      _h['kuitattava'] = kuitattava.to_jaxb_json_hash unless kuitattava.nil?
      _h['tauonAloitusPvm'] = tauonAloitusPvm.to_jaxb_json_hash unless tauonAloitusPvm.nil?
      _h['tauonLopetusPvm'] = tauonLopetusPvm.to_jaxb_json_hash unless tauonLopetusPvm.nil?
      _h['taukohuomautuksia'] = taukohuomautuksia.to_jaxb_json_hash unless taukohuomautuksia.nil?
      _h['reseptityyppi'] = reseptityyppi.to_jaxb_json_hash unless reseptityyppi.nil?
      if !laakitysAntoList.nil?
        _ha = Array.new
        laakitysAntoList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['laakitysAntoList'] = _ha
      end
      if !laakitysKayttoaiheList.nil?
        _ha = Array.new
        laakitysKayttoaiheList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['laakitysKayttoaiheList'] = _ha
      end
      _h['annettavaMaara'] = annettavaMaara.to_jaxb_json_hash unless annettavaMaara.nil?
      _h['annettavaMaksimi'] = annettavaMaksimi.to_jaxb_json_hash unless annettavaMaksimi.nil?
      _h['annettavaYksikko'] = annettavaYksikko.to_jaxb_json_hash unless annettavaYksikko.nil?
      _h['laake'] = laake.to_jaxb_json_hash unless laake.nil?
      _h['vrkmaara'] = vrkmaara.to_jaxb_json_hash unless vrkmaara.nil?
      _h['vrkmaaraYksikko'] = vrkmaaraYksikko.to_jaxb_json_hash unless vrkmaaraYksikko.nil?
      _h['vaihtelevaAnnostus'] = vaihtelevaAnnostus.to_jaxb_json_hash unless vaihtelevaAnnostus.nil?
      _h['vaihteleva'] = vaihteleva.to_jaxb_json_hash unless vaihteleva.nil?
      _h['paino'] = paino.to_jaxb_json_hash unless paino.nil?
      _h['annettavaMaaraTimesPaino'] = annettavaMaaraTimesPaino.to_jaxb_json_hash unless annettavaMaaraTimesPaino.nil?
      _h['vrkkerratCalc'] = vrkkerratCalc.to_jaxb_json_hash unless vrkkerratCalc.nil?
      _h['vrkmaaraCalc'] = vrkmaaraCalc.to_jaxb_json_hash unless vrkmaaraCalc.nil?
      _h['tauolla'] = tauolla.to_jaxb_json_hash unless tauolla.nil?
      _h['pysyvyys'] = pysyvyys.to_jaxb_json_hash unless pysyvyys.nil?
      if !laakitystapaList.nil?
        _ha = Array.new
        laakitystapaList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['laakitystapaList'] = _ha
      end
      return _h
    end

    # the json (string form) for this LaakitysHistoria
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this LaakitysHistoria with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['omistaja'].nil?
          _oa = _o['omistaja']
            if(_oa.is_a? Hash)
              @omistaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @omistaja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @omistaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @omistaja.push Fixnum.from_json(_item)
                 else
                   @omistaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @omistaja = _oa
            end
          end
        if !_o['osa'].nil?
          _oa = _o['osa']
            if(_oa.is_a? Hash)
              @osa = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @osa =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @osa = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @osa.push Fixnum.from_json(_item)
                 else
                   @osa.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @osa = _oa
            end
          end
        if !_o['nimi'].nil?
          _oa = _o['nimi']
            if(_oa.is_a? Hash)
              @nimi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @nimi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @nimi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @nimi.push String.from_json(_item)
                 else
                   @nimi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @nimi = _oa
            end
          end
        if !_o['annostus'].nil?
          _oa = _o['annostus']
            if(_oa.is_a? Hash)
              @annostus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @annostus =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @annostus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @annostus.push String.from_json(_item)
                 else
                   @annostus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @annostus = _oa
            end
          end
        if !_o['aloitusPvm'].nil?
          _oa = _o['aloitusPvm']
            if(_oa.is_a? Hash)
              @aloitusPvm = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @aloitusPvm =  java.time::LocalDate.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @aloitusPvm = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @aloitusPvm.push java.time::LocalDate.from_json(_item)
                 else
                   @aloitusPvm.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @aloitusPvm = _oa
            end
          end
        if !_o['lopetusPvm'].nil?
          _oa = _o['lopetusPvm']
            if(_oa.is_a? Hash)
              @lopetusPvm = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lopetusPvm =  java.time::LocalDate.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lopetusPvm = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lopetusPvm.push java.time::LocalDate.from_json(_item)
                 else
                   @lopetusPvm.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lopetusPvm = _oa
            end
          end
        if !_o['kokoNimi'].nil?
          _oa = _o['kokoNimi']
            if(_oa.is_a? Hash)
              @kokoNimi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kokoNimi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kokoNimi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kokoNimi.push String.from_json(_item)
                 else
                   @kokoNimi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kokoNimi = _oa
            end
          end
        if !_o['kertaAnnos'].nil?
          _oa = _o['kertaAnnos']
            if(_oa.is_a? Hash)
              @kertaAnnos = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kertaAnnos =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kertaAnnos = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kertaAnnos.push String.from_json(_item)
                 else
                   @kertaAnnos.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kertaAnnos = _oa
            end
          end
        if !_o['toistokuvaus'].nil?
          _oa = _o['toistokuvaus']
            if(_oa.is_a? Hash)
              @toistokuvaus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @toistokuvaus =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @toistokuvaus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @toistokuvaus.push String.from_json(_item)
                 else
                   @toistokuvaus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @toistokuvaus = _oa
            end
          end
        if !_o['maaraaja'].nil?
          _oa = _o['maaraaja']
            if(_oa.is_a? Hash)
              @maaraaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @maaraaja =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @maaraaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @maaraaja.push String.from_json(_item)
                 else
                   @maaraaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @maaraaja = _oa
            end
          end
        if !_o['kirjaaja'].nil?
          _oa = _o['kirjaaja']
            if(_oa.is_a? Hash)
              @kirjaaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kirjaaja =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kirjaaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kirjaaja.push String.from_json(_item)
                 else
                   @kirjaaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kirjaaja = _oa
            end
          end
        if !_o['huomautuksia'].nil?
          _oa = _o['huomautuksia']
            if(_oa.is_a? Hash)
              @huomautuksia = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @huomautuksia =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @huomautuksia = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @huomautuksia.push String.from_json(_item)
                 else
                   @huomautuksia.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @huomautuksia = _oa
            end
          end
        if !_o['ohjeet'].nil?
          _oa = _o['ohjeet']
            if(_oa.is_a? Hash)
              @ohjeet = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ohjeet =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ohjeet = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ohjeet.push String.from_json(_item)
                 else
                   @ohjeet.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ohjeet = _oa
            end
          end
        if !_o['kellonajat'].nil?
          _oa = _o['kellonajat']
            if(_oa.is_a? Hash)
              @kellonajat = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kellonajat =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kellonajat = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kellonajat.push String.from_json(_item)
                 else
                   @kellonajat.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kellonajat = _oa
            end
          end
        if !_o['annosteluteksti'].nil?
          _oa = _o['annosteluteksti']
            if(_oa.is_a? Hash)
              @annosteluteksti = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @annosteluteksti =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @annosteluteksti = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @annosteluteksti.push String.from_json(_item)
                 else
                   @annosteluteksti.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @annosteluteksti = _oa
            end
          end
        if !_o['kayttotarkoitus'].nil?
          _oa = _o['kayttotarkoitus']
            if(_oa.is_a? Hash)
              @kayttotarkoitus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kayttotarkoitus =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kayttotarkoitus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kayttotarkoitus.push String.from_json(_item)
                 else
                   @kayttotarkoitus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kayttotarkoitus = _oa
            end
          end
        if !_o['aikayksikko'].nil?
          _oa = _o['aikayksikko']
            if(_oa.is_a? Hash)
              @aikayksikko = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @aikayksikko =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @aikayksikko = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @aikayksikko.push String.from_json(_item)
                 else
                   @aikayksikko.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @aikayksikko = _oa
            end
          end
        if !_o['antotahti'].nil?
          _oa = _o['antotahti']
            if(_oa.is_a? Hash)
              @antotahti = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @antotahti =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @antotahti = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @antotahti.push String.from_json(_item)
                 else
                   @antotahti.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @antotahti = _oa
            end
          end
        if !_o['laakeaineet'].nil?
          _oa = _o['laakeaineet']
            if(_oa.is_a? Hash)
              @laakeaineet = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laakeaineet =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laakeaineet = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laakeaineet.push String.from_json(_item)
                 else
                   @laakeaineet.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laakeaineet = _oa
            end
          end
        if !_o['kuitattava'].nil?
          _oa = _o['kuitattava']
            if(_oa.is_a? Hash)
              @kuitattava = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kuitattava =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kuitattava = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kuitattava.push String.from_json(_item)
                 else
                   @kuitattava.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kuitattava = _oa
            end
          end
        if !_o['tauonAloitusPvm'].nil?
          _oa = _o['tauonAloitusPvm']
            if(_oa.is_a? Hash)
              @tauonAloitusPvm = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tauonAloitusPvm =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tauonAloitusPvm = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tauonAloitusPvm.push Bignum.from_json(_item)
                 else
                   @tauonAloitusPvm.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tauonAloitusPvm = _oa
            end
          end
        if !_o['tauonLopetusPvm'].nil?
          _oa = _o['tauonLopetusPvm']
            if(_oa.is_a? Hash)
              @tauonLopetusPvm = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tauonLopetusPvm =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tauonLopetusPvm = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tauonLopetusPvm.push Bignum.from_json(_item)
                 else
                   @tauonLopetusPvm.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tauonLopetusPvm = _oa
            end
          end
        if !_o['taukohuomautuksia'].nil?
          _oa = _o['taukohuomautuksia']
            if(_oa.is_a? Hash)
              @taukohuomautuksia = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @taukohuomautuksia =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @taukohuomautuksia = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @taukohuomautuksia.push String.from_json(_item)
                 else
                   @taukohuomautuksia.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @taukohuomautuksia = _oa
            end
          end
        if !_o['reseptityyppi'].nil?
          _oa = _o['reseptityyppi']
            if(_oa.is_a? Hash)
              @reseptityyppi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @reseptityyppi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @reseptityyppi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @reseptityyppi.push String.from_json(_item)
                 else
                   @reseptityyppi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @reseptityyppi = _oa
            end
          end
        if !_o['laakitysAntoList'].nil?
          _oa = _o['laakitysAntoList']
            if(_oa.is_a? Hash)
              @laakitysAntoList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laakitysAntoList =  Fi::Mediconsult::Core::Client::Dto::LaakitysAnto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laakitysAntoList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laakitysAntoList.push Fi::Mediconsult::Core::Client::Dto::LaakitysAnto.from_json(_item)
                 else
                   @laakitysAntoList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laakitysAntoList = _oa
            end
          end
        if !_o['laakitysKayttoaiheList'].nil?
          _oa = _o['laakitysKayttoaiheList']
            if(_oa.is_a? Hash)
              @laakitysKayttoaiheList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laakitysKayttoaiheList =  Fi::Mediconsult::Core::Client::Dto::KayttoaiheView.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laakitysKayttoaiheList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laakitysKayttoaiheList.push Fi::Mediconsult::Core::Client::Dto::KayttoaiheView.from_json(_item)
                 else
                   @laakitysKayttoaiheList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laakitysKayttoaiheList = _oa
            end
          end
        if !_o['annettavaMaara'].nil?
          _oa = _o['annettavaMaara']
            if(_oa.is_a? Hash)
              @annettavaMaara = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @annettavaMaara =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @annettavaMaara = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @annettavaMaara.push Float.from_json(_item)
                 else
                   @annettavaMaara.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @annettavaMaara = _oa
            end
          end
        if !_o['annettavaMaksimi'].nil?
          _oa = _o['annettavaMaksimi']
            if(_oa.is_a? Hash)
              @annettavaMaksimi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @annettavaMaksimi =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @annettavaMaksimi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @annettavaMaksimi.push Float.from_json(_item)
                 else
                   @annettavaMaksimi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @annettavaMaksimi = _oa
            end
          end
        if !_o['annettavaYksikko'].nil?
          _oa = _o['annettavaYksikko']
            if(_oa.is_a? Hash)
              @annettavaYksikko = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @annettavaYksikko =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @annettavaYksikko = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @annettavaYksikko.push String.from_json(_item)
                 else
                   @annettavaYksikko.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @annettavaYksikko = _oa
            end
          end
        if !_o['laake'].nil?
          _oa = _o['laake']
            if(_oa.is_a? Hash)
              @laake = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laake =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laake = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laake.push String.from_json(_item)
                 else
                   @laake.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laake = _oa
            end
          end
        if !_o['vrkmaara'].nil?
          _oa = _o['vrkmaara']
            if(_oa.is_a? Hash)
              @vrkmaara = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vrkmaara =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vrkmaara = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vrkmaara.push Float.from_json(_item)
                 else
                   @vrkmaara.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vrkmaara = _oa
            end
          end
        if !_o['vrkmaaraYksikko'].nil?
          _oa = _o['vrkmaaraYksikko']
            if(_oa.is_a? Hash)
              @vrkmaaraYksikko = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vrkmaaraYksikko =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vrkmaaraYksikko = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vrkmaaraYksikko.push String.from_json(_item)
                 else
                   @vrkmaaraYksikko.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vrkmaaraYksikko = _oa
            end
          end
        if !_o['vaihtelevaAnnostus'].nil?
          _oa = _o['vaihtelevaAnnostus']
            if(_oa.is_a? Hash)
              @vaihtelevaAnnostus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vaihtelevaAnnostus =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vaihtelevaAnnostus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vaihtelevaAnnostus.push String.from_json(_item)
                 else
                   @vaihtelevaAnnostus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vaihtelevaAnnostus = _oa
            end
          end
        if !_o['vaihteleva'].nil?
          _oa = _o['vaihteleva']
            if(_oa.is_a? Hash)
              @vaihteleva = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vaihteleva =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vaihteleva = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vaihteleva.push Boolean.from_json(_item)
                 else
                   @vaihteleva.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vaihteleva = _oa
            end
          end
        if !_o['paino'].nil?
          _oa = _o['paino']
            if(_oa.is_a? Hash)
              @paino = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @paino =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @paino = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @paino.push Float.from_json(_item)
                 else
                   @paino.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @paino = _oa
            end
          end
        if !_o['annettavaMaaraTimesPaino'].nil?
          _oa = _o['annettavaMaaraTimesPaino']
            if(_oa.is_a? Hash)
              @annettavaMaaraTimesPaino = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @annettavaMaaraTimesPaino =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @annettavaMaaraTimesPaino = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @annettavaMaaraTimesPaino.push Float.from_json(_item)
                 else
                   @annettavaMaaraTimesPaino.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @annettavaMaaraTimesPaino = _oa
            end
          end
        if !_o['vrkkerratCalc'].nil?
          _oa = _o['vrkkerratCalc']
            if(_oa.is_a? Hash)
              @vrkkerratCalc = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vrkkerratCalc =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vrkkerratCalc = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vrkkerratCalc.push Fixnum.from_json(_item)
                 else
                   @vrkkerratCalc.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vrkkerratCalc = _oa
            end
          end
        if !_o['vrkmaaraCalc'].nil?
          _oa = _o['vrkmaaraCalc']
            if(_oa.is_a? Hash)
              @vrkmaaraCalc = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vrkmaaraCalc =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vrkmaaraCalc = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vrkmaaraCalc.push Float.from_json(_item)
                 else
                   @vrkmaaraCalc.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vrkmaaraCalc = _oa
            end
          end
        if !_o['tauolla'].nil?
          _oa = _o['tauolla']
            if(_oa.is_a? Hash)
              @tauolla = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tauolla =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tauolla = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tauolla.push Boolean.from_json(_item)
                 else
                   @tauolla.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tauolla = _oa
            end
          end
        if !_o['pysyvyys'].nil?
          _oa = _o['pysyvyys']
            if(_oa.is_a? Hash)
              @pysyvyys = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @pysyvyys =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @pysyvyys = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @pysyvyys.push String.from_json(_item)
                 else
                   @pysyvyys.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @pysyvyys = _oa
            end
          end
        if !_o['laakitystapaList'].nil?
          _oa = _o['laakitystapaList']
            if(_oa.is_a? Hash)
              @laakitystapaList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laakitystapaList =  Fi::Mediconsult::Core::Client::Dto::Laakitys::LaakitysTapa.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laakitystapaList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laakitystapaList.push Fi::Mediconsult::Core::Client::Dto::Laakitys::LaakitysTapa.from_json(_item)
                 else
                   @laakitystapaList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laakitystapaList = _oa
            end
          end
    end

    # constructs a LaakitysHistoria from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Omistaja

  # (no documentation provided)
  class LazyLoadedDtoOfHoitotyoasetukset 

    # (no documentation provided)
    attr_accessor :type
    # (no documentation provided)
    attr_accessor :object
    # (no documentation provided)
    attr_accessor :loadUrl
    # (no documentation provided)
    attr_accessor :loaded

    # the json hash for this LazyLoadedDtoOfHoitotyoasetukset
    def to_jaxb_json_hash
      _h = {}
      _h['type'] = type.to_jaxb_json_hash unless type.nil?
      _h['object'] = object.to_jaxb_json_hash unless object.nil?
      _h['loadUrl'] = loadUrl.to_jaxb_json_hash unless loadUrl.nil?
      _h['loaded'] = loaded.to_jaxb_json_hash unless loaded.nil?
      return _h
    end

    # the json (string form) for this LazyLoadedDtoOfHoitotyoasetukset
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this LazyLoadedDtoOfHoitotyoasetukset with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['type'].nil?
          _oa = _o['type']
            if(_oa.is_a? Hash)
              @type = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @type =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @type = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @type.push String.from_json(_item)
                 else
                   @type.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @type = _oa
            end
          end
        if !_o['object'].nil?
          _oa = _o['object']
            if(_oa.is_a? Hash)
              @object = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @object =  Fi::Mediconsult::Core::Client::Dto::Hoitotyoasetukset.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @object = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @object.push Fi::Mediconsult::Core::Client::Dto::Hoitotyoasetukset.from_json(_item)
                 else
                   @object.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @object = _oa
            end
          end
        if !_o['loadUrl'].nil?
          _oa = _o['loadUrl']
            if(_oa.is_a? Hash)
              @loadUrl = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @loadUrl =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @loadUrl = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @loadUrl.push String.from_json(_item)
                 else
                   @loadUrl.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @loadUrl = _oa
            end
          end
        if !_o['loaded'].nil?
          _oa = _o['loaded']
            if(_oa.is_a? Hash)
              @loaded = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @loaded =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @loaded = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @loaded.push Boolean.from_json(_item)
                 else
                   @loaded.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @loaded = _oa
            end
          end
    end

    # constructs a LazyLoadedDtoOfHoitotyoasetukset from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Omistaja

  # (no documentation provided)
  class LazyLoadedDtoOfUnit 

    # (no documentation provided)
    attr_accessor :loadUrl
    # (no documentation provided)
    attr_accessor :object
    # (no documentation provided)
    attr_accessor :loaded
    # (no documentation provided)
    attr_accessor :type

    # the json hash for this LazyLoadedDtoOfUnit
    def to_jaxb_json_hash
      _h = {}
      _h['loadUrl'] = loadUrl.to_jaxb_json_hash unless loadUrl.nil?
      _h['object'] = object.to_jaxb_json_hash unless object.nil?
      _h['loaded'] = loaded.to_jaxb_json_hash unless loaded.nil?
      _h['type'] = type.to_jaxb_json_hash unless type.nil?
      return _h
    end

    # the json (string form) for this LazyLoadedDtoOfUnit
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this LazyLoadedDtoOfUnit with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['loadUrl'].nil?
          _oa = _o['loadUrl']
            if(_oa.is_a? Hash)
              @loadUrl = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @loadUrl =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @loadUrl = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @loadUrl.push String.from_json(_item)
                 else
                   @loadUrl.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @loadUrl = _oa
            end
          end
        if !_o['object'].nil?
          _oa = _o['object']
            if(_oa.is_a? Hash)
              @object = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @object =  Fi::Mediconsult::Core::Client::Dto::Omistaja::Unit.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @object = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @object.push Fi::Mediconsult::Core::Client::Dto::Omistaja::Unit.from_json(_item)
                 else
                   @object.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @object = _oa
            end
          end
        if !_o['loaded'].nil?
          _oa = _o['loaded']
            if(_oa.is_a? Hash)
              @loaded = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @loaded =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @loaded = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @loaded.push Boolean.from_json(_item)
                 else
                   @loaded.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @loaded = _oa
            end
          end
        if !_o['type'].nil?
          _oa = _o['type']
            if(_oa.is_a? Hash)
              @type = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @type =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @type = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @type.push String.from_json(_item)
                 else
                   @type.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @type = _oa
            end
          end
    end

    # constructs a LazyLoadedDtoOfUnit from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Omistaja

  # (no documentation provided)
  class TimeInterval 

    # (no documentation provided)
    attr_accessor :startTime
    # (no documentation provided)
    attr_accessor :endTime

    # the json hash for this TimeInterval
    def to_jaxb_json_hash
      _h = {}
      _h['startTime'] = startTime.to_jaxb_json_hash unless startTime.nil?
      _h['endTime'] = endTime.to_jaxb_json_hash unless endTime.nil?
      return _h
    end

    # the json (string form) for this TimeInterval
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this TimeInterval with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['startTime'].nil?
          _oa = _o['startTime']
            if(_oa.is_a? Hash)
              @startTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @startTime =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @startTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @startTime.push Time.from_json(_item)
                 else
                   @startTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @startTime = _oa
            end
          end
        if !_o['endTime'].nil?
          _oa = _o['endTime']
            if(_oa.is_a? Hash)
              @endTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @endTime =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @endTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @endTime.push Time.from_json(_item)
                 else
                   @endTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @endTime = _oa
            end
          end
    end

    # constructs a TimeInterval from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Medisos

module Dto

  # (no documentation provided)
  class DeleteStatusDto 

    # (no documentation provided)
    attr_accessor :successStatus
    # (no documentation provided)
    attr_accessor :message

    # the json hash for this DeleteStatusDto
    def to_jaxb_json_hash
      _h = {}
      _h['successStatus'] = successStatus.to_jaxb_json_hash unless successStatus.nil?
      _h['message'] = message.to_jaxb_json_hash unless message.nil?
      return _h
    end

    # the json (string form) for this DeleteStatusDto
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this DeleteStatusDto with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['successStatus'].nil?
          _oa = _o['successStatus']
            if(_oa.is_a? Hash)
              @successStatus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @successStatus =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @successStatus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @successStatus.push Boolean.from_json(_item)
                 else
                   @successStatus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @successStatus = _oa
            end
          end
        if !_o['message'].nil?
          _oa = _o['message']
            if(_oa.is_a? Hash)
              @message = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @message =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @message = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @message.push String.from_json(_item)
                 else
                   @message.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @message = _oa
            end
          end
    end

    # constructs a DeleteStatusDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class Riskitiedot 

    # (no documentation provided)
    attr_accessor :riskitiedotList
    # (no documentation provided)
    attr_accessor :permissionDTO
    # (no documentation provided)
    attr_accessor :omistaja

    # the json hash for this Riskitiedot
    def to_jaxb_json_hash
      _h = {}
      if !riskitiedotList.nil?
        _ha = Array.new
        riskitiedotList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['riskitiedotList'] = _ha
      end
      _h['permissionDTO'] = permissionDTO.to_jaxb_json_hash unless permissionDTO.nil?
      _h['omistaja'] = omistaja.to_jaxb_json_hash unless omistaja.nil?
      return _h
    end

    # the json (string form) for this Riskitiedot
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Riskitiedot with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['riskitiedotList'].nil?
          _oa = _o['riskitiedotList']
            if(_oa.is_a? Hash)
              @riskitiedotList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @riskitiedotList =  Fi::Mediconsult::Core::Client::Dto::Riskitieto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @riskitiedotList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @riskitiedotList.push Fi::Mediconsult::Core::Client::Dto::Riskitieto.from_json(_item)
                 else
                   @riskitiedotList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @riskitiedotList = _oa
            end
          end
        if !_o['permissionDTO'].nil?
          _oa = _o['permissionDTO']
            if(_oa.is_a? Hash)
              @permissionDTO = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @permissionDTO =  Fi::Mediconsult::Core::Client::Dto::Permission.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @permissionDTO = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @permissionDTO.push Fi::Mediconsult::Core::Client::Dto::Permission.from_json(_item)
                 else
                   @permissionDTO.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @permissionDTO = _oa
            end
          end
        if !_o['omistaja'].nil?
          _oa = _o['omistaja']
            if(_oa.is_a? Hash)
              @omistaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @omistaja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @omistaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @omistaja.push Fixnum.from_json(_item)
                 else
                   @omistaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @omistaja = _oa
            end
          end
    end

    # constructs a Riskitiedot from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Kertomus

  # (no documentation provided)
  class MittausFormConfig 

    # (no documentation provided)
    attr_accessor :mainTitles
    # (no documentation provided)
    attr_accessor :kayttajaRyhmaId
    # (no documentation provided)
    attr_accessor :editable
    # (no documentation provided)
    attr_accessor :permission

    # the json hash for this MittausFormConfig
    def to_jaxb_json_hash
      _h = {}
      _h['mainTitles'] = mainTitles.to_jaxb_json_hash unless mainTitles.nil?
      _h['kayttajaRyhmaId'] = kayttajaRyhmaId.to_jaxb_json_hash unless kayttajaRyhmaId.nil?
      _h['editable'] = editable.to_jaxb_json_hash unless editable.nil?
      _h['permission'] = permission.to_jaxb_json_hash unless permission.nil?
      return _h
    end

    # the json (string form) for this MittausFormConfig
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this MittausFormConfig with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['mainTitles'].nil?
          _oa = _o['mainTitles']
            if(_oa.is_a? Hash)
              @mainTitles = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @mainTitles =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @mainTitles = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @mainTitles.push Hash.from_json(_item)
                 else
                   @mainTitles.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @mainTitles = _oa
            end
          end
        if !_o['kayttajaRyhmaId'].nil?
          _oa = _o['kayttajaRyhmaId']
            if(_oa.is_a? Hash)
              @kayttajaRyhmaId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kayttajaRyhmaId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kayttajaRyhmaId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kayttajaRyhmaId.push Fixnum.from_json(_item)
                 else
                   @kayttajaRyhmaId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kayttajaRyhmaId = _oa
            end
          end
        if !_o['editable'].nil?
          _oa = _o['editable']
            if(_oa.is_a? Hash)
              @editable = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @editable =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @editable = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @editable.push Boolean.from_json(_item)
                 else
                   @editable.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @editable = _oa
            end
          end
        if !_o['permission'].nil?
          _oa = _o['permission']
            if(_oa.is_a? Hash)
              @permission = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @permission =  Fi::Mediconsult::Core::Client::Dto::PermissionDTOOfExtendFormInfo.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @permission = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @permission.push Fi::Mediconsult::Core::Client::Dto::PermissionDTOOfExtendFormInfo.from_json(_item)
                 else
                   @permission.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @permission = _oa
            end
          end
    end

    # constructs a MittausFormConfig from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Status

  # (no documentation provided)
  class Status 

    # (no documentation provided)
    attr_accessor :reason
    # (no documentation provided)
    attr_accessor :mappingValue
    # (no documentation provided)
    attr_accessor :id
    # (no documentation provided)
    attr_accessor :reasons

    # the json hash for this Status
    def to_jaxb_json_hash
      _h = {}
      _h['reason'] = reason.to_jaxb_json_hash unless reason.nil?
      _h['mappingValue'] = mappingValue.to_jaxb_json_hash unless mappingValue.nil?
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      if !reasons.nil?
        _ha = Array.new
        reasons.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['reasons'] = _ha
      end
      return _h
    end

    # the json (string form) for this Status
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Status with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['reason'].nil?
          _oa = _o['reason']
            if(_oa.is_a? Hash)
              @reason = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @reason =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @reason = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @reason.push Boolean.from_json(_item)
                 else
                   @reason.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @reason = _oa
            end
          end
        if !_o['mappingValue'].nil?
          _oa = _o['mappingValue']
            if(_oa.is_a? Hash)
              @mappingValue = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @mappingValue =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @mappingValue = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @mappingValue.push Fixnum.from_json(_item)
                 else
                   @mappingValue.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @mappingValue = _oa
            end
          end
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push String.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
        if !_o['reasons'].nil?
          _oa = _o['reasons']
            if(_oa.is_a? Hash)
              @reasons = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @reasons =  ? extends Fi::Mediconsult::Mediplan::Status::Status.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @reasons = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @reasons.push ? extends Fi::Mediconsult::Mediplan::Status::Status.from_json(_item)
                 else
                   @reasons.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @reasons = _oa
            end
          end
    end

    # constructs a Status from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Title

  # (no documentation provided)
  class PatientTitleGrouping 

    # (no documentation provided)
    attr_accessor :configuredEndTitle
    # (no documentation provided)
    attr_accessor :permission
    # (no documentation provided)
    attr_accessor :configuredStartTitle
    # (no documentation provided)
    attr_accessor :groups

    # the json hash for this PatientTitleGrouping
    def to_jaxb_json_hash
      _h = {}
      _h['configuredEndTitle'] = configuredEndTitle.to_jaxb_json_hash unless configuredEndTitle.nil?
      _h['permission'] = permission.to_jaxb_json_hash unless permission.nil?
      _h['configuredStartTitle'] = configuredStartTitle.to_jaxb_json_hash unless configuredStartTitle.nil?
      _h['groups'] = groups.to_jaxb_json_hash unless groups.nil?
      return _h
    end

    # the json (string form) for this PatientTitleGrouping
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this PatientTitleGrouping with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['configuredEndTitle'].nil?
          _oa = _o['configuredEndTitle']
            if(_oa.is_a? Hash)
              @configuredEndTitle = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @configuredEndTitle =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @configuredEndTitle = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @configuredEndTitle.push String.from_json(_item)
                 else
                   @configuredEndTitle.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @configuredEndTitle = _oa
            end
          end
        if !_o['permission'].nil?
          _oa = _o['permission']
            if(_oa.is_a? Hash)
              @permission = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @permission =  Fi::Mediconsult::Core::Client::Dto::Permission.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @permission = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @permission.push Fi::Mediconsult::Core::Client::Dto::Permission.from_json(_item)
                 else
                   @permission.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @permission = _oa
            end
          end
        if !_o['configuredStartTitle'].nil?
          _oa = _o['configuredStartTitle']
            if(_oa.is_a? Hash)
              @configuredStartTitle = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @configuredStartTitle =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @configuredStartTitle = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @configuredStartTitle.push String.from_json(_item)
                 else
                   @configuredStartTitle.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @configuredStartTitle = _oa
            end
          end
        if !_o['groups'].nil?
          _oa = _o['groups']
            if(_oa.is_a? Hash)
              @groups = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @groups =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @groups = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @groups.push Hash.from_json(_item)
                 else
                   @groups.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @groups = _oa
            end
          end
    end

    # constructs a PatientTitleGrouping from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Seuranta

  # (no documentation provided)
  class SeurantaConfig 

    # (no documentation provided)
    attr_accessor :configs
    # (no documentation provided)
    attr_accessor :writeCount

    # the json hash for this SeurantaConfig
    def to_jaxb_json_hash
      _h = {}
      if !configs.nil?
        _ha = Array.new
        configs.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['configs'] = _ha
      end
      _h['writeCount'] = writeCount.to_jaxb_json_hash unless writeCount.nil?
      return _h
    end

    # the json (string form) for this SeurantaConfig
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this SeurantaConfig with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['configs'].nil?
          _oa = _o['configs']
            if(_oa.is_a? Hash)
              @configs = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @configs =  Fi::Mediconsult::Core::Client::Dto::Seuranta::SeurantaFormConfig.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @configs = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @configs.push Fi::Mediconsult::Core::Client::Dto::Seuranta::SeurantaFormConfig.from_json(_item)
                 else
                   @configs.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @configs = _oa
            end
          end
        if !_o['writeCount'].nil?
          _oa = _o['writeCount']
            if(_oa.is_a? Hash)
              @writeCount = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @writeCount =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @writeCount = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @writeCount.push Fixnum.from_json(_item)
                 else
                   @writeCount.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @writeCount = _oa
            end
          end
    end

    # constructs a SeurantaConfig from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Omistaja

  # (no documentation provided)
  class OmistajaList 

    # (no documentation provided)
    attr_accessor :pageIndex
    # (no documentation provided)
    attr_accessor :pageItemsCount
    # (no documentation provided)
    attr_accessor :pageSize
    # (no documentation provided)
    attr_accessor :allItemsCount

    # the json hash for this OmistajaList
    def to_jaxb_json_hash
      _h = {}
      _h['pageIndex'] = pageIndex.to_jaxb_json_hash unless pageIndex.nil?
      _h['pageItemsCount'] = pageItemsCount.to_jaxb_json_hash unless pageItemsCount.nil?
      _h['pageSize'] = pageSize.to_jaxb_json_hash unless pageSize.nil?
      _h['allItemsCount'] = allItemsCount.to_jaxb_json_hash unless allItemsCount.nil?
      return _h
    end

    # the json (string form) for this OmistajaList
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this OmistajaList with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['pageIndex'].nil?
          _oa = _o['pageIndex']
            if(_oa.is_a? Hash)
              @pageIndex = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @pageIndex =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @pageIndex = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @pageIndex.push Fixnum.from_json(_item)
                 else
                   @pageIndex.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @pageIndex = _oa
            end
          end
        if !_o['pageItemsCount'].nil?
          _oa = _o['pageItemsCount']
            if(_oa.is_a? Hash)
              @pageItemsCount = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @pageItemsCount =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @pageItemsCount = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @pageItemsCount.push Fixnum.from_json(_item)
                 else
                   @pageItemsCount.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @pageItemsCount = _oa
            end
          end
        if !_o['pageSize'].nil?
          _oa = _o['pageSize']
            if(_oa.is_a? Hash)
              @pageSize = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @pageSize =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @pageSize = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @pageSize.push Fixnum.from_json(_item)
                 else
                   @pageSize.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @pageSize = _oa
            end
          end
        if !_o['allItemsCount'].nil?
          _oa = _o['allItemsCount']
            if(_oa.is_a? Hash)
              @allItemsCount = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @allItemsCount =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @allItemsCount = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @allItemsCount.push Fixnum.from_json(_item)
                 else
                   @allItemsCount.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @allItemsCount = _oa
            end
          end
    end

    # constructs a OmistajaList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Security

  # (no documentation provided)
  class CoreAuthenticationRequestContext 

    # (no documentation provided)
    attr_accessor :unitOwnerId
    # (no documentation provided)
    attr_accessor :userSVNumber
    # (no documentation provided)
    attr_accessor :serviceProviderId
    # (no documentation provided)
    attr_accessor :userLogonDomain
    # (no documentation provided)
    attr_accessor :authorFirstNames
    # (no documentation provided)
    attr_accessor :patientRegistrySpecifierName
    # (no documentation provided)
    attr_accessor :patientDateTimeOfBirth
    # (no documentation provided)
    attr_accessor :patientSex
    # (no documentation provided)
    attr_accessor :unitOid
    # (no documentation provided)
    attr_accessor :responsiblePartyType
    # (no documentation provided)
    attr_accessor :patientActiveEncompassingEncounterId
    # (no documentation provided)
    attr_accessor :unitName
    # (no documentation provided)
    attr_accessor :sessionKey
    # (no documentation provided)
    attr_accessor :patientCommonRegisterNotified
    # (no documentation provided)
    attr_accessor :patientFirstNames
    # (no documentation provided)
    attr_accessor :hostOrganizationOid
    # (no documentation provided)
    attr_accessor :patientEArchiveApproval
    # (no documentation provided)
    attr_accessor :patientActiveEncompassingEncounterVisitNumber
    # (no documentation provided)
    attr_accessor :userLogonMethod
    # (no documentation provided)
    attr_accessor :patientDetectedIssueManagementCode
    # (no documentation provided)
    attr_accessor :authorSSN
    # (no documentation provided)
    attr_accessor :hostUnitOid
    # (no documentation provided)
    attr_accessor :role
    # (no documentation provided)
    attr_accessor :responsiblePartyName
    # (no documentation provided)
    attr_accessor :userSpecialProtection
    # (no documentation provided)
    attr_accessor :patientActiveEncompassingEncounterVisitNumberInteger
    # (no documentation provided)
    attr_accessor :patientEArchiveNotified
    # (no documentation provided)
    attr_accessor :patientEReseptiNotified
    # (no documentation provided)
    attr_accessor :patientSSN
    # (no documentation provided)
    attr_accessor :patientRegistrySpecifier
    # (no documentation provided)
    attr_accessor :registerIdentificationCode
    # (no documentation provided)
    attr_accessor :patientName
    # (no documentation provided)
    attr_accessor :dirty
    # (no documentation provided)
    attr_accessor :patientSurname
    # (no documentation provided)
    attr_accessor :authorSVNumber
    # (no documentation provided)
    attr_accessor :patientDetectedIssueManagementText
    # (no documentation provided)
    attr_accessor :userOwnerId
    # (no documentation provided)
    attr_accessor :encounterPatientRegistryCode
    # (no documentation provided)
    attr_accessor :patientOwnerId
    # (no documentation provided)
    attr_accessor :registerId
    # (no documentation provided)
    attr_accessor :authorSurname
    # (no documentation provided)
    attr_accessor :userName
    # (no documentation provided)
    attr_accessor :register
    # (no documentation provided)
    attr_accessor :responsiblePartyId
    # (no documentation provided)
    attr_accessor :madeDirtyTime
    # (no documentation provided)
    attr_accessor :userId
    # (no documentation provided)
    attr_accessor :encounterCustodian
    # (no documentation provided)
    attr_accessor :userLogon
    # (no documentation provided)
    attr_accessor :authorCardNumber
    # (no documentation provided)
    attr_accessor :userCustodianTypeCode
    # (no documentation provided)
    attr_accessor :userLogonApplication

    # the json hash for this CoreAuthenticationRequestContext
    def to_jaxb_json_hash
      _h = {}
      _h['unitOwnerId'] = unitOwnerId.to_jaxb_json_hash unless unitOwnerId.nil?
      _h['userSVNumber'] = userSVNumber.to_jaxb_json_hash unless userSVNumber.nil?
      _h['serviceProviderId'] = serviceProviderId.to_jaxb_json_hash unless serviceProviderId.nil?
      _h['userLogonDomain'] = userLogonDomain.to_jaxb_json_hash unless userLogonDomain.nil?
      _h['authorFirstNames'] = authorFirstNames.to_jaxb_json_hash unless authorFirstNames.nil?
      _h['patientRegistrySpecifierName'] = patientRegistrySpecifierName.to_jaxb_json_hash unless patientRegistrySpecifierName.nil?
      _h['patientDateTimeOfBirth'] = patientDateTimeOfBirth.to_jaxb_json_hash unless patientDateTimeOfBirth.nil?
      _h['patientSex'] = patientSex.to_jaxb_json_hash unless patientSex.nil?
      _h['unitOid'] = unitOid.to_jaxb_json_hash unless unitOid.nil?
      _h['responsiblePartyType'] = responsiblePartyType.to_jaxb_json_hash unless responsiblePartyType.nil?
      _h['patientActiveEncompassingEncounterId'] = patientActiveEncompassingEncounterId.to_jaxb_json_hash unless patientActiveEncompassingEncounterId.nil?
      _h['unitName'] = unitName.to_jaxb_json_hash unless unitName.nil?
      _h['sessionKey'] = sessionKey.to_jaxb_json_hash unless sessionKey.nil?
      _h['patientCommonRegisterNotified'] = patientCommonRegisterNotified.to_jaxb_json_hash unless patientCommonRegisterNotified.nil?
      _h['patientFirstNames'] = patientFirstNames.to_jaxb_json_hash unless patientFirstNames.nil?
      _h['hostOrganizationOid'] = hostOrganizationOid.to_jaxb_json_hash unless hostOrganizationOid.nil?
      _h['patientEArchiveApproval'] = patientEArchiveApproval.to_jaxb_json_hash unless patientEArchiveApproval.nil?
      _h['patientActiveEncompassingEncounterVisitNumber'] = patientActiveEncompassingEncounterVisitNumber.to_jaxb_json_hash unless patientActiveEncompassingEncounterVisitNumber.nil?
      _h['userLogonMethod'] = userLogonMethod.to_jaxb_json_hash unless userLogonMethod.nil?
      _h['patientDetectedIssueManagementCode'] = patientDetectedIssueManagementCode.to_jaxb_json_hash unless patientDetectedIssueManagementCode.nil?
      _h['authorSSN'] = authorSSN.to_jaxb_json_hash unless authorSSN.nil?
      _h['hostUnitOid'] = hostUnitOid.to_jaxb_json_hash unless hostUnitOid.nil?
      _h['role'] = role.to_jaxb_json_hash unless role.nil?
      _h['responsiblePartyName'] = responsiblePartyName.to_jaxb_json_hash unless responsiblePartyName.nil?
      _h['userSpecialProtection'] = userSpecialProtection.to_jaxb_json_hash unless userSpecialProtection.nil?
      _h['patientActiveEncompassingEncounterVisitNumberInteger'] = patientActiveEncompassingEncounterVisitNumberInteger.to_jaxb_json_hash unless patientActiveEncompassingEncounterVisitNumberInteger.nil?
      _h['patientEArchiveNotified'] = patientEArchiveNotified.to_jaxb_json_hash unless patientEArchiveNotified.nil?
      _h['patientEReseptiNotified'] = patientEReseptiNotified.to_jaxb_json_hash unless patientEReseptiNotified.nil?
      _h['patientSSN'] = patientSSN.to_jaxb_json_hash unless patientSSN.nil?
      _h['patientRegistrySpecifier'] = patientRegistrySpecifier.to_jaxb_json_hash unless patientRegistrySpecifier.nil?
      _h['registerIdentificationCode'] = registerIdentificationCode.to_jaxb_json_hash unless registerIdentificationCode.nil?
      _h['patientName'] = patientName.to_jaxb_json_hash unless patientName.nil?
      _h['dirty'] = dirty.to_jaxb_json_hash unless dirty.nil?
      _h['patientSurname'] = patientSurname.to_jaxb_json_hash unless patientSurname.nil?
      _h['authorSVNumber'] = authorSVNumber.to_jaxb_json_hash unless authorSVNumber.nil?
      _h['patientDetectedIssueManagementText'] = patientDetectedIssueManagementText.to_jaxb_json_hash unless patientDetectedIssueManagementText.nil?
      _h['userOwnerId'] = userOwnerId.to_jaxb_json_hash unless userOwnerId.nil?
      _h['encounterPatientRegistryCode'] = encounterPatientRegistryCode.to_jaxb_json_hash unless encounterPatientRegistryCode.nil?
      _h['patientOwnerId'] = patientOwnerId.to_jaxb_json_hash unless patientOwnerId.nil?
      _h['registerId'] = registerId.to_jaxb_json_hash unless registerId.nil?
      _h['authorSurname'] = authorSurname.to_jaxb_json_hash unless authorSurname.nil?
      _h['userName'] = userName.to_jaxb_json_hash unless userName.nil?
      _h['register'] = register.to_jaxb_json_hash unless register.nil?
      _h['responsiblePartyId'] = responsiblePartyId.to_jaxb_json_hash unless responsiblePartyId.nil?
      _h['madeDirtyTime'] = madeDirtyTime.to_jaxb_json_hash unless madeDirtyTime.nil?
      _h['userId'] = userId.to_jaxb_json_hash unless userId.nil?
      _h['encounterCustodian'] = encounterCustodian.to_jaxb_json_hash unless encounterCustodian.nil?
      _h['userLogon'] = userLogon.to_jaxb_json_hash unless userLogon.nil?
      _h['authorCardNumber'] = authorCardNumber.to_jaxb_json_hash unless authorCardNumber.nil?
      _h['userCustodianTypeCode'] = userCustodianTypeCode.to_jaxb_json_hash unless userCustodianTypeCode.nil?
      _h['userLogonApplication'] = userLogonApplication.to_jaxb_json_hash unless userLogonApplication.nil?
      return _h
    end

    # the json (string form) for this CoreAuthenticationRequestContext
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this CoreAuthenticationRequestContext with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['unitOwnerId'].nil?
          _oa = _o['unitOwnerId']
            if(_oa.is_a? Hash)
              @unitOwnerId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @unitOwnerId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @unitOwnerId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @unitOwnerId.push Fixnum.from_json(_item)
                 else
                   @unitOwnerId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @unitOwnerId = _oa
            end
          end
        if !_o['userSVNumber'].nil?
          _oa = _o['userSVNumber']
            if(_oa.is_a? Hash)
              @userSVNumber = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @userSVNumber =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @userSVNumber = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @userSVNumber.push String.from_json(_item)
                 else
                   @userSVNumber.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @userSVNumber = _oa
            end
          end
        if !_o['serviceProviderId'].nil?
          _oa = _o['serviceProviderId']
            if(_oa.is_a? Hash)
              @serviceProviderId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @serviceProviderId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @serviceProviderId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @serviceProviderId.push String.from_json(_item)
                 else
                   @serviceProviderId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @serviceProviderId = _oa
            end
          end
        if !_o['userLogonDomain'].nil?
          _oa = _o['userLogonDomain']
            if(_oa.is_a? Hash)
              @userLogonDomain = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @userLogonDomain =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @userLogonDomain = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @userLogonDomain.push String.from_json(_item)
                 else
                   @userLogonDomain.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @userLogonDomain = _oa
            end
          end
        if !_o['authorFirstNames'].nil?
          _oa = _o['authorFirstNames']
            if(_oa.is_a? Hash)
              @authorFirstNames = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @authorFirstNames =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @authorFirstNames = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @authorFirstNames.push String.from_json(_item)
                 else
                   @authorFirstNames.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @authorFirstNames = _oa
            end
          end
        if !_o['patientRegistrySpecifierName'].nil?
          _oa = _o['patientRegistrySpecifierName']
            if(_oa.is_a? Hash)
              @patientRegistrySpecifierName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @patientRegistrySpecifierName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @patientRegistrySpecifierName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @patientRegistrySpecifierName.push String.from_json(_item)
                 else
                   @patientRegistrySpecifierName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @patientRegistrySpecifierName = _oa
            end
          end
        if !_o['patientDateTimeOfBirth'].nil?
          _oa = _o['patientDateTimeOfBirth']
            if(_oa.is_a? Hash)
              @patientDateTimeOfBirth = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @patientDateTimeOfBirth =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @patientDateTimeOfBirth = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @patientDateTimeOfBirth.push String.from_json(_item)
                 else
                   @patientDateTimeOfBirth.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @patientDateTimeOfBirth = _oa
            end
          end
        if !_o['patientSex'].nil?
          _oa = _o['patientSex']
            if(_oa.is_a? Hash)
              @patientSex = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @patientSex =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @patientSex = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @patientSex.push String.from_json(_item)
                 else
                   @patientSex.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @patientSex = _oa
            end
          end
        if !_o['unitOid'].nil?
          _oa = _o['unitOid']
            if(_oa.is_a? Hash)
              @unitOid = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @unitOid =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @unitOid = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @unitOid.push String.from_json(_item)
                 else
                   @unitOid.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @unitOid = _oa
            end
          end
        if !_o['responsiblePartyType'].nil?
          _oa = _o['responsiblePartyType']
            if(_oa.is_a? Hash)
              @responsiblePartyType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @responsiblePartyType =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @responsiblePartyType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @responsiblePartyType.push String.from_json(_item)
                 else
                   @responsiblePartyType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @responsiblePartyType = _oa
            end
          end
        if !_o['patientActiveEncompassingEncounterId'].nil?
          _oa = _o['patientActiveEncompassingEncounterId']
            if(_oa.is_a? Hash)
              @patientActiveEncompassingEncounterId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @patientActiveEncompassingEncounterId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @patientActiveEncompassingEncounterId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @patientActiveEncompassingEncounterId.push String.from_json(_item)
                 else
                   @patientActiveEncompassingEncounterId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @patientActiveEncompassingEncounterId = _oa
            end
          end
        if !_o['unitName'].nil?
          _oa = _o['unitName']
            if(_oa.is_a? Hash)
              @unitName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @unitName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @unitName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @unitName.push String.from_json(_item)
                 else
                   @unitName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @unitName = _oa
            end
          end
        if !_o['sessionKey'].nil?
          _oa = _o['sessionKey']
            if(_oa.is_a? Hash)
              @sessionKey = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @sessionKey =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @sessionKey = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @sessionKey.push String.from_json(_item)
                 else
                   @sessionKey.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @sessionKey = _oa
            end
          end
        if !_o['patientCommonRegisterNotified'].nil?
          _oa = _o['patientCommonRegisterNotified']
            if(_oa.is_a? Hash)
              @patientCommonRegisterNotified = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @patientCommonRegisterNotified =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @patientCommonRegisterNotified = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @patientCommonRegisterNotified.push Boolean.from_json(_item)
                 else
                   @patientCommonRegisterNotified.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @patientCommonRegisterNotified = _oa
            end
          end
        if !_o['patientFirstNames'].nil?
          _oa = _o['patientFirstNames']
            if(_oa.is_a? Hash)
              @patientFirstNames = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @patientFirstNames =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @patientFirstNames = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @patientFirstNames.push String.from_json(_item)
                 else
                   @patientFirstNames.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @patientFirstNames = _oa
            end
          end
        if !_o['hostOrganizationOid'].nil?
          _oa = _o['hostOrganizationOid']
            if(_oa.is_a? Hash)
              @hostOrganizationOid = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @hostOrganizationOid =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @hostOrganizationOid = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @hostOrganizationOid.push String.from_json(_item)
                 else
                   @hostOrganizationOid.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @hostOrganizationOid = _oa
            end
          end
        if !_o['patientEArchiveApproval'].nil?
          _oa = _o['patientEArchiveApproval']
            if(_oa.is_a? Hash)
              @patientEArchiveApproval = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @patientEArchiveApproval =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @patientEArchiveApproval = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @patientEArchiveApproval.push Boolean.from_json(_item)
                 else
                   @patientEArchiveApproval.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @patientEArchiveApproval = _oa
            end
          end
        if !_o['patientActiveEncompassingEncounterVisitNumber'].nil?
          _oa = _o['patientActiveEncompassingEncounterVisitNumber']
            if(_oa.is_a? Hash)
              @patientActiveEncompassingEncounterVisitNumber = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @patientActiveEncompassingEncounterVisitNumber =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @patientActiveEncompassingEncounterVisitNumber = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @patientActiveEncompassingEncounterVisitNumber.push String.from_json(_item)
                 else
                   @patientActiveEncompassingEncounterVisitNumber.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @patientActiveEncompassingEncounterVisitNumber = _oa
            end
          end
        if !_o['userLogonMethod'].nil?
          _oa = _o['userLogonMethod']
            if(_oa.is_a? Hash)
              @userLogonMethod = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @userLogonMethod =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @userLogonMethod = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @userLogonMethod.push String.from_json(_item)
                 else
                   @userLogonMethod.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @userLogonMethod = _oa
            end
          end
        if !_o['patientDetectedIssueManagementCode'].nil?
          _oa = _o['patientDetectedIssueManagementCode']
            if(_oa.is_a? Hash)
              @patientDetectedIssueManagementCode = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @patientDetectedIssueManagementCode =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @patientDetectedIssueManagementCode = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @patientDetectedIssueManagementCode.push String.from_json(_item)
                 else
                   @patientDetectedIssueManagementCode.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @patientDetectedIssueManagementCode = _oa
            end
          end
        if !_o['authorSSN'].nil?
          _oa = _o['authorSSN']
            if(_oa.is_a? Hash)
              @authorSSN = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @authorSSN =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @authorSSN = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @authorSSN.push String.from_json(_item)
                 else
                   @authorSSN.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @authorSSN = _oa
            end
          end
        if !_o['hostUnitOid'].nil?
          _oa = _o['hostUnitOid']
            if(_oa.is_a? Hash)
              @hostUnitOid = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @hostUnitOid =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @hostUnitOid = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @hostUnitOid.push String.from_json(_item)
                 else
                   @hostUnitOid.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @hostUnitOid = _oa
            end
          end
        if !_o['role'].nil?
          _oa = _o['role']
            if(_oa.is_a? Hash)
              @role = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @role =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @role = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @role.push String.from_json(_item)
                 else
                   @role.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @role = _oa
            end
          end
        if !_o['responsiblePartyName'].nil?
          _oa = _o['responsiblePartyName']
            if(_oa.is_a? Hash)
              @responsiblePartyName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @responsiblePartyName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @responsiblePartyName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @responsiblePartyName.push String.from_json(_item)
                 else
                   @responsiblePartyName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @responsiblePartyName = _oa
            end
          end
        if !_o['userSpecialProtection'].nil?
          _oa = _o['userSpecialProtection']
            if(_oa.is_a? Hash)
              @userSpecialProtection = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @userSpecialProtection =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @userSpecialProtection = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @userSpecialProtection.push String.from_json(_item)
                 else
                   @userSpecialProtection.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @userSpecialProtection = _oa
            end
          end
        if !_o['patientActiveEncompassingEncounterVisitNumberInteger'].nil?
          _oa = _o['patientActiveEncompassingEncounterVisitNumberInteger']
            if(_oa.is_a? Hash)
              @patientActiveEncompassingEncounterVisitNumberInteger = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @patientActiveEncompassingEncounterVisitNumberInteger =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @patientActiveEncompassingEncounterVisitNumberInteger = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @patientActiveEncompassingEncounterVisitNumberInteger.push Fixnum.from_json(_item)
                 else
                   @patientActiveEncompassingEncounterVisitNumberInteger.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @patientActiveEncompassingEncounterVisitNumberInteger = _oa
            end
          end
        if !_o['patientEArchiveNotified'].nil?
          _oa = _o['patientEArchiveNotified']
            if(_oa.is_a? Hash)
              @patientEArchiveNotified = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @patientEArchiveNotified =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @patientEArchiveNotified = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @patientEArchiveNotified.push Boolean.from_json(_item)
                 else
                   @patientEArchiveNotified.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @patientEArchiveNotified = _oa
            end
          end
        if !_o['patientEReseptiNotified'].nil?
          _oa = _o['patientEReseptiNotified']
            if(_oa.is_a? Hash)
              @patientEReseptiNotified = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @patientEReseptiNotified =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @patientEReseptiNotified = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @patientEReseptiNotified.push Boolean.from_json(_item)
                 else
                   @patientEReseptiNotified.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @patientEReseptiNotified = _oa
            end
          end
        if !_o['patientSSN'].nil?
          _oa = _o['patientSSN']
            if(_oa.is_a? Hash)
              @patientSSN = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @patientSSN =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @patientSSN = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @patientSSN.push String.from_json(_item)
                 else
                   @patientSSN.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @patientSSN = _oa
            end
          end
        if !_o['patientRegistrySpecifier'].nil?
          _oa = _o['patientRegistrySpecifier']
            if(_oa.is_a? Hash)
              @patientRegistrySpecifier = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @patientRegistrySpecifier =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @patientRegistrySpecifier = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @patientRegistrySpecifier.push String.from_json(_item)
                 else
                   @patientRegistrySpecifier.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @patientRegistrySpecifier = _oa
            end
          end
        if !_o['registerIdentificationCode'].nil?
          _oa = _o['registerIdentificationCode']
            if(_oa.is_a? Hash)
              @registerIdentificationCode = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @registerIdentificationCode =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @registerIdentificationCode = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @registerIdentificationCode.push Fixnum.from_json(_item)
                 else
                   @registerIdentificationCode.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @registerIdentificationCode = _oa
            end
          end
        if !_o['patientName'].nil?
          _oa = _o['patientName']
            if(_oa.is_a? Hash)
              @patientName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @patientName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @patientName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @patientName.push String.from_json(_item)
                 else
                   @patientName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @patientName = _oa
            end
          end
        if !_o['dirty'].nil?
          _oa = _o['dirty']
            if(_oa.is_a? Hash)
              @dirty = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @dirty =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @dirty = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @dirty.push Boolean.from_json(_item)
                 else
                   @dirty.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @dirty = _oa
            end
          end
        if !_o['patientSurname'].nil?
          _oa = _o['patientSurname']
            if(_oa.is_a? Hash)
              @patientSurname = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @patientSurname =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @patientSurname = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @patientSurname.push String.from_json(_item)
                 else
                   @patientSurname.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @patientSurname = _oa
            end
          end
        if !_o['authorSVNumber'].nil?
          _oa = _o['authorSVNumber']
            if(_oa.is_a? Hash)
              @authorSVNumber = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @authorSVNumber =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @authorSVNumber = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @authorSVNumber.push String.from_json(_item)
                 else
                   @authorSVNumber.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @authorSVNumber = _oa
            end
          end
        if !_o['patientDetectedIssueManagementText'].nil?
          _oa = _o['patientDetectedIssueManagementText']
            if(_oa.is_a? Hash)
              @patientDetectedIssueManagementText = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @patientDetectedIssueManagementText =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @patientDetectedIssueManagementText = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @patientDetectedIssueManagementText.push String.from_json(_item)
                 else
                   @patientDetectedIssueManagementText.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @patientDetectedIssueManagementText = _oa
            end
          end
        if !_o['userOwnerId'].nil?
          _oa = _o['userOwnerId']
            if(_oa.is_a? Hash)
              @userOwnerId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @userOwnerId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @userOwnerId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @userOwnerId.push Fixnum.from_json(_item)
                 else
                   @userOwnerId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @userOwnerId = _oa
            end
          end
        if !_o['encounterPatientRegistryCode'].nil?
          _oa = _o['encounterPatientRegistryCode']
            if(_oa.is_a? Hash)
              @encounterPatientRegistryCode = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @encounterPatientRegistryCode =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @encounterPatientRegistryCode = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @encounterPatientRegistryCode.push String.from_json(_item)
                 else
                   @encounterPatientRegistryCode.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @encounterPatientRegistryCode = _oa
            end
          end
        if !_o['patientOwnerId'].nil?
          _oa = _o['patientOwnerId']
            if(_oa.is_a? Hash)
              @patientOwnerId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @patientOwnerId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @patientOwnerId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @patientOwnerId.push Fixnum.from_json(_item)
                 else
                   @patientOwnerId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @patientOwnerId = _oa
            end
          end
        if !_o['registerId'].nil?
          _oa = _o['registerId']
            if(_oa.is_a? Hash)
              @registerId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @registerId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @registerId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @registerId.push String.from_json(_item)
                 else
                   @registerId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @registerId = _oa
            end
          end
        if !_o['authorSurname'].nil?
          _oa = _o['authorSurname']
            if(_oa.is_a? Hash)
              @authorSurname = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @authorSurname =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @authorSurname = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @authorSurname.push String.from_json(_item)
                 else
                   @authorSurname.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @authorSurname = _oa
            end
          end
        if !_o['userName'].nil?
          _oa = _o['userName']
            if(_oa.is_a? Hash)
              @userName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @userName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @userName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @userName.push String.from_json(_item)
                 else
                   @userName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @userName = _oa
            end
          end
        if !_o['register'].nil?
          _oa = _o['register']
            if(_oa.is_a? Hash)
              @register = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @register =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @register = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @register.push String.from_json(_item)
                 else
                   @register.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @register = _oa
            end
          end
        if !_o['responsiblePartyId'].nil?
          _oa = _o['responsiblePartyId']
            if(_oa.is_a? Hash)
              @responsiblePartyId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @responsiblePartyId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @responsiblePartyId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @responsiblePartyId.push String.from_json(_item)
                 else
                   @responsiblePartyId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @responsiblePartyId = _oa
            end
          end
        if !_o['madeDirtyTime'].nil?
          _oa = _o['madeDirtyTime']
            if(_oa.is_a? Hash)
              @madeDirtyTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @madeDirtyTime =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @madeDirtyTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @madeDirtyTime.push Bignum.from_json(_item)
                 else
                   @madeDirtyTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @madeDirtyTime = _oa
            end
          end
        if !_o['userId'].nil?
          _oa = _o['userId']
            if(_oa.is_a? Hash)
              @userId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @userId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @userId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @userId.push Fixnum.from_json(_item)
                 else
                   @userId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @userId = _oa
            end
          end
        if !_o['encounterCustodian'].nil?
          _oa = _o['encounterCustodian']
            if(_oa.is_a? Hash)
              @encounterCustodian = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @encounterCustodian =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @encounterCustodian = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @encounterCustodian.push String.from_json(_item)
                 else
                   @encounterCustodian.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @encounterCustodian = _oa
            end
          end
        if !_o['userLogon'].nil?
          _oa = _o['userLogon']
            if(_oa.is_a? Hash)
              @userLogon = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @userLogon =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @userLogon = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @userLogon.push String.from_json(_item)
                 else
                   @userLogon.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @userLogon = _oa
            end
          end
        if !_o['authorCardNumber'].nil?
          _oa = _o['authorCardNumber']
            if(_oa.is_a? Hash)
              @authorCardNumber = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @authorCardNumber =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @authorCardNumber = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @authorCardNumber.push String.from_json(_item)
                 else
                   @authorCardNumber.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @authorCardNumber = _oa
            end
          end
        if !_o['userCustodianTypeCode'].nil?
          _oa = _o['userCustodianTypeCode']
            if(_oa.is_a? Hash)
              @userCustodianTypeCode = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @userCustodianTypeCode =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @userCustodianTypeCode = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @userCustodianTypeCode.push String.from_json(_item)
                 else
                   @userCustodianTypeCode.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @userCustodianTypeCode = _oa
            end
          end
        if !_o['userLogonApplication'].nil?
          _oa = _o['userLogonApplication']
            if(_oa.is_a? Hash)
              @userLogonApplication = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @userLogonApplication =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @userLogonApplication = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @userLogonApplication.push String.from_json(_item)
                 else
                   @userLogonApplication.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @userLogonApplication = _oa
            end
          end
    end

    # constructs a CoreAuthenticationRequestContext from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class OrganizationDTO 

    # (no documentation provided)
    attr_accessor :responsibleParty
    # (no documentation provided)
    attr_accessor :custodianOid
    # (no documentation provided)
    attr_accessor :custodianName
    # (no documentation provided)
    attr_accessor :custodianTypeCode
    # (no documentation provided)
    attr_accessor :registerTypeCode
    # (no documentation provided)
    attr_accessor :internalRegisterIdentifier
    # (no documentation provided)
    attr_accessor :units

    # the json hash for this OrganizationDTO
    def to_jaxb_json_hash
      _h = {}
      _h['responsibleParty'] = responsibleParty.to_jaxb_json_hash unless responsibleParty.nil?
      _h['custodianOid'] = custodianOid.to_jaxb_json_hash unless custodianOid.nil?
      _h['custodianName'] = custodianName.to_jaxb_json_hash unless custodianName.nil?
      _h['custodianTypeCode'] = custodianTypeCode.to_jaxb_json_hash unless custodianTypeCode.nil?
      _h['registerTypeCode'] = registerTypeCode.to_jaxb_json_hash unless registerTypeCode.nil?
      _h['internalRegisterIdentifier'] = internalRegisterIdentifier.to_jaxb_json_hash unless internalRegisterIdentifier.nil?
      if !units.nil?
        _ha = Array.new
        units.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['units'] = _ha
      end
      return _h
    end

    # the json (string form) for this OrganizationDTO
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this OrganizationDTO with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['responsibleParty'].nil?
          _oa = _o['responsibleParty']
            if(_oa.is_a? Hash)
              @responsibleParty = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @responsibleParty =  Fi::Mediconsult::Core::Client::Dto::OrganizationInfo.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @responsibleParty = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @responsibleParty.push Fi::Mediconsult::Core::Client::Dto::OrganizationInfo.from_json(_item)
                 else
                   @responsibleParty.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @responsibleParty = _oa
            end
          end
        if !_o['custodianOid'].nil?
          _oa = _o['custodianOid']
            if(_oa.is_a? Hash)
              @custodianOid = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @custodianOid =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @custodianOid = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @custodianOid.push String.from_json(_item)
                 else
                   @custodianOid.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @custodianOid = _oa
            end
          end
        if !_o['custodianName'].nil?
          _oa = _o['custodianName']
            if(_oa.is_a? Hash)
              @custodianName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @custodianName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @custodianName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @custodianName.push String.from_json(_item)
                 else
                   @custodianName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @custodianName = _oa
            end
          end
        if !_o['custodianTypeCode'].nil?
          _oa = _o['custodianTypeCode']
            if(_oa.is_a? Hash)
              @custodianTypeCode = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @custodianTypeCode =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @custodianTypeCode = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @custodianTypeCode.push Fixnum.from_json(_item)
                 else
                   @custodianTypeCode.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @custodianTypeCode = _oa
            end
          end
        if !_o['registerTypeCode'].nil?
          _oa = _o['registerTypeCode']
            if(_oa.is_a? Hash)
              @registerTypeCode = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @registerTypeCode =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @registerTypeCode = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @registerTypeCode.push Fixnum.from_json(_item)
                 else
                   @registerTypeCode.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @registerTypeCode = _oa
            end
          end
        if !_o['internalRegisterIdentifier'].nil?
          _oa = _o['internalRegisterIdentifier']
            if(_oa.is_a? Hash)
              @internalRegisterIdentifier = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @internalRegisterIdentifier =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @internalRegisterIdentifier = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @internalRegisterIdentifier.push String.from_json(_item)
                 else
                   @internalRegisterIdentifier.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @internalRegisterIdentifier = _oa
            end
          end
        if !_o['units'].nil?
          _oa = _o['units']
            if(_oa.is_a? Hash)
              @units = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @units =  Fi::Mediconsult::Core::Client::Dto::Unit.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @units = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @units.push Fi::Mediconsult::Core::Client::Dto::Unit.from_json(_item)
                 else
                   @units.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @units = _oa
            end
          end
    end

    # constructs a OrganizationDTO from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class FysiologinenMittaus 

    # (no documentation provided)
    attr_accessor :type
    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :mittausInfo

    # the json hash for this FysiologinenMittaus
    def to_jaxb_json_hash
      _h = {}
      _h['type'] = type.to_jaxb_json_hash unless type.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      if !mittausInfo.nil?
        _ha = Array.new
        mittausInfo.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['mittausInfo'] = _ha
      end
      return _h
    end

    # the json (string form) for this FysiologinenMittaus
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this FysiologinenMittaus with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['type'].nil?
          _oa = _o['type']
            if(_oa.is_a? Hash)
              @type = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @type =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @type = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @type.push Fixnum.from_json(_item)
                 else
                   @type.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @type = _oa
            end
          end
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['mittausInfo'].nil?
          _oa = _o['mittausInfo']
            if(_oa.is_a? Hash)
              @mittausInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @mittausInfo =  Fi::Mediconsult::Core::Client::Dto::Title::Data::MittausBaseData.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @mittausInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @mittausInfo.push Fi::Mediconsult::Core::Client::Dto::Title::Data::MittausBaseData.from_json(_item)
                 else
                   @mittausInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @mittausInfo = _oa
            end
          end
    end

    # constructs a FysiologinenMittaus from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class Permission 

    # (no documentation provided)
    attr_accessor :permissions

    # the json hash for this Permission
    def to_jaxb_json_hash
      _h = {}
      _h['permissions'] = permissions.to_jaxb_json_hash unless permissions.nil?
      return _h
    end

    # the json (string form) for this Permission
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Permission with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['permissions'].nil?
          _oa = _o['permissions']
            if(_oa.is_a? Hash)
              @permissions = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @permissions =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @permissions = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @permissions.push Hash.from_json(_item)
                 else
                   @permissions.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @permissions = _oa
            end
          end
    end

    # constructs a Permission from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Operationlog

  # (no documentation provided)
  class OperationLogEntryDto 

    # (no documentation provided)
    attr_accessor :id
    # (no documentation provided)
    attr_accessor :operation
    # (no documentation provided)
    attr_accessor :status
    # (no documentation provided)
    attr_accessor :startTime
    # (no documentation provided)
    attr_accessor :endTime
    # (no documentation provided)
    attr_accessor :user
    # (no documentation provided)
    attr_accessor :message

    # the json hash for this OperationLogEntryDto
    def to_jaxb_json_hash
      _h = {}
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['operation'] = operation.to_jaxb_json_hash unless operation.nil?
      _h['status'] = status.to_jaxb_json_hash unless status.nil?
      _h['startTime'] = startTime.to_jaxb_json_hash unless startTime.nil?
      _h['endTime'] = endTime.to_jaxb_json_hash unless endTime.nil?
      _h['user'] = user.to_jaxb_json_hash unless user.nil?
      _h['message'] = message.to_jaxb_json_hash unless message.nil?
      return _h
    end

    # the json (string form) for this OperationLogEntryDto
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this OperationLogEntryDto with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push Bignum.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
        if !_o['operation'].nil?
          _oa = _o['operation']
            if(_oa.is_a? Hash)
              @operation = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @operation =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @operation = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @operation.push String.from_json(_item)
                 else
                   @operation.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @operation = _oa
            end
          end
        if !_o['status'].nil?
          _oa = _o['status']
            if(_oa.is_a? Hash)
              @status = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @status =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @status = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @status.push String.from_json(_item)
                 else
                   @status.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @status = _oa
            end
          end
        if !_o['startTime'].nil?
          _oa = _o['startTime']
            if(_oa.is_a? Hash)
              @startTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @startTime =  java.time::OffsetDateTime.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @startTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @startTime.push java.time::OffsetDateTime.from_json(_item)
                 else
                   @startTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @startTime = _oa
            end
          end
        if !_o['endTime'].nil?
          _oa = _o['endTime']
            if(_oa.is_a? Hash)
              @endTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @endTime =  java.time::OffsetDateTime.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @endTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @endTime.push java.time::OffsetDateTime.from_json(_item)
                 else
                   @endTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @endTime = _oa
            end
          end
        if !_o['user'].nil?
          _oa = _o['user']
            if(_oa.is_a? Hash)
              @user = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @user =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @user = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @user.push String.from_json(_item)
                 else
                   @user.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @user = _oa
            end
          end
        if !_o['message'].nil?
          _oa = _o['message']
            if(_oa.is_a? Hash)
              @message = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @message =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @message = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @message.push String.from_json(_item)
                 else
                   @message.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @message = _oa
            end
          end
    end

    # constructs a OperationLogEntryDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Kertomus

  # (no documentation provided)
  class GroupTitlesConfig 

    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :titles
    # true if some title is configured
    attr_accessor :empty

    # the json hash for this GroupTitlesConfig
    def to_jaxb_json_hash
      _h = {}
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      if !titles.nil?
        _ha = Array.new
        titles.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['titles'] = _ha
      end
      _h['empty'] = empty.to_jaxb_json_hash unless empty.nil?
      return _h
    end

    # the json (string form) for this GroupTitlesConfig
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this GroupTitlesConfig with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['titles'].nil?
          _oa = _o['titles']
            if(_oa.is_a? Hash)
              @titles = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @titles =  Fi::Mediconsult::Core::Client::Dto::Kertomus::SubtitleConfig.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @titles = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @titles.push Fi::Mediconsult::Core::Client::Dto::Kertomus::SubtitleConfig.from_json(_item)
                 else
                   @titles.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @titles = _oa
            end
          end
        if !_o['empty'].nil?
          _oa = _o['empty']
            if(_oa.is_a? Hash)
              @empty = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @empty =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @empty = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @empty.push Boolean.from_json(_item)
                 else
                   @empty.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @empty = _oa
            end
          end
    end

    # constructs a GroupTitlesConfig from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Rights

  # (no documentation provided)
  class OptimizationRightsAndSettings 

    # form
    attr_accessor :form
    # the streetAddressTitle
    attr_accessor :streetAddressTitle
    # the postOfficeTitle
    attr_accessor :postOfficeTitle
    # the travelModeTitle
    attr_accessor :travelModeTitle
    # the byFootTerm
    attr_accessor :byFootTerm
    # the byCarTerm
    attr_accessor :byCarTerm
    # the byBicycleTerm
    attr_accessor :byBicycleTerm

    # the json hash for this OptimizationRightsAndSettings
    def to_jaxb_json_hash
      _h = {}
      _h['form'] = form.to_jaxb_json_hash unless form.nil?
      _h['streetAddressTitle'] = streetAddressTitle.to_jaxb_json_hash unless streetAddressTitle.nil?
      _h['postOfficeTitle'] = postOfficeTitle.to_jaxb_json_hash unless postOfficeTitle.nil?
      _h['travelModeTitle'] = travelModeTitle.to_jaxb_json_hash unless travelModeTitle.nil?
      _h['byFootTerm'] = byFootTerm.to_jaxb_json_hash unless byFootTerm.nil?
      _h['byCarTerm'] = byCarTerm.to_jaxb_json_hash unless byCarTerm.nil?
      _h['byBicycleTerm'] = byBicycleTerm.to_jaxb_json_hash unless byBicycleTerm.nil?
      return _h
    end

    # the json (string form) for this OptimizationRightsAndSettings
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this OptimizationRightsAndSettings with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['form'].nil?
          _oa = _o['form']
            if(_oa.is_a? Hash)
              @form = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @form =  Fi::Mediconsult::Mediplan::Dto::Rights::FormRights.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @form = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @form.push Fi::Mediconsult::Mediplan::Dto::Rights::FormRights.from_json(_item)
                 else
                   @form.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @form = _oa
            end
          end
        if !_o['streetAddressTitle'].nil?
          _oa = _o['streetAddressTitle']
            if(_oa.is_a? Hash)
              @streetAddressTitle = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @streetAddressTitle =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @streetAddressTitle = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @streetAddressTitle.push String.from_json(_item)
                 else
                   @streetAddressTitle.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @streetAddressTitle = _oa
            end
          end
        if !_o['postOfficeTitle'].nil?
          _oa = _o['postOfficeTitle']
            if(_oa.is_a? Hash)
              @postOfficeTitle = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @postOfficeTitle =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @postOfficeTitle = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @postOfficeTitle.push String.from_json(_item)
                 else
                   @postOfficeTitle.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @postOfficeTitle = _oa
            end
          end
        if !_o['travelModeTitle'].nil?
          _oa = _o['travelModeTitle']
            if(_oa.is_a? Hash)
              @travelModeTitle = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @travelModeTitle =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @travelModeTitle = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @travelModeTitle.push String.from_json(_item)
                 else
                   @travelModeTitle.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @travelModeTitle = _oa
            end
          end
        if !_o['byFootTerm'].nil?
          _oa = _o['byFootTerm']
            if(_oa.is_a? Hash)
              @byFootTerm = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @byFootTerm =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @byFootTerm = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @byFootTerm.push String.from_json(_item)
                 else
                   @byFootTerm.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @byFootTerm = _oa
            end
          end
        if !_o['byCarTerm'].nil?
          _oa = _o['byCarTerm']
            if(_oa.is_a? Hash)
              @byCarTerm = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @byCarTerm =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @byCarTerm = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @byCarTerm.push String.from_json(_item)
                 else
                   @byCarTerm.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @byCarTerm = _oa
            end
          end
        if !_o['byBicycleTerm'].nil?
          _oa = _o['byBicycleTerm']
            if(_oa.is_a? Hash)
              @byBicycleTerm = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @byBicycleTerm =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @byBicycleTerm = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @byBicycleTerm.push String.from_json(_item)
                 else
                   @byBicycleTerm.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @byBicycleTerm = _oa
            end
          end
    end

    # constructs a OptimizationRightsAndSettings from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class Tutkimuspyynnot 

    # (no documentation provided)
    attr_accessor :permissionDTO
    # (no documentation provided)
    attr_accessor :patientId
    # (no documentation provided)
    attr_accessor :tutkimuspyyntoList

    # the json hash for this Tutkimuspyynnot
    def to_jaxb_json_hash
      _h = {}
      _h['permissionDTO'] = permissionDTO.to_jaxb_json_hash unless permissionDTO.nil?
      _h['patientId'] = patientId.to_jaxb_json_hash unless patientId.nil?
      if !tutkimuspyyntoList.nil?
        _ha = Array.new
        tutkimuspyyntoList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['tutkimuspyyntoList'] = _ha
      end
      return _h
    end

    # the json (string form) for this Tutkimuspyynnot
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Tutkimuspyynnot with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['permissionDTO'].nil?
          _oa = _o['permissionDTO']
            if(_oa.is_a? Hash)
              @permissionDTO = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @permissionDTO =  Fi::Mediconsult::Core::Client::Dto::Permission.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @permissionDTO = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @permissionDTO.push Fi::Mediconsult::Core::Client::Dto::Permission.from_json(_item)
                 else
                   @permissionDTO.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @permissionDTO = _oa
            end
          end
        if !_o['patientId'].nil?
          _oa = _o['patientId']
            if(_oa.is_a? Hash)
              @patientId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @patientId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @patientId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @patientId.push Fixnum.from_json(_item)
                 else
                   @patientId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @patientId = _oa
            end
          end
        if !_o['tutkimuspyyntoList'].nil?
          _oa = _o['tutkimuspyyntoList']
            if(_oa.is_a? Hash)
              @tutkimuspyyntoList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tutkimuspyyntoList =  Fi::Mediconsult::Core::Client::Dto::Tutkimuspyynto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tutkimuspyyntoList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tutkimuspyyntoList.push Fi::Mediconsult::Core::Client::Dto::Tutkimuspyynto.from_json(_item)
                 else
                   @tutkimuspyyntoList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tutkimuspyyntoList = _oa
            end
          end
    end

    # constructs a Tutkimuspyynnot from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Seuranta

  # (no documentation provided)
  class SeurantaTitleEditFlag 

    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :edited

    # the json hash for this SeurantaTitleEditFlag
    def to_jaxb_json_hash
      _h = {}
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['edited'] = edited.to_jaxb_json_hash unless edited.nil?
      return _h
    end

    # the json (string form) for this SeurantaTitleEditFlag
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this SeurantaTitleEditFlag with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['edited'].nil?
          _oa = _o['edited']
            if(_oa.is_a? Hash)
              @edited = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @edited =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @edited = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @edited.push Boolean.from_json(_item)
                 else
                   @edited.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @edited = _oa
            end
          end
    end

    # constructs a SeurantaTitleEditFlag from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Kertomus

  # (no documentation provided)
  class KertomusFormConfig 

    # (no documentation provided)
    attr_accessor :lomake
    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :mainTitles
    # (no documentation provided)
    attr_accessor :color
    # (no documentation provided)
    attr_accessor :kayttajaRyhmaId
    # (no documentation provided)
    attr_accessor :signing
    # (no documentation provided)
    attr_accessor :modify

    # the json hash for this KertomusFormConfig
    def to_jaxb_json_hash
      _h = {}
      _h['lomake'] = lomake.to_jaxb_json_hash unless lomake.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      if !mainTitles.nil?
        _ha = Array.new
        mainTitles.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['mainTitles'] = _ha
      end
      _h['color'] = color.to_jaxb_json_hash unless color.nil?
      _h['kayttajaRyhmaId'] = kayttajaRyhmaId.to_jaxb_json_hash unless kayttajaRyhmaId.nil?
      _h['signing'] = signing.to_jaxb_json_hash unless signing.nil?
      _h['modify'] = modify.to_jaxb_json_hash unless modify.nil?
      return _h
    end

    # the json (string form) for this KertomusFormConfig
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this KertomusFormConfig with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['lomake'].nil?
          _oa = _o['lomake']
            if(_oa.is_a? Hash)
              @lomake = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lomake =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lomake = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lomake.push Fixnum.from_json(_item)
                 else
                   @lomake.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lomake = _oa
            end
          end
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['mainTitles'].nil?
          _oa = _o['mainTitles']
            if(_oa.is_a? Hash)
              @mainTitles = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @mainTitles =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @mainTitles = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @mainTitles.push String.from_json(_item)
                 else
                   @mainTitles.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @mainTitles = _oa
            end
          end
        if !_o['color'].nil?
          _oa = _o['color']
            if(_oa.is_a? Hash)
              @color = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @color =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @color = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @color.push String.from_json(_item)
                 else
                   @color.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @color = _oa
            end
          end
        if !_o['kayttajaRyhmaId'].nil?
          _oa = _o['kayttajaRyhmaId']
            if(_oa.is_a? Hash)
              @kayttajaRyhmaId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kayttajaRyhmaId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kayttajaRyhmaId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kayttajaRyhmaId.push Fixnum.from_json(_item)
                 else
                   @kayttajaRyhmaId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kayttajaRyhmaId = _oa
            end
          end
        if !_o['signing'].nil?
          _oa = _o['signing']
            if(_oa.is_a? Hash)
              @signing = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @signing =  Fi::Mediconsult::Core::Client::Dto::Title::Config::ClientTitleConfig.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @signing = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @signing.push Fi::Mediconsult::Core::Client::Dto::Title::Config::ClientTitleConfig.from_json(_item)
                 else
                   @signing.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @signing = _oa
            end
          end
        if !_o['modify'].nil?
          _oa = _o['modify']
            if(_oa.is_a? Hash)
              @modify = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @modify =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @modify = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @modify.push Boolean.from_json(_item)
                 else
                   @modify.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @modify = _oa
            end
          end
    end

    # constructs a KertomusFormConfig from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Kertomus

  # (no documentation provided)
  class MittausComponentConfig 

    # List of mittaus form configs
    attr_accessor :kertomusConfigs

    # the json hash for this MittausComponentConfig
    def to_jaxb_json_hash
      _h = {}
      if !kertomusConfigs.nil?
        _ha = Array.new
        kertomusConfigs.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['kertomusConfigs'] = _ha
      end
      return _h
    end

    # the json (string form) for this MittausComponentConfig
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this MittausComponentConfig with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['kertomusConfigs'].nil?
          _oa = _o['kertomusConfigs']
            if(_oa.is_a? Hash)
              @kertomusConfigs = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kertomusConfigs =  Fi::Mediconsult::Core::Client::Dto::Kertomus::MittausFormConfig.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kertomusConfigs = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kertomusConfigs.push Fi::Mediconsult::Core::Client::Dto::Kertomus::MittausFormConfig.from_json(_item)
                 else
                   @kertomusConfigs.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kertomusConfigs = _oa
            end
          end
    end

    # constructs a MittausComponentConfig from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class CodeDTO 

    # (no documentation provided)
    attr_accessor :code
    # (no documentation provided)
    attr_accessor :abbreviation
    # (no documentation provided)
    attr_accessor :description

    # the json hash for this CodeDTO
    def to_jaxb_json_hash
      _h = {}
      _h['code'] = code.to_jaxb_json_hash unless code.nil?
      _h['abbreviation'] = abbreviation.to_jaxb_json_hash unless abbreviation.nil?
      _h['description'] = description.to_jaxb_json_hash unless description.nil?
      return _h
    end

    # the json (string form) for this CodeDTO
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this CodeDTO with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['code'].nil?
          _oa = _o['code']
            if(_oa.is_a? Hash)
              @code = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @code =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @code = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @code.push String.from_json(_item)
                 else
                   @code.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @code = _oa
            end
          end
        if !_o['abbreviation'].nil?
          _oa = _o['abbreviation']
            if(_oa.is_a? Hash)
              @abbreviation = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @abbreviation =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @abbreviation = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @abbreviation.push String.from_json(_item)
                 else
                   @abbreviation.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @abbreviation = _oa
            end
          end
        if !_o['description'].nil?
          _oa = _o['description']
            if(_oa.is_a? Hash)
              @description = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @description =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @description = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @description.push String.from_json(_item)
                 else
                   @description.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @description = _oa
            end
          end
    end

    # constructs a CodeDTO from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class FormInfo 

    # (no documentation provided)
    attr_accessor :fullFormTypeId
    # (no documentation provided)
    attr_accessor :formTypeInfo
    # (no documentation provided)
    attr_accessor :ownerTypeInfo
    # (no documentation provided)
    attr_accessor :formOwnerId

    # the json hash for this FormInfo
    def to_jaxb_json_hash
      _h = {}
      _h['fullFormTypeId'] = fullFormTypeId.to_jaxb_json_hash unless fullFormTypeId.nil?
      _h['formTypeInfo'] = formTypeInfo.to_jaxb_json_hash unless formTypeInfo.nil?
      _h['ownerTypeInfo'] = ownerTypeInfo.to_jaxb_json_hash unless ownerTypeInfo.nil?
      _h['formOwnerId'] = formOwnerId.to_jaxb_json_hash unless formOwnerId.nil?
      return _h
    end

    # the json (string form) for this FormInfo
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this FormInfo with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['fullFormTypeId'].nil?
          _oa = _o['fullFormTypeId']
            if(_oa.is_a? Hash)
              @fullFormTypeId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @fullFormTypeId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @fullFormTypeId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @fullFormTypeId.push Fixnum.from_json(_item)
                 else
                   @fullFormTypeId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @fullFormTypeId = _oa
            end
          end
        if !_o['formTypeInfo'].nil?
          _oa = _o['formTypeInfo']
            if(_oa.is_a? Hash)
              @formTypeInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @formTypeInfo =  Fi::Mediconsult::Core::Client::Dto::FormTypeInfo.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @formTypeInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @formTypeInfo.push Fi::Mediconsult::Core::Client::Dto::FormTypeInfo.from_json(_item)
                 else
                   @formTypeInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @formTypeInfo = _oa
            end
          end
        if !_o['ownerTypeInfo'].nil?
          _oa = _o['ownerTypeInfo']
            if(_oa.is_a? Hash)
              @ownerTypeInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ownerTypeInfo =  Fi::Mediconsult::Core::Client::Dto::Omistaja::OwnerTypeInfo.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ownerTypeInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ownerTypeInfo.push Fi::Mediconsult::Core::Client::Dto::Omistaja::OwnerTypeInfo.from_json(_item)
                 else
                   @ownerTypeInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ownerTypeInfo = _oa
            end
          end
        if !_o['formOwnerId'].nil?
          _oa = _o['formOwnerId']
            if(_oa.is_a? Hash)
              @formOwnerId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @formOwnerId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @formOwnerId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @formOwnerId.push Fixnum.from_json(_item)
                 else
                   @formOwnerId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @formOwnerId = _oa
            end
          end
    end

    # constructs a FormInfo from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

  # (no documentation provided)
  class CalendarContextDto 

    # the unit
    attr_accessor :unit
    # (no documentation provided)
    attr_accessor :unitName
    # (no documentation provided)
    attr_accessor :unitAbbreviation
    # the form
    attr_accessor :form

    # the json hash for this CalendarContextDto
    def to_jaxb_json_hash
      _h = {}
      _h['unit'] = unit.to_jaxb_json_hash unless unit.nil?
      _h['unitName'] = unitName.to_jaxb_json_hash unless unitName.nil?
      _h['unitAbbreviation'] = unitAbbreviation.to_jaxb_json_hash unless unitAbbreviation.nil?
      _h['form'] = form.to_jaxb_json_hash unless form.nil?
      return _h
    end

    # the json (string form) for this CalendarContextDto
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this CalendarContextDto with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['unit'].nil?
          _oa = _o['unit']
            if(_oa.is_a? Hash)
              @unit = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @unit =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @unit = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @unit.push Fixnum.from_json(_item)
                 else
                   @unit.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @unit = _oa
            end
          end
        if !_o['unitName'].nil?
          _oa = _o['unitName']
            if(_oa.is_a? Hash)
              @unitName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @unitName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @unitName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @unitName.push String.from_json(_item)
                 else
                   @unitName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @unitName = _oa
            end
          end
        if !_o['unitAbbreviation'].nil?
          _oa = _o['unitAbbreviation']
            if(_oa.is_a? Hash)
              @unitAbbreviation = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @unitAbbreviation =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @unitAbbreviation = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @unitAbbreviation.push String.from_json(_item)
                 else
                   @unitAbbreviation.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @unitAbbreviation = _oa
            end
          end
        if !_o['form'].nil?
          _oa = _o['form']
            if(_oa.is_a? Hash)
              @form = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @form =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @form = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @form.push Fixnum.from_json(_item)
                 else
                   @form.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @form = _oa
            end
          end
    end

    # constructs a CalendarContextDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Course

  # (no documentation provided)
  class CourseCollectionDto 

    # (no documentation provided)
    attr_accessor :courses

    # the json hash for this CourseCollectionDto
    def to_jaxb_json_hash
      _h = {}
      if !courses.nil?
        _ha = Array.new
        courses.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['courses'] = _ha
      end
      return _h
    end

    # the json (string form) for this CourseCollectionDto
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this CourseCollectionDto with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['courses'].nil?
          _oa = _o['courses']
            if(_oa.is_a? Hash)
              @courses = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @courses =  Fi::Mediconsult::Mediplan::Dto::Course::CourseDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @courses = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @courses.push Fi::Mediconsult::Mediplan::Dto::Course::CourseDto.from_json(_item)
                 else
                   @courses.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @courses = _oa
            end
          end
    end

    # constructs a CourseCollectionDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Eventmodel

  # (no documentation provided)
  class ParticipantAmountDto 

    # (no documentation provided)
    attr_accessor :min
    # (no documentation provided)
    attr_accessor :max
    # (no documentation provided)
    attr_accessor :minMandatoryInCreation
    # (no documentation provided)
    attr_accessor :minMandatoryWhenDone
    # (no documentation provided)
    attr_accessor :maxLimited

    # the json hash for this ParticipantAmountDto
    def to_jaxb_json_hash
      _h = {}
      _h['min'] = min.to_jaxb_json_hash unless min.nil?
      _h['max'] = max.to_jaxb_json_hash unless max.nil?
      _h['minMandatoryInCreation'] = minMandatoryInCreation.to_jaxb_json_hash unless minMandatoryInCreation.nil?
      _h['minMandatoryWhenDone'] = minMandatoryWhenDone.to_jaxb_json_hash unless minMandatoryWhenDone.nil?
      _h['maxLimited'] = maxLimited.to_jaxb_json_hash unless maxLimited.nil?
      return _h
    end

    # the json (string form) for this ParticipantAmountDto
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this ParticipantAmountDto with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['min'].nil?
          _oa = _o['min']
            if(_oa.is_a? Hash)
              @min = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @min =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @min = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @min.push Fixnum.from_json(_item)
                 else
                   @min.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @min = _oa
            end
          end
        if !_o['max'].nil?
          _oa = _o['max']
            if(_oa.is_a? Hash)
              @max = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @max =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @max = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @max.push Fixnum.from_json(_item)
                 else
                   @max.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @max = _oa
            end
          end
        if !_o['minMandatoryInCreation'].nil?
          _oa = _o['minMandatoryInCreation']
            if(_oa.is_a? Hash)
              @minMandatoryInCreation = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @minMandatoryInCreation =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @minMandatoryInCreation = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @minMandatoryInCreation.push Boolean.from_json(_item)
                 else
                   @minMandatoryInCreation.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @minMandatoryInCreation = _oa
            end
          end
        if !_o['minMandatoryWhenDone'].nil?
          _oa = _o['minMandatoryWhenDone']
            if(_oa.is_a? Hash)
              @minMandatoryWhenDone = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @minMandatoryWhenDone =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @minMandatoryWhenDone = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @minMandatoryWhenDone.push Boolean.from_json(_item)
                 else
                   @minMandatoryWhenDone.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @minMandatoryWhenDone = _oa
            end
          end
        if !_o['maxLimited'].nil?
          _oa = _o['maxLimited']
            if(_oa.is_a? Hash)
              @maxLimited = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @maxLimited =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @maxLimited = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @maxLimited.push Boolean.from_json(_item)
                 else
                   @maxLimited.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @maxLimited = _oa
            end
          end
    end

    # constructs a ParticipantAmountDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Java

module Security

module Cert

  # (no documentation provided)
  class CertPath 

    # (no documentation provided)
    attr_accessor :type
    # (no documentation provided)
    attr_accessor :encoded
    # (no documentation provided)
    attr_accessor :certificates
    # (no documentation provided)
    attr_accessor :encodings

    # the json hash for this CertPath
    def to_jaxb_json_hash
      _h = {}
      _h['type'] = type.to_jaxb_json_hash unless type.nil?
      if !encoded.nil?
        _ha = Array.new
        encoded.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['encoded'] = _ha
      end
      if !certificates.nil?
        _ha = Array.new
        certificates.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['certificates'] = _ha
      end
      _h['encodings'] = encodings.to_jaxb_json_hash unless encodings.nil?
      return _h
    end

    # the json (string form) for this CertPath
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this CertPath with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['type'].nil?
          _oa = _o['type']
            if(_oa.is_a? Hash)
              @type = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @type =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @type = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @type.push String.from_json(_item)
                 else
                   @type.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @type = _oa
            end
          end
        if !_o['encoded'].nil?
          _oa = _o['encoded']
            if(_oa.is_a? Hash)
              @encoded = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @encoded =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @encoded = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @encoded.push Fixnum.from_json(_item)
                 else
                   @encoded.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @encoded = _oa
            end
          end
        if !_o['certificates'].nil?
          _oa = _o['certificates']
            if(_oa.is_a? Hash)
              @certificates = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @certificates =  ? extends Java::Security::Cert::Certificate.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @certificates = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @certificates.push ? extends Java::Security::Cert::Certificate.from_json(_item)
                 else
                   @certificates.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @certificates = _oa
            end
          end
        if !_o['encodings'].nil?
          _oa = _o['encodings']
            if(_oa.is_a? Hash)
              @encodings = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @encodings =  Java::Util::IteratorOfString.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @encodings = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @encodings.push Java::Util::IteratorOfString.from_json(_item)
                 else
                   @encodings.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @encodings = _oa
            end
          end
    end

    # constructs a CertPath from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

  # (no documentation provided)
  class KuhaDtoBase 

    # (no documentation provided)
    attr_accessor :version
    # (no documentation provided)
    attr_accessor :id
    # (no documentation provided)
    attr_accessor :created
    # (no documentation provided)
    attr_accessor :modified

    # the json hash for this KuhaDtoBase
    def to_jaxb_json_hash
      _h = {}
      _h['version'] = version.to_jaxb_json_hash unless version.nil?
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['created'] = created.to_jaxb_json_hash unless created.nil?
      _h['modified'] = modified.to_jaxb_json_hash unless modified.nil?
      return _h
    end

    # the json (string form) for this KuhaDtoBase
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this KuhaDtoBase with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['version'].nil?
          _oa = _o['version']
            if(_oa.is_a? Hash)
              @version = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @version =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @version = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @version.push Fixnum.from_json(_item)
                 else
                   @version.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @version = _oa
            end
          end
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push Bignum.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
        if !_o['created'].nil?
          _oa = _o['created']
            if(_oa.is_a? Hash)
              @created = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @created =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @created = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @created.push Bignum.from_json(_item)
                 else
                   @created.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @created = _oa
            end
          end
        if !_o['modified'].nil?
          _oa = _o['modified']
            if(_oa.is_a? Hash)
              @modified = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @modified =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @modified = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @modified.push Bignum.from_json(_item)
                 else
                   @modified.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @modified = _oa
            end
          end
    end

    # constructs a KuhaDtoBase from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Core

module Web

module Client

module Rest

  # (no documentation provided)
  class Id 

    # (no documentation provided)
    attr_accessor :id

    # the json hash for this Id
    def to_jaxb_json_hash
      _h = {}
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      return _h
    end

    # the json (string form) for this Id
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Id with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push Fixnum.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
    end

    # constructs a Id from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Omistaja

  # (no documentation provided)
  class LazyLoadedDtoOfHoitotyo 

    # (no documentation provided)
    attr_accessor :loadUrl
    # (no documentation provided)
    attr_accessor :object
    # (no documentation provided)
    attr_accessor :type
    # (no documentation provided)
    attr_accessor :loaded

    # the json hash for this LazyLoadedDtoOfHoitotyo
    def to_jaxb_json_hash
      _h = {}
      _h['loadUrl'] = loadUrl.to_jaxb_json_hash unless loadUrl.nil?
      _h['object'] = object.to_jaxb_json_hash unless object.nil?
      _h['type'] = type.to_jaxb_json_hash unless type.nil?
      _h['loaded'] = loaded.to_jaxb_json_hash unless loaded.nil?
      return _h
    end

    # the json (string form) for this LazyLoadedDtoOfHoitotyo
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this LazyLoadedDtoOfHoitotyo with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['loadUrl'].nil?
          _oa = _o['loadUrl']
            if(_oa.is_a? Hash)
              @loadUrl = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @loadUrl =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @loadUrl = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @loadUrl.push String.from_json(_item)
                 else
                   @loadUrl.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @loadUrl = _oa
            end
          end
        if !_o['object'].nil?
          _oa = _o['object']
            if(_oa.is_a? Hash)
              @object = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @object =  Fi::Mediconsult::Core::Client::Dto::Hoitotyo.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @object = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @object.push Fi::Mediconsult::Core::Client::Dto::Hoitotyo.from_json(_item)
                 else
                   @object.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @object = _oa
            end
          end
        if !_o['type'].nil?
          _oa = _o['type']
            if(_oa.is_a? Hash)
              @type = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @type =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @type = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @type.push String.from_json(_item)
                 else
                   @type.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @type = _oa
            end
          end
        if !_o['loaded'].nil?
          _oa = _o['loaded']
            if(_oa.is_a? Hash)
              @loaded = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @loaded =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @loaded = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @loaded.push Boolean.from_json(_item)
                 else
                   @loaded.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @loaded = _oa
            end
          end
    end

    # constructs a LazyLoadedDtoOfHoitotyo from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class ComponentRightDTO 

    # (no documentation provided)
    attr_accessor :serialversionuid
    # 
    attr_accessor :component
    # (no documentation provided)
    attr_accessor :inDevelopment
    # 
    attr_accessor :requiresTarget
    # 
    attr_accessor :permissionDTO

    # the json hash for this ComponentRightDTO
    def to_jaxb_json_hash
      _h = {}
      _h['serialversionuid'] = serialversionuid.to_jaxb_json_hash unless serialversionuid.nil?
      _h['component'] = component.to_jaxb_json_hash unless component.nil?
      _h['inDevelopment'] = inDevelopment.to_jaxb_json_hash unless inDevelopment.nil?
      _h['requiresTarget'] = requiresTarget.to_jaxb_json_hash unless requiresTarget.nil?
      _h['permissionDTO'] = permissionDTO.to_jaxb_json_hash unless permissionDTO.nil?
      return _h
    end

    # the json (string form) for this ComponentRightDTO
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this ComponentRightDTO with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['serialversionuid'].nil?
          _oa = _o['serialversionuid']
            if(_oa.is_a? Hash)
              @serialversionuid = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @serialversionuid =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @serialversionuid = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @serialversionuid.push Bignum.from_json(_item)
                 else
                   @serialversionuid.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @serialversionuid = _oa
            end
          end
        if !_o['component'].nil?
          _oa = _o['component']
            if(_oa.is_a? Hash)
              @component = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @component =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @component = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @component.push String.from_json(_item)
                 else
                   @component.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @component = _oa
            end
          end
        if !_o['inDevelopment'].nil?
          _oa = _o['inDevelopment']
            if(_oa.is_a? Hash)
              @inDevelopment = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @inDevelopment =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @inDevelopment = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @inDevelopment.push Boolean.from_json(_item)
                 else
                   @inDevelopment.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @inDevelopment = _oa
            end
          end
        if !_o['requiresTarget'].nil?
          _oa = _o['requiresTarget']
            if(_oa.is_a? Hash)
              @requiresTarget = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @requiresTarget =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @requiresTarget = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @requiresTarget.push Boolean.from_json(_item)
                 else
                   @requiresTarget.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @requiresTarget = _oa
            end
          end
        if !_o['permissionDTO'].nil?
          _oa = _o['permissionDTO']
            if(_oa.is_a? Hash)
              @permissionDTO = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @permissionDTO =  Fi::Mediconsult::Core::Client::Dto::PermissionDTOOfExtendFormInfo.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @permissionDTO = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @permissionDTO.push Fi::Mediconsult::Core::Client::Dto::PermissionDTOOfExtendFormInfo.from_json(_item)
                 else
                   @permissionDTO.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @permissionDTO = _oa
            end
          end
    end

    # constructs a ComponentRightDTO from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Kanta

  # (no documentation provided)
  class RegistryInfo 

    # (no documentation provided)
    attr_accessor :registerIdOid
    # (no documentation provided)
    attr_accessor :responsiblePartyType
    # (no documentation provided)
    attr_accessor :organizationIdOid
    # (no documentation provided)
    attr_accessor :hostUnitOid
    # (no documentation provided)
    attr_accessor :registerType
    # (no documentation provided)
    attr_accessor :organizationName
    # (no documentation provided)
    attr_accessor :patientRegistrySpecifier
    # (no documentation provided)
    attr_accessor :hostOrganizationOid
    # (no documentation provided)
    attr_accessor :registryId
    # (no documentation provided)
    attr_accessor :responsiblePartyIdOid
    # (no documentation provided)
    attr_accessor :responsiblePartyName
    # (no documentation provided)
    attr_accessor :patientRegistrySpecifierName

    # the json hash for this RegistryInfo
    def to_jaxb_json_hash
      _h = {}
      _h['registerIdOid'] = registerIdOid.to_jaxb_json_hash unless registerIdOid.nil?
      _h['responsiblePartyType'] = responsiblePartyType.to_jaxb_json_hash unless responsiblePartyType.nil?
      _h['organizationIdOid'] = organizationIdOid.to_jaxb_json_hash unless organizationIdOid.nil?
      _h['hostUnitOid'] = hostUnitOid.to_jaxb_json_hash unless hostUnitOid.nil?
      _h['registerType'] = registerType.to_jaxb_json_hash unless registerType.nil?
      _h['organizationName'] = organizationName.to_jaxb_json_hash unless organizationName.nil?
      _h['patientRegistrySpecifier'] = patientRegistrySpecifier.to_jaxb_json_hash unless patientRegistrySpecifier.nil?
      _h['hostOrganizationOid'] = hostOrganizationOid.to_jaxb_json_hash unless hostOrganizationOid.nil?
      _h['registryId'] = registryId.to_jaxb_json_hash unless registryId.nil?
      _h['responsiblePartyIdOid'] = responsiblePartyIdOid.to_jaxb_json_hash unless responsiblePartyIdOid.nil?
      _h['responsiblePartyName'] = responsiblePartyName.to_jaxb_json_hash unless responsiblePartyName.nil?
      _h['patientRegistrySpecifierName'] = patientRegistrySpecifierName.to_jaxb_json_hash unless patientRegistrySpecifierName.nil?
      return _h
    end

    # the json (string form) for this RegistryInfo
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this RegistryInfo with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['registerIdOid'].nil?
          _oa = _o['registerIdOid']
            if(_oa.is_a? Hash)
              @registerIdOid = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @registerIdOid =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @registerIdOid = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @registerIdOid.push String.from_json(_item)
                 else
                   @registerIdOid.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @registerIdOid = _oa
            end
          end
        if !_o['responsiblePartyType'].nil?
          _oa = _o['responsiblePartyType']
            if(_oa.is_a? Hash)
              @responsiblePartyType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @responsiblePartyType =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @responsiblePartyType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @responsiblePartyType.push String.from_json(_item)
                 else
                   @responsiblePartyType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @responsiblePartyType = _oa
            end
          end
        if !_o['organizationIdOid'].nil?
          _oa = _o['organizationIdOid']
            if(_oa.is_a? Hash)
              @organizationIdOid = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @organizationIdOid =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @organizationIdOid = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @organizationIdOid.push String.from_json(_item)
                 else
                   @organizationIdOid.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @organizationIdOid = _oa
            end
          end
        if !_o['hostUnitOid'].nil?
          _oa = _o['hostUnitOid']
            if(_oa.is_a? Hash)
              @hostUnitOid = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @hostUnitOid =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @hostUnitOid = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @hostUnitOid.push String.from_json(_item)
                 else
                   @hostUnitOid.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @hostUnitOid = _oa
            end
          end
        if !_o['registerType'].nil?
          _oa = _o['registerType']
            if(_oa.is_a? Hash)
              @registerType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @registerType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @registerType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @registerType.push Fixnum.from_json(_item)
                 else
                   @registerType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @registerType = _oa
            end
          end
        if !_o['organizationName'].nil?
          _oa = _o['organizationName']
            if(_oa.is_a? Hash)
              @organizationName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @organizationName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @organizationName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @organizationName.push String.from_json(_item)
                 else
                   @organizationName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @organizationName = _oa
            end
          end
        if !_o['patientRegistrySpecifier'].nil?
          _oa = _o['patientRegistrySpecifier']
            if(_oa.is_a? Hash)
              @patientRegistrySpecifier = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @patientRegistrySpecifier =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @patientRegistrySpecifier = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @patientRegistrySpecifier.push String.from_json(_item)
                 else
                   @patientRegistrySpecifier.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @patientRegistrySpecifier = _oa
            end
          end
        if !_o['hostOrganizationOid'].nil?
          _oa = _o['hostOrganizationOid']
            if(_oa.is_a? Hash)
              @hostOrganizationOid = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @hostOrganizationOid =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @hostOrganizationOid = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @hostOrganizationOid.push String.from_json(_item)
                 else
                   @hostOrganizationOid.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @hostOrganizationOid = _oa
            end
          end
        if !_o['registryId'].nil?
          _oa = _o['registryId']
            if(_oa.is_a? Hash)
              @registryId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @registryId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @registryId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @registryId.push String.from_json(_item)
                 else
                   @registryId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @registryId = _oa
            end
          end
        if !_o['responsiblePartyIdOid'].nil?
          _oa = _o['responsiblePartyIdOid']
            if(_oa.is_a? Hash)
              @responsiblePartyIdOid = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @responsiblePartyIdOid =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @responsiblePartyIdOid = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @responsiblePartyIdOid.push String.from_json(_item)
                 else
                   @responsiblePartyIdOid.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @responsiblePartyIdOid = _oa
            end
          end
        if !_o['responsiblePartyName'].nil?
          _oa = _o['responsiblePartyName']
            if(_oa.is_a? Hash)
              @responsiblePartyName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @responsiblePartyName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @responsiblePartyName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @responsiblePartyName.push String.from_json(_item)
                 else
                   @responsiblePartyName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @responsiblePartyName = _oa
            end
          end
        if !_o['patientRegistrySpecifierName'].nil?
          _oa = _o['patientRegistrySpecifierName']
            if(_oa.is_a? Hash)
              @patientRegistrySpecifierName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @patientRegistrySpecifierName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @patientRegistrySpecifierName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @patientRegistrySpecifierName.push String.from_json(_item)
                 else
                   @patientRegistrySpecifierName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @patientRegistrySpecifierName = _oa
            end
          end
    end

    # constructs a RegistryInfo from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class OrganizationInfo 

    # (no documentation provided)
    attr_accessor :oid
    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :streetAddress
    # (no documentation provided)
    attr_accessor :postCode
    # (no documentation provided)
    attr_accessor :postOffice
    # (no documentation provided)
    attr_accessor :phoneNumber

    # the json hash for this OrganizationInfo
    def to_jaxb_json_hash
      _h = {}
      _h['oid'] = oid.to_jaxb_json_hash unless oid.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['streetAddress'] = streetAddress.to_jaxb_json_hash unless streetAddress.nil?
      _h['postCode'] = postCode.to_jaxb_json_hash unless postCode.nil?
      _h['postOffice'] = postOffice.to_jaxb_json_hash unless postOffice.nil?
      _h['phoneNumber'] = phoneNumber.to_jaxb_json_hash unless phoneNumber.nil?
      return _h
    end

    # the json (string form) for this OrganizationInfo
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this OrganizationInfo with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['oid'].nil?
          _oa = _o['oid']
            if(_oa.is_a? Hash)
              @oid = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @oid =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @oid = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @oid.push String.from_json(_item)
                 else
                   @oid.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @oid = _oa
            end
          end
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['streetAddress'].nil?
          _oa = _o['streetAddress']
            if(_oa.is_a? Hash)
              @streetAddress = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @streetAddress =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @streetAddress = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @streetAddress.push String.from_json(_item)
                 else
                   @streetAddress.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @streetAddress = _oa
            end
          end
        if !_o['postCode'].nil?
          _oa = _o['postCode']
            if(_oa.is_a? Hash)
              @postCode = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @postCode =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @postCode = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @postCode.push String.from_json(_item)
                 else
                   @postCode.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @postCode = _oa
            end
          end
        if !_o['postOffice'].nil?
          _oa = _o['postOffice']
            if(_oa.is_a? Hash)
              @postOffice = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @postOffice =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @postOffice = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @postOffice.push String.from_json(_item)
                 else
                   @postOffice.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @postOffice = _oa
            end
          end
        if !_o['phoneNumber'].nil?
          _oa = _o['phoneNumber']
            if(_oa.is_a? Hash)
              @phoneNumber = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @phoneNumber =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @phoneNumber = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @phoneNumber.push String.from_json(_item)
                 else
                   @phoneNumber.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @phoneNumber = _oa
            end
          end
    end

    # constructs a OrganizationInfo from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class Hoitotyomerkinta 

    # (no documentation provided)
    attr_accessor :merkinta
    # (no documentation provided)
    attr_accessor :vaihe
    # (no documentation provided)
    attr_accessor :otsikkokoodi
    # (no documentation provided)
    attr_accessor :komponentti
    # (no documentation provided)
    attr_accessor :luokka
    # (no documentation provided)
    attr_accessor :jarjestys
    # (no documentation provided)
    attr_accessor :teksti
    # (no documentation provided)
    attr_accessor :kirjaaja
    # (no documentation provided)
    attr_accessor :kirjausaika
    # (no documentation provided)
    attr_accessor :varmuus
    # (no documentation provided)
    attr_accessor :tilanne
    # (no documentation provided)
    attr_accessor :pysyvyys
    # (no documentation provided)
    attr_accessor :readTime
    # (no documentation provided)
    attr_accessor :modified

    # the json hash for this Hoitotyomerkinta
    def to_jaxb_json_hash
      _h = {}
      _h['merkinta'] = merkinta.to_jaxb_json_hash unless merkinta.nil?
      _h['vaihe'] = vaihe.to_jaxb_json_hash unless vaihe.nil?
      _h['otsikkokoodi'] = otsikkokoodi.to_jaxb_json_hash unless otsikkokoodi.nil?
      _h['komponentti'] = komponentti.to_jaxb_json_hash unless komponentti.nil?
      _h['luokka'] = luokka.to_jaxb_json_hash unless luokka.nil?
      _h['jarjestys'] = jarjestys.to_jaxb_json_hash unless jarjestys.nil?
      _h['teksti'] = teksti.to_jaxb_json_hash unless teksti.nil?
      _h['kirjaaja'] = kirjaaja.to_jaxb_json_hash unless kirjaaja.nil?
      _h['kirjausaika'] = kirjausaika.to_jaxb_json_hash unless kirjausaika.nil?
      _h['varmuus'] = varmuus.to_jaxb_json_hash unless varmuus.nil?
      _h['tilanne'] = tilanne.to_jaxb_json_hash unless tilanne.nil?
      _h['pysyvyys'] = pysyvyys.to_jaxb_json_hash unless pysyvyys.nil?
      _h['readTime'] = readTime.to_jaxb_json_hash unless readTime.nil?
      _h['modified'] = modified.to_jaxb_json_hash unless modified.nil?
      return _h
    end

    # the json (string form) for this Hoitotyomerkinta
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Hoitotyomerkinta with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['merkinta'].nil?
          _oa = _o['merkinta']
            if(_oa.is_a? Hash)
              @merkinta = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @merkinta =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @merkinta = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @merkinta.push Fixnum.from_json(_item)
                 else
                   @merkinta.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @merkinta = _oa
            end
          end
        if !_o['vaihe'].nil?
          _oa = _o['vaihe']
            if(_oa.is_a? Hash)
              @vaihe = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vaihe =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vaihe = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vaihe.push String.from_json(_item)
                 else
                   @vaihe.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vaihe = _oa
            end
          end
        if !_o['otsikkokoodi'].nil?
          _oa = _o['otsikkokoodi']
            if(_oa.is_a? Hash)
              @otsikkokoodi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @otsikkokoodi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @otsikkokoodi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @otsikkokoodi.push String.from_json(_item)
                 else
                   @otsikkokoodi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @otsikkokoodi = _oa
            end
          end
        if !_o['komponentti'].nil?
          _oa = _o['komponentti']
            if(_oa.is_a? Hash)
              @komponentti = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @komponentti =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @komponentti = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @komponentti.push String.from_json(_item)
                 else
                   @komponentti.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @komponentti = _oa
            end
          end
        if !_o['luokka'].nil?
          _oa = _o['luokka']
            if(_oa.is_a? Hash)
              @luokka = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @luokka =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @luokka = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @luokka.push String.from_json(_item)
                 else
                   @luokka.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @luokka = _oa
            end
          end
        if !_o['jarjestys'].nil?
          _oa = _o['jarjestys']
            if(_oa.is_a? Hash)
              @jarjestys = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @jarjestys =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @jarjestys = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @jarjestys.push Float.from_json(_item)
                 else
                   @jarjestys.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @jarjestys = _oa
            end
          end
        if !_o['teksti'].nil?
          _oa = _o['teksti']
            if(_oa.is_a? Hash)
              @teksti = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @teksti =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @teksti = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @teksti.push String.from_json(_item)
                 else
                   @teksti.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @teksti = _oa
            end
          end
        if !_o['kirjaaja'].nil?
          _oa = _o['kirjaaja']
            if(_oa.is_a? Hash)
              @kirjaaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kirjaaja =  Fi::Mediconsult::Core::Client::Dto::Omistaja::LazyLoadedDtoOfUser.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kirjaaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kirjaaja.push Fi::Mediconsult::Core::Client::Dto::Omistaja::LazyLoadedDtoOfUser.from_json(_item)
                 else
                   @kirjaaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kirjaaja = _oa
            end
          end
        if !_o['kirjausaika'].nil?
          _oa = _o['kirjausaika']
            if(_oa.is_a? Hash)
              @kirjausaika = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kirjausaika =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kirjausaika = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kirjausaika.push Time.from_json(_item)
                 else
                   @kirjausaika.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kirjausaika = _oa
            end
          end
        if !_o['varmuus'].nil?
          _oa = _o['varmuus']
            if(_oa.is_a? Hash)
              @varmuus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @varmuus =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @varmuus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @varmuus.push String.from_json(_item)
                 else
                   @varmuus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @varmuus = _oa
            end
          end
        if !_o['tilanne'].nil?
          _oa = _o['tilanne']
            if(_oa.is_a? Hash)
              @tilanne = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tilanne =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tilanne = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tilanne.push String.from_json(_item)
                 else
                   @tilanne.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tilanne = _oa
            end
          end
        if !_o['pysyvyys'].nil?
          _oa = _o['pysyvyys']
            if(_oa.is_a? Hash)
              @pysyvyys = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @pysyvyys =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @pysyvyys = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @pysyvyys.push String.from_json(_item)
                 else
                   @pysyvyys.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @pysyvyys = _oa
            end
          end
        if !_o['readTime'].nil?
          _oa = _o['readTime']
            if(_oa.is_a? Hash)
              @readTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @readTime =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @readTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @readTime.push Bignum.from_json(_item)
                 else
                   @readTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @readTime = _oa
            end
          end
        if !_o['modified'].nil?
          _oa = _o['modified']
            if(_oa.is_a? Hash)
              @modified = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @modified =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @modified = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @modified.push Boolean.from_json(_item)
                 else
                   @modified.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @modified = _oa
            end
          end
    end

    # constructs a Hoitotyomerkinta from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Kanta

  # (no documentation provided)
  class Prescription 

    # (no documentation provided)
    attr_accessor :prescriptionName
    # (no documentation provided)
    attr_accessor :assignedOrganizationOid
    # (no documentation provided)
    attr_accessor :assignee
    # (no documentation provided)
    attr_accessor :setIdOid
    # (no documentation provided)
    attr_accessor :assigneeLastName
    # (no documentation provided)
    attr_accessor :id
    # (no documentation provided)
    attr_accessor :denied
    # (no documentation provided)
    attr_accessor :administration
    # (no documentation provided)
    attr_accessor :assignedOrganization
    # (no documentation provided)
    attr_accessor :idOid
    # (no documentation provided)
    attr_accessor :assigneeFirstName
    # (no documentation provided)
    attr_accessor :packageSize
    # (no documentation provided)
    attr_accessor :assignedTime

    # the json hash for this Prescription
    def to_jaxb_json_hash
      _h = {}
      _h['prescriptionName'] = prescriptionName.to_jaxb_json_hash unless prescriptionName.nil?
      _h['assignedOrganizationOid'] = assignedOrganizationOid.to_jaxb_json_hash unless assignedOrganizationOid.nil?
      _h['assignee'] = assignee.to_jaxb_json_hash unless assignee.nil?
      _h['setIdOid'] = setIdOid.to_jaxb_json_hash unless setIdOid.nil?
      _h['assigneeLastName'] = assigneeLastName.to_jaxb_json_hash unless assigneeLastName.nil?
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['denied'] = denied.to_jaxb_json_hash unless denied.nil?
      _h['administration'] = administration.to_jaxb_json_hash unless administration.nil?
      _h['assignedOrganization'] = assignedOrganization.to_jaxb_json_hash unless assignedOrganization.nil?
      _h['idOid'] = idOid.to_jaxb_json_hash unless idOid.nil?
      _h['assigneeFirstName'] = assigneeFirstName.to_jaxb_json_hash unless assigneeFirstName.nil?
      _h['packageSize'] = packageSize.to_jaxb_json_hash unless packageSize.nil?
      _h['assignedTime'] = assignedTime.to_jaxb_json_hash unless assignedTime.nil?
      return _h
    end

    # the json (string form) for this Prescription
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Prescription with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['prescriptionName'].nil?
          _oa = _o['prescriptionName']
            if(_oa.is_a? Hash)
              @prescriptionName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @prescriptionName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @prescriptionName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @prescriptionName.push String.from_json(_item)
                 else
                   @prescriptionName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @prescriptionName = _oa
            end
          end
        if !_o['assignedOrganizationOid'].nil?
          _oa = _o['assignedOrganizationOid']
            if(_oa.is_a? Hash)
              @assignedOrganizationOid = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @assignedOrganizationOid =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @assignedOrganizationOid = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @assignedOrganizationOid.push String.from_json(_item)
                 else
                   @assignedOrganizationOid.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @assignedOrganizationOid = _oa
            end
          end
        if !_o['assignee'].nil?
          _oa = _o['assignee']
            if(_oa.is_a? Hash)
              @assignee = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @assignee =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @assignee = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @assignee.push String.from_json(_item)
                 else
                   @assignee.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @assignee = _oa
            end
          end
        if !_o['setIdOid'].nil?
          _oa = _o['setIdOid']
            if(_oa.is_a? Hash)
              @setIdOid = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @setIdOid =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @setIdOid = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @setIdOid.push String.from_json(_item)
                 else
                   @setIdOid.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @setIdOid = _oa
            end
          end
        if !_o['assigneeLastName'].nil?
          _oa = _o['assigneeLastName']
            if(_oa.is_a? Hash)
              @assigneeLastName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @assigneeLastName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @assigneeLastName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @assigneeLastName.push String.from_json(_item)
                 else
                   @assigneeLastName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @assigneeLastName = _oa
            end
          end
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push Fixnum.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
        if !_o['denied'].nil?
          _oa = _o['denied']
            if(_oa.is_a? Hash)
              @denied = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @denied =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @denied = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @denied.push Boolean.from_json(_item)
                 else
                   @denied.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @denied = _oa
            end
          end
        if !_o['administration'].nil?
          _oa = _o['administration']
            if(_oa.is_a? Hash)
              @administration = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @administration =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @administration = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @administration.push String.from_json(_item)
                 else
                   @administration.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @administration = _oa
            end
          end
        if !_o['assignedOrganization'].nil?
          _oa = _o['assignedOrganization']
            if(_oa.is_a? Hash)
              @assignedOrganization = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @assignedOrganization =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @assignedOrganization = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @assignedOrganization.push String.from_json(_item)
                 else
                   @assignedOrganization.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @assignedOrganization = _oa
            end
          end
        if !_o['idOid'].nil?
          _oa = _o['idOid']
            if(_oa.is_a? Hash)
              @idOid = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @idOid =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @idOid = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @idOid.push String.from_json(_item)
                 else
                   @idOid.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @idOid = _oa
            end
          end
        if !_o['assigneeFirstName'].nil?
          _oa = _o['assigneeFirstName']
            if(_oa.is_a? Hash)
              @assigneeFirstName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @assigneeFirstName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @assigneeFirstName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @assigneeFirstName.push String.from_json(_item)
                 else
                   @assigneeFirstName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @assigneeFirstName = _oa
            end
          end
        if !_o['packageSize'].nil?
          _oa = _o['packageSize']
            if(_oa.is_a? Hash)
              @packageSize = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @packageSize =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @packageSize = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @packageSize.push String.from_json(_item)
                 else
                   @packageSize.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @packageSize = _oa
            end
          end
        if !_o['assignedTime'].nil?
          _oa = _o['assignedTime']
            if(_oa.is_a? Hash)
              @assignedTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @assignedTime =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @assignedTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @assignedTime.push String.from_json(_item)
                 else
                   @assignedTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @assignedTime = _oa
            end
          end
    end

    # constructs a Prescription from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Kanta

  # (no documentation provided)
  class AmmattilaisenTiedot 

    # (no documentation provided)
    attr_accessor :hetu
    # (no documentation provided)
    attr_accessor :namePrefixQualifier
    # (no documentation provided)
    attr_accessor :namePrefix
    # (no documentation provided)
    attr_accessor :familyName
    # (no documentation provided)
    attr_accessor :cardNumber
    # (no documentation provided)
    attr_accessor :nameSuffixQualifier
    # (no documentation provided)
    attr_accessor :nameSuffix
    # (no documentation provided)
    attr_accessor :kutsumanimi
    # (no documentation provided)
    attr_accessor :givenNames

    # the json hash for this AmmattilaisenTiedot
    def to_jaxb_json_hash
      _h = {}
      _h['hetu'] = hetu.to_jaxb_json_hash unless hetu.nil?
      _h['namePrefixQualifier'] = namePrefixQualifier.to_jaxb_json_hash unless namePrefixQualifier.nil?
      _h['namePrefix'] = namePrefix.to_jaxb_json_hash unless namePrefix.nil?
      _h['familyName'] = familyName.to_jaxb_json_hash unless familyName.nil?
      _h['cardNumber'] = cardNumber.to_jaxb_json_hash unless cardNumber.nil?
      _h['nameSuffixQualifier'] = nameSuffixQualifier.to_jaxb_json_hash unless nameSuffixQualifier.nil?
      _h['nameSuffix'] = nameSuffix.to_jaxb_json_hash unless nameSuffix.nil?
      _h['kutsumanimi'] = kutsumanimi.to_jaxb_json_hash unless kutsumanimi.nil?
      _h['givenNames'] = givenNames.to_jaxb_json_hash unless givenNames.nil?
      return _h
    end

    # the json (string form) for this AmmattilaisenTiedot
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this AmmattilaisenTiedot with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['hetu'].nil?
          _oa = _o['hetu']
            if(_oa.is_a? Hash)
              @hetu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @hetu =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @hetu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @hetu.push String.from_json(_item)
                 else
                   @hetu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @hetu = _oa
            end
          end
        if !_o['namePrefixQualifier'].nil?
          _oa = _o['namePrefixQualifier']
            if(_oa.is_a? Hash)
              @namePrefixQualifier = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @namePrefixQualifier =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @namePrefixQualifier = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @namePrefixQualifier.push String.from_json(_item)
                 else
                   @namePrefixQualifier.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @namePrefixQualifier = _oa
            end
          end
        if !_o['namePrefix'].nil?
          _oa = _o['namePrefix']
            if(_oa.is_a? Hash)
              @namePrefix = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @namePrefix =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @namePrefix = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @namePrefix.push String.from_json(_item)
                 else
                   @namePrefix.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @namePrefix = _oa
            end
          end
        if !_o['familyName'].nil?
          _oa = _o['familyName']
            if(_oa.is_a? Hash)
              @familyName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @familyName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @familyName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @familyName.push String.from_json(_item)
                 else
                   @familyName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @familyName = _oa
            end
          end
        if !_o['cardNumber'].nil?
          _oa = _o['cardNumber']
            if(_oa.is_a? Hash)
              @cardNumber = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @cardNumber =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @cardNumber = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @cardNumber.push String.from_json(_item)
                 else
                   @cardNumber.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @cardNumber = _oa
            end
          end
        if !_o['nameSuffixQualifier'].nil?
          _oa = _o['nameSuffixQualifier']
            if(_oa.is_a? Hash)
              @nameSuffixQualifier = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @nameSuffixQualifier =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @nameSuffixQualifier = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @nameSuffixQualifier.push String.from_json(_item)
                 else
                   @nameSuffixQualifier.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @nameSuffixQualifier = _oa
            end
          end
        if !_o['nameSuffix'].nil?
          _oa = _o['nameSuffix']
            if(_oa.is_a? Hash)
              @nameSuffix = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @nameSuffix =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @nameSuffix = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @nameSuffix.push String.from_json(_item)
                 else
                   @nameSuffix.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @nameSuffix = _oa
            end
          end
        if !_o['kutsumanimi'].nil?
          _oa = _o['kutsumanimi']
            if(_oa.is_a? Hash)
              @kutsumanimi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kutsumanimi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kutsumanimi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kutsumanimi.push String.from_json(_item)
                 else
                   @kutsumanimi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kutsumanimi = _oa
            end
          end
        if !_o['givenNames'].nil?
          _oa = _o['givenNames']
            if(_oa.is_a? Hash)
              @givenNames = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @givenNames =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @givenNames = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @givenNames.push String.from_json(_item)
                 else
                   @givenNames.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @givenNames = _oa
            end
          end
    end

    # constructs a AmmattilaisenTiedot from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Omistaja

  # (no documentation provided)
  class LazyLoadedDtoOfRiskitietoStatus 

    # (no documentation provided)
    attr_accessor :type
    # (no documentation provided)
    attr_accessor :loaded
    # (no documentation provided)
    attr_accessor :loadUrl
    # (no documentation provided)
    attr_accessor :object

    # the json hash for this LazyLoadedDtoOfRiskitietoStatus
    def to_jaxb_json_hash
      _h = {}
      _h['type'] = type.to_jaxb_json_hash unless type.nil?
      _h['loaded'] = loaded.to_jaxb_json_hash unless loaded.nil?
      _h['loadUrl'] = loadUrl.to_jaxb_json_hash unless loadUrl.nil?
      _h['object'] = object.to_jaxb_json_hash unless object.nil?
      return _h
    end

    # the json (string form) for this LazyLoadedDtoOfRiskitietoStatus
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this LazyLoadedDtoOfRiskitietoStatus with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['type'].nil?
          _oa = _o['type']
            if(_oa.is_a? Hash)
              @type = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @type =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @type = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @type.push String.from_json(_item)
                 else
                   @type.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @type = _oa
            end
          end
        if !_o['loaded'].nil?
          _oa = _o['loaded']
            if(_oa.is_a? Hash)
              @loaded = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @loaded =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @loaded = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @loaded.push Boolean.from_json(_item)
                 else
                   @loaded.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @loaded = _oa
            end
          end
        if !_o['loadUrl'].nil?
          _oa = _o['loadUrl']
            if(_oa.is_a? Hash)
              @loadUrl = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @loadUrl =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @loadUrl = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @loadUrl.push String.from_json(_item)
                 else
                   @loadUrl.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @loadUrl = _oa
            end
          end
        if !_o['object'].nil?
          _oa = _o['object']
            if(_oa.is_a? Hash)
              @object = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @object =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @object = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @object.push String.from_json(_item)
                 else
                   @object.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @object = _oa
            end
          end
    end

    # constructs a LazyLoadedDtoOfRiskitietoStatus from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Omistaja

  # (no documentation provided)
  class LazyLoadedDtoOfHoitosuhde 

    # (no documentation provided)
    attr_accessor :object
    # (no documentation provided)
    attr_accessor :type
    # (no documentation provided)
    attr_accessor :loadUrl
    # (no documentation provided)
    attr_accessor :loaded

    # the json hash for this LazyLoadedDtoOfHoitosuhde
    def to_jaxb_json_hash
      _h = {}
      _h['object'] = object.to_jaxb_json_hash unless object.nil?
      _h['type'] = type.to_jaxb_json_hash unless type.nil?
      _h['loadUrl'] = loadUrl.to_jaxb_json_hash unless loadUrl.nil?
      _h['loaded'] = loaded.to_jaxb_json_hash unless loaded.nil?
      return _h
    end

    # the json (string form) for this LazyLoadedDtoOfHoitosuhde
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this LazyLoadedDtoOfHoitosuhde with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['object'].nil?
          _oa = _o['object']
            if(_oa.is_a? Hash)
              @object = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @object =  Fi::Mediconsult::Core::Client::Dto::Hoitosuhde.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @object = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @object.push Fi::Mediconsult::Core::Client::Dto::Hoitosuhde.from_json(_item)
                 else
                   @object.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @object = _oa
            end
          end
        if !_o['type'].nil?
          _oa = _o['type']
            if(_oa.is_a? Hash)
              @type = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @type =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @type = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @type.push String.from_json(_item)
                 else
                   @type.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @type = _oa
            end
          end
        if !_o['loadUrl'].nil?
          _oa = _o['loadUrl']
            if(_oa.is_a? Hash)
              @loadUrl = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @loadUrl =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @loadUrl = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @loadUrl.push String.from_json(_item)
                 else
                   @loadUrl.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @loadUrl = _oa
            end
          end
        if !_o['loaded'].nil?
          _oa = _o['loaded']
            if(_oa.is_a? Hash)
              @loaded = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @loaded =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @loaded = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @loaded.push Boolean.from_json(_item)
                 else
                   @loaded.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @loaded = _oa
            end
          end
    end

    # constructs a LazyLoadedDtoOfHoitosuhde from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Kertomus

  # (no documentation provided)
  class MainTitleConfig 

    # (no documentation provided)
    attr_accessor :templateTitles
    # (no documentation provided)
    attr_accessor :groupTitles
    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :paanakyma
    # (no documentation provided)
    attr_accessor :deleteEmptyTitle
    # (no documentation provided)
    attr_accessor :userGroup
    # (no documentation provided)
    attr_accessor :signTitle
    # (no documentation provided)
    attr_accessor :lisanakyma
    # (no documentation provided)
    attr_accessor :lisanakymat

    # the json hash for this MainTitleConfig
    def to_jaxb_json_hash
      _h = {}
      _h['templateTitles'] = templateTitles.to_jaxb_json_hash unless templateTitles.nil?
      if !groupTitles.nil?
        _ha = Array.new
        groupTitles.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['groupTitles'] = _ha
      end
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['paanakyma'] = paanakyma.to_jaxb_json_hash unless paanakyma.nil?
      _h['deleteEmptyTitle'] = deleteEmptyTitle.to_jaxb_json_hash unless deleteEmptyTitle.nil?
      _h['userGroup'] = userGroup.to_jaxb_json_hash unless userGroup.nil?
      _h['signTitle'] = signTitle.to_jaxb_json_hash unless signTitle.nil?
      _h['lisanakyma'] = lisanakyma.to_jaxb_json_hash unless lisanakyma.nil?
      if !lisanakymat.nil?
        _ha = Array.new
        lisanakymat.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['lisanakymat'] = _ha
      end
      return _h
    end

    # the json (string form) for this MainTitleConfig
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this MainTitleConfig with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['templateTitles'].nil?
          _oa = _o['templateTitles']
            if(_oa.is_a? Hash)
              @templateTitles = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @templateTitles =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @templateTitles = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @templateTitles.push Hash.from_json(_item)
                 else
                   @templateTitles.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @templateTitles = _oa
            end
          end
        if !_o['groupTitles'].nil?
          _oa = _o['groupTitles']
            if(_oa.is_a? Hash)
              @groupTitles = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @groupTitles =  Fi::Mediconsult::Core::Client::Dto::Kertomus::GroupTitlesConfig.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @groupTitles = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @groupTitles.push Fi::Mediconsult::Core::Client::Dto::Kertomus::GroupTitlesConfig.from_json(_item)
                 else
                   @groupTitles.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @groupTitles = _oa
            end
          end
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['paanakyma'].nil?
          _oa = _o['paanakyma']
            if(_oa.is_a? Hash)
              @paanakyma = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @paanakyma =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @paanakyma = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @paanakyma.push String.from_json(_item)
                 else
                   @paanakyma.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @paanakyma = _oa
            end
          end
        if !_o['deleteEmptyTitle'].nil?
          _oa = _o['deleteEmptyTitle']
            if(_oa.is_a? Hash)
              @deleteEmptyTitle = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @deleteEmptyTitle =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @deleteEmptyTitle = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @deleteEmptyTitle.push Boolean.from_json(_item)
                 else
                   @deleteEmptyTitle.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @deleteEmptyTitle = _oa
            end
          end
        if !_o['userGroup'].nil?
          _oa = _o['userGroup']
            if(_oa.is_a? Hash)
              @userGroup = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @userGroup =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @userGroup = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @userGroup.push Fixnum.from_json(_item)
                 else
                   @userGroup.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @userGroup = _oa
            end
          end
        if !_o['signTitle'].nil?
          _oa = _o['signTitle']
            if(_oa.is_a? Hash)
              @signTitle = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @signTitle =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @signTitle = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @signTitle.push String.from_json(_item)
                 else
                   @signTitle.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @signTitle = _oa
            end
          end
        if !_o['lisanakyma'].nil?
          _oa = _o['lisanakyma']
            if(_oa.is_a? Hash)
              @lisanakyma = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lisanakyma =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lisanakyma = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lisanakyma.push String.from_json(_item)
                 else
                   @lisanakyma.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lisanakyma = _oa
            end
          end
        if !_o['lisanakymat'].nil?
          _oa = _o['lisanakymat']
            if(_oa.is_a? Hash)
              @lisanakymat = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lisanakymat =  Fi::Mediconsult::Core::Client::Dto::CodeDTO.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lisanakymat = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lisanakymat.push Fi::Mediconsult::Core::Client::Dto::CodeDTO.from_json(_item)
                 else
                   @lisanakymat.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lisanakymat = _oa
            end
          end
    end

    # constructs a MainTitleConfig from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Omistaja

  # (no documentation provided)
  class LazyLoadedDtoOfPalvelutapahtumaList 

    # (no documentation provided)
    attr_accessor :type
    # (no documentation provided)
    attr_accessor :object
    # (no documentation provided)
    attr_accessor :loaded
    # (no documentation provided)
    attr_accessor :loadUrl

    # the json hash for this LazyLoadedDtoOfPalvelutapahtumaList
    def to_jaxb_json_hash
      _h = {}
      _h['type'] = type.to_jaxb_json_hash unless type.nil?
      _h['object'] = object.to_jaxb_json_hash unless object.nil?
      _h['loaded'] = loaded.to_jaxb_json_hash unless loaded.nil?
      _h['loadUrl'] = loadUrl.to_jaxb_json_hash unless loadUrl.nil?
      return _h
    end

    # the json (string form) for this LazyLoadedDtoOfPalvelutapahtumaList
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this LazyLoadedDtoOfPalvelutapahtumaList with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['type'].nil?
          _oa = _o['type']
            if(_oa.is_a? Hash)
              @type = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @type =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @type = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @type.push String.from_json(_item)
                 else
                   @type.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @type = _oa
            end
          end
        if !_o['object'].nil?
          _oa = _o['object']
            if(_oa.is_a? Hash)
              @object = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @object =  Fi::Mediconsult::Core::Client::Dto::PalvelutapahtumaList.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @object = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @object.push Fi::Mediconsult::Core::Client::Dto::PalvelutapahtumaList.from_json(_item)
                 else
                   @object.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @object = _oa
            end
          end
        if !_o['loaded'].nil?
          _oa = _o['loaded']
            if(_oa.is_a? Hash)
              @loaded = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @loaded =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @loaded = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @loaded.push Boolean.from_json(_item)
                 else
                   @loaded.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @loaded = _oa
            end
          end
        if !_o['loadUrl'].nil?
          _oa = _o['loadUrl']
            if(_oa.is_a? Hash)
              @loadUrl = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @loadUrl =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @loadUrl = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @loadUrl.push String.from_json(_item)
                 else
                   @loadUrl.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @loadUrl = _oa
            end
          end
    end

    # constructs a LazyLoadedDtoOfPalvelutapahtumaList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Security

module Dto

  # (no documentation provided)
  class ViewConfiguration 

    # (no documentation provided)
    attr_accessor :landingPage
    # (no documentation provided)
    attr_accessor :landingPageWithOwner
    # (no documentation provided)
    attr_accessor :components
    # (no documentation provided)
    attr_accessor :productName
    # (no documentation provided)
    attr_accessor :productCode
    # (no documentation provided)
    attr_accessor :productConfigurations

    # the json hash for this ViewConfiguration
    def to_jaxb_json_hash
      _h = {}
      _h['landingPage'] = landingPage.to_jaxb_json_hash unless landingPage.nil?
      _h['landingPageWithOwner'] = landingPageWithOwner.to_jaxb_json_hash unless landingPageWithOwner.nil?
      if !components.nil?
        _ha = Array.new
        components.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['components'] = _ha
      end
      _h['productName'] = productName.to_jaxb_json_hash unless productName.nil?
      _h['productCode'] = productCode.to_jaxb_json_hash unless productCode.nil?
      if !productConfigurations.nil?
        _ha = Array.new
        productConfigurations.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['productConfigurations'] = _ha
      end
      return _h
    end

    # the json (string form) for this ViewConfiguration
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this ViewConfiguration with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['landingPage'].nil?
          _oa = _o['landingPage']
            if(_oa.is_a? Hash)
              @landingPage = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @landingPage =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @landingPage = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @landingPage.push String.from_json(_item)
                 else
                   @landingPage.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @landingPage = _oa
            end
          end
        if !_o['landingPageWithOwner'].nil?
          _oa = _o['landingPageWithOwner']
            if(_oa.is_a? Hash)
              @landingPageWithOwner = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @landingPageWithOwner =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @landingPageWithOwner = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @landingPageWithOwner.push String.from_json(_item)
                 else
                   @landingPageWithOwner.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @landingPageWithOwner = _oa
            end
          end
        if !_o['components'].nil?
          _oa = _o['components']
            if(_oa.is_a? Hash)
              @components = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @components =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @components = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @components.push String.from_json(_item)
                 else
                   @components.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @components = _oa
            end
          end
        if !_o['productName'].nil?
          _oa = _o['productName']
            if(_oa.is_a? Hash)
              @productName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @productName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @productName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @productName.push String.from_json(_item)
                 else
                   @productName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @productName = _oa
            end
          end
        if !_o['productCode'].nil?
          _oa = _o['productCode']
            if(_oa.is_a? Hash)
              @productCode = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @productCode =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @productCode = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @productCode.push String.from_json(_item)
                 else
                   @productCode.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @productCode = _oa
            end
          end
        if !_o['productConfigurations'].nil?
          _oa = _o['productConfigurations']
            if(_oa.is_a? Hash)
              @productConfigurations = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @productConfigurations =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @productConfigurations = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @productConfigurations.push String.from_json(_item)
                 else
                   @productConfigurations.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @productConfigurations = _oa
            end
          end
    end

    # constructs a ViewConfiguration from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Omistaja

  # (no documentation provided)
  class LazyLoadedDtoOfWardCareStatus 

    # (no documentation provided)
    attr_accessor :loaded
    # (no documentation provided)
    attr_accessor :object
    # (no documentation provided)
    attr_accessor :type
    # (no documentation provided)
    attr_accessor :loadUrl

    # the json hash for this LazyLoadedDtoOfWardCareStatus
    def to_jaxb_json_hash
      _h = {}
      _h['loaded'] = loaded.to_jaxb_json_hash unless loaded.nil?
      _h['object'] = object.to_jaxb_json_hash unless object.nil?
      _h['type'] = type.to_jaxb_json_hash unless type.nil?
      _h['loadUrl'] = loadUrl.to_jaxb_json_hash unless loadUrl.nil?
      return _h
    end

    # the json (string form) for this LazyLoadedDtoOfWardCareStatus
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this LazyLoadedDtoOfWardCareStatus with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['loaded'].nil?
          _oa = _o['loaded']
            if(_oa.is_a? Hash)
              @loaded = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @loaded =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @loaded = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @loaded.push Boolean.from_json(_item)
                 else
                   @loaded.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @loaded = _oa
            end
          end
        if !_o['object'].nil?
          _oa = _o['object']
            if(_oa.is_a? Hash)
              @object = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @object =  Fi::Mediconsult::Core::Client::Dto::Omistaja::WardCareStatus.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @object = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @object.push Fi::Mediconsult::Core::Client::Dto::Omistaja::WardCareStatus.from_json(_item)
                 else
                   @object.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @object = _oa
            end
          end
        if !_o['type'].nil?
          _oa = _o['type']
            if(_oa.is_a? Hash)
              @type = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @type =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @type = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @type.push String.from_json(_item)
                 else
                   @type.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @type = _oa
            end
          end
        if !_o['loadUrl'].nil?
          _oa = _o['loadUrl']
            if(_oa.is_a? Hash)
              @loadUrl = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @loadUrl =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @loadUrl = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @loadUrl.push String.from_json(_item)
                 else
                   @loadUrl.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @loadUrl = _oa
            end
          end
    end

    # constructs a LazyLoadedDtoOfWardCareStatus from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Planner

  # (no documentation provided)
  class EventOptimizationRuleConflictDto 

    # (no documentation provided)
    attr_accessor :eventId
    # (no documentation provided)
    attr_accessor :rule

    # the json hash for this EventOptimizationRuleConflictDto
    def to_jaxb_json_hash
      _h = {}
      _h['eventId'] = eventId.to_jaxb_json_hash unless eventId.nil?
      _h['rule'] = rule.to_jaxb_json_hash unless rule.nil?
      return _h
    end

    # the json (string form) for this EventOptimizationRuleConflictDto
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this EventOptimizationRuleConflictDto with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['eventId'].nil?
          _oa = _o['eventId']
            if(_oa.is_a? Hash)
              @eventId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @eventId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @eventId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @eventId.push Bignum.from_json(_item)
                 else
                   @eventId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @eventId = _oa
            end
          end
        if !_o['rule'].nil?
          _oa = _o['rule']
            if(_oa.is_a? Hash)
              @rule = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rule =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rule = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rule.push String.from_json(_item)
                 else
                   @rule.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rule = _oa
            end
          end
    end

    # constructs a EventOptimizationRuleConflictDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Medisos

module Dto

  # (no documentation provided)
  class ViittausDto 

    # (no documentation provided)
    attr_accessor :viittaajaId
    # (no documentation provided)
    attr_accessor :viitattuId

    # the json hash for this ViittausDto
    def to_jaxb_json_hash
      _h = {}
      _h['viittaajaId'] = viittaajaId.to_jaxb_json_hash unless viittaajaId.nil?
      _h['viitattuId'] = viitattuId.to_jaxb_json_hash unless viitattuId.nil?
      return _h
    end

    # the json (string form) for this ViittausDto
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this ViittausDto with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['viittaajaId'].nil?
          _oa = _o['viittaajaId']
            if(_oa.is_a? Hash)
              @viittaajaId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @viittaajaId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @viittaajaId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @viittaajaId.push Bignum.from_json(_item)
                 else
                   @viittaajaId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @viittaajaId = _oa
            end
          end
        if !_o['viitattuId'].nil?
          _oa = _o['viitattuId']
            if(_oa.is_a? Hash)
              @viitattuId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @viitattuId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @viitattuId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @viitattuId.push Bignum.from_json(_item)
                 else
                   @viitattuId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @viitattuId = _oa
            end
          end
    end

    # constructs a ViittausDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class Hoitosuhde 

    # (no documentation provided)
    attr_accessor :date
    # (no documentation provided)
    attr_accessor :unit
    # (no documentation provided)
    attr_accessor :patient
    # (no documentation provided)
    attr_accessor :palvelutapahtuma
    # (no documentation provided)
    attr_accessor :katselunErityinenSyy
    # (no documentation provided)
    attr_accessor :erityissuojausperustelu
    # users omistajaId
    attr_accessor :user
    # List of erityissuojausryhmat that user has access in this session. Means that user has given &quot;perustelu&quot; already and no need to ask for it.
    attr_accessor :sallitutErityissuojausryhmat

    # the json hash for this Hoitosuhde
    def to_jaxb_json_hash
      _h = {}
      _h['date'] = date.to_jaxb_json_hash unless date.nil?
      _h['unit'] = unit.to_jaxb_json_hash unless unit.nil?
      _h['patient'] = patient.to_jaxb_json_hash unless patient.nil?
      _h['palvelutapahtuma'] = palvelutapahtuma.to_jaxb_json_hash unless palvelutapahtuma.nil?
      _h['katselunErityinenSyy'] = katselunErityinenSyy.to_jaxb_json_hash unless katselunErityinenSyy.nil?
      _h['erityissuojausperustelu'] = erityissuojausperustelu.to_jaxb_json_hash unless erityissuojausperustelu.nil?
      _h['user'] = user.to_jaxb_json_hash unless user.nil?
      if !sallitutErityissuojausryhmat.nil?
        _ha = Array.new
        sallitutErityissuojausryhmat.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['sallitutErityissuojausryhmat'] = _ha
      end
      return _h
    end

    # the json (string form) for this Hoitosuhde
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Hoitosuhde with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['date'].nil?
          _oa = _o['date']
            if(_oa.is_a? Hash)
              @date = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @date =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @date = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @date.push Time.from_json(_item)
                 else
                   @date.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @date = _oa
            end
          end
        if !_o['unit'].nil?
          _oa = _o['unit']
            if(_oa.is_a? Hash)
              @unit = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @unit =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @unit = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @unit.push Fixnum.from_json(_item)
                 else
                   @unit.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @unit = _oa
            end
          end
        if !_o['patient'].nil?
          _oa = _o['patient']
            if(_oa.is_a? Hash)
              @patient = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @patient =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @patient = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @patient.push Fixnum.from_json(_item)
                 else
                   @patient.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @patient = _oa
            end
          end
        if !_o['palvelutapahtuma'].nil?
          _oa = _o['palvelutapahtuma']
            if(_oa.is_a? Hash)
              @palvelutapahtuma = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palvelutapahtuma =  Fi::Mediconsult::Core::Client::Dto::Palvelutapahtuma.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palvelutapahtuma = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palvelutapahtuma.push Fi::Mediconsult::Core::Client::Dto::Palvelutapahtuma.from_json(_item)
                 else
                   @palvelutapahtuma.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palvelutapahtuma = _oa
            end
          end
        if !_o['katselunErityinenSyy'].nil?
          _oa = _o['katselunErityinenSyy']
            if(_oa.is_a? Hash)
              @katselunErityinenSyy = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @katselunErityinenSyy =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @katselunErityinenSyy = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @katselunErityinenSyy.push String.from_json(_item)
                 else
                   @katselunErityinenSyy.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @katselunErityinenSyy = _oa
            end
          end
        if !_o['erityissuojausperustelu'].nil?
          _oa = _o['erityissuojausperustelu']
            if(_oa.is_a? Hash)
              @erityissuojausperustelu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @erityissuojausperustelu =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @erityissuojausperustelu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @erityissuojausperustelu.push String.from_json(_item)
                 else
                   @erityissuojausperustelu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @erityissuojausperustelu = _oa
            end
          end
        if !_o['user'].nil?
          _oa = _o['user']
            if(_oa.is_a? Hash)
              @user = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @user =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @user = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @user.push Fixnum.from_json(_item)
                 else
                   @user.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @user = _oa
            end
          end
        if !_o['sallitutErityissuojausryhmat'].nil?
          _oa = _o['sallitutErityissuojausryhmat']
            if(_oa.is_a? Hash)
              @sallitutErityissuojausryhmat = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @sallitutErityissuojausryhmat =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @sallitutErityissuojausryhmat = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @sallitutErityissuojausryhmat.push String.from_json(_item)
                 else
                   @sallitutErityissuojausryhmat.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @sallitutErityissuojausryhmat = _oa
            end
          end
    end

    # constructs a Hoitosuhde from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Event

  # (no documentation provided)
  class EventOverlapConflictDto 

    # the conflictId
    attr_accessor :conflictId
    # the calendarEventId
    attr_accessor :calendarEventId
    # the eventName
    attr_accessor :eventName

    # the json hash for this EventOverlapConflictDto
    def to_jaxb_json_hash
      _h = {}
      _h['conflictId'] = conflictId.to_jaxb_json_hash unless conflictId.nil?
      _h['calendarEventId'] = calendarEventId.to_jaxb_json_hash unless calendarEventId.nil?
      _h['eventName'] = eventName.to_jaxb_json_hash unless eventName.nil?
      return _h
    end

    # the json (string form) for this EventOverlapConflictDto
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this EventOverlapConflictDto with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['conflictId'].nil?
          _oa = _o['conflictId']
            if(_oa.is_a? Hash)
              @conflictId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @conflictId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @conflictId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @conflictId.push Bignum.from_json(_item)
                 else
                   @conflictId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @conflictId = _oa
            end
          end
        if !_o['calendarEventId'].nil?
          _oa = _o['calendarEventId']
            if(_oa.is_a? Hash)
              @calendarEventId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @calendarEventId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @calendarEventId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @calendarEventId.push Bignum.from_json(_item)
                 else
                   @calendarEventId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @calendarEventId = _oa
            end
          end
        if !_o['eventName'].nil?
          _oa = _o['eventName']
            if(_oa.is_a? Hash)
              @eventName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @eventName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @eventName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @eventName.push String.from_json(_item)
                 else
                   @eventName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @eventName = _oa
            end
          end
    end

    # constructs a EventOverlapConflictDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Palvelupaatos

  # (no documentation provided)
  class Palveluluokka 

    # (no documentation provided)
    attr_accessor :tunnus
    # (no documentation provided)
    attr_accessor :nimi
    # (no documentation provided)
    attr_accessor :kayttajaryhma
    # (no documentation provided)
    attr_accessor :palvelunTarveOtsikko
    # (no documentation provided)
    attr_accessor :paatostekstinOtsikko
    # (no documentation provided)
    attr_accessor :lakipykalat
    # (no documentation provided)
    attr_accessor :suoritekoodi
    # (no documentation provided)
    attr_accessor :diaarinumerosarja
    # (no documentation provided)
    attr_accessor :paatosAvoin
    # (no documentation provided)
    attr_accessor :riviotsikko
    # (no documentation provided)
    attr_accessor :sarakeotsikko
    # (no documentation provided)
    attr_accessor :laskutusTapahtumienMukaisesti
    # (no documentation provided)
    attr_accessor :tukipalvelu
    # (no documentation provided)
    attr_accessor :paattajaryhmanOtsikko
    # (no documentation provided)
    attr_accessor :palvelunimikkeisto
    # (no documentation provided)
    attr_accessor :tapahtumamalli
    # (no documentation provided)
    attr_accessor :laskettavatTilat

    # the json hash for this Palveluluokka
    def to_jaxb_json_hash
      _h = {}
      _h['tunnus'] = tunnus.to_jaxb_json_hash unless tunnus.nil?
      _h['nimi'] = nimi.to_jaxb_json_hash unless nimi.nil?
      _h['kayttajaryhma'] = kayttajaryhma.to_jaxb_json_hash unless kayttajaryhma.nil?
      _h['palvelunTarveOtsikko'] = palvelunTarveOtsikko.to_jaxb_json_hash unless palvelunTarveOtsikko.nil?
      _h['paatostekstinOtsikko'] = paatostekstinOtsikko.to_jaxb_json_hash unless paatostekstinOtsikko.nil?
      if !lakipykalat.nil?
        _ha = Array.new
        lakipykalat.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['lakipykalat'] = _ha
      end
      _h['suoritekoodi'] = suoritekoodi.to_jaxb_json_hash unless suoritekoodi.nil?
      _h['diaarinumerosarja'] = diaarinumerosarja.to_jaxb_json_hash unless diaarinumerosarja.nil?
      _h['paatosAvoin'] = paatosAvoin.to_jaxb_json_hash unless paatosAvoin.nil?
      _h['riviotsikko'] = riviotsikko.to_jaxb_json_hash unless riviotsikko.nil?
      _h['sarakeotsikko'] = sarakeotsikko.to_jaxb_json_hash unless sarakeotsikko.nil?
      _h['laskutusTapahtumienMukaisesti'] = laskutusTapahtumienMukaisesti.to_jaxb_json_hash unless laskutusTapahtumienMukaisesti.nil?
      _h['tukipalvelu'] = tukipalvelu.to_jaxb_json_hash unless tukipalvelu.nil?
      _h['paattajaryhmanOtsikko'] = paattajaryhmanOtsikko.to_jaxb_json_hash unless paattajaryhmanOtsikko.nil?
      _h['palvelunimikkeisto'] = palvelunimikkeisto.to_jaxb_json_hash unless palvelunimikkeisto.nil?
      _h['tapahtumamalli'] = tapahtumamalli.to_jaxb_json_hash unless tapahtumamalli.nil?
      if !laskettavatTilat.nil?
        _ha = Array.new
        laskettavatTilat.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['laskettavatTilat'] = _ha
      end
      return _h
    end

    # the json (string form) for this Palveluluokka
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Palveluluokka with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['tunnus'].nil?
          _oa = _o['tunnus']
            if(_oa.is_a? Hash)
              @tunnus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tunnus =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tunnus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tunnus.push String.from_json(_item)
                 else
                   @tunnus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tunnus = _oa
            end
          end
        if !_o['nimi'].nil?
          _oa = _o['nimi']
            if(_oa.is_a? Hash)
              @nimi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @nimi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @nimi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @nimi.push String.from_json(_item)
                 else
                   @nimi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @nimi = _oa
            end
          end
        if !_o['kayttajaryhma'].nil?
          _oa = _o['kayttajaryhma']
            if(_oa.is_a? Hash)
              @kayttajaryhma = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kayttajaryhma =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kayttajaryhma = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kayttajaryhma.push String.from_json(_item)
                 else
                   @kayttajaryhma.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kayttajaryhma = _oa
            end
          end
        if !_o['palvelunTarveOtsikko'].nil?
          _oa = _o['palvelunTarveOtsikko']
            if(_oa.is_a? Hash)
              @palvelunTarveOtsikko = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palvelunTarveOtsikko =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palvelunTarveOtsikko = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palvelunTarveOtsikko.push String.from_json(_item)
                 else
                   @palvelunTarveOtsikko.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palvelunTarveOtsikko = _oa
            end
          end
        if !_o['paatostekstinOtsikko'].nil?
          _oa = _o['paatostekstinOtsikko']
            if(_oa.is_a? Hash)
              @paatostekstinOtsikko = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @paatostekstinOtsikko =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @paatostekstinOtsikko = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @paatostekstinOtsikko.push String.from_json(_item)
                 else
                   @paatostekstinOtsikko.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @paatostekstinOtsikko = _oa
            end
          end
        if !_o['lakipykalat'].nil?
          _oa = _o['lakipykalat']
            if(_oa.is_a? Hash)
              @lakipykalat = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lakipykalat =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lakipykalat = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lakipykalat.push String.from_json(_item)
                 else
                   @lakipykalat.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lakipykalat = _oa
            end
          end
        if !_o['suoritekoodi'].nil?
          _oa = _o['suoritekoodi']
            if(_oa.is_a? Hash)
              @suoritekoodi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @suoritekoodi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @suoritekoodi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @suoritekoodi.push String.from_json(_item)
                 else
                   @suoritekoodi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @suoritekoodi = _oa
            end
          end
        if !_o['diaarinumerosarja'].nil?
          _oa = _o['diaarinumerosarja']
            if(_oa.is_a? Hash)
              @diaarinumerosarja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @diaarinumerosarja =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @diaarinumerosarja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @diaarinumerosarja.push String.from_json(_item)
                 else
                   @diaarinumerosarja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @diaarinumerosarja = _oa
            end
          end
        if !_o['paatosAvoin'].nil?
          _oa = _o['paatosAvoin']
            if(_oa.is_a? Hash)
              @paatosAvoin = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @paatosAvoin =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @paatosAvoin = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @paatosAvoin.push Boolean.from_json(_item)
                 else
                   @paatosAvoin.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @paatosAvoin = _oa
            end
          end
        if !_o['riviotsikko'].nil?
          _oa = _o['riviotsikko']
            if(_oa.is_a? Hash)
              @riviotsikko = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @riviotsikko =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @riviotsikko = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @riviotsikko.push String.from_json(_item)
                 else
                   @riviotsikko.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @riviotsikko = _oa
            end
          end
        if !_o['sarakeotsikko'].nil?
          _oa = _o['sarakeotsikko']
            if(_oa.is_a? Hash)
              @sarakeotsikko = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @sarakeotsikko =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @sarakeotsikko = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @sarakeotsikko.push String.from_json(_item)
                 else
                   @sarakeotsikko.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @sarakeotsikko = _oa
            end
          end
        if !_o['laskutusTapahtumienMukaisesti'].nil?
          _oa = _o['laskutusTapahtumienMukaisesti']
            if(_oa.is_a? Hash)
              @laskutusTapahtumienMukaisesti = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laskutusTapahtumienMukaisesti =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laskutusTapahtumienMukaisesti = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laskutusTapahtumienMukaisesti.push Boolean.from_json(_item)
                 else
                   @laskutusTapahtumienMukaisesti.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laskutusTapahtumienMukaisesti = _oa
            end
          end
        if !_o['tukipalvelu'].nil?
          _oa = _o['tukipalvelu']
            if(_oa.is_a? Hash)
              @tukipalvelu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tukipalvelu =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tukipalvelu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tukipalvelu.push Boolean.from_json(_item)
                 else
                   @tukipalvelu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tukipalvelu = _oa
            end
          end
        if !_o['paattajaryhmanOtsikko'].nil?
          _oa = _o['paattajaryhmanOtsikko']
            if(_oa.is_a? Hash)
              @paattajaryhmanOtsikko = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @paattajaryhmanOtsikko =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @paattajaryhmanOtsikko = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @paattajaryhmanOtsikko.push String.from_json(_item)
                 else
                   @paattajaryhmanOtsikko.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @paattajaryhmanOtsikko = _oa
            end
          end
        if !_o['palvelunimikkeisto'].nil?
          _oa = _o['palvelunimikkeisto']
            if(_oa.is_a? Hash)
              @palvelunimikkeisto = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palvelunimikkeisto =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palvelunimikkeisto = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palvelunimikkeisto.push String.from_json(_item)
                 else
                   @palvelunimikkeisto.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palvelunimikkeisto = _oa
            end
          end
        if !_o['tapahtumamalli'].nil?
          _oa = _o['tapahtumamalli']
            if(_oa.is_a? Hash)
              @tapahtumamalli = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tapahtumamalli =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tapahtumamalli = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tapahtumamalli.push String.from_json(_item)
                 else
                   @tapahtumamalli.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tapahtumamalli = _oa
            end
          end
        if !_o['laskettavatTilat'].nil?
          _oa = _o['laskettavatTilat']
            if(_oa.is_a? Hash)
              @laskettavatTilat = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laskettavatTilat =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laskettavatTilat = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laskettavatTilat.push String.from_json(_item)
                 else
                   @laskettavatTilat.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laskettavatTilat = _oa
            end
          end
    end

    # constructs a Palveluluokka from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Laakitys

  # (no documentation provided)
  class Laakitys 

    # (no documentation provided)
    attr_accessor :omistaja
    # (no documentation provided)
    attr_accessor :osa
    # (no documentation provided)
    attr_accessor :laakevalmiste
    # (no documentation provided)
    attr_accessor :laake
    # (no documentation provided)
    attr_accessor :aloitettu
    # (no documentation provided)
    attr_accessor :tapahtunut
    # (no documentation provided)
    attr_accessor :tapahtuma
    # (no documentation provided)
    attr_accessor :riittoisuus
    # (no documentation provided)
    attr_accessor :lopetettu
    # (no documentation provided)
    attr_accessor :lopetussyy
    # (no documentation provided)
    attr_accessor :reseptiteksti
    # (no documentation provided)
    attr_accessor :malli
    # (no documentation provided)
    attr_accessor :lyhyesti
    # (no documentation provided)
    attr_accessor :vaihdettavuus
    # (no documentation provided)
    attr_accessor :annettavaMaara
    # (no documentation provided)
    attr_accessor :annettavaMaksimi
    # (no documentation provided)
    attr_accessor :annettavaYksikko
    # (no documentation provided)
    attr_accessor :kertaAnnos
    # (no documentation provided)
    attr_accessor :annosteluteksti
    # (no documentation provided)
    attr_accessor :desimaaleja
    # (no documentation provided)
    attr_accessor :paino
    # (no documentation provided)
    attr_accessor :lapsenPaino
    # (no documentation provided)
    attr_accessor :toisto
    # (no documentation provided)
    attr_accessor :toistokuvaus
    # (no documentation provided)
    attr_accessor :kellonajat
    # (no documentation provided)
    attr_accessor :kellonajatString
    # (no documentation provided)
    attr_accessor :aikayksikko
    # (no documentation provided)
    attr_accessor :antotahti
    # (no documentation provided)
    attr_accessor :antotahtiString
    # (no documentation provided)
    attr_accessor :antotahtiyksikko
    # (no documentation provided)
    attr_accessor :kokonaiskesto
    # (no documentation provided)
    attr_accessor :kokonaismaara
    # (no documentation provided)
    attr_accessor :kokonaismaarayksikko
    # (no documentation provided)
    attr_accessor :pakkauksia
    # (no documentation provided)
    attr_accessor :kirjaaja
    # (no documentation provided)
    attr_accessor :kirjaajaString
    # (no documentation provided)
    attr_accessor :maaraaja
    # (no documentation provided)
    attr_accessor :maaraajaString
    # (no documentation provided)
    attr_accessor :maaraysyksikko
    # (no documentation provided)
    attr_accessor :varmistus
    # (no documentation provided)
    attr_accessor :kayttotarkoitus
    # (no documentation provided)
    attr_accessor :ohjeet
    # (no documentation provided)
    attr_accessor :perustelu
    # (no documentation provided)
    attr_accessor :iterointi
    # (no documentation provided)
    attr_accessor :uusittu
    # (no documentation provided)
    attr_accessor :kuitattava
    # (no documentation provided)
    attr_accessor :pysyva
    # (no documentation provided)
    attr_accessor :tarvittaessa
    # (no documentation provided)
    attr_accessor :terapiaryhma
    # (no documentation provided)
    attr_accessor :soveltumaton
    # (no documentation provided)
    attr_accessor :vaikutus
    # (no documentation provided)
    attr_accessor :huomautuksia
    # (no documentation provided)
    attr_accessor :reseptityyppi
    # (no documentation provided)
    attr_accessor :reseptityyppiString
    # (no documentation provided)
    attr_accessor :tulostaja
    # (no documentation provided)
    attr_accessor :tulostettu
    # (no documentation provided)
    attr_accessor :oid
    # (no documentation provided)
    attr_accessor :tunnistustapa
    # (no documentation provided)
    attr_accessor :tunnistustapaselite
    # (no documentation provided)
    attr_accessor :annosjakeluperuste
    # (no documentation provided)
    attr_accessor :iterointivali
    # (no documentation provided)
    attr_accessor :erillisselvityskoodi
    # (no documentation provided)
    attr_accessor :erillisselvitys
    # (no documentation provided)
    attr_accessor :apteekkiviesti
    # (no documentation provided)
    attr_accessor :ereseptikielto
    # (no documentation provided)
    attr_accessor :hoitolaji
    # (no documentation provided)
    attr_accessor :uusi
    # (no documentation provided)
    attr_accessor :lahetetty
    # (no documentation provided)
    attr_accessor :reseptinLaji
    # (no documentation provided)
    attr_accessor :muutoksenSyy
    # (no documentation provided)
    attr_accessor :muutoksenPerustelu
    # (no documentation provided)
    attr_accessor :uusimiskielto
    # (no documentation provided)
    attr_accessor :uusimiskiellonSyy
    # (no documentation provided)
    attr_accessor :uusimiskiellonPerustelu
    # (no documentation provided)
    attr_accessor :potilasohjekielto
    # (no documentation provided)
    attr_accessor :tyonantaja
    # (no documentation provided)
    attr_accessor :vakuutusyhtio
    # (no documentation provided)
    attr_accessor :voimassaoloLoppu
    # (no documentation provided)
    attr_accessor :annostuslinkki
    # (no documentation provided)
    attr_accessor :hoitojakso
    # (no documentation provided)
    attr_accessor :alkuperainen
    # (no documentation provided)
    attr_accessor :palkkio
    # (no documentation provided)
    attr_accessor :palkkioErikoislaakarina
    # (no documentation provided)
    attr_accessor :tartuntatautilaake
    # (no documentation provided)
    attr_accessor :palvelutapahtuma
    # (no documentation provided)
    attr_accessor :palvelutapahtumaOid
    # (no documentation provided)
    attr_accessor :sairaalaApteekkiOid
    # (no documentation provided)
    attr_accessor :sairaalaApteekkiNimi
    # (no documentation provided)
    attr_accessor :tarkistus
    # (no documentation provided)
    attr_accessor :poistosyy
    # (no documentation provided)
    attr_accessor :poistettu
    # (no documentation provided)
    attr_accessor :muutosaika
    # (no documentation provided)
    attr_accessor :muutospaikka
    # (no documentation provided)
    attr_accessor :pysyvyys
    # (no documentation provided)
    attr_accessor :nimi
    # (no documentation provided)
    attr_accessor :annostus
    # (no documentation provided)
    attr_accessor :vaihteleva
    # (no documentation provided)
    attr_accessor :vaihtelevaAnnostus
    # (no documentation provided)
    attr_accessor :sic
    # (no documentation provided)
    attr_accessor :kokoNimi
    # (no documentation provided)
    attr_accessor :laakeaineet
    # (no documentation provided)
    attr_accessor :annettavaMaaraTimesPaino
    # (no documentation provided)
    attr_accessor :vrkmaara
    # (no documentation provided)
    attr_accessor :vrkkerratCalc
    # (no documentation provided)
    attr_accessor :vrkmaaraCalc
    # (no documentation provided)
    attr_accessor :vrkmaaraYksikko
    # (no documentation provided)
    attr_accessor :tauot
    # (no documentation provided)
    attr_accessor :annot
    # (no documentation provided)
    attr_accessor :tavat
    # (no documentation provided)
    attr_accessor :kayttoaiheet
    # (no documentation provided)
    attr_accessor :laakitysKayttoaiheList
    # (no documentation provided)
    attr_accessor :kuittaukset

    # the json hash for this Laakitys
    def to_jaxb_json_hash
      _h = {}
      _h['omistaja'] = omistaja.to_jaxb_json_hash unless omistaja.nil?
      _h['osa'] = osa.to_jaxb_json_hash unless osa.nil?
      _h['laakevalmiste'] = laakevalmiste.to_jaxb_json_hash unless laakevalmiste.nil?
      _h['laake'] = laake.to_jaxb_json_hash unless laake.nil?
      _h['aloitettu'] = aloitettu.to_jaxb_json_hash unless aloitettu.nil?
      _h['tapahtunut'] = tapahtunut.to_jaxb_json_hash unless tapahtunut.nil?
      _h['tapahtuma'] = tapahtuma.to_jaxb_json_hash unless tapahtuma.nil?
      _h['riittoisuus'] = riittoisuus.to_jaxb_json_hash unless riittoisuus.nil?
      _h['lopetettu'] = lopetettu.to_jaxb_json_hash unless lopetettu.nil?
      _h['lopetussyy'] = lopetussyy.to_jaxb_json_hash unless lopetussyy.nil?
      _h['reseptiteksti'] = reseptiteksti.to_jaxb_json_hash unless reseptiteksti.nil?
      _h['malli'] = malli.to_jaxb_json_hash unless malli.nil?
      _h['lyhyesti'] = lyhyesti.to_jaxb_json_hash unless lyhyesti.nil?
      _h['vaihdettavuus'] = vaihdettavuus.to_jaxb_json_hash unless vaihdettavuus.nil?
      _h['annettavaMaara'] = annettavaMaara.to_jaxb_json_hash unless annettavaMaara.nil?
      _h['annettavaMaksimi'] = annettavaMaksimi.to_jaxb_json_hash unless annettavaMaksimi.nil?
      _h['annettavaYksikko'] = annettavaYksikko.to_jaxb_json_hash unless annettavaYksikko.nil?
      _h['kertaAnnos'] = kertaAnnos.to_jaxb_json_hash unless kertaAnnos.nil?
      _h['annosteluteksti'] = annosteluteksti.to_jaxb_json_hash unless annosteluteksti.nil?
      _h['desimaaleja'] = desimaaleja.to_jaxb_json_hash unless desimaaleja.nil?
      _h['paino'] = paino.to_jaxb_json_hash unless paino.nil?
      _h['lapsenPaino'] = lapsenPaino.to_jaxb_json_hash unless lapsenPaino.nil?
      _h['toisto'] = toisto.to_jaxb_json_hash unless toisto.nil?
      _h['toistokuvaus'] = toistokuvaus.to_jaxb_json_hash unless toistokuvaus.nil?
      _h['kellonajat'] = kellonajat.to_jaxb_json_hash unless kellonajat.nil?
      _h['kellonajatString'] = kellonajatString.to_jaxb_json_hash unless kellonajatString.nil?
      _h['aikayksikko'] = aikayksikko.to_jaxb_json_hash unless aikayksikko.nil?
      _h['antotahti'] = antotahti.to_jaxb_json_hash unless antotahti.nil?
      _h['antotahtiString'] = antotahtiString.to_jaxb_json_hash unless antotahtiString.nil?
      _h['antotahtiyksikko'] = antotahtiyksikko.to_jaxb_json_hash unless antotahtiyksikko.nil?
      _h['kokonaiskesto'] = kokonaiskesto.to_jaxb_json_hash unless kokonaiskesto.nil?
      _h['kokonaismaara'] = kokonaismaara.to_jaxb_json_hash unless kokonaismaara.nil?
      _h['kokonaismaarayksikko'] = kokonaismaarayksikko.to_jaxb_json_hash unless kokonaismaarayksikko.nil?
      _h['pakkauksia'] = pakkauksia.to_jaxb_json_hash unless pakkauksia.nil?
      _h['kirjaaja'] = kirjaaja.to_jaxb_json_hash unless kirjaaja.nil?
      _h['kirjaajaString'] = kirjaajaString.to_jaxb_json_hash unless kirjaajaString.nil?
      _h['maaraaja'] = maaraaja.to_jaxb_json_hash unless maaraaja.nil?
      _h['maaraajaString'] = maaraajaString.to_jaxb_json_hash unless maaraajaString.nil?
      _h['maaraysyksikko'] = maaraysyksikko.to_jaxb_json_hash unless maaraysyksikko.nil?
      _h['varmistus'] = varmistus.to_jaxb_json_hash unless varmistus.nil?
      _h['kayttotarkoitus'] = kayttotarkoitus.to_jaxb_json_hash unless kayttotarkoitus.nil?
      _h['ohjeet'] = ohjeet.to_jaxb_json_hash unless ohjeet.nil?
      _h['perustelu'] = perustelu.to_jaxb_json_hash unless perustelu.nil?
      _h['iterointi'] = iterointi.to_jaxb_json_hash unless iterointi.nil?
      _h['uusittu'] = uusittu.to_jaxb_json_hash unless uusittu.nil?
      _h['kuitattava'] = kuitattava.to_jaxb_json_hash unless kuitattava.nil?
      _h['pysyva'] = pysyva.to_jaxb_json_hash unless pysyva.nil?
      _h['tarvittaessa'] = tarvittaessa.to_jaxb_json_hash unless tarvittaessa.nil?
      _h['terapiaryhma'] = terapiaryhma.to_jaxb_json_hash unless terapiaryhma.nil?
      _h['soveltumaton'] = soveltumaton.to_jaxb_json_hash unless soveltumaton.nil?
      _h['vaikutus'] = vaikutus.to_jaxb_json_hash unless vaikutus.nil?
      _h['huomautuksia'] = huomautuksia.to_jaxb_json_hash unless huomautuksia.nil?
      _h['reseptityyppi'] = reseptityyppi.to_jaxb_json_hash unless reseptityyppi.nil?
      _h['reseptityyppiString'] = reseptityyppiString.to_jaxb_json_hash unless reseptityyppiString.nil?
      _h['tulostaja'] = tulostaja.to_jaxb_json_hash unless tulostaja.nil?
      _h['tulostettu'] = tulostettu.to_jaxb_json_hash unless tulostettu.nil?
      _h['oid'] = oid.to_jaxb_json_hash unless oid.nil?
      _h['tunnistustapa'] = tunnistustapa.to_jaxb_json_hash unless tunnistustapa.nil?
      _h['tunnistustapaselite'] = tunnistustapaselite.to_jaxb_json_hash unless tunnistustapaselite.nil?
      _h['annosjakeluperuste'] = annosjakeluperuste.to_jaxb_json_hash unless annosjakeluperuste.nil?
      _h['iterointivali'] = iterointivali.to_jaxb_json_hash unless iterointivali.nil?
      _h['erillisselvityskoodi'] = erillisselvityskoodi.to_jaxb_json_hash unless erillisselvityskoodi.nil?
      _h['erillisselvitys'] = erillisselvitys.to_jaxb_json_hash unless erillisselvitys.nil?
      _h['apteekkiviesti'] = apteekkiviesti.to_jaxb_json_hash unless apteekkiviesti.nil?
      _h['ereseptikielto'] = ereseptikielto.to_jaxb_json_hash unless ereseptikielto.nil?
      _h['hoitolaji'] = hoitolaji.to_jaxb_json_hash unless hoitolaji.nil?
      _h['uusi'] = uusi.to_jaxb_json_hash unless uusi.nil?
      _h['lahetetty'] = lahetetty.to_jaxb_json_hash unless lahetetty.nil?
      _h['reseptinLaji'] = reseptinLaji.to_jaxb_json_hash unless reseptinLaji.nil?
      _h['muutoksenSyy'] = muutoksenSyy.to_jaxb_json_hash unless muutoksenSyy.nil?
      _h['muutoksenPerustelu'] = muutoksenPerustelu.to_jaxb_json_hash unless muutoksenPerustelu.nil?
      _h['uusimiskielto'] = uusimiskielto.to_jaxb_json_hash unless uusimiskielto.nil?
      _h['uusimiskiellonSyy'] = uusimiskiellonSyy.to_jaxb_json_hash unless uusimiskiellonSyy.nil?
      _h['uusimiskiellonPerustelu'] = uusimiskiellonPerustelu.to_jaxb_json_hash unless uusimiskiellonPerustelu.nil?
      _h['potilasohjekielto'] = potilasohjekielto.to_jaxb_json_hash unless potilasohjekielto.nil?
      _h['tyonantaja'] = tyonantaja.to_jaxb_json_hash unless tyonantaja.nil?
      _h['vakuutusyhtio'] = vakuutusyhtio.to_jaxb_json_hash unless vakuutusyhtio.nil?
      _h['voimassaoloLoppu'] = voimassaoloLoppu.to_jaxb_json_hash unless voimassaoloLoppu.nil?
      _h['annostuslinkki'] = annostuslinkki.to_jaxb_json_hash unless annostuslinkki.nil?
      _h['hoitojakso'] = hoitojakso.to_jaxb_json_hash unless hoitojakso.nil?
      _h['alkuperainen'] = alkuperainen.to_jaxb_json_hash unless alkuperainen.nil?
      _h['palkkio'] = palkkio.to_jaxb_json_hash unless palkkio.nil?
      _h['palkkioErikoislaakarina'] = palkkioErikoislaakarina.to_jaxb_json_hash unless palkkioErikoislaakarina.nil?
      _h['tartuntatautilaake'] = tartuntatautilaake.to_jaxb_json_hash unless tartuntatautilaake.nil?
      _h['palvelutapahtuma'] = palvelutapahtuma.to_jaxb_json_hash unless palvelutapahtuma.nil?
      _h['palvelutapahtumaOid'] = palvelutapahtumaOid.to_jaxb_json_hash unless palvelutapahtumaOid.nil?
      _h['sairaalaApteekkiOid'] = sairaalaApteekkiOid.to_jaxb_json_hash unless sairaalaApteekkiOid.nil?
      _h['sairaalaApteekkiNimi'] = sairaalaApteekkiNimi.to_jaxb_json_hash unless sairaalaApteekkiNimi.nil?
      _h['tarkistus'] = tarkistus.to_jaxb_json_hash unless tarkistus.nil?
      _h['poistosyy'] = poistosyy.to_jaxb_json_hash unless poistosyy.nil?
      _h['poistettu'] = poistettu.to_jaxb_json_hash unless poistettu.nil?
      _h['muutosaika'] = muutosaika.to_jaxb_json_hash unless muutosaika.nil?
      _h['muutospaikka'] = muutospaikka.to_jaxb_json_hash unless muutospaikka.nil?
      _h['pysyvyys'] = pysyvyys.to_jaxb_json_hash unless pysyvyys.nil?
      _h['nimi'] = nimi.to_jaxb_json_hash unless nimi.nil?
      _h['annostus'] = annostus.to_jaxb_json_hash unless annostus.nil?
      _h['vaihteleva'] = vaihteleva.to_jaxb_json_hash unless vaihteleva.nil?
      _h['vaihtelevaAnnostus'] = vaihtelevaAnnostus.to_jaxb_json_hash unless vaihtelevaAnnostus.nil?
      _h['sic'] = sic.to_jaxb_json_hash unless sic.nil?
      _h['kokoNimi'] = kokoNimi.to_jaxb_json_hash unless kokoNimi.nil?
      _h['laakeaineet'] = laakeaineet.to_jaxb_json_hash unless laakeaineet.nil?
      _h['annettavaMaaraTimesPaino'] = annettavaMaaraTimesPaino.to_jaxb_json_hash unless annettavaMaaraTimesPaino.nil?
      _h['vrkmaara'] = vrkmaara.to_jaxb_json_hash unless vrkmaara.nil?
      _h['vrkkerratCalc'] = vrkkerratCalc.to_jaxb_json_hash unless vrkkerratCalc.nil?
      _h['vrkmaaraCalc'] = vrkmaaraCalc.to_jaxb_json_hash unless vrkmaaraCalc.nil?
      _h['vrkmaaraYksikko'] = vrkmaaraYksikko.to_jaxb_json_hash unless vrkmaaraYksikko.nil?
      if !tauot.nil?
        _ha = Array.new
        tauot.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['tauot'] = _ha
      end
      if !annot.nil?
        _ha = Array.new
        annot.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['annot'] = _ha
      end
      if !tavat.nil?
        _ha = Array.new
        tavat.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['tavat'] = _ha
      end
      if !kayttoaiheet.nil?
        _ha = Array.new
        kayttoaiheet.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['kayttoaiheet'] = _ha
      end
      if !laakitysKayttoaiheList.nil?
        _ha = Array.new
        laakitysKayttoaiheList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['laakitysKayttoaiheList'] = _ha
      end
      if !kuittaukset.nil?
        _ha = Array.new
        kuittaukset.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['kuittaukset'] = _ha
      end
      return _h
    end

    # the json (string form) for this Laakitys
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Laakitys with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['omistaja'].nil?
          _oa = _o['omistaja']
            if(_oa.is_a? Hash)
              @omistaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @omistaja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @omistaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @omistaja.push Fixnum.from_json(_item)
                 else
                   @omistaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @omistaja = _oa
            end
          end
        if !_o['osa'].nil?
          _oa = _o['osa']
            if(_oa.is_a? Hash)
              @osa = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @osa =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @osa = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @osa.push Fixnum.from_json(_item)
                 else
                   @osa.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @osa = _oa
            end
          end
        if !_o['laakevalmiste'].nil?
          _oa = _o['laakevalmiste']
            if(_oa.is_a? Hash)
              @laakevalmiste = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laakevalmiste =  Fi::Mediconsult::Core::Client::Dto::Laakitys::Laake.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laakevalmiste = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laakevalmiste.push Fi::Mediconsult::Core::Client::Dto::Laakitys::Laake.from_json(_item)
                 else
                   @laakevalmiste.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laakevalmiste = _oa
            end
          end
        if !_o['laake'].nil?
          _oa = _o['laake']
            if(_oa.is_a? Hash)
              @laake = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laake =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laake = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laake.push String.from_json(_item)
                 else
                   @laake.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laake = _oa
            end
          end
        if !_o['aloitettu'].nil?
          _oa = _o['aloitettu']
            if(_oa.is_a? Hash)
              @aloitettu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @aloitettu =  java.time::LocalDate.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @aloitettu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @aloitettu.push java.time::LocalDate.from_json(_item)
                 else
                   @aloitettu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @aloitettu = _oa
            end
          end
        if !_o['tapahtunut'].nil?
          _oa = _o['tapahtunut']
            if(_oa.is_a? Hash)
              @tapahtunut = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tapahtunut =  java.time::LocalDate.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tapahtunut = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tapahtunut.push java.time::LocalDate.from_json(_item)
                 else
                   @tapahtunut.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tapahtunut = _oa
            end
          end
        if !_o['tapahtuma'].nil?
          _oa = _o['tapahtuma']
            if(_oa.is_a? Hash)
              @tapahtuma = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tapahtuma =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tapahtuma = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tapahtuma.push Fixnum.from_json(_item)
                 else
                   @tapahtuma.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tapahtuma = _oa
            end
          end
        if !_o['riittoisuus'].nil?
          _oa = _o['riittoisuus']
            if(_oa.is_a? Hash)
              @riittoisuus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @riittoisuus =  java.time::LocalDate.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @riittoisuus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @riittoisuus.push java.time::LocalDate.from_json(_item)
                 else
                   @riittoisuus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @riittoisuus = _oa
            end
          end
        if !_o['lopetettu'].nil?
          _oa = _o['lopetettu']
            if(_oa.is_a? Hash)
              @lopetettu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lopetettu =  java.time::LocalDate.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lopetettu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lopetettu.push java.time::LocalDate.from_json(_item)
                 else
                   @lopetettu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lopetettu = _oa
            end
          end
        if !_o['lopetussyy'].nil?
          _oa = _o['lopetussyy']
            if(_oa.is_a? Hash)
              @lopetussyy = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lopetussyy =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lopetussyy = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lopetussyy.push String.from_json(_item)
                 else
                   @lopetussyy.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lopetussyy = _oa
            end
          end
        if !_o['reseptiteksti'].nil?
          _oa = _o['reseptiteksti']
            if(_oa.is_a? Hash)
              @reseptiteksti = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @reseptiteksti =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @reseptiteksti = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @reseptiteksti.push String.from_json(_item)
                 else
                   @reseptiteksti.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @reseptiteksti = _oa
            end
          end
        if !_o['malli'].nil?
          _oa = _o['malli']
            if(_oa.is_a? Hash)
              @malli = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @malli =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @malli = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @malli.push String.from_json(_item)
                 else
                   @malli.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @malli = _oa
            end
          end
        if !_o['lyhyesti'].nil?
          _oa = _o['lyhyesti']
            if(_oa.is_a? Hash)
              @lyhyesti = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lyhyesti =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lyhyesti = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lyhyesti.push String.from_json(_item)
                 else
                   @lyhyesti.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lyhyesti = _oa
            end
          end
        if !_o['vaihdettavuus'].nil?
          _oa = _o['vaihdettavuus']
            if(_oa.is_a? Hash)
              @vaihdettavuus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vaihdettavuus =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vaihdettavuus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vaihdettavuus.push Fixnum.from_json(_item)
                 else
                   @vaihdettavuus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vaihdettavuus = _oa
            end
          end
        if !_o['annettavaMaara'].nil?
          _oa = _o['annettavaMaara']
            if(_oa.is_a? Hash)
              @annettavaMaara = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @annettavaMaara =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @annettavaMaara = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @annettavaMaara.push Float.from_json(_item)
                 else
                   @annettavaMaara.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @annettavaMaara = _oa
            end
          end
        if !_o['annettavaMaksimi'].nil?
          _oa = _o['annettavaMaksimi']
            if(_oa.is_a? Hash)
              @annettavaMaksimi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @annettavaMaksimi =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @annettavaMaksimi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @annettavaMaksimi.push Float.from_json(_item)
                 else
                   @annettavaMaksimi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @annettavaMaksimi = _oa
            end
          end
        if !_o['annettavaYksikko'].nil?
          _oa = _o['annettavaYksikko']
            if(_oa.is_a? Hash)
              @annettavaYksikko = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @annettavaYksikko =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @annettavaYksikko = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @annettavaYksikko.push String.from_json(_item)
                 else
                   @annettavaYksikko.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @annettavaYksikko = _oa
            end
          end
        if !_o['kertaAnnos'].nil?
          _oa = _o['kertaAnnos']
            if(_oa.is_a? Hash)
              @kertaAnnos = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kertaAnnos =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kertaAnnos = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kertaAnnos.push String.from_json(_item)
                 else
                   @kertaAnnos.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kertaAnnos = _oa
            end
          end
        if !_o['annosteluteksti'].nil?
          _oa = _o['annosteluteksti']
            if(_oa.is_a? Hash)
              @annosteluteksti = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @annosteluteksti =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @annosteluteksti = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @annosteluteksti.push String.from_json(_item)
                 else
                   @annosteluteksti.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @annosteluteksti = _oa
            end
          end
        if !_o['desimaaleja'].nil?
          _oa = _o['desimaaleja']
            if(_oa.is_a? Hash)
              @desimaaleja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @desimaaleja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @desimaaleja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @desimaaleja.push Fixnum.from_json(_item)
                 else
                   @desimaaleja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @desimaaleja = _oa
            end
          end
        if !_o['paino'].nil?
          _oa = _o['paino']
            if(_oa.is_a? Hash)
              @paino = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @paino =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @paino = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @paino.push Float.from_json(_item)
                 else
                   @paino.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @paino = _oa
            end
          end
        if !_o['lapsenPaino'].nil?
          _oa = _o['lapsenPaino']
            if(_oa.is_a? Hash)
              @lapsenPaino = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lapsenPaino =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lapsenPaino = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lapsenPaino.push Float.from_json(_item)
                 else
                   @lapsenPaino.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lapsenPaino = _oa
            end
          end
        if !_o['toisto'].nil?
          _oa = _o['toisto']
            if(_oa.is_a? Hash)
              @toisto = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @toisto =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @toisto = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @toisto.push String.from_json(_item)
                 else
                   @toisto.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @toisto = _oa
            end
          end
        if !_o['toistokuvaus'].nil?
          _oa = _o['toistokuvaus']
            if(_oa.is_a? Hash)
              @toistokuvaus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @toistokuvaus =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @toistokuvaus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @toistokuvaus.push String.from_json(_item)
                 else
                   @toistokuvaus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @toistokuvaus = _oa
            end
          end
        if !_o['kellonajat'].nil?
          _oa = _o['kellonajat']
            if(_oa.is_a? Hash)
              @kellonajat = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kellonajat =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kellonajat = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kellonajat.push String.from_json(_item)
                 else
                   @kellonajat.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kellonajat = _oa
            end
          end
        if !_o['kellonajatString'].nil?
          _oa = _o['kellonajatString']
            if(_oa.is_a? Hash)
              @kellonajatString = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kellonajatString =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kellonajatString = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kellonajatString.push String.from_json(_item)
                 else
                   @kellonajatString.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kellonajatString = _oa
            end
          end
        if !_o['aikayksikko'].nil?
          _oa = _o['aikayksikko']
            if(_oa.is_a? Hash)
              @aikayksikko = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @aikayksikko =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @aikayksikko = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @aikayksikko.push String.from_json(_item)
                 else
                   @aikayksikko.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @aikayksikko = _oa
            end
          end
        if !_o['antotahti'].nil?
          _oa = _o['antotahti']
            if(_oa.is_a? Hash)
              @antotahti = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @antotahti =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @antotahti = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @antotahti.push Float.from_json(_item)
                 else
                   @antotahti.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @antotahti = _oa
            end
          end
        if !_o['antotahtiString'].nil?
          _oa = _o['antotahtiString']
            if(_oa.is_a? Hash)
              @antotahtiString = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @antotahtiString =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @antotahtiString = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @antotahtiString.push String.from_json(_item)
                 else
                   @antotahtiString.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @antotahtiString = _oa
            end
          end
        if !_o['antotahtiyksikko'].nil?
          _oa = _o['antotahtiyksikko']
            if(_oa.is_a? Hash)
              @antotahtiyksikko = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @antotahtiyksikko =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @antotahtiyksikko = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @antotahtiyksikko.push String.from_json(_item)
                 else
                   @antotahtiyksikko.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @antotahtiyksikko = _oa
            end
          end
        if !_o['kokonaiskesto'].nil?
          _oa = _o['kokonaiskesto']
            if(_oa.is_a? Hash)
              @kokonaiskesto = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kokonaiskesto =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kokonaiskesto = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kokonaiskesto.push String.from_json(_item)
                 else
                   @kokonaiskesto.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kokonaiskesto = _oa
            end
          end
        if !_o['kokonaismaara'].nil?
          _oa = _o['kokonaismaara']
            if(_oa.is_a? Hash)
              @kokonaismaara = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kokonaismaara =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kokonaismaara = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kokonaismaara.push Float.from_json(_item)
                 else
                   @kokonaismaara.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kokonaismaara = _oa
            end
          end
        if !_o['kokonaismaarayksikko'].nil?
          _oa = _o['kokonaismaarayksikko']
            if(_oa.is_a? Hash)
              @kokonaismaarayksikko = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kokonaismaarayksikko =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kokonaismaarayksikko = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kokonaismaarayksikko.push String.from_json(_item)
                 else
                   @kokonaismaarayksikko.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kokonaismaarayksikko = _oa
            end
          end
        if !_o['pakkauksia'].nil?
          _oa = _o['pakkauksia']
            if(_oa.is_a? Hash)
              @pakkauksia = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @pakkauksia =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @pakkauksia = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @pakkauksia.push Fixnum.from_json(_item)
                 else
                   @pakkauksia.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @pakkauksia = _oa
            end
          end
        if !_o['kirjaaja'].nil?
          _oa = _o['kirjaaja']
            if(_oa.is_a? Hash)
              @kirjaaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kirjaaja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kirjaaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kirjaaja.push Fixnum.from_json(_item)
                 else
                   @kirjaaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kirjaaja = _oa
            end
          end
        if !_o['kirjaajaString'].nil?
          _oa = _o['kirjaajaString']
            if(_oa.is_a? Hash)
              @kirjaajaString = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kirjaajaString =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kirjaajaString = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kirjaajaString.push String.from_json(_item)
                 else
                   @kirjaajaString.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kirjaajaString = _oa
            end
          end
        if !_o['maaraaja'].nil?
          _oa = _o['maaraaja']
            if(_oa.is_a? Hash)
              @maaraaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @maaraaja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @maaraaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @maaraaja.push Fixnum.from_json(_item)
                 else
                   @maaraaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @maaraaja = _oa
            end
          end
        if !_o['maaraajaString'].nil?
          _oa = _o['maaraajaString']
            if(_oa.is_a? Hash)
              @maaraajaString = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @maaraajaString =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @maaraajaString = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @maaraajaString.push String.from_json(_item)
                 else
                   @maaraajaString.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @maaraajaString = _oa
            end
          end
        if !_o['maaraysyksikko'].nil?
          _oa = _o['maaraysyksikko']
            if(_oa.is_a? Hash)
              @maaraysyksikko = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @maaraysyksikko =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @maaraysyksikko = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @maaraysyksikko.push Fixnum.from_json(_item)
                 else
                   @maaraysyksikko.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @maaraysyksikko = _oa
            end
          end
        if !_o['varmistus'].nil?
          _oa = _o['varmistus']
            if(_oa.is_a? Hash)
              @varmistus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @varmistus =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @varmistus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @varmistus.push Fixnum.from_json(_item)
                 else
                   @varmistus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @varmistus = _oa
            end
          end
        if !_o['kayttotarkoitus'].nil?
          _oa = _o['kayttotarkoitus']
            if(_oa.is_a? Hash)
              @kayttotarkoitus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kayttotarkoitus =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kayttotarkoitus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kayttotarkoitus.push String.from_json(_item)
                 else
                   @kayttotarkoitus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kayttotarkoitus = _oa
            end
          end
        if !_o['ohjeet'].nil?
          _oa = _o['ohjeet']
            if(_oa.is_a? Hash)
              @ohjeet = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ohjeet =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ohjeet = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ohjeet.push String.from_json(_item)
                 else
                   @ohjeet.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ohjeet = _oa
            end
          end
        if !_o['perustelu'].nil?
          _oa = _o['perustelu']
            if(_oa.is_a? Hash)
              @perustelu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @perustelu =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @perustelu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @perustelu.push String.from_json(_item)
                 else
                   @perustelu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @perustelu = _oa
            end
          end
        if !_o['iterointi'].nil?
          _oa = _o['iterointi']
            if(_oa.is_a? Hash)
              @iterointi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @iterointi =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @iterointi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @iterointi.push Fixnum.from_json(_item)
                 else
                   @iterointi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @iterointi = _oa
            end
          end
        if !_o['uusittu'].nil?
          _oa = _o['uusittu']
            if(_oa.is_a? Hash)
              @uusittu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @uusittu =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @uusittu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @uusittu.push Fixnum.from_json(_item)
                 else
                   @uusittu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @uusittu = _oa
            end
          end
        if !_o['kuitattava'].nil?
          _oa = _o['kuitattava']
            if(_oa.is_a? Hash)
              @kuitattava = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kuitattava =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kuitattava = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kuitattava.push Fixnum.from_json(_item)
                 else
                   @kuitattava.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kuitattava = _oa
            end
          end
        if !_o['pysyva'].nil?
          _oa = _o['pysyva']
            if(_oa.is_a? Hash)
              @pysyva = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @pysyva =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @pysyva = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @pysyva.push Fixnum.from_json(_item)
                 else
                   @pysyva.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @pysyva = _oa
            end
          end
        if !_o['tarvittaessa'].nil?
          _oa = _o['tarvittaessa']
            if(_oa.is_a? Hash)
              @tarvittaessa = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tarvittaessa =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tarvittaessa = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tarvittaessa.push Fixnum.from_json(_item)
                 else
                   @tarvittaessa.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tarvittaessa = _oa
            end
          end
        if !_o['terapiaryhma'].nil?
          _oa = _o['terapiaryhma']
            if(_oa.is_a? Hash)
              @terapiaryhma = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @terapiaryhma =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @terapiaryhma = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @terapiaryhma.push String.from_json(_item)
                 else
                   @terapiaryhma.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @terapiaryhma = _oa
            end
          end
        if !_o['soveltumaton'].nil?
          _oa = _o['soveltumaton']
            if(_oa.is_a? Hash)
              @soveltumaton = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @soveltumaton =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @soveltumaton = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @soveltumaton.push Fixnum.from_json(_item)
                 else
                   @soveltumaton.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @soveltumaton = _oa
            end
          end
        if !_o['vaikutus'].nil?
          _oa = _o['vaikutus']
            if(_oa.is_a? Hash)
              @vaikutus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vaikutus =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vaikutus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vaikutus.push String.from_json(_item)
                 else
                   @vaikutus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vaikutus = _oa
            end
          end
        if !_o['huomautuksia'].nil?
          _oa = _o['huomautuksia']
            if(_oa.is_a? Hash)
              @huomautuksia = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @huomautuksia =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @huomautuksia = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @huomautuksia.push String.from_json(_item)
                 else
                   @huomautuksia.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @huomautuksia = _oa
            end
          end
        if !_o['reseptityyppi'].nil?
          _oa = _o['reseptityyppi']
            if(_oa.is_a? Hash)
              @reseptityyppi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @reseptityyppi =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @reseptityyppi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @reseptityyppi.push Fixnum.from_json(_item)
                 else
                   @reseptityyppi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @reseptityyppi = _oa
            end
          end
        if !_o['reseptityyppiString'].nil?
          _oa = _o['reseptityyppiString']
            if(_oa.is_a? Hash)
              @reseptityyppiString = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @reseptityyppiString =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @reseptityyppiString = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @reseptityyppiString.push String.from_json(_item)
                 else
                   @reseptityyppiString.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @reseptityyppiString = _oa
            end
          end
        if !_o['tulostaja'].nil?
          _oa = _o['tulostaja']
            if(_oa.is_a? Hash)
              @tulostaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tulostaja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tulostaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tulostaja.push Fixnum.from_json(_item)
                 else
                   @tulostaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tulostaja = _oa
            end
          end
        if !_o['tulostettu'].nil?
          _oa = _o['tulostettu']
            if(_oa.is_a? Hash)
              @tulostettu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tulostettu =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tulostettu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tulostettu.push Time.from_json(_item)
                 else
                   @tulostettu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tulostettu = _oa
            end
          end
        if !_o['oid'].nil?
          _oa = _o['oid']
            if(_oa.is_a? Hash)
              @oid = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @oid =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @oid = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @oid.push String.from_json(_item)
                 else
                   @oid.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @oid = _oa
            end
          end
        if !_o['tunnistustapa'].nil?
          _oa = _o['tunnistustapa']
            if(_oa.is_a? Hash)
              @tunnistustapa = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tunnistustapa =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tunnistustapa = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tunnistustapa.push String.from_json(_item)
                 else
                   @tunnistustapa.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tunnistustapa = _oa
            end
          end
        if !_o['tunnistustapaselite'].nil?
          _oa = _o['tunnistustapaselite']
            if(_oa.is_a? Hash)
              @tunnistustapaselite = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tunnistustapaselite =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tunnistustapaselite = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tunnistustapaselite.push String.from_json(_item)
                 else
                   @tunnistustapaselite.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tunnistustapaselite = _oa
            end
          end
        if !_o['annosjakeluperuste'].nil?
          _oa = _o['annosjakeluperuste']
            if(_oa.is_a? Hash)
              @annosjakeluperuste = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @annosjakeluperuste =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @annosjakeluperuste = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @annosjakeluperuste.push String.from_json(_item)
                 else
                   @annosjakeluperuste.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @annosjakeluperuste = _oa
            end
          end
        if !_o['iterointivali'].nil?
          _oa = _o['iterointivali']
            if(_oa.is_a? Hash)
              @iterointivali = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @iterointivali =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @iterointivali = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @iterointivali.push Fixnum.from_json(_item)
                 else
                   @iterointivali.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @iterointivali = _oa
            end
          end
        if !_o['erillisselvityskoodi'].nil?
          _oa = _o['erillisselvityskoodi']
            if(_oa.is_a? Hash)
              @erillisselvityskoodi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @erillisselvityskoodi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @erillisselvityskoodi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @erillisselvityskoodi.push String.from_json(_item)
                 else
                   @erillisselvityskoodi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @erillisselvityskoodi = _oa
            end
          end
        if !_o['erillisselvitys'].nil?
          _oa = _o['erillisselvitys']
            if(_oa.is_a? Hash)
              @erillisselvitys = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @erillisselvitys =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @erillisselvitys = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @erillisselvitys.push String.from_json(_item)
                 else
                   @erillisselvitys.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @erillisselvitys = _oa
            end
          end
        if !_o['apteekkiviesti'].nil?
          _oa = _o['apteekkiviesti']
            if(_oa.is_a? Hash)
              @apteekkiviesti = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @apteekkiviesti =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @apteekkiviesti = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @apteekkiviesti.push String.from_json(_item)
                 else
                   @apteekkiviesti.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @apteekkiviesti = _oa
            end
          end
        if !_o['ereseptikielto'].nil?
          _oa = _o['ereseptikielto']
            if(_oa.is_a? Hash)
              @ereseptikielto = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ereseptikielto =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ereseptikielto = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ereseptikielto.push Fixnum.from_json(_item)
                 else
                   @ereseptikielto.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ereseptikielto = _oa
            end
          end
        if !_o['hoitolaji'].nil?
          _oa = _o['hoitolaji']
            if(_oa.is_a? Hash)
              @hoitolaji = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @hoitolaji =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @hoitolaji = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @hoitolaji.push String.from_json(_item)
                 else
                   @hoitolaji.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @hoitolaji = _oa
            end
          end
        if !_o['uusi'].nil?
          _oa = _o['uusi']
            if(_oa.is_a? Hash)
              @uusi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @uusi =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @uusi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @uusi.push Fixnum.from_json(_item)
                 else
                   @uusi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @uusi = _oa
            end
          end
        if !_o['lahetetty'].nil?
          _oa = _o['lahetetty']
            if(_oa.is_a? Hash)
              @lahetetty = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lahetetty =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lahetetty = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lahetetty.push Time.from_json(_item)
                 else
                   @lahetetty.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lahetetty = _oa
            end
          end
        if !_o['reseptinLaji'].nil?
          _oa = _o['reseptinLaji']
            if(_oa.is_a? Hash)
              @reseptinLaji = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @reseptinLaji =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @reseptinLaji = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @reseptinLaji.push String.from_json(_item)
                 else
                   @reseptinLaji.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @reseptinLaji = _oa
            end
          end
        if !_o['muutoksenSyy'].nil?
          _oa = _o['muutoksenSyy']
            if(_oa.is_a? Hash)
              @muutoksenSyy = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @muutoksenSyy =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @muutoksenSyy = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @muutoksenSyy.push String.from_json(_item)
                 else
                   @muutoksenSyy.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @muutoksenSyy = _oa
            end
          end
        if !_o['muutoksenPerustelu'].nil?
          _oa = _o['muutoksenPerustelu']
            if(_oa.is_a? Hash)
              @muutoksenPerustelu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @muutoksenPerustelu =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @muutoksenPerustelu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @muutoksenPerustelu.push String.from_json(_item)
                 else
                   @muutoksenPerustelu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @muutoksenPerustelu = _oa
            end
          end
        if !_o['uusimiskielto'].nil?
          _oa = _o['uusimiskielto']
            if(_oa.is_a? Hash)
              @uusimiskielto = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @uusimiskielto =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @uusimiskielto = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @uusimiskielto.push Fixnum.from_json(_item)
                 else
                   @uusimiskielto.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @uusimiskielto = _oa
            end
          end
        if !_o['uusimiskiellonSyy'].nil?
          _oa = _o['uusimiskiellonSyy']
            if(_oa.is_a? Hash)
              @uusimiskiellonSyy = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @uusimiskiellonSyy =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @uusimiskiellonSyy = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @uusimiskiellonSyy.push String.from_json(_item)
                 else
                   @uusimiskiellonSyy.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @uusimiskiellonSyy = _oa
            end
          end
        if !_o['uusimiskiellonPerustelu'].nil?
          _oa = _o['uusimiskiellonPerustelu']
            if(_oa.is_a? Hash)
              @uusimiskiellonPerustelu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @uusimiskiellonPerustelu =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @uusimiskiellonPerustelu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @uusimiskiellonPerustelu.push String.from_json(_item)
                 else
                   @uusimiskiellonPerustelu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @uusimiskiellonPerustelu = _oa
            end
          end
        if !_o['potilasohjekielto'].nil?
          _oa = _o['potilasohjekielto']
            if(_oa.is_a? Hash)
              @potilasohjekielto = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @potilasohjekielto =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @potilasohjekielto = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @potilasohjekielto.push Fixnum.from_json(_item)
                 else
                   @potilasohjekielto.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @potilasohjekielto = _oa
            end
          end
        if !_o['tyonantaja'].nil?
          _oa = _o['tyonantaja']
            if(_oa.is_a? Hash)
              @tyonantaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tyonantaja =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tyonantaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tyonantaja.push String.from_json(_item)
                 else
                   @tyonantaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tyonantaja = _oa
            end
          end
        if !_o['vakuutusyhtio'].nil?
          _oa = _o['vakuutusyhtio']
            if(_oa.is_a? Hash)
              @vakuutusyhtio = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vakuutusyhtio =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vakuutusyhtio = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vakuutusyhtio.push String.from_json(_item)
                 else
                   @vakuutusyhtio.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vakuutusyhtio = _oa
            end
          end
        if !_o['voimassaoloLoppu'].nil?
          _oa = _o['voimassaoloLoppu']
            if(_oa.is_a? Hash)
              @voimassaoloLoppu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @voimassaoloLoppu =  Java::Sql::Date.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @voimassaoloLoppu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @voimassaoloLoppu.push Java::Sql::Date.from_json(_item)
                 else
                   @voimassaoloLoppu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @voimassaoloLoppu = _oa
            end
          end
        if !_o['annostuslinkki'].nil?
          _oa = _o['annostuslinkki']
            if(_oa.is_a? Hash)
              @annostuslinkki = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @annostuslinkki =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @annostuslinkki = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @annostuslinkki.push Fixnum.from_json(_item)
                 else
                   @annostuslinkki.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @annostuslinkki = _oa
            end
          end
        if !_o['hoitojakso'].nil?
          _oa = _o['hoitojakso']
            if(_oa.is_a? Hash)
              @hoitojakso = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @hoitojakso =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @hoitojakso = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @hoitojakso.push Fixnum.from_json(_item)
                 else
                   @hoitojakso.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @hoitojakso = _oa
            end
          end
        if !_o['alkuperainen'].nil?
          _oa = _o['alkuperainen']
            if(_oa.is_a? Hash)
              @alkuperainen = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @alkuperainen =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @alkuperainen = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @alkuperainen.push Fixnum.from_json(_item)
                 else
                   @alkuperainen.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @alkuperainen = _oa
            end
          end
        if !_o['palkkio'].nil?
          _oa = _o['palkkio']
            if(_oa.is_a? Hash)
              @palkkio = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palkkio =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palkkio = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palkkio.push Float.from_json(_item)
                 else
                   @palkkio.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palkkio = _oa
            end
          end
        if !_o['palkkioErikoislaakarina'].nil?
          _oa = _o['palkkioErikoislaakarina']
            if(_oa.is_a? Hash)
              @palkkioErikoislaakarina = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palkkioErikoislaakarina =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palkkioErikoislaakarina = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palkkioErikoislaakarina.push Fixnum.from_json(_item)
                 else
                   @palkkioErikoislaakarina.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palkkioErikoislaakarina = _oa
            end
          end
        if !_o['tartuntatautilaake'].nil?
          _oa = _o['tartuntatautilaake']
            if(_oa.is_a? Hash)
              @tartuntatautilaake = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tartuntatautilaake =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tartuntatautilaake = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tartuntatautilaake.push Fixnum.from_json(_item)
                 else
                   @tartuntatautilaake.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tartuntatautilaake = _oa
            end
          end
        if !_o['palvelutapahtuma'].nil?
          _oa = _o['palvelutapahtuma']
            if(_oa.is_a? Hash)
              @palvelutapahtuma = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palvelutapahtuma =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palvelutapahtuma = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palvelutapahtuma.push Fixnum.from_json(_item)
                 else
                   @palvelutapahtuma.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palvelutapahtuma = _oa
            end
          end
        if !_o['palvelutapahtumaOid'].nil?
          _oa = _o['palvelutapahtumaOid']
            if(_oa.is_a? Hash)
              @palvelutapahtumaOid = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palvelutapahtumaOid =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palvelutapahtumaOid = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palvelutapahtumaOid.push String.from_json(_item)
                 else
                   @palvelutapahtumaOid.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palvelutapahtumaOid = _oa
            end
          end
        if !_o['sairaalaApteekkiOid'].nil?
          _oa = _o['sairaalaApteekkiOid']
            if(_oa.is_a? Hash)
              @sairaalaApteekkiOid = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @sairaalaApteekkiOid =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @sairaalaApteekkiOid = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @sairaalaApteekkiOid.push String.from_json(_item)
                 else
                   @sairaalaApteekkiOid.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @sairaalaApteekkiOid = _oa
            end
          end
        if !_o['sairaalaApteekkiNimi'].nil?
          _oa = _o['sairaalaApteekkiNimi']
            if(_oa.is_a? Hash)
              @sairaalaApteekkiNimi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @sairaalaApteekkiNimi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @sairaalaApteekkiNimi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @sairaalaApteekkiNimi.push String.from_json(_item)
                 else
                   @sairaalaApteekkiNimi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @sairaalaApteekkiNimi = _oa
            end
          end
        if !_o['tarkistus'].nil?
          _oa = _o['tarkistus']
            if(_oa.is_a? Hash)
              @tarkistus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tarkistus =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tarkistus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tarkistus.push Fixnum.from_json(_item)
                 else
                   @tarkistus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tarkistus = _oa
            end
          end
        if !_o['poistosyy'].nil?
          _oa = _o['poistosyy']
            if(_oa.is_a? Hash)
              @poistosyy = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @poistosyy =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @poistosyy = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @poistosyy.push String.from_json(_item)
                 else
                   @poistosyy.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @poistosyy = _oa
            end
          end
        if !_o['poistettu'].nil?
          _oa = _o['poistettu']
            if(_oa.is_a? Hash)
              @poistettu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @poistettu =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @poistettu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @poistettu.push Fixnum.from_json(_item)
                 else
                   @poistettu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @poistettu = _oa
            end
          end
        if !_o['muutosaika'].nil?
          _oa = _o['muutosaika']
            if(_oa.is_a? Hash)
              @muutosaika = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @muutosaika =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @muutosaika = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @muutosaika.push Time.from_json(_item)
                 else
                   @muutosaika.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @muutosaika = _oa
            end
          end
        if !_o['muutospaikka'].nil?
          _oa = _o['muutospaikka']
            if(_oa.is_a? Hash)
              @muutospaikka = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @muutospaikka =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @muutospaikka = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @muutospaikka.push Fixnum.from_json(_item)
                 else
                   @muutospaikka.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @muutospaikka = _oa
            end
          end
        if !_o['pysyvyys'].nil?
          _oa = _o['pysyvyys']
            if(_oa.is_a? Hash)
              @pysyvyys = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @pysyvyys =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @pysyvyys = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @pysyvyys.push String.from_json(_item)
                 else
                   @pysyvyys.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @pysyvyys = _oa
            end
          end
        if !_o['nimi'].nil?
          _oa = _o['nimi']
            if(_oa.is_a? Hash)
              @nimi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @nimi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @nimi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @nimi.push String.from_json(_item)
                 else
                   @nimi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @nimi = _oa
            end
          end
        if !_o['annostus'].nil?
          _oa = _o['annostus']
            if(_oa.is_a? Hash)
              @annostus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @annostus =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @annostus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @annostus.push String.from_json(_item)
                 else
                   @annostus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @annostus = _oa
            end
          end
        if !_o['vaihteleva'].nil?
          _oa = _o['vaihteleva']
            if(_oa.is_a? Hash)
              @vaihteleva = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vaihteleva =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vaihteleva = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vaihteleva.push Boolean.from_json(_item)
                 else
                   @vaihteleva.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vaihteleva = _oa
            end
          end
        if !_o['vaihtelevaAnnostus'].nil?
          _oa = _o['vaihtelevaAnnostus']
            if(_oa.is_a? Hash)
              @vaihtelevaAnnostus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vaihtelevaAnnostus =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vaihtelevaAnnostus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vaihtelevaAnnostus.push String.from_json(_item)
                 else
                   @vaihtelevaAnnostus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vaihtelevaAnnostus = _oa
            end
          end
        if !_o['sic'].nil?
          _oa = _o['sic']
            if(_oa.is_a? Hash)
              @sic = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @sic =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @sic = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @sic.push String.from_json(_item)
                 else
                   @sic.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @sic = _oa
            end
          end
        if !_o['kokoNimi'].nil?
          _oa = _o['kokoNimi']
            if(_oa.is_a? Hash)
              @kokoNimi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kokoNimi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kokoNimi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kokoNimi.push String.from_json(_item)
                 else
                   @kokoNimi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kokoNimi = _oa
            end
          end
        if !_o['laakeaineet'].nil?
          _oa = _o['laakeaineet']
            if(_oa.is_a? Hash)
              @laakeaineet = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laakeaineet =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laakeaineet = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laakeaineet.push String.from_json(_item)
                 else
                   @laakeaineet.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laakeaineet = _oa
            end
          end
        if !_o['annettavaMaaraTimesPaino'].nil?
          _oa = _o['annettavaMaaraTimesPaino']
            if(_oa.is_a? Hash)
              @annettavaMaaraTimesPaino = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @annettavaMaaraTimesPaino =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @annettavaMaaraTimesPaino = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @annettavaMaaraTimesPaino.push Float.from_json(_item)
                 else
                   @annettavaMaaraTimesPaino.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @annettavaMaaraTimesPaino = _oa
            end
          end
        if !_o['vrkmaara'].nil?
          _oa = _o['vrkmaara']
            if(_oa.is_a? Hash)
              @vrkmaara = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vrkmaara =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vrkmaara = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vrkmaara.push Float.from_json(_item)
                 else
                   @vrkmaara.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vrkmaara = _oa
            end
          end
        if !_o['vrkkerratCalc'].nil?
          _oa = _o['vrkkerratCalc']
            if(_oa.is_a? Hash)
              @vrkkerratCalc = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vrkkerratCalc =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vrkkerratCalc = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vrkkerratCalc.push Fixnum.from_json(_item)
                 else
                   @vrkkerratCalc.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vrkkerratCalc = _oa
            end
          end
        if !_o['vrkmaaraCalc'].nil?
          _oa = _o['vrkmaaraCalc']
            if(_oa.is_a? Hash)
              @vrkmaaraCalc = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vrkmaaraCalc =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vrkmaaraCalc = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vrkmaaraCalc.push Float.from_json(_item)
                 else
                   @vrkmaaraCalc.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vrkmaaraCalc = _oa
            end
          end
        if !_o['vrkmaaraYksikko'].nil?
          _oa = _o['vrkmaaraYksikko']
            if(_oa.is_a? Hash)
              @vrkmaaraYksikko = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vrkmaaraYksikko =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vrkmaaraYksikko = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vrkmaaraYksikko.push String.from_json(_item)
                 else
                   @vrkmaaraYksikko.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vrkmaaraYksikko = _oa
            end
          end
        if !_o['tauot'].nil?
          _oa = _o['tauot']
            if(_oa.is_a? Hash)
              @tauot = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tauot =  Fi::Mediconsult::Core::Client::Dto::Laakitys::LaakitysTauko.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tauot = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tauot.push Fi::Mediconsult::Core::Client::Dto::Laakitys::LaakitysTauko.from_json(_item)
                 else
                   @tauot.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tauot = _oa
            end
          end
        if !_o['annot'].nil?
          _oa = _o['annot']
            if(_oa.is_a? Hash)
              @annot = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @annot =  Fi::Mediconsult::Core::Client::Dto::LaakitysAnto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @annot = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @annot.push Fi::Mediconsult::Core::Client::Dto::LaakitysAnto.from_json(_item)
                 else
                   @annot.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @annot = _oa
            end
          end
        if !_o['tavat'].nil?
          _oa = _o['tavat']
            if(_oa.is_a? Hash)
              @tavat = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tavat =  Fi::Mediconsult::Core::Client::Dto::Laakitys::LaakitysTapa.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tavat = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tavat.push Fi::Mediconsult::Core::Client::Dto::Laakitys::LaakitysTapa.from_json(_item)
                 else
                   @tavat.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tavat = _oa
            end
          end
        if !_o['kayttoaiheet'].nil?
          _oa = _o['kayttoaiheet']
            if(_oa.is_a? Hash)
              @kayttoaiheet = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kayttoaiheet =  Fi::Mediconsult::Core::Client::Dto::Laakitys::LaakitysKayttoaihe.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kayttoaiheet = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kayttoaiheet.push Fi::Mediconsult::Core::Client::Dto::Laakitys::LaakitysKayttoaihe.from_json(_item)
                 else
                   @kayttoaiheet.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kayttoaiheet = _oa
            end
          end
        if !_o['laakitysKayttoaiheList'].nil?
          _oa = _o['laakitysKayttoaiheList']
            if(_oa.is_a? Hash)
              @laakitysKayttoaiheList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laakitysKayttoaiheList =  Fi::Mediconsult::Core::Client::Dto::KayttoaiheView.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laakitysKayttoaiheList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laakitysKayttoaiheList.push Fi::Mediconsult::Core::Client::Dto::KayttoaiheView.from_json(_item)
                 else
                   @laakitysKayttoaiheList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laakitysKayttoaiheList = _oa
            end
          end
        if !_o['kuittaukset'].nil?
          _oa = _o['kuittaukset']
            if(_oa.is_a? Hash)
              @kuittaukset = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kuittaukset =  Fi::Mediconsult::Core::Client::Dto::Laakitys::LaakitysKuittaus.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kuittaukset = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kuittaukset.push Fi::Mediconsult::Core::Client::Dto::Laakitys::LaakitysKuittaus.from_json(_item)
                 else
                   @kuittaukset.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kuittaukset = _oa
            end
          end
    end

    # constructs a Laakitys from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class FysiologisetMittauksetView 

    # (no documentation provided)
    attr_accessor :patientId
    # (no documentation provided)
    attr_accessor :fysiologinenMittausList

    # the json hash for this FysiologisetMittauksetView
    def to_jaxb_json_hash
      _h = {}
      _h['patientId'] = patientId.to_jaxb_json_hash unless patientId.nil?
      if !fysiologinenMittausList.nil?
        _ha = Array.new
        fysiologinenMittausList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['fysiologinenMittausList'] = _ha
      end
      return _h
    end

    # the json (string form) for this FysiologisetMittauksetView
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this FysiologisetMittauksetView with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['patientId'].nil?
          _oa = _o['patientId']
            if(_oa.is_a? Hash)
              @patientId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @patientId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @patientId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @patientId.push Fixnum.from_json(_item)
                 else
                   @patientId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @patientId = _oa
            end
          end
        if !_o['fysiologinenMittausList'].nil?
          _oa = _o['fysiologinenMittausList']
            if(_oa.is_a? Hash)
              @fysiologinenMittausList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @fysiologinenMittausList =  Fi::Mediconsult::Core::Client::Dto::FysiologinenMittaus.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @fysiologinenMittausList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @fysiologinenMittausList.push Fi::Mediconsult::Core::Client::Dto::FysiologinenMittaus.from_json(_item)
                 else
                   @fysiologinenMittausList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @fysiologinenMittausList = _oa
            end
          end
    end

    # constructs a FysiologisetMittauksetView from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Rights

  # (no documentation provided)
  class PrimaryNurseSettings 

    # (no documentation provided)
    attr_accessor :workerRoleTitle
    # (no documentation provided)
    attr_accessor :form

    # the json hash for this PrimaryNurseSettings
    def to_jaxb_json_hash
      _h = {}
      _h['workerRoleTitle'] = workerRoleTitle.to_jaxb_json_hash unless workerRoleTitle.nil?
      _h['form'] = form.to_jaxb_json_hash unless form.nil?
      return _h
    end

    # the json (string form) for this PrimaryNurseSettings
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this PrimaryNurseSettings with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['workerRoleTitle'].nil?
          _oa = _o['workerRoleTitle']
            if(_oa.is_a? Hash)
              @workerRoleTitle = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @workerRoleTitle =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @workerRoleTitle = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @workerRoleTitle.push String.from_json(_item)
                 else
                   @workerRoleTitle.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @workerRoleTitle = _oa
            end
          end
        if !_o['form'].nil?
          _oa = _o['form']
            if(_oa.is_a? Hash)
              @form = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @form =  Fi::Mediconsult::Mediplan::Dto::Rights::FormRights.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @form = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @form.push Fi::Mediconsult::Mediplan::Dto::Rights::FormRights.from_json(_item)
                 else
                   @form.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @form = _oa
            end
          end
    end

    # constructs a PrimaryNurseSettings from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class UserRoleInfo 

    # (no documentation provided)
    attr_accessor :id
    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :forceVahvatunnistus

    # the json hash for this UserRoleInfo
    def to_jaxb_json_hash
      _h = {}
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['forceVahvatunnistus'] = forceVahvatunnistus.to_jaxb_json_hash unless forceVahvatunnistus.nil?
      return _h
    end

    # the json (string form) for this UserRoleInfo
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this UserRoleInfo with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push Fixnum.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['forceVahvatunnistus'].nil?
          _oa = _o['forceVahvatunnistus']
            if(_oa.is_a? Hash)
              @forceVahvatunnistus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @forceVahvatunnistus =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @forceVahvatunnistus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @forceVahvatunnistus.push Boolean.from_json(_item)
                 else
                   @forceVahvatunnistus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @forceVahvatunnistus = _oa
            end
          end
    end

    # constructs a UserRoleInfo from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class BaseModel 

    # (no documentation provided)
    attr_accessor :editTime
    # (no documentation provided)
    attr_accessor :componentId
    # (no documentation provided)
    attr_accessor :ownerId

    # the json hash for this BaseModel
    def to_jaxb_json_hash
      _h = {}
      _h['editTime'] = editTime.to_jaxb_json_hash unless editTime.nil?
      _h['componentId'] = componentId.to_jaxb_json_hash unless componentId.nil?
      _h['ownerId'] = ownerId.to_jaxb_json_hash unless ownerId.nil?
      return _h
    end

    # the json (string form) for this BaseModel
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this BaseModel with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['editTime'].nil?
          _oa = _o['editTime']
            if(_oa.is_a? Hash)
              @editTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @editTime =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @editTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @editTime.push Bignum.from_json(_item)
                 else
                   @editTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @editTime = _oa
            end
          end
        if !_o['componentId'].nil?
          _oa = _o['componentId']
            if(_oa.is_a? Hash)
              @componentId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @componentId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @componentId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @componentId.push String.from_json(_item)
                 else
                   @componentId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @componentId = _oa
            end
          end
        if !_o['ownerId'].nil?
          _oa = _o['ownerId']
            if(_oa.is_a? Hash)
              @ownerId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ownerId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ownerId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ownerId.push Fixnum.from_json(_item)
                 else
                   @ownerId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ownerId = _oa
            end
          end
    end

    # constructs a BaseModel from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Palvelupaatos

  # (no documentation provided)
  class Palvelupaatos 

    # (no documentation provided)
    attr_accessor :permissions
    # (no documentation provided)
    attr_accessor :paatos
    # (no documentation provided)
    attr_accessor :palveluluokkaTunnus
    # (no documentation provided)
    attr_accessor :palveluluokka
    # (no documentation provided)
    attr_accessor :alkaa
    # (no documentation provided)
    attr_accessor :diaarinumero
    # (no documentation provided)
    attr_accessor :haettu
    # (no documentation provided)
    attr_accessor :huomautuksia
    # (no documentation provided)
    attr_accessor :kayttajaryhma
    # (no documentation provided)
    attr_accessor :kustannuspaikka
    # (no documentation provided)
    attr_accessor :kuukausimaksu
    # (no documentation provided)
    attr_accessor :laki
    # (no documentation provided)
    attr_accessor :laskutusalkaa
    # (no documentation provided)
    attr_accessor :loppuu
    # (no documentation provided)
    attr_accessor :luokittelu1
    # (no documentation provided)
    attr_accessor :luokittelu2
    # (no documentation provided)
    attr_accessor :maara
    # (no documentation provided)
    attr_accessor :maksuperuste
    # (no documentation provided)
    attr_accessor :mitatoija
    # (no documentation provided)
    attr_accessor :mitatoijaUser
    # (no documentation provided)
    attr_accessor :mitatointisyy
    # (no documentation provided)
    attr_accessor :mitatoity
    # (no documentation provided)
    attr_accessor :muutosaika
    # (no documentation provided)
    attr_accessor :muutospaikka
    # (no documentation provided)
    attr_accessor :paatetty
    # (no documentation provided)
    attr_accessor :paatosyksikko
    # (no documentation provided)
    attr_accessor :paatosyksikkoUnit
    # (no documentation provided)
    attr_accessor :paattaja
    # (no documentation provided)
    attr_accessor :paattajaUser
    # (no documentation provided)
    attr_accessor :paattajaryhma
    # (no documentation provided)
    attr_accessor :poistettu
    # (no documentation provided)
    attr_accessor :tarve
    # (no documentation provided)
    attr_accessor :teksti
    # (no documentation provided)
    attr_accessor :tiedonantaja
    # (no documentation provided)
    attr_accessor :tilasto1
    # (no documentation provided)
    attr_accessor :tilasto2
    # (no documentation provided)
    attr_accessor :tilasto3
    # (no documentation provided)
    attr_accessor :tulot
    # (no documentation provided)
    attr_accessor :valitettu
    # (no documentation provided)
    attr_accessor :valmistelija
    # (no documentation provided)
    attr_accessor :valmistelijaUser
    # (no documentation provided)
    attr_accessor :valmisteluyksikko
    # (no documentation provided)
    attr_accessor :valmisteluyksikkoUnit
    # (no documentation provided)
    attr_accessor :tila
    # (no documentation provided)
    attr_accessor :laatu
    # (no documentation provided)
    attr_accessor :lasnaolot
    # (no documentation provided)
    attr_accessor :palvelukeskeytykset
    # (no documentation provided)
    attr_accessor :effectivePalvelukeskeytykset

    # the json hash for this Palvelupaatos
    def to_jaxb_json_hash
      _h = {}
      _h['permissions'] = permissions.to_jaxb_json_hash unless permissions.nil?
      _h['paatos'] = paatos.to_jaxb_json_hash unless paatos.nil?
      _h['palveluluokkaTunnus'] = palveluluokkaTunnus.to_jaxb_json_hash unless palveluluokkaTunnus.nil?
      _h['palveluluokka'] = palveluluokka.to_jaxb_json_hash unless palveluluokka.nil?
      _h['alkaa'] = alkaa.to_jaxb_json_hash unless alkaa.nil?
      _h['diaarinumero'] = diaarinumero.to_jaxb_json_hash unless diaarinumero.nil?
      _h['haettu'] = haettu.to_jaxb_json_hash unless haettu.nil?
      _h['huomautuksia'] = huomautuksia.to_jaxb_json_hash unless huomautuksia.nil?
      _h['kayttajaryhma'] = kayttajaryhma.to_jaxb_json_hash unless kayttajaryhma.nil?
      _h['kustannuspaikka'] = kustannuspaikka.to_jaxb_json_hash unless kustannuspaikka.nil?
      _h['kuukausimaksu'] = kuukausimaksu.to_jaxb_json_hash unless kuukausimaksu.nil?
      _h['laki'] = laki.to_jaxb_json_hash unless laki.nil?
      _h['laskutusalkaa'] = laskutusalkaa.to_jaxb_json_hash unless laskutusalkaa.nil?
      _h['loppuu'] = loppuu.to_jaxb_json_hash unless loppuu.nil?
      _h['luokittelu1'] = luokittelu1.to_jaxb_json_hash unless luokittelu1.nil?
      _h['luokittelu2'] = luokittelu2.to_jaxb_json_hash unless luokittelu2.nil?
      _h['maara'] = maara.to_jaxb_json_hash unless maara.nil?
      _h['maksuperuste'] = maksuperuste.to_jaxb_json_hash unless maksuperuste.nil?
      _h['mitatoija'] = mitatoija.to_jaxb_json_hash unless mitatoija.nil?
      _h['mitatoijaUser'] = mitatoijaUser.to_jaxb_json_hash unless mitatoijaUser.nil?
      _h['mitatointisyy'] = mitatointisyy.to_jaxb_json_hash unless mitatointisyy.nil?
      _h['mitatoity'] = mitatoity.to_jaxb_json_hash unless mitatoity.nil?
      _h['muutosaika'] = muutosaika.to_jaxb_json_hash unless muutosaika.nil?
      _h['muutospaikka'] = muutospaikka.to_jaxb_json_hash unless muutospaikka.nil?
      _h['paatetty'] = paatetty.to_jaxb_json_hash unless paatetty.nil?
      _h['paatosyksikko'] = paatosyksikko.to_jaxb_json_hash unless paatosyksikko.nil?
      _h['paatosyksikkoUnit'] = paatosyksikkoUnit.to_jaxb_json_hash unless paatosyksikkoUnit.nil?
      _h['paattaja'] = paattaja.to_jaxb_json_hash unless paattaja.nil?
      _h['paattajaUser'] = paattajaUser.to_jaxb_json_hash unless paattajaUser.nil?
      _h['paattajaryhma'] = paattajaryhma.to_jaxb_json_hash unless paattajaryhma.nil?
      _h['poistettu'] = poistettu.to_jaxb_json_hash unless poistettu.nil?
      _h['tarve'] = tarve.to_jaxb_json_hash unless tarve.nil?
      _h['teksti'] = teksti.to_jaxb_json_hash unless teksti.nil?
      _h['tiedonantaja'] = tiedonantaja.to_jaxb_json_hash unless tiedonantaja.nil?
      _h['tilasto1'] = tilasto1.to_jaxb_json_hash unless tilasto1.nil?
      _h['tilasto2'] = tilasto2.to_jaxb_json_hash unless tilasto2.nil?
      _h['tilasto3'] = tilasto3.to_jaxb_json_hash unless tilasto3.nil?
      _h['tulot'] = tulot.to_jaxb_json_hash unless tulot.nil?
      _h['valitettu'] = valitettu.to_jaxb_json_hash unless valitettu.nil?
      _h['valmistelija'] = valmistelija.to_jaxb_json_hash unless valmistelija.nil?
      _h['valmistelijaUser'] = valmistelijaUser.to_jaxb_json_hash unless valmistelijaUser.nil?
      _h['valmisteluyksikko'] = valmisteluyksikko.to_jaxb_json_hash unless valmisteluyksikko.nil?
      _h['valmisteluyksikkoUnit'] = valmisteluyksikkoUnit.to_jaxb_json_hash unless valmisteluyksikkoUnit.nil?
      _h['tila'] = tila.to_jaxb_json_hash unless tila.nil?
      _h['laatu'] = laatu.to_jaxb_json_hash unless laatu.nil?
      _h['lasnaolot'] = lasnaolot.to_jaxb_json_hash unless lasnaolot.nil?
      if !palvelukeskeytykset.nil?
        _ha = Array.new
        palvelukeskeytykset.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['palvelukeskeytykset'] = _ha
      end
      if !effectivePalvelukeskeytykset.nil?
        _ha = Array.new
        effectivePalvelukeskeytykset.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['effectivePalvelukeskeytykset'] = _ha
      end
      return _h
    end

    # the json (string form) for this Palvelupaatos
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Palvelupaatos with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['permissions'].nil?
          _oa = _o['permissions']
            if(_oa.is_a? Hash)
              @permissions = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @permissions =  Fi::Mediconsult::Core::Client::Dto::PermissionDTOOfExtendFormInfo.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @permissions = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @permissions.push Fi::Mediconsult::Core::Client::Dto::PermissionDTOOfExtendFormInfo.from_json(_item)
                 else
                   @permissions.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @permissions = _oa
            end
          end
        if !_o['paatos'].nil?
          _oa = _o['paatos']
            if(_oa.is_a? Hash)
              @paatos = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @paatos =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @paatos = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @paatos.push Fixnum.from_json(_item)
                 else
                   @paatos.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @paatos = _oa
            end
          end
        if !_o['palveluluokkaTunnus'].nil?
          _oa = _o['palveluluokkaTunnus']
            if(_oa.is_a? Hash)
              @palveluluokkaTunnus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palveluluokkaTunnus =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palveluluokkaTunnus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palveluluokkaTunnus.push String.from_json(_item)
                 else
                   @palveluluokkaTunnus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palveluluokkaTunnus = _oa
            end
          end
        if !_o['palveluluokka'].nil?
          _oa = _o['palveluluokka']
            if(_oa.is_a? Hash)
              @palveluluokka = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palveluluokka =  Fi::Mediconsult::Core::Client::Dto::Palvelupaatos::Palveluluokka.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palveluluokka = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palveluluokka.push Fi::Mediconsult::Core::Client::Dto::Palvelupaatos::Palveluluokka.from_json(_item)
                 else
                   @palveluluokka.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palveluluokka = _oa
            end
          end
        if !_o['alkaa'].nil?
          _oa = _o['alkaa']
            if(_oa.is_a? Hash)
              @alkaa = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @alkaa =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @alkaa = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @alkaa.push Bignum.from_json(_item)
                 else
                   @alkaa.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @alkaa = _oa
            end
          end
        if !_o['diaarinumero'].nil?
          _oa = _o['diaarinumero']
            if(_oa.is_a? Hash)
              @diaarinumero = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @diaarinumero =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @diaarinumero = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @diaarinumero.push String.from_json(_item)
                 else
                   @diaarinumero.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @diaarinumero = _oa
            end
          end
        if !_o['haettu'].nil?
          _oa = _o['haettu']
            if(_oa.is_a? Hash)
              @haettu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @haettu =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @haettu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @haettu.push Bignum.from_json(_item)
                 else
                   @haettu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @haettu = _oa
            end
          end
        if !_o['huomautuksia'].nil?
          _oa = _o['huomautuksia']
            if(_oa.is_a? Hash)
              @huomautuksia = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @huomautuksia =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @huomautuksia = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @huomautuksia.push String.from_json(_item)
                 else
                   @huomautuksia.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @huomautuksia = _oa
            end
          end
        if !_o['kayttajaryhma'].nil?
          _oa = _o['kayttajaryhma']
            if(_oa.is_a? Hash)
              @kayttajaryhma = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kayttajaryhma =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kayttajaryhma = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kayttajaryhma.push Fixnum.from_json(_item)
                 else
                   @kayttajaryhma.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kayttajaryhma = _oa
            end
          end
        if !_o['kustannuspaikka'].nil?
          _oa = _o['kustannuspaikka']
            if(_oa.is_a? Hash)
              @kustannuspaikka = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kustannuspaikka =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kustannuspaikka = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kustannuspaikka.push Fixnum.from_json(_item)
                 else
                   @kustannuspaikka.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kustannuspaikka = _oa
            end
          end
        if !_o['kuukausimaksu'].nil?
          _oa = _o['kuukausimaksu']
            if(_oa.is_a? Hash)
              @kuukausimaksu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kuukausimaksu =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kuukausimaksu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kuukausimaksu.push Float.from_json(_item)
                 else
                   @kuukausimaksu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kuukausimaksu = _oa
            end
          end
        if !_o['laki'].nil?
          _oa = _o['laki']
            if(_oa.is_a? Hash)
              @laki = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laki =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laki = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laki.push String.from_json(_item)
                 else
                   @laki.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laki = _oa
            end
          end
        if !_o['laskutusalkaa'].nil?
          _oa = _o['laskutusalkaa']
            if(_oa.is_a? Hash)
              @laskutusalkaa = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laskutusalkaa =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laskutusalkaa = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laskutusalkaa.push Bignum.from_json(_item)
                 else
                   @laskutusalkaa.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laskutusalkaa = _oa
            end
          end
        if !_o['loppuu'].nil?
          _oa = _o['loppuu']
            if(_oa.is_a? Hash)
              @loppuu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @loppuu =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @loppuu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @loppuu.push Bignum.from_json(_item)
                 else
                   @loppuu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @loppuu = _oa
            end
          end
        if !_o['luokittelu1'].nil?
          _oa = _o['luokittelu1']
            if(_oa.is_a? Hash)
              @luokittelu1 = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @luokittelu1 =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @luokittelu1 = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @luokittelu1.push String.from_json(_item)
                 else
                   @luokittelu1.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @luokittelu1 = _oa
            end
          end
        if !_o['luokittelu2'].nil?
          _oa = _o['luokittelu2']
            if(_oa.is_a? Hash)
              @luokittelu2 = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @luokittelu2 =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @luokittelu2 = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @luokittelu2.push String.from_json(_item)
                 else
                   @luokittelu2.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @luokittelu2 = _oa
            end
          end
        if !_o['maara'].nil?
          _oa = _o['maara']
            if(_oa.is_a? Hash)
              @maara = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @maara =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @maara = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @maara.push Fixnum.from_json(_item)
                 else
                   @maara.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @maara = _oa
            end
          end
        if !_o['maksuperuste'].nil?
          _oa = _o['maksuperuste']
            if(_oa.is_a? Hash)
              @maksuperuste = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @maksuperuste =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @maksuperuste = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @maksuperuste.push String.from_json(_item)
                 else
                   @maksuperuste.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @maksuperuste = _oa
            end
          end
        if !_o['mitatoija'].nil?
          _oa = _o['mitatoija']
            if(_oa.is_a? Hash)
              @mitatoija = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @mitatoija =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @mitatoija = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @mitatoija.push Fixnum.from_json(_item)
                 else
                   @mitatoija.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @mitatoija = _oa
            end
          end
        if !_o['mitatoijaUser'].nil?
          _oa = _o['mitatoijaUser']
            if(_oa.is_a? Hash)
              @mitatoijaUser = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @mitatoijaUser =  Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @mitatoijaUser = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @mitatoijaUser.push Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_item)
                 else
                   @mitatoijaUser.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @mitatoijaUser = _oa
            end
          end
        if !_o['mitatointisyy'].nil?
          _oa = _o['mitatointisyy']
            if(_oa.is_a? Hash)
              @mitatointisyy = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @mitatointisyy =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @mitatointisyy = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @mitatointisyy.push String.from_json(_item)
                 else
                   @mitatointisyy.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @mitatointisyy = _oa
            end
          end
        if !_o['mitatoity'].nil?
          _oa = _o['mitatoity']
            if(_oa.is_a? Hash)
              @mitatoity = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @mitatoity =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @mitatoity = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @mitatoity.push Time.from_json(_item)
                 else
                   @mitatoity.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @mitatoity = _oa
            end
          end
        if !_o['muutosaika'].nil?
          _oa = _o['muutosaika']
            if(_oa.is_a? Hash)
              @muutosaika = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @muutosaika =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @muutosaika = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @muutosaika.push Time.from_json(_item)
                 else
                   @muutosaika.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @muutosaika = _oa
            end
          end
        if !_o['muutospaikka'].nil?
          _oa = _o['muutospaikka']
            if(_oa.is_a? Hash)
              @muutospaikka = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @muutospaikka =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @muutospaikka = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @muutospaikka.push Fixnum.from_json(_item)
                 else
                   @muutospaikka.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @muutospaikka = _oa
            end
          end
        if !_o['paatetty'].nil?
          _oa = _o['paatetty']
            if(_oa.is_a? Hash)
              @paatetty = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @paatetty =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @paatetty = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @paatetty.push Bignum.from_json(_item)
                 else
                   @paatetty.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @paatetty = _oa
            end
          end
        if !_o['paatosyksikko'].nil?
          _oa = _o['paatosyksikko']
            if(_oa.is_a? Hash)
              @paatosyksikko = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @paatosyksikko =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @paatosyksikko = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @paatosyksikko.push Fixnum.from_json(_item)
                 else
                   @paatosyksikko.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @paatosyksikko = _oa
            end
          end
        if !_o['paatosyksikkoUnit'].nil?
          _oa = _o['paatosyksikkoUnit']
            if(_oa.is_a? Hash)
              @paatosyksikkoUnit = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @paatosyksikkoUnit =  Fi::Mediconsult::Core::Client::Dto::Omistaja::Unit.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @paatosyksikkoUnit = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @paatosyksikkoUnit.push Fi::Mediconsult::Core::Client::Dto::Omistaja::Unit.from_json(_item)
                 else
                   @paatosyksikkoUnit.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @paatosyksikkoUnit = _oa
            end
          end
        if !_o['paattaja'].nil?
          _oa = _o['paattaja']
            if(_oa.is_a? Hash)
              @paattaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @paattaja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @paattaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @paattaja.push Fixnum.from_json(_item)
                 else
                   @paattaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @paattaja = _oa
            end
          end
        if !_o['paattajaUser'].nil?
          _oa = _o['paattajaUser']
            if(_oa.is_a? Hash)
              @paattajaUser = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @paattajaUser =  Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @paattajaUser = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @paattajaUser.push Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_item)
                 else
                   @paattajaUser.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @paattajaUser = _oa
            end
          end
        if !_o['paattajaryhma'].nil?
          _oa = _o['paattajaryhma']
            if(_oa.is_a? Hash)
              @paattajaryhma = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @paattajaryhma =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @paattajaryhma = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @paattajaryhma.push String.from_json(_item)
                 else
                   @paattajaryhma.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @paattajaryhma = _oa
            end
          end
        if !_o['poistettu'].nil?
          _oa = _o['poistettu']
            if(_oa.is_a? Hash)
              @poistettu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @poistettu =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @poistettu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @poistettu.push Boolean.from_json(_item)
                 else
                   @poistettu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @poistettu = _oa
            end
          end
        if !_o['tarve'].nil?
          _oa = _o['tarve']
            if(_oa.is_a? Hash)
              @tarve = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tarve =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tarve = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tarve.push String.from_json(_item)
                 else
                   @tarve.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tarve = _oa
            end
          end
        if !_o['teksti'].nil?
          _oa = _o['teksti']
            if(_oa.is_a? Hash)
              @teksti = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @teksti =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @teksti = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @teksti.push String.from_json(_item)
                 else
                   @teksti.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @teksti = _oa
            end
          end
        if !_o['tiedonantaja'].nil?
          _oa = _o['tiedonantaja']
            if(_oa.is_a? Hash)
              @tiedonantaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tiedonantaja =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tiedonantaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tiedonantaja.push String.from_json(_item)
                 else
                   @tiedonantaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tiedonantaja = _oa
            end
          end
        if !_o['tilasto1'].nil?
          _oa = _o['tilasto1']
            if(_oa.is_a? Hash)
              @tilasto1 = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tilasto1 =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tilasto1 = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tilasto1.push String.from_json(_item)
                 else
                   @tilasto1.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tilasto1 = _oa
            end
          end
        if !_o['tilasto2'].nil?
          _oa = _o['tilasto2']
            if(_oa.is_a? Hash)
              @tilasto2 = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tilasto2 =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tilasto2 = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tilasto2.push String.from_json(_item)
                 else
                   @tilasto2.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tilasto2 = _oa
            end
          end
        if !_o['tilasto3'].nil?
          _oa = _o['tilasto3']
            if(_oa.is_a? Hash)
              @tilasto3 = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tilasto3 =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tilasto3 = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tilasto3.push String.from_json(_item)
                 else
                   @tilasto3.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tilasto3 = _oa
            end
          end
        if !_o['tulot'].nil?
          _oa = _o['tulot']
            if(_oa.is_a? Hash)
              @tulot = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tulot =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tulot = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tulot.push Float.from_json(_item)
                 else
                   @tulot.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tulot = _oa
            end
          end
        if !_o['valitettu'].nil?
          _oa = _o['valitettu']
            if(_oa.is_a? Hash)
              @valitettu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @valitettu =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @valitettu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @valitettu.push Bignum.from_json(_item)
                 else
                   @valitettu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @valitettu = _oa
            end
          end
        if !_o['valmistelija'].nil?
          _oa = _o['valmistelija']
            if(_oa.is_a? Hash)
              @valmistelija = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @valmistelija =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @valmistelija = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @valmistelija.push Fixnum.from_json(_item)
                 else
                   @valmistelija.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @valmistelija = _oa
            end
          end
        if !_o['valmistelijaUser'].nil?
          _oa = _o['valmistelijaUser']
            if(_oa.is_a? Hash)
              @valmistelijaUser = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @valmistelijaUser =  Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @valmistelijaUser = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @valmistelijaUser.push Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_item)
                 else
                   @valmistelijaUser.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @valmistelijaUser = _oa
            end
          end
        if !_o['valmisteluyksikko'].nil?
          _oa = _o['valmisteluyksikko']
            if(_oa.is_a? Hash)
              @valmisteluyksikko = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @valmisteluyksikko =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @valmisteluyksikko = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @valmisteluyksikko.push Fixnum.from_json(_item)
                 else
                   @valmisteluyksikko.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @valmisteluyksikko = _oa
            end
          end
        if !_o['valmisteluyksikkoUnit'].nil?
          _oa = _o['valmisteluyksikkoUnit']
            if(_oa.is_a? Hash)
              @valmisteluyksikkoUnit = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @valmisteluyksikkoUnit =  Fi::Mediconsult::Core::Client::Dto::Omistaja::Unit.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @valmisteluyksikkoUnit = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @valmisteluyksikkoUnit.push Fi::Mediconsult::Core::Client::Dto::Omistaja::Unit.from_json(_item)
                 else
                   @valmisteluyksikkoUnit.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @valmisteluyksikkoUnit = _oa
            end
          end
        if !_o['tila'].nil?
          _oa = _o['tila']
            if(_oa.is_a? Hash)
              @tila = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tila =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tila = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tila.push String.from_json(_item)
                 else
                   @tila.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tila = _oa
            end
          end
        if !_o['laatu'].nil?
          _oa = _o['laatu']
            if(_oa.is_a? Hash)
              @laatu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laatu =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laatu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laatu.push String.from_json(_item)
                 else
                   @laatu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laatu = _oa
            end
          end
        if !_o['lasnaolot'].nil?
          _oa = _o['lasnaolot']
            if(_oa.is_a? Hash)
              @lasnaolot = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lasnaolot =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lasnaolot = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lasnaolot.push Hash.from_json(_item)
                 else
                   @lasnaolot.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lasnaolot = _oa
            end
          end
        if !_o['palvelukeskeytykset'].nil?
          _oa = _o['palvelukeskeytykset']
            if(_oa.is_a? Hash)
              @palvelukeskeytykset = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palvelukeskeytykset =  Fi::Mediconsult::Core::Client::Dto::Palvelupaatos::Palvelukeskeytys.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palvelukeskeytykset = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palvelukeskeytykset.push Fi::Mediconsult::Core::Client::Dto::Palvelupaatos::Palvelukeskeytys.from_json(_item)
                 else
                   @palvelukeskeytykset.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palvelukeskeytykset = _oa
            end
          end
        if !_o['effectivePalvelukeskeytykset'].nil?
          _oa = _o['effectivePalvelukeskeytykset']
            if(_oa.is_a? Hash)
              @effectivePalvelukeskeytykset = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @effectivePalvelukeskeytykset =  Fi::Mediconsult::Core::Client::Dto::Palvelupaatos::Palvelukeskeytys.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @effectivePalvelukeskeytykset = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @effectivePalvelukeskeytykset.push Fi::Mediconsult::Core::Client::Dto::Palvelupaatos::Palvelukeskeytys.from_json(_item)
                 else
                   @effectivePalvelukeskeytykset.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @effectivePalvelukeskeytykset = _oa
            end
          end
    end

    # constructs a Palvelupaatos from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Worker

  # (no documentation provided)
  class AvailabilityDto 

    # the start
    attr_accessor :start
    # the end
    attr_accessor :end
    # the available
    attr_accessor :available
    # the workingHoursPlanned
    attr_accessor :workingHoursPlanned
    # the conflicts
    attr_accessor :conflicts
    # the conflictingEvents
    attr_accessor :conflictingEvents

    # the json hash for this AvailabilityDto
    def to_jaxb_json_hash
      _h = {}
      _h['start'] = start.to_jaxb_json_hash unless start.nil?
      _h['end'] = end.to_jaxb_json_hash unless end.nil?
      _h['available'] = available.to_jaxb_json_hash unless available.nil?
      _h['workingHoursPlanned'] = workingHoursPlanned.to_jaxb_json_hash unless workingHoursPlanned.nil?
      _h['conflicts'] = conflicts.to_jaxb_json_hash unless conflicts.nil?
      if !conflictingEvents.nil?
        _ha = Array.new
        conflictingEvents.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['conflictingEvents'] = _ha
      end
      return _h
    end

    # the json (string form) for this AvailabilityDto
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this AvailabilityDto with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['start'].nil?
          _oa = _o['start']
            if(_oa.is_a? Hash)
              @start = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @start =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @start = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @start.push Time.from_json(_item)
                 else
                   @start.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @start = _oa
            end
          end
        if !_o['end'].nil?
          _oa = _o['end']
            if(_oa.is_a? Hash)
              @end = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @end =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @end = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @end.push Time.from_json(_item)
                 else
                   @end.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @end = _oa
            end
          end
        if !_o['available'].nil?
          _oa = _o['available']
            if(_oa.is_a? Hash)
              @available = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @available =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @available = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @available.push Boolean.from_json(_item)
                 else
                   @available.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @available = _oa
            end
          end
        if !_o['workingHoursPlanned'].nil?
          _oa = _o['workingHoursPlanned']
            if(_oa.is_a? Hash)
              @workingHoursPlanned = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @workingHoursPlanned =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @workingHoursPlanned = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @workingHoursPlanned.push Boolean.from_json(_item)
                 else
                   @workingHoursPlanned.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @workingHoursPlanned = _oa
            end
          end
        if !_o['conflicts'].nil?
          _oa = _o['conflicts']
            if(_oa.is_a? Hash)
              @conflicts = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @conflicts =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @conflicts = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @conflicts.push Boolean.from_json(_item)
                 else
                   @conflicts.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @conflicts = _oa
            end
          end
        if !_o['conflictingEvents'].nil?
          _oa = _o['conflictingEvents']
            if(_oa.is_a? Hash)
              @conflictingEvents = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @conflictingEvents =  Fi::Mediconsult::Mediplan::Dto::Event::EventOverlapConflictDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @conflictingEvents = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @conflictingEvents.push Fi::Mediconsult::Mediplan::Dto::Event::EventOverlapConflictDto.from_json(_item)
                 else
                   @conflictingEvents.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @conflictingEvents = _oa
            end
          end
    end

    # constructs a AvailabilityDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Security

module Dto

  # (no documentation provided)
  class RoleDTO 

    # (no documentation provided)
    attr_accessor :role
    # (no documentation provided)
    attr_accessor :unit

    # the json hash for this RoleDTO
    def to_jaxb_json_hash
      _h = {}
      _h['role'] = role.to_jaxb_json_hash unless role.nil?
      _h['unit'] = unit.to_jaxb_json_hash unless unit.nil?
      return _h
    end

    # the json (string form) for this RoleDTO
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this RoleDTO with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['role'].nil?
          _oa = _o['role']
            if(_oa.is_a? Hash)
              @role = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @role =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @role = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @role.push Fixnum.from_json(_item)
                 else
                   @role.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @role = _oa
            end
          end
        if !_o['unit'].nil?
          _oa = _o['unit']
            if(_oa.is_a? Hash)
              @unit = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @unit =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @unit = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @unit.push Fixnum.from_json(_item)
                 else
                   @unit.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @unit = _oa
            end
          end
    end

    # constructs a RoleDTO from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class UnlockInfo 

    # (no documentation provided)
    attr_accessor :historiaLockReleaseSuccessful
    # (no documentation provided)
    attr_accessor :osahistoriaLockReleaseSuccessful

    # the json hash for this UnlockInfo
    def to_jaxb_json_hash
      _h = {}
      _h['historiaLockReleaseSuccessful'] = historiaLockReleaseSuccessful.to_jaxb_json_hash unless historiaLockReleaseSuccessful.nil?
      _h['osahistoriaLockReleaseSuccessful'] = osahistoriaLockReleaseSuccessful.to_jaxb_json_hash unless osahistoriaLockReleaseSuccessful.nil?
      return _h
    end

    # the json (string form) for this UnlockInfo
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this UnlockInfo with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['historiaLockReleaseSuccessful'].nil?
          _oa = _o['historiaLockReleaseSuccessful']
            if(_oa.is_a? Hash)
              @historiaLockReleaseSuccessful = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @historiaLockReleaseSuccessful =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @historiaLockReleaseSuccessful = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @historiaLockReleaseSuccessful.push Boolean.from_json(_item)
                 else
                   @historiaLockReleaseSuccessful.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @historiaLockReleaseSuccessful = _oa
            end
          end
        if !_o['osahistoriaLockReleaseSuccessful'].nil?
          _oa = _o['osahistoriaLockReleaseSuccessful']
            if(_oa.is_a? Hash)
              @osahistoriaLockReleaseSuccessful = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @osahistoriaLockReleaseSuccessful =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @osahistoriaLockReleaseSuccessful = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @osahistoriaLockReleaseSuccessful.push Boolean.from_json(_item)
                 else
                   @osahistoriaLockReleaseSuccessful.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @osahistoriaLockReleaseSuccessful = _oa
            end
          end
    end

    # constructs a UnlockInfo from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Kanta

module Suostumustenhallinta

  # (no documentation provided)
  class Information 

    # (no documentation provided)
    attr_accessor :givenTimestamp
    # (no documentation provided)
    attr_accessor :givenToMinorsGuardian
    # (no documentation provided)
    attr_accessor :type
    # (no documentation provided)
    attr_accessor :serviceProviderName
    # (no documentation provided)
    attr_accessor :givenVerbally
    # (no documentation provided)
    attr_accessor :givenInWriting
    # (no documentation provided)
    attr_accessor :healthcareDistrictName
    # (no documentation provided)
    attr_accessor :kirjaaja
    # (no documentation provided)
    attr_accessor :serviceProviderId
    # (no documentation provided)
    attr_accessor :healthcareDistrictId

    # the json hash for this Information
    def to_jaxb_json_hash
      _h = {}
      _h['givenTimestamp'] = givenTimestamp.to_jaxb_json_hash unless givenTimestamp.nil?
      _h['givenToMinorsGuardian'] = givenToMinorsGuardian.to_jaxb_json_hash unless givenToMinorsGuardian.nil?
      _h['type'] = type.to_jaxb_json_hash unless type.nil?
      _h['serviceProviderName'] = serviceProviderName.to_jaxb_json_hash unless serviceProviderName.nil?
      _h['givenVerbally'] = givenVerbally.to_jaxb_json_hash unless givenVerbally.nil?
      _h['givenInWriting'] = givenInWriting.to_jaxb_json_hash unless givenInWriting.nil?
      _h['healthcareDistrictName'] = healthcareDistrictName.to_jaxb_json_hash unless healthcareDistrictName.nil?
      _h['kirjaaja'] = kirjaaja.to_jaxb_json_hash unless kirjaaja.nil?
      _h['serviceProviderId'] = serviceProviderId.to_jaxb_json_hash unless serviceProviderId.nil?
      _h['healthcareDistrictId'] = healthcareDistrictId.to_jaxb_json_hash unless healthcareDistrictId.nil?
      return _h
    end

    # the json (string form) for this Information
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Information with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['givenTimestamp'].nil?
          _oa = _o['givenTimestamp']
            if(_oa.is_a? Hash)
              @givenTimestamp = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @givenTimestamp =  java.time::LocalDateTime.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @givenTimestamp = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @givenTimestamp.push java.time::LocalDateTime.from_json(_item)
                 else
                   @givenTimestamp.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @givenTimestamp = _oa
            end
          end
        if !_o['givenToMinorsGuardian'].nil?
          _oa = _o['givenToMinorsGuardian']
            if(_oa.is_a? Hash)
              @givenToMinorsGuardian = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @givenToMinorsGuardian =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @givenToMinorsGuardian = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @givenToMinorsGuardian.push Boolean.from_json(_item)
                 else
                   @givenToMinorsGuardian.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @givenToMinorsGuardian = _oa
            end
          end
        if !_o['type'].nil?
          _oa = _o['type']
            if(_oa.is_a? Hash)
              @type = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @type =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @type = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @type.push String.from_json(_item)
                 else
                   @type.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @type = _oa
            end
          end
        if !_o['serviceProviderName'].nil?
          _oa = _o['serviceProviderName']
            if(_oa.is_a? Hash)
              @serviceProviderName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @serviceProviderName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @serviceProviderName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @serviceProviderName.push String.from_json(_item)
                 else
                   @serviceProviderName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @serviceProviderName = _oa
            end
          end
        if !_o['givenVerbally'].nil?
          _oa = _o['givenVerbally']
            if(_oa.is_a? Hash)
              @givenVerbally = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @givenVerbally =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @givenVerbally = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @givenVerbally.push Boolean.from_json(_item)
                 else
                   @givenVerbally.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @givenVerbally = _oa
            end
          end
        if !_o['givenInWriting'].nil?
          _oa = _o['givenInWriting']
            if(_oa.is_a? Hash)
              @givenInWriting = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @givenInWriting =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @givenInWriting = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @givenInWriting.push Boolean.from_json(_item)
                 else
                   @givenInWriting.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @givenInWriting = _oa
            end
          end
        if !_o['healthcareDistrictName'].nil?
          _oa = _o['healthcareDistrictName']
            if(_oa.is_a? Hash)
              @healthcareDistrictName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @healthcareDistrictName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @healthcareDistrictName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @healthcareDistrictName.push String.from_json(_item)
                 else
                   @healthcareDistrictName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @healthcareDistrictName = _oa
            end
          end
        if !_o['kirjaaja'].nil?
          _oa = _o['kirjaaja']
            if(_oa.is_a? Hash)
              @kirjaaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kirjaaja =  Fi::Mediconsult::Core::Client::Dto::Kanta::AmmattilaisenTiedot.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kirjaaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kirjaaja.push Fi::Mediconsult::Core::Client::Dto::Kanta::AmmattilaisenTiedot.from_json(_item)
                 else
                   @kirjaaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kirjaaja = _oa
            end
          end
        if !_o['serviceProviderId'].nil?
          _oa = _o['serviceProviderId']
            if(_oa.is_a? Hash)
              @serviceProviderId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @serviceProviderId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @serviceProviderId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @serviceProviderId.push String.from_json(_item)
                 else
                   @serviceProviderId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @serviceProviderId = _oa
            end
          end
        if !_o['healthcareDistrictId'].nil?
          _oa = _o['healthcareDistrictId']
            if(_oa.is_a? Hash)
              @healthcareDistrictId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @healthcareDistrictId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @healthcareDistrictId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @healthcareDistrictId.push String.from_json(_item)
                 else
                   @healthcareDistrictId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @healthcareDistrictId = _oa
            end
          end
    end

    # constructs a Information from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Worker

  # (no documentation provided)
  class WorkerAvailabilityDto 

    # the worker
    attr_accessor :worker
    # the availability
    attr_accessor :availability

    # the json hash for this WorkerAvailabilityDto
    def to_jaxb_json_hash
      _h = {}
      _h['worker'] = worker.to_jaxb_json_hash unless worker.nil?
      _h['availability'] = availability.to_jaxb_json_hash unless availability.nil?
      return _h
    end

    # the json (string form) for this WorkerAvailabilityDto
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this WorkerAvailabilityDto with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['worker'].nil?
          _oa = _o['worker']
            if(_oa.is_a? Hash)
              @worker = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @worker =  Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @worker = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @worker.push Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_item)
                 else
                   @worker.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @worker = _oa
            end
          end
        if !_o['availability'].nil?
          _oa = _o['availability']
            if(_oa.is_a? Hash)
              @availability = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @availability =  Fi::Mediconsult::Mediplan::Dto::Worker::AvailabilityDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @availability = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @availability.push Fi::Mediconsult::Mediplan::Dto::Worker::AvailabilityDto.from_json(_item)
                 else
                   @availability.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @availability = _oa
            end
          end
    end

    # constructs a WorkerAvailabilityDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Security

module Dto

  # (no documentation provided)
  class CoreAuthenticationDTO 

    # Username in core. This in not unique ID. Usually maps to Omistaja.Tunnus but it&#39;s not guaranteed (with Medinet-customer login this can be anything!).
    attr_accessor :username
    # Roles grouped by unit id. Key is the unitId and value is @see UserRoleInfo Maps to UserRoleInfo
    attr_accessor :roles
    # Unit map with units long name as key
    attr_accessor :units
    # Returns roleId for current session. If roleId is null you must change role+unit using authentication-resource.
    attr_accessor :activeRole
    # Returns unitId for current session. If unitId is null you must change role+unit using authentication-resource.
    attr_accessor :activeUnit
    # Authenticated users first names. Can contain multiple names separated by spaces.
    attr_accessor :firstNames
    # Last name of the authenticated user.
    attr_accessor :lastName
    # boolean true if authentication was successful. If false, errorMessage is provided in message-key.
    attr_accessor :success
    # Error message for authentication if authentication has failed
    attr_accessor :message
    # true if authenticated user is patient-type.
    attr_accessor :patient
    # (no documentation provided)
    attr_accessor :userId
    # (no documentation provided)
    attr_accessor :developer
    # (no documentation provided)
    attr_accessor :componentRights
    # (no documentation provided)
    attr_accessor :viewConfiguration
    # (no documentation provided)
    attr_accessor :frameworkSettings
    # (no documentation provided)
    attr_accessor :context
    # (no documentation provided)
    attr_accessor :medikantaURL
    # (no documentation provided)
    attr_accessor :medireseptiURL

    # the json hash for this CoreAuthenticationDTO
    def to_jaxb_json_hash
      _h = {}
      _h['username'] = username.to_jaxb_json_hash unless username.nil?
      _h['roles'] = roles.to_jaxb_json_hash unless roles.nil?
      if !units.nil?
        _ha = Array.new
        units.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['units'] = _ha
      end
      _h['activeRole'] = activeRole.to_jaxb_json_hash unless activeRole.nil?
      _h['activeUnit'] = activeUnit.to_jaxb_json_hash unless activeUnit.nil?
      _h['firstNames'] = firstNames.to_jaxb_json_hash unless firstNames.nil?
      _h['lastName'] = lastName.to_jaxb_json_hash unless lastName.nil?
      _h['success'] = success.to_jaxb_json_hash unless success.nil?
      _h['message'] = message.to_jaxb_json_hash unless message.nil?
      _h['patient'] = patient.to_jaxb_json_hash unless patient.nil?
      _h['userId'] = userId.to_jaxb_json_hash unless userId.nil?
      _h['developer'] = developer.to_jaxb_json_hash unless developer.nil?
      if !componentRights.nil?
        _ha = Array.new
        componentRights.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['componentRights'] = _ha
      end
      _h['viewConfiguration'] = viewConfiguration.to_jaxb_json_hash unless viewConfiguration.nil?
      _h['frameworkSettings'] = frameworkSettings.to_jaxb_json_hash unless frameworkSettings.nil?
      _h['context'] = context.to_jaxb_json_hash unless context.nil?
      _h['medikantaURL'] = medikantaURL.to_jaxb_json_hash unless medikantaURL.nil?
      _h['medireseptiURL'] = medireseptiURL.to_jaxb_json_hash unless medireseptiURL.nil?
      return _h
    end

    # the json (string form) for this CoreAuthenticationDTO
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this CoreAuthenticationDTO with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['username'].nil?
          _oa = _o['username']
            if(_oa.is_a? Hash)
              @username = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @username =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @username = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @username.push String.from_json(_item)
                 else
                   @username.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @username = _oa
            end
          end
        if !_o['roles'].nil?
          _oa = _o['roles']
            if(_oa.is_a? Hash)
              @roles = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @roles =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @roles = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @roles.push Hash.from_json(_item)
                 else
                   @roles.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @roles = _oa
            end
          end
        if !_o['units'].nil?
          _oa = _o['units']
            if(_oa.is_a? Hash)
              @units = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @units =  Fi::Mediconsult::Core::Client::Dto::Omistaja::Unit.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @units = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @units.push Fi::Mediconsult::Core::Client::Dto::Omistaja::Unit.from_json(_item)
                 else
                   @units.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @units = _oa
            end
          end
        if !_o['activeRole'].nil?
          _oa = _o['activeRole']
            if(_oa.is_a? Hash)
              @activeRole = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @activeRole =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @activeRole = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @activeRole.push Fixnum.from_json(_item)
                 else
                   @activeRole.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @activeRole = _oa
            end
          end
        if !_o['activeUnit'].nil?
          _oa = _o['activeUnit']
            if(_oa.is_a? Hash)
              @activeUnit = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @activeUnit =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @activeUnit = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @activeUnit.push Fixnum.from_json(_item)
                 else
                   @activeUnit.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @activeUnit = _oa
            end
          end
        if !_o['firstNames'].nil?
          _oa = _o['firstNames']
            if(_oa.is_a? Hash)
              @firstNames = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @firstNames =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @firstNames = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @firstNames.push String.from_json(_item)
                 else
                   @firstNames.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @firstNames = _oa
            end
          end
        if !_o['lastName'].nil?
          _oa = _o['lastName']
            if(_oa.is_a? Hash)
              @lastName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lastName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lastName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lastName.push String.from_json(_item)
                 else
                   @lastName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lastName = _oa
            end
          end
        if !_o['success'].nil?
          _oa = _o['success']
            if(_oa.is_a? Hash)
              @success = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @success =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @success = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @success.push Boolean.from_json(_item)
                 else
                   @success.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @success = _oa
            end
          end
        if !_o['message'].nil?
          _oa = _o['message']
            if(_oa.is_a? Hash)
              @message = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @message =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @message = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @message.push String.from_json(_item)
                 else
                   @message.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @message = _oa
            end
          end
        if !_o['patient'].nil?
          _oa = _o['patient']
            if(_oa.is_a? Hash)
              @patient = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @patient =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @patient = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @patient.push Boolean.from_json(_item)
                 else
                   @patient.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @patient = _oa
            end
          end
        if !_o['userId'].nil?
          _oa = _o['userId']
            if(_oa.is_a? Hash)
              @userId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @userId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @userId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @userId.push Fixnum.from_json(_item)
                 else
                   @userId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @userId = _oa
            end
          end
        if !_o['developer'].nil?
          _oa = _o['developer']
            if(_oa.is_a? Hash)
              @developer = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @developer =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @developer = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @developer.push Boolean.from_json(_item)
                 else
                   @developer.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @developer = _oa
            end
          end
        if !_o['componentRights'].nil?
          _oa = _o['componentRights']
            if(_oa.is_a? Hash)
              @componentRights = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @componentRights =  Fi::Mediconsult::Core::Client::Dto::ComponentRightDTO.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @componentRights = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @componentRights.push Fi::Mediconsult::Core::Client::Dto::ComponentRightDTO.from_json(_item)
                 else
                   @componentRights.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @componentRights = _oa
            end
          end
        if !_o['viewConfiguration'].nil?
          _oa = _o['viewConfiguration']
            if(_oa.is_a? Hash)
              @viewConfiguration = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @viewConfiguration =  Fi::Mediconsult::Core::Security::Dto::ViewConfiguration.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @viewConfiguration = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @viewConfiguration.push Fi::Mediconsult::Core::Security::Dto::ViewConfiguration.from_json(_item)
                 else
                   @viewConfiguration.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @viewConfiguration = _oa
            end
          end
        if !_o['frameworkSettings'].nil?
          _oa = _o['frameworkSettings']
            if(_oa.is_a? Hash)
              @frameworkSettings = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @frameworkSettings =  Fi::Mediconsult::Core::Client::Dto::FrameworkSettings.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @frameworkSettings = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @frameworkSettings.push Fi::Mediconsult::Core::Client::Dto::FrameworkSettings.from_json(_item)
                 else
                   @frameworkSettings.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @frameworkSettings = _oa
            end
          end
        if !_o['context'].nil?
          _oa = _o['context']
            if(_oa.is_a? Hash)
              @context = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @context =  Fi::Mediconsult::Core::Security::CoreAuthenticationRequestContext.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @context = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @context.push Fi::Mediconsult::Core::Security::CoreAuthenticationRequestContext.from_json(_item)
                 else
                   @context.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @context = _oa
            end
          end
        if !_o['medikantaURL'].nil?
          _oa = _o['medikantaURL']
            if(_oa.is_a? Hash)
              @medikantaURL = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @medikantaURL =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @medikantaURL = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @medikantaURL.push String.from_json(_item)
                 else
                   @medikantaURL.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @medikantaURL = _oa
            end
          end
        if !_o['medireseptiURL'].nil?
          _oa = _o['medireseptiURL']
            if(_oa.is_a? Hash)
              @medireseptiURL = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @medireseptiURL =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @medireseptiURL = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @medireseptiURL.push String.from_json(_item)
                 else
                   @medireseptiURL.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @medireseptiURL = _oa
            end
          end
    end

    # constructs a CoreAuthenticationDTO from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Omistaja

  # (no documentation provided)
  class LazyLoadedDtoOfUser 

    # (no documentation provided)
    attr_accessor :object
    # (no documentation provided)
    attr_accessor :loadUrl
    # (no documentation provided)
    attr_accessor :type
    # (no documentation provided)
    attr_accessor :loaded

    # the json hash for this LazyLoadedDtoOfUser
    def to_jaxb_json_hash
      _h = {}
      _h['object'] = object.to_jaxb_json_hash unless object.nil?
      _h['loadUrl'] = loadUrl.to_jaxb_json_hash unless loadUrl.nil?
      _h['type'] = type.to_jaxb_json_hash unless type.nil?
      _h['loaded'] = loaded.to_jaxb_json_hash unless loaded.nil?
      return _h
    end

    # the json (string form) for this LazyLoadedDtoOfUser
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this LazyLoadedDtoOfUser with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['object'].nil?
          _oa = _o['object']
            if(_oa.is_a? Hash)
              @object = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @object =  Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @object = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @object.push Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_item)
                 else
                   @object.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @object = _oa
            end
          end
        if !_o['loadUrl'].nil?
          _oa = _o['loadUrl']
            if(_oa.is_a? Hash)
              @loadUrl = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @loadUrl =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @loadUrl = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @loadUrl.push String.from_json(_item)
                 else
                   @loadUrl.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @loadUrl = _oa
            end
          end
        if !_o['type'].nil?
          _oa = _o['type']
            if(_oa.is_a? Hash)
              @type = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @type =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @type = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @type.push String.from_json(_item)
                 else
                   @type.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @type = _oa
            end
          end
        if !_o['loaded'].nil?
          _oa = _o['loaded']
            if(_oa.is_a? Hash)
              @loaded = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @loaded =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @loaded = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @loaded.push Boolean.from_json(_item)
                 else
                   @loaded.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @loaded = _oa
            end
          end
    end

    # constructs a LazyLoadedDtoOfUser from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Planner

  # (no documentation provided)
  class MissingAddresses 

    # (no documentation provided)
    attr_accessor :customers
    # (no documentation provided)
    attr_accessor :workers
    # (no documentation provided)
    attr_accessor :units

    # the json hash for this MissingAddresses
    def to_jaxb_json_hash
      _h = {}
      if !customers.nil?
        _ha = Array.new
        customers.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['customers'] = _ha
      end
      if !workers.nil?
        _ha = Array.new
        workers.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['workers'] = _ha
      end
      if !units.nil?
        _ha = Array.new
        units.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['units'] = _ha
      end
      return _h
    end

    # the json (string form) for this MissingAddresses
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this MissingAddresses with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['customers'].nil?
          _oa = _o['customers']
            if(_oa.is_a? Hash)
              @customers = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @customers =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @customers = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @customers.push Fixnum.from_json(_item)
                 else
                   @customers.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @customers = _oa
            end
          end
        if !_o['workers'].nil?
          _oa = _o['workers']
            if(_oa.is_a? Hash)
              @workers = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @workers =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @workers = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @workers.push Fixnum.from_json(_item)
                 else
                   @workers.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @workers = _oa
            end
          end
        if !_o['units'].nil?
          _oa = _o['units']
            if(_oa.is_a? Hash)
              @units = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @units =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @units = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @units.push Fixnum.from_json(_item)
                 else
                   @units.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @units = _oa
            end
          end
    end

    # constructs a MissingAddresses from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Omistaja

  # (no documentation provided)
  class WardCareStatus 

    # (no documentation provided)
    attr_accessor :inWardCare
    # (no documentation provided)
    attr_accessor :hoitojakso
    # (no documentation provided)
    attr_accessor :palvelutapahtuma
    # (no documentation provided)
    attr_accessor :dataOrigin

    # the json hash for this WardCareStatus
    def to_jaxb_json_hash
      _h = {}
      _h['inWardCare'] = inWardCare.to_jaxb_json_hash unless inWardCare.nil?
      _h['hoitojakso'] = hoitojakso.to_jaxb_json_hash unless hoitojakso.nil?
      _h['palvelutapahtuma'] = palvelutapahtuma.to_jaxb_json_hash unless palvelutapahtuma.nil?
      _h['dataOrigin'] = dataOrigin.to_jaxb_json_hash unless dataOrigin.nil?
      return _h
    end

    # the json (string form) for this WardCareStatus
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this WardCareStatus with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['inWardCare'].nil?
          _oa = _o['inWardCare']
            if(_oa.is_a? Hash)
              @inWardCare = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @inWardCare =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @inWardCare = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @inWardCare.push Boolean.from_json(_item)
                 else
                   @inWardCare.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @inWardCare = _oa
            end
          end
        if !_o['hoitojakso'].nil?
          _oa = _o['hoitojakso']
            if(_oa.is_a? Hash)
              @hoitojakso = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @hoitojakso =  Fi::Mediconsult::Core::Client::Dto::Omistaja::LazyLoadedDtoOfHoitojakso.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @hoitojakso = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @hoitojakso.push Fi::Mediconsult::Core::Client::Dto::Omistaja::LazyLoadedDtoOfHoitojakso.from_json(_item)
                 else
                   @hoitojakso.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @hoitojakso = _oa
            end
          end
        if !_o['palvelutapahtuma'].nil?
          _oa = _o['palvelutapahtuma']
            if(_oa.is_a? Hash)
              @palvelutapahtuma = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palvelutapahtuma =  Fi::Mediconsult::Core::Client::Dto::Omistaja::LazyLoadedDtoOfPalvelutapahtuma.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palvelutapahtuma = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palvelutapahtuma.push Fi::Mediconsult::Core::Client::Dto::Omistaja::LazyLoadedDtoOfPalvelutapahtuma.from_json(_item)
                 else
                   @palvelutapahtuma.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palvelutapahtuma = _oa
            end
          end
        if !_o['dataOrigin'].nil?
          _oa = _o['dataOrigin']
            if(_oa.is_a? Hash)
              @dataOrigin = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @dataOrigin =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @dataOrigin = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @dataOrigin.push String.from_json(_item)
                 else
                   @dataOrigin.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @dataOrigin = _oa
            end
          end
    end

    # constructs a WardCareStatus from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Eventmodel

  # (no documentation provided)
  class PlanningSettings 

    # (no documentation provided)
    attr_accessor :startTimeLimit
    # (no documentation provided)
    attr_accessor :endTimeLimit
    # (no documentation provided)
    attr_accessor :keepResourcesInOptimization
    # (no documentation provided)
    attr_accessor :customerVisit
    # (no documentation provided)
    attr_accessor :optimizationInUse

    # the json hash for this PlanningSettings
    def to_jaxb_json_hash
      _h = {}
      _h['startTimeLimit'] = startTimeLimit.to_jaxb_json_hash unless startTimeLimit.nil?
      _h['endTimeLimit'] = endTimeLimit.to_jaxb_json_hash unless endTimeLimit.nil?
      _h['keepResourcesInOptimization'] = keepResourcesInOptimization.to_jaxb_json_hash unless keepResourcesInOptimization.nil?
      _h['customerVisit'] = customerVisit.to_jaxb_json_hash unless customerVisit.nil?
      _h['optimizationInUse'] = optimizationInUse.to_jaxb_json_hash unless optimizationInUse.nil?
      return _h
    end

    # the json (string form) for this PlanningSettings
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this PlanningSettings with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['startTimeLimit'].nil?
          _oa = _o['startTimeLimit']
            if(_oa.is_a? Hash)
              @startTimeLimit = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @startTimeLimit =  java.time::LocalTime.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @startTimeLimit = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @startTimeLimit.push java.time::LocalTime.from_json(_item)
                 else
                   @startTimeLimit.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @startTimeLimit = _oa
            end
          end
        if !_o['endTimeLimit'].nil?
          _oa = _o['endTimeLimit']
            if(_oa.is_a? Hash)
              @endTimeLimit = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @endTimeLimit =  java.time::LocalTime.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @endTimeLimit = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @endTimeLimit.push java.time::LocalTime.from_json(_item)
                 else
                   @endTimeLimit.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @endTimeLimit = _oa
            end
          end
        if !_o['keepResourcesInOptimization'].nil?
          _oa = _o['keepResourcesInOptimization']
            if(_oa.is_a? Hash)
              @keepResourcesInOptimization = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @keepResourcesInOptimization =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @keepResourcesInOptimization = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @keepResourcesInOptimization.push Boolean.from_json(_item)
                 else
                   @keepResourcesInOptimization.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @keepResourcesInOptimization = _oa
            end
          end
        if !_o['customerVisit'].nil?
          _oa = _o['customerVisit']
            if(_oa.is_a? Hash)
              @customerVisit = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @customerVisit =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @customerVisit = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @customerVisit.push Boolean.from_json(_item)
                 else
                   @customerVisit.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @customerVisit = _oa
            end
          end
        if !_o['optimizationInUse'].nil?
          _oa = _o['optimizationInUse']
            if(_oa.is_a? Hash)
              @optimizationInUse = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @optimizationInUse =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @optimizationInUse = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @optimizationInUse.push Boolean.from_json(_item)
                 else
                   @optimizationInUse.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @optimizationInUse = _oa
            end
          end
    end

    # constructs a PlanningSettings from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class PermissionDTOOfExtendFormInfo 

    # (no documentation provided)
    attr_accessor :add
    # (no documentation provided)
    attr_accessor :data
    # (no documentation provided)
    attr_accessor :type
    # (no documentation provided)
    attr_accessor :change
    # (no documentation provided)
    attr_accessor :view
    # (no documentation provided)
    attr_accessor :remove

    # the json hash for this PermissionDTOOfExtendFormInfo
    def to_jaxb_json_hash
      _h = {}
      _h['add'] = add.to_jaxb_json_hash unless add.nil?
      _h['data'] = data.to_jaxb_json_hash unless data.nil?
      _h['type'] = type.to_jaxb_json_hash unless type.nil?
      _h['change'] = change.to_jaxb_json_hash unless change.nil?
      _h['view'] = view.to_jaxb_json_hash unless view.nil?
      _h['remove'] = remove.to_jaxb_json_hash unless remove.nil?
      return _h
    end

    # the json (string form) for this PermissionDTOOfExtendFormInfo
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this PermissionDTOOfExtendFormInfo with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['add'].nil?
          _oa = _o['add']
            if(_oa.is_a? Hash)
              @add = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @add =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @add = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @add.push Boolean.from_json(_item)
                 else
                   @add.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @add = _oa
            end
          end
        if !_o['data'].nil?
          _oa = _o['data']
            if(_oa.is_a? Hash)
              @data = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @data =  Fi::Mediconsult::Core::Client::Dto::ExtendFormInfo.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @data = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @data.push Fi::Mediconsult::Core::Client::Dto::ExtendFormInfo.from_json(_item)
                 else
                   @data.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @data = _oa
            end
          end
        if !_o['type'].nil?
          _oa = _o['type']
            if(_oa.is_a? Hash)
              @type = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @type =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @type = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @type.push String.from_json(_item)
                 else
                   @type.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @type = _oa
            end
          end
        if !_o['change'].nil?
          _oa = _o['change']
            if(_oa.is_a? Hash)
              @change = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @change =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @change = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @change.push Boolean.from_json(_item)
                 else
                   @change.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @change = _oa
            end
          end
        if !_o['view'].nil?
          _oa = _o['view']
            if(_oa.is_a? Hash)
              @view = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @view =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @view = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @view.push Boolean.from_json(_item)
                 else
                   @view.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @view = _oa
            end
          end
        if !_o['remove'].nil?
          _oa = _o['remove']
            if(_oa.is_a? Hash)
              @remove = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @remove =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @remove = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @remove.push Boolean.from_json(_item)
                 else
                   @remove.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @remove = _oa
            end
          end
    end

    # constructs a PermissionDTOOfExtendFormInfo from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Eventmodel

  # (no documentation provided)
  class EventModelBasicInfo 

    # (no documentation provided)
    attr_accessor :title
    # (no documentation provided)
    attr_accessor :displayOrder

    # the json hash for this EventModelBasicInfo
    def to_jaxb_json_hash
      _h = {}
      _h['title'] = title.to_jaxb_json_hash unless title.nil?
      _h['displayOrder'] = displayOrder.to_jaxb_json_hash unless displayOrder.nil?
      return _h
    end

    # the json (string form) for this EventModelBasicInfo
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this EventModelBasicInfo with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['title'].nil?
          _oa = _o['title']
            if(_oa.is_a? Hash)
              @title = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @title =  Fi::Mediconsult::Core::Client::Dto::Title::TitleSettings.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @title = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @title.push Fi::Mediconsult::Core::Client::Dto::Title::TitleSettings.from_json(_item)
                 else
                   @title.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @title = _oa
            end
          end
        if !_o['displayOrder'].nil?
          _oa = _o['displayOrder']
            if(_oa.is_a? Hash)
              @displayOrder = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @displayOrder =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @displayOrder = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @displayOrder.push Fixnum.from_json(_item)
                 else
                   @displayOrder.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @displayOrder = _oa
            end
          end
    end

    # constructs a EventModelBasicInfo from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Title

module Diagnose

  # (no documentation provided)
  class DiagnoseProperty 

    # (no documentation provided)
    attr_accessor :desc
    # (no documentation provided)
    attr_accessor :value
    # (no documentation provided)
    attr_accessor :deprecated

    # the json hash for this DiagnoseProperty
    def to_jaxb_json_hash
      _h = {}
      _h['desc'] = desc.to_jaxb_json_hash unless desc.nil?
      _h['value'] = value.to_jaxb_json_hash unless value.nil?
      _h['deprecated'] = deprecated.to_jaxb_json_hash unless deprecated.nil?
      return _h
    end

    # the json (string form) for this DiagnoseProperty
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this DiagnoseProperty with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['desc'].nil?
          _oa = _o['desc']
            if(_oa.is_a? Hash)
              @desc = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @desc =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @desc = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @desc.push String.from_json(_item)
                 else
                   @desc.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @desc = _oa
            end
          end
        if !_o['value'].nil?
          _oa = _o['value']
            if(_oa.is_a? Hash)
              @value = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @value =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @value = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @value.push String.from_json(_item)
                 else
                   @value.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @value = _oa
            end
          end
        if !_o['deprecated'].nil?
          _oa = _o['deprecated']
            if(_oa.is_a? Hash)
              @deprecated = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @deprecated =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @deprecated = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @deprecated.push Boolean.from_json(_item)
                 else
                   @deprecated.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @deprecated = _oa
            end
          end
    end

    # constructs a DiagnoseProperty from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Kanta

  # (no documentation provided)
  class DocumentInfo 

    # (no documentation provided)
    attr_accessor :createdAt
    # (no documentation provided)
    attr_accessor :setId
    # (no documentation provided)
    attr_accessor :id
    # (no documentation provided)
    attr_accessor :versionNumber

    # the json hash for this DocumentInfo
    def to_jaxb_json_hash
      _h = {}
      _h['createdAt'] = createdAt.to_jaxb_json_hash unless createdAt.nil?
      _h['setId'] = setId.to_jaxb_json_hash unless setId.nil?
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['versionNumber'] = versionNumber.to_jaxb_json_hash unless versionNumber.nil?
      return _h
    end

    # the json (string form) for this DocumentInfo
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this DocumentInfo with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['createdAt'].nil?
          _oa = _o['createdAt']
            if(_oa.is_a? Hash)
              @createdAt = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @createdAt =  java.time::LocalDateTime.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @createdAt = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @createdAt.push java.time::LocalDateTime.from_json(_item)
                 else
                   @createdAt.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @createdAt = _oa
            end
          end
        if !_o['setId'].nil?
          _oa = _o['setId']
            if(_oa.is_a? Hash)
              @setId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @setId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @setId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @setId.push String.from_json(_item)
                 else
                   @setId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @setId = _oa
            end
          end
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push String.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
        if !_o['versionNumber'].nil?
          _oa = _o['versionNumber']
            if(_oa.is_a? Hash)
              @versionNumber = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @versionNumber =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @versionNumber = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @versionNumber.push Fixnum.from_json(_item)
                 else
                   @versionNumber.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @versionNumber = _oa
            end
          end
    end

    # constructs a DocumentInfo from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Kanta

  # (no documentation provided)
  class GenericTextDTO 

    # (no documentation provided)
    attr_accessor :text

    # the json hash for this GenericTextDTO
    def to_jaxb_json_hash
      _h = {}
      _h['text'] = text.to_jaxb_json_hash unless text.nil?
      return _h
    end

    # the json (string form) for this GenericTextDTO
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this GenericTextDTO with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['text'].nil?
          _oa = _o['text']
            if(_oa.is_a? Hash)
              @text = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @text =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @text = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @text.push String.from_json(_item)
                 else
                   @text.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @text = _oa
            end
          end
    end

    # constructs a GenericTextDTO from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Kanta

module Suostumustenhallinta

  # (no documentation provided)
  class LuovutustarkistusDTO 

    # (no documentation provided)
    attr_accessor :commonRegisterInformed
    # (no documentation provided)
    attr_accessor :earkistoInformed
    # (no documentation provided)
    attr_accessor :ereseptiInformed
    # (no documentation provided)
    attr_accessor :kantaConsentGiven

    # the json hash for this LuovutustarkistusDTO
    def to_jaxb_json_hash
      _h = {}
      _h['commonRegisterInformed'] = commonRegisterInformed.to_jaxb_json_hash unless commonRegisterInformed.nil?
      _h['earkistoInformed'] = earkistoInformed.to_jaxb_json_hash unless earkistoInformed.nil?
      _h['ereseptiInformed'] = ereseptiInformed.to_jaxb_json_hash unless ereseptiInformed.nil?
      _h['kantaConsentGiven'] = kantaConsentGiven.to_jaxb_json_hash unless kantaConsentGiven.nil?
      return _h
    end

    # the json (string form) for this LuovutustarkistusDTO
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this LuovutustarkistusDTO with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['commonRegisterInformed'].nil?
          _oa = _o['commonRegisterInformed']
            if(_oa.is_a? Hash)
              @commonRegisterInformed = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @commonRegisterInformed =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @commonRegisterInformed = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @commonRegisterInformed.push Boolean.from_json(_item)
                 else
                   @commonRegisterInformed.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @commonRegisterInformed = _oa
            end
          end
        if !_o['earkistoInformed'].nil?
          _oa = _o['earkistoInformed']
            if(_oa.is_a? Hash)
              @earkistoInformed = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @earkistoInformed =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @earkistoInformed = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @earkistoInformed.push Boolean.from_json(_item)
                 else
                   @earkistoInformed.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @earkistoInformed = _oa
            end
          end
        if !_o['ereseptiInformed'].nil?
          _oa = _o['ereseptiInformed']
            if(_oa.is_a? Hash)
              @ereseptiInformed = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ereseptiInformed =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ereseptiInformed = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ereseptiInformed.push Boolean.from_json(_item)
                 else
                   @ereseptiInformed.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ereseptiInformed = _oa
            end
          end
        if !_o['kantaConsentGiven'].nil?
          _oa = _o['kantaConsentGiven']
            if(_oa.is_a? Hash)
              @kantaConsentGiven = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kantaConsentGiven =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kantaConsentGiven = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kantaConsentGiven.push Boolean.from_json(_item)
                 else
                   @kantaConsentGiven.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kantaConsentGiven = _oa
            end
          end
    end

    # constructs a LuovutustarkistusDTO from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Kertomus

  # (no documentation provided)
  class KertomusID 

    # (no documentation provided)
    attr_accessor :ownerId
    # (no documentation provided)
    attr_accessor :aika
    # (no documentation provided)
    attr_accessor :formId
    # (no documentation provided)
    attr_accessor :reportId

    # the json hash for this KertomusID
    def to_jaxb_json_hash
      _h = {}
      _h['ownerId'] = ownerId.to_jaxb_json_hash unless ownerId.nil?
      _h['aika'] = aika.to_jaxb_json_hash unless aika.nil?
      _h['formId'] = formId.to_jaxb_json_hash unless formId.nil?
      _h['reportId'] = reportId.to_jaxb_json_hash unless reportId.nil?
      return _h
    end

    # the json (string form) for this KertomusID
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this KertomusID with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['ownerId'].nil?
          _oa = _o['ownerId']
            if(_oa.is_a? Hash)
              @ownerId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ownerId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ownerId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ownerId.push Fixnum.from_json(_item)
                 else
                   @ownerId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ownerId = _oa
            end
          end
        if !_o['aika'].nil?
          _oa = _o['aika']
            if(_oa.is_a? Hash)
              @aika = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @aika =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @aika = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @aika.push Time.from_json(_item)
                 else
                   @aika.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @aika = _oa
            end
          end
        if !_o['formId'].nil?
          _oa = _o['formId']
            if(_oa.is_a? Hash)
              @formId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @formId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @formId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @formId.push Fixnum.from_json(_item)
                 else
                   @formId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @formId = _oa
            end
          end
        if !_o['reportId'].nil?
          _oa = _o['reportId']
            if(_oa.is_a? Hash)
              @reportId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @reportId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @reportId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @reportId.push Fixnum.from_json(_item)
                 else
                   @reportId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @reportId = _oa
            end
          end
    end

    # constructs a KertomusID from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Omistaja

  # (no documentation provided)
  class LazyLoadedDtoOfPalvelutapahtuma 

    # (no documentation provided)
    attr_accessor :loadUrl
    # (no documentation provided)
    attr_accessor :type
    # (no documentation provided)
    attr_accessor :loaded
    # (no documentation provided)
    attr_accessor :object

    # the json hash for this LazyLoadedDtoOfPalvelutapahtuma
    def to_jaxb_json_hash
      _h = {}
      _h['loadUrl'] = loadUrl.to_jaxb_json_hash unless loadUrl.nil?
      _h['type'] = type.to_jaxb_json_hash unless type.nil?
      _h['loaded'] = loaded.to_jaxb_json_hash unless loaded.nil?
      _h['object'] = object.to_jaxb_json_hash unless object.nil?
      return _h
    end

    # the json (string form) for this LazyLoadedDtoOfPalvelutapahtuma
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this LazyLoadedDtoOfPalvelutapahtuma with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['loadUrl'].nil?
          _oa = _o['loadUrl']
            if(_oa.is_a? Hash)
              @loadUrl = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @loadUrl =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @loadUrl = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @loadUrl.push String.from_json(_item)
                 else
                   @loadUrl.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @loadUrl = _oa
            end
          end
        if !_o['type'].nil?
          _oa = _o['type']
            if(_oa.is_a? Hash)
              @type = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @type =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @type = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @type.push String.from_json(_item)
                 else
                   @type.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @type = _oa
            end
          end
        if !_o['loaded'].nil?
          _oa = _o['loaded']
            if(_oa.is_a? Hash)
              @loaded = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @loaded =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @loaded = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @loaded.push Boolean.from_json(_item)
                 else
                   @loaded.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @loaded = _oa
            end
          end
        if !_o['object'].nil?
          _oa = _o['object']
            if(_oa.is_a? Hash)
              @object = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @object =  Fi::Mediconsult::Core::Client::Dto::Palvelutapahtuma.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @object = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @object.push Fi::Mediconsult::Core::Client::Dto::Palvelutapahtuma.from_json(_item)
                 else
                   @object.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @object = _oa
            end
          end
    end

    # constructs a LazyLoadedDtoOfPalvelutapahtuma from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class PermissionDTO<T extends Object> 

    # (no documentation provided)
    attr_accessor :view
    # (no documentation provided)
    attr_accessor :change
    # (no documentation provided)
    attr_accessor :add
    # (no documentation provided)
    attr_accessor :data
    # (no documentation provided)
    attr_accessor :remove
    # (no documentation provided)
    attr_accessor :type

    # the json hash for this PermissionDTO<T extends Object>
    def to_jaxb_json_hash
      _h = {}
      _h['view'] = view.to_jaxb_json_hash unless view.nil?
      _h['change'] = change.to_jaxb_json_hash unless change.nil?
      _h['add'] = add.to_jaxb_json_hash unless add.nil?
      _h['data'] = data.to_jaxb_json_hash unless data.nil?
      _h['remove'] = remove.to_jaxb_json_hash unless remove.nil?
      _h['type'] = type.to_jaxb_json_hash unless type.nil?
      return _h
    end

    # the json (string form) for this PermissionDTO<T extends Object>
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this PermissionDTO<T extends Object> with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['view'].nil?
          _oa = _o['view']
            if(_oa.is_a? Hash)
              @view = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @view =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @view = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @view.push Boolean.from_json(_item)
                 else
                   @view.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @view = _oa
            end
          end
        if !_o['change'].nil?
          _oa = _o['change']
            if(_oa.is_a? Hash)
              @change = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @change =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @change = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @change.push Boolean.from_json(_item)
                 else
                   @change.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @change = _oa
            end
          end
        if !_o['add'].nil?
          _oa = _o['add']
            if(_oa.is_a? Hash)
              @add = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @add =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @add = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @add.push Boolean.from_json(_item)
                 else
                   @add.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @add = _oa
            end
          end
        if !_o['data'].nil?
          _oa = _o['data']
            if(_oa.is_a? Hash)
              @data = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @data =  Object.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @data = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @data.push Object.from_json(_item)
                 else
                   @data.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @data = _oa
            end
          end
        if !_o['remove'].nil?
          _oa = _o['remove']
            if(_oa.is_a? Hash)
              @remove = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @remove =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @remove = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @remove.push Boolean.from_json(_item)
                 else
                   @remove.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @remove = _oa
            end
          end
        if !_o['type'].nil?
          _oa = _o['type']
            if(_oa.is_a? Hash)
              @type = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @type =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @type = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @type.push String.from_json(_item)
                 else
                   @type.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @type = _oa
            end
          end
    end

    # constructs a PermissionDTO<T extends Object> from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

  # (no documentation provided)
  class PersonListByUnitAndFormOfWorkerAvailabilityDto 

    # (no documentation provided)
    attr_accessor :unitId
    # (no documentation provided)
    attr_accessor :listId
    # (no documentation provided)
    attr_accessor :people

    # the json hash for this PersonListByUnitAndFormOfWorkerAvailabilityDto
    def to_jaxb_json_hash
      _h = {}
      _h['unitId'] = unitId.to_jaxb_json_hash unless unitId.nil?
      _h['listId'] = listId.to_jaxb_json_hash unless listId.nil?
      if !people.nil?
        _ha = Array.new
        people.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['people'] = _ha
      end
      return _h
    end

    # the json (string form) for this PersonListByUnitAndFormOfWorkerAvailabilityDto
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this PersonListByUnitAndFormOfWorkerAvailabilityDto with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['unitId'].nil?
          _oa = _o['unitId']
            if(_oa.is_a? Hash)
              @unitId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @unitId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @unitId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @unitId.push Fixnum.from_json(_item)
                 else
                   @unitId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @unitId = _oa
            end
          end
        if !_o['listId'].nil?
          _oa = _o['listId']
            if(_oa.is_a? Hash)
              @listId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @listId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @listId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @listId.push Fixnum.from_json(_item)
                 else
                   @listId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @listId = _oa
            end
          end
        if !_o['people'].nil?
          _oa = _o['people']
            if(_oa.is_a? Hash)
              @people = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @people =  Fi::Mediconsult::Mediplan::Dto::Worker::WorkerAvailabilityDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @people = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @people.push Fi::Mediconsult::Mediplan::Dto::Worker::WorkerAvailabilityDto.from_json(_item)
                 else
                   @people.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @people = _oa
            end
          end
    end

    # constructs a PersonListByUnitAndFormOfWorkerAvailabilityDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Palvelupaatos

  # (no documentation provided)
  class PalvelukeskeytysSyy 

    # (no documentation provided)
    attr_accessor :billingType
    # (no documentation provided)
    attr_accessor :maxBillingDays
    # (no documentation provided)
    attr_accessor :syyDescription

    # the json hash for this PalvelukeskeytysSyy
    def to_jaxb_json_hash
      _h = {}
      _h['billingType'] = billingType.to_jaxb_json_hash unless billingType.nil?
      _h['maxBillingDays'] = maxBillingDays.to_jaxb_json_hash unless maxBillingDays.nil?
      _h['syyDescription'] = syyDescription.to_jaxb_json_hash unless syyDescription.nil?
      return _h
    end

    # the json (string form) for this PalvelukeskeytysSyy
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this PalvelukeskeytysSyy with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['billingType'].nil?
          _oa = _o['billingType']
            if(_oa.is_a? Hash)
              @billingType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @billingType =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @billingType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @billingType.push String.from_json(_item)
                 else
                   @billingType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @billingType = _oa
            end
          end
        if !_o['maxBillingDays'].nil?
          _oa = _o['maxBillingDays']
            if(_oa.is_a? Hash)
              @maxBillingDays = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @maxBillingDays =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @maxBillingDays = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @maxBillingDays.push Fixnum.from_json(_item)
                 else
                   @maxBillingDays.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @maxBillingDays = _oa
            end
          end
        if !_o['syyDescription'].nil?
          _oa = _o['syyDescription']
            if(_oa.is_a? Hash)
              @syyDescription = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @syyDescription =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @syyDescription = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @syyDescription.push String.from_json(_item)
                 else
                   @syyDescription.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @syyDescription = _oa
            end
          end
    end

    # constructs a PalvelukeskeytysSyy from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Diagnose

  # (no documentation provided)
  class DiagnoseSummary 

    # (no documentation provided)
    attr_accessor :presentation
    # (no documentation provided)
    attr_accessor :url

    # the json hash for this DiagnoseSummary
    def to_jaxb_json_hash
      _h = {}
      _h['presentation'] = presentation.to_jaxb_json_hash unless presentation.nil?
      _h['url'] = url.to_jaxb_json_hash unless url.nil?
      return _h
    end

    # the json (string form) for this DiagnoseSummary
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this DiagnoseSummary with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['presentation'].nil?
          _oa = _o['presentation']
            if(_oa.is_a? Hash)
              @presentation = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @presentation =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @presentation = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @presentation.push String.from_json(_item)
                 else
                   @presentation.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @presentation = _oa
            end
          end
        if !_o['url'].nil?
          _oa = _o['url']
            if(_oa.is_a? Hash)
              @url = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @url =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @url = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @url.push String.from_json(_item)
                 else
                   @url.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @url = _oa
            end
          end
    end

    # constructs a DiagnoseSummary from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Planner

  # (no documentation provided)
  class IdChangePair 

    # (no documentation provided)
    attr_accessor :fromId
    # (no documentation provided)
    attr_accessor :toId

    # the json hash for this IdChangePair
    def to_jaxb_json_hash
      _h = {}
      _h['fromId'] = fromId.to_jaxb_json_hash unless fromId.nil?
      _h['toId'] = toId.to_jaxb_json_hash unless toId.nil?
      return _h
    end

    # the json (string form) for this IdChangePair
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this IdChangePair with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['fromId'].nil?
          _oa = _o['fromId']
            if(_oa.is_a? Hash)
              @fromId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @fromId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @fromId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @fromId.push Fixnum.from_json(_item)
                 else
                   @fromId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @fromId = _oa
            end
          end
        if !_o['toId'].nil?
          _oa = _o['toId']
            if(_oa.is_a? Hash)
              @toId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @toId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @toId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @toId.push Fixnum.from_json(_item)
                 else
                   @toId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @toId = _oa
            end
          end
    end

    # constructs a IdChangePair from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Kanta

module Suostumustenhallinta

  # (no documentation provided)
  class RefusalsItem 

    # (no documentation provided)
    attr_accessor :refused
    # (no documentation provided)
    attr_accessor :end
    # (no documentation provided)
    attr_accessor :id
    # (no documentation provided)
    attr_accessor :origin
    # (no documentation provided)
    attr_accessor :start
    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :type
    # (no documentation provided)
    attr_accessor :subitems
    # (no documentation provided)
    attr_accessor :refusable

    # the json hash for this RefusalsItem
    def to_jaxb_json_hash
      _h = {}
      _h['refused'] = refused.to_jaxb_json_hash unless refused.nil?
      _h['end'] = end.to_jaxb_json_hash unless end.nil?
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['origin'] = origin.to_jaxb_json_hash unless origin.nil?
      _h['start'] = start.to_jaxb_json_hash unless start.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['type'] = type.to_jaxb_json_hash unless type.nil?
      if !subitems.nil?
        _ha = Array.new
        subitems.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['subitems'] = _ha
      end
      _h['refusable'] = refusable.to_jaxb_json_hash unless refusable.nil?
      return _h
    end

    # the json (string form) for this RefusalsItem
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this RefusalsItem with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['refused'].nil?
          _oa = _o['refused']
            if(_oa.is_a? Hash)
              @refused = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @refused =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @refused = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @refused.push Boolean.from_json(_item)
                 else
                   @refused.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @refused = _oa
            end
          end
        if !_o['end'].nil?
          _oa = _o['end']
            if(_oa.is_a? Hash)
              @end = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @end =  java.time::LocalDateTime.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @end = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @end.push java.time::LocalDateTime.from_json(_item)
                 else
                   @end.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @end = _oa
            end
          end
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push String.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
        if !_o['origin'].nil?
          _oa = _o['origin']
            if(_oa.is_a? Hash)
              @origin = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @origin =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @origin = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @origin.push String.from_json(_item)
                 else
                   @origin.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @origin = _oa
            end
          end
        if !_o['start'].nil?
          _oa = _o['start']
            if(_oa.is_a? Hash)
              @start = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @start =  java.time::LocalDateTime.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @start = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @start.push java.time::LocalDateTime.from_json(_item)
                 else
                   @start.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @start = _oa
            end
          end
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['type'].nil?
          _oa = _o['type']
            if(_oa.is_a? Hash)
              @type = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @type =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @type = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @type.push String.from_json(_item)
                 else
                   @type.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @type = _oa
            end
          end
        if !_o['subitems'].nil?
          _oa = _o['subitems']
            if(_oa.is_a? Hash)
              @subitems = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @subitems =  Fi::Mediconsult::Core::Client::Dto::Kanta::Suostumustenhallinta::RefusalsItem.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @subitems = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @subitems.push Fi::Mediconsult::Core::Client::Dto::Kanta::Suostumustenhallinta::RefusalsItem.from_json(_item)
                 else
                   @subitems.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @subitems = _oa
            end
          end
        if !_o['refusable'].nil?
          _oa = _o['refusable']
            if(_oa.is_a? Hash)
              @refusable = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @refusable =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @refusable = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @refusable.push Boolean.from_json(_item)
                 else
                   @refusable.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @refusable = _oa
            end
          end
    end

    # constructs a RefusalsItem from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Kertomus

  # (no documentation provided)
  class SubtitleConfig 

    # (no documentation provided)
    attr_accessor :titleName
    # (no documentation provided)
    attr_accessor :mandatory

    # the json hash for this SubtitleConfig
    def to_jaxb_json_hash
      _h = {}
      _h['titleName'] = titleName.to_jaxb_json_hash unless titleName.nil?
      _h['mandatory'] = mandatory.to_jaxb_json_hash unless mandatory.nil?
      return _h
    end

    # the json (string form) for this SubtitleConfig
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this SubtitleConfig with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['titleName'].nil?
          _oa = _o['titleName']
            if(_oa.is_a? Hash)
              @titleName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @titleName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @titleName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @titleName.push String.from_json(_item)
                 else
                   @titleName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @titleName = _oa
            end
          end
        if !_o['mandatory'].nil?
          _oa = _o['mandatory']
            if(_oa.is_a? Hash)
              @mandatory = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @mandatory =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @mandatory = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @mandatory.push Boolean.from_json(_item)
                 else
                   @mandatory.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @mandatory = _oa
            end
          end
    end

    # constructs a SubtitleConfig from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Hoito

  # (no documentation provided)
  class Hoidot 

    # (no documentation provided)
    attr_accessor :omistaja
    # (no documentation provided)
    attr_accessor :hoidot
    # (no documentation provided)
    attr_accessor :permissions

    # the json hash for this Hoidot
    def to_jaxb_json_hash
      _h = {}
      _h['omistaja'] = omistaja.to_jaxb_json_hash unless omistaja.nil?
      if !hoidot.nil?
        _ha = Array.new
        hoidot.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['hoidot'] = _ha
      end
      if !permissions.nil?
        _ha = Array.new
        permissions.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['permissions'] = _ha
      end
      return _h
    end

    # the json (string form) for this Hoidot
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Hoidot with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['omistaja'].nil?
          _oa = _o['omistaja']
            if(_oa.is_a? Hash)
              @omistaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @omistaja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @omistaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @omistaja.push Fixnum.from_json(_item)
                 else
                   @omistaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @omistaja = _oa
            end
          end
        if !_o['hoidot'].nil?
          _oa = _o['hoidot']
            if(_oa.is_a? Hash)
              @hoidot = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @hoidot =  Fi::Mediconsult::Core::Client::Dto::Hoito::Hoito.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @hoidot = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @hoidot.push Fi::Mediconsult::Core::Client::Dto::Hoito::Hoito.from_json(_item)
                 else
                   @hoidot.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @hoidot = _oa
            end
          end
        if !_o['permissions'].nil?
          _oa = _o['permissions']
            if(_oa.is_a? Hash)
              @permissions = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @permissions =  Fi::Mediconsult::Core::Client::Dto::PermissionDTOOfExtendFormInfo.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @permissions = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @permissions.push Fi::Mediconsult::Core::Client::Dto::PermissionDTOOfExtendFormInfo.from_json(_item)
                 else
                   @permissions.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @permissions = _oa
            end
          end
    end

    # constructs a Hoidot from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Kanta

module Suostumustenhallinta

  # (no documentation provided)
  class ConsentSignature 

    # (no documentation provided)
    attr_accessor :cantSignConsent
    # (no documentation provided)
    attr_accessor :kirjaaja
    # (no documentation provided)
    attr_accessor :signerLastname
    # (no documentation provided)
    attr_accessor :signerKutsumanimi
    # (no documentation provided)
    attr_accessor :signerEtunimet
    # (no documentation provided)
    attr_accessor :savedTimestamp
    # (no documentation provided)
    attr_accessor :reason

    # the json hash for this ConsentSignature
    def to_jaxb_json_hash
      _h = {}
      _h['cantSignConsent'] = cantSignConsent.to_jaxb_json_hash unless cantSignConsent.nil?
      _h['kirjaaja'] = kirjaaja.to_jaxb_json_hash unless kirjaaja.nil?
      _h['signerLastname'] = signerLastname.to_jaxb_json_hash unless signerLastname.nil?
      _h['signerKutsumanimi'] = signerKutsumanimi.to_jaxb_json_hash unless signerKutsumanimi.nil?
      _h['signerEtunimet'] = signerEtunimet.to_jaxb_json_hash unless signerEtunimet.nil?
      _h['savedTimestamp'] = savedTimestamp.to_jaxb_json_hash unless savedTimestamp.nil?
      _h['reason'] = reason.to_jaxb_json_hash unless reason.nil?
      return _h
    end

    # the json (string form) for this ConsentSignature
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this ConsentSignature with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['cantSignConsent'].nil?
          _oa = _o['cantSignConsent']
            if(_oa.is_a? Hash)
              @cantSignConsent = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @cantSignConsent =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @cantSignConsent = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @cantSignConsent.push Boolean.from_json(_item)
                 else
                   @cantSignConsent.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @cantSignConsent = _oa
            end
          end
        if !_o['kirjaaja'].nil?
          _oa = _o['kirjaaja']
            if(_oa.is_a? Hash)
              @kirjaaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kirjaaja =  Fi::Mediconsult::Core::Client::Dto::Kanta::AmmattilaisenTiedot.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kirjaaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kirjaaja.push Fi::Mediconsult::Core::Client::Dto::Kanta::AmmattilaisenTiedot.from_json(_item)
                 else
                   @kirjaaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kirjaaja = _oa
            end
          end
        if !_o['signerLastname'].nil?
          _oa = _o['signerLastname']
            if(_oa.is_a? Hash)
              @signerLastname = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @signerLastname =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @signerLastname = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @signerLastname.push String.from_json(_item)
                 else
                   @signerLastname.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @signerLastname = _oa
            end
          end
        if !_o['signerKutsumanimi'].nil?
          _oa = _o['signerKutsumanimi']
            if(_oa.is_a? Hash)
              @signerKutsumanimi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @signerKutsumanimi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @signerKutsumanimi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @signerKutsumanimi.push String.from_json(_item)
                 else
                   @signerKutsumanimi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @signerKutsumanimi = _oa
            end
          end
        if !_o['signerEtunimet'].nil?
          _oa = _o['signerEtunimet']
            if(_oa.is_a? Hash)
              @signerEtunimet = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @signerEtunimet =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @signerEtunimet = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @signerEtunimet.push String.from_json(_item)
                 else
                   @signerEtunimet.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @signerEtunimet = _oa
            end
          end
        if !_o['savedTimestamp'].nil?
          _oa = _o['savedTimestamp']
            if(_oa.is_a? Hash)
              @savedTimestamp = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @savedTimestamp =  java.time::LocalDateTime.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @savedTimestamp = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @savedTimestamp.push java.time::LocalDateTime.from_json(_item)
                 else
                   @savedTimestamp.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @savedTimestamp = _oa
            end
          end
        if !_o['reason'].nil?
          _oa = _o['reason']
            if(_oa.is_a? Hash)
              @reason = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @reason =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @reason = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @reason.push String.from_json(_item)
                 else
                   @reason.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @reason = _oa
            end
          end
    end

    # constructs a ConsentSignature from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Course

  # (no documentation provided)
  class TagsForCourseDto < Fi::Mediconsult::Mediplan::Dto::KuhaDtoBase 

    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :removed
    # id of the KurssiTunniste
    attr_accessor :courseTagId
    # (no documentation provided)
    attr_accessor :id
    # (no documentation provided)
    attr_accessor :tagId

    # the json hash for this TagsForCourseDto
    def to_jaxb_json_hash
      _h = super
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['removed'] = removed.to_jaxb_json_hash unless removed.nil?
      _h['courseTagId'] = courseTagId.to_jaxb_json_hash unless courseTagId.nil?
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['tagId'] = tagId.to_jaxb_json_hash unless tagId.nil?
      return _h
    end

    #initializes this TagsForCourseDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['removed'].nil?
          _oa = _o['removed']
            if(_oa.is_a? Hash)
              @removed = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @removed =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @removed = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @removed.push Boolean.from_json(_item)
                 else
                   @removed.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @removed = _oa
            end
          end
        if !_o['courseTagId'].nil?
          _oa = _o['courseTagId']
            if(_oa.is_a? Hash)
              @courseTagId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @courseTagId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @courseTagId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @courseTagId.push Bignum.from_json(_item)
                 else
                   @courseTagId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @courseTagId = _oa
            end
          end
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push Bignum.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
        if !_o['tagId'].nil?
          _oa = _o['tagId']
            if(_oa.is_a? Hash)
              @tagId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tagId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tagId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tagId.push Bignum.from_json(_item)
                 else
                   @tagId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tagId = _oa
            end
          end
    end

    # constructs a TagsForCourseDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Medisos

module Enums

  # (no documentation provided)
  class PalveluyksikkoAsiakkuusTila

    # (no documentation provided)
    AKTIIVINEN = "AKTIIVINEN"

    # (no documentation provided)
    JONOSSA = "JONOSSA"

    # (no documentation provided)
    LOMALLA = "LOMALLA"

    # (no documentation provided)
    LOPETETTU = "LOPETETTU"

    # (no documentation provided)
    SELVITYKSESSA = "SELVITYKSESSA"

    # (no documentation provided)
    MITATOITY = "MITATOITY"
  end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Kanta

module Suostumustenhallinta

  # (no documentation provided)
  class RefusalsDTO < Fi::Mediconsult::Core::Client::Dto::Kanta::KantaDTO 

    # (no documentation provided)
    attr_accessor :signerLastname
    # (no documentation provided)
    attr_accessor :documentInfo
    # (no documentation provided)
    attr_accessor :savedServiceProvider
    # (no documentation provided)
    attr_accessor :newDocumentOid
    # (no documentation provided)
    attr_accessor :unableToSign
    # (no documentation provided)
    attr_accessor :savedServiceProviderId
    # (no documentation provided)
    attr_accessor :kirjaaja
    # (no documentation provided)
    attr_accessor :serviceProviders
    # (no documentation provided)
    attr_accessor :savedTimestamp
    # (no documentation provided)
    attr_accessor :signerKutsumanimi
    # (no documentation provided)
    attr_accessor :unableToSignReason
    # (no documentation provided)
    attr_accessor :allowHandoverInEmergency

    # the json hash for this RefusalsDTO
    def to_jaxb_json_hash
      _h = super
      _h['signerLastname'] = signerLastname.to_jaxb_json_hash unless signerLastname.nil?
      _h['documentInfo'] = documentInfo.to_jaxb_json_hash unless documentInfo.nil?
      _h['savedServiceProvider'] = savedServiceProvider.to_jaxb_json_hash unless savedServiceProvider.nil?
      _h['newDocumentOid'] = newDocumentOid.to_jaxb_json_hash unless newDocumentOid.nil?
      _h['unableToSign'] = unableToSign.to_jaxb_json_hash unless unableToSign.nil?
      _h['savedServiceProviderId'] = savedServiceProviderId.to_jaxb_json_hash unless savedServiceProviderId.nil?
      _h['kirjaaja'] = kirjaaja.to_jaxb_json_hash unless kirjaaja.nil?
      if !serviceProviders.nil?
        _ha = Array.new
        serviceProviders.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['serviceProviders'] = _ha
      end
      _h['savedTimestamp'] = savedTimestamp.to_jaxb_json_hash unless savedTimestamp.nil?
      _h['signerKutsumanimi'] = signerKutsumanimi.to_jaxb_json_hash unless signerKutsumanimi.nil?
      _h['unableToSignReason'] = unableToSignReason.to_jaxb_json_hash unless unableToSignReason.nil?
      _h['allowHandoverInEmergency'] = allowHandoverInEmergency.to_jaxb_json_hash unless allowHandoverInEmergency.nil?
      return _h
    end

    #initializes this RefusalsDTO with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['signerLastname'].nil?
          _oa = _o['signerLastname']
            if(_oa.is_a? Hash)
              @signerLastname = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @signerLastname =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @signerLastname = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @signerLastname.push String.from_json(_item)
                 else
                   @signerLastname.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @signerLastname = _oa
            end
          end
        if !_o['documentInfo'].nil?
          _oa = _o['documentInfo']
            if(_oa.is_a? Hash)
              @documentInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @documentInfo =  Fi::Mediconsult::Core::Client::Dto::Kanta::DocumentInfo.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @documentInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @documentInfo.push Fi::Mediconsult::Core::Client::Dto::Kanta::DocumentInfo.from_json(_item)
                 else
                   @documentInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @documentInfo = _oa
            end
          end
        if !_o['savedServiceProvider'].nil?
          _oa = _o['savedServiceProvider']
            if(_oa.is_a? Hash)
              @savedServiceProvider = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @savedServiceProvider =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @savedServiceProvider = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @savedServiceProvider.push String.from_json(_item)
                 else
                   @savedServiceProvider.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @savedServiceProvider = _oa
            end
          end
        if !_o['newDocumentOid'].nil?
          _oa = _o['newDocumentOid']
            if(_oa.is_a? Hash)
              @newDocumentOid = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @newDocumentOid =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @newDocumentOid = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @newDocumentOid.push String.from_json(_item)
                 else
                   @newDocumentOid.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @newDocumentOid = _oa
            end
          end
        if !_o['unableToSign'].nil?
          _oa = _o['unableToSign']
            if(_oa.is_a? Hash)
              @unableToSign = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @unableToSign =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @unableToSign = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @unableToSign.push Boolean.from_json(_item)
                 else
                   @unableToSign.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @unableToSign = _oa
            end
          end
        if !_o['savedServiceProviderId'].nil?
          _oa = _o['savedServiceProviderId']
            if(_oa.is_a? Hash)
              @savedServiceProviderId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @savedServiceProviderId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @savedServiceProviderId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @savedServiceProviderId.push String.from_json(_item)
                 else
                   @savedServiceProviderId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @savedServiceProviderId = _oa
            end
          end
        if !_o['kirjaaja'].nil?
          _oa = _o['kirjaaja']
            if(_oa.is_a? Hash)
              @kirjaaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kirjaaja =  Fi::Mediconsult::Core::Client::Dto::Kanta::AmmattilaisenTiedot.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kirjaaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kirjaaja.push Fi::Mediconsult::Core::Client::Dto::Kanta::AmmattilaisenTiedot.from_json(_item)
                 else
                   @kirjaaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kirjaaja = _oa
            end
          end
        if !_o['serviceProviders'].nil?
          _oa = _o['serviceProviders']
            if(_oa.is_a? Hash)
              @serviceProviders = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @serviceProviders =  Fi::Mediconsult::Core::Client::Dto::Kanta::Suostumustenhallinta::RefusalsItem.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @serviceProviders = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @serviceProviders.push Fi::Mediconsult::Core::Client::Dto::Kanta::Suostumustenhallinta::RefusalsItem.from_json(_item)
                 else
                   @serviceProviders.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @serviceProviders = _oa
            end
          end
        if !_o['savedTimestamp'].nil?
          _oa = _o['savedTimestamp']
            if(_oa.is_a? Hash)
              @savedTimestamp = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @savedTimestamp =  java.time::LocalDateTime.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @savedTimestamp = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @savedTimestamp.push java.time::LocalDateTime.from_json(_item)
                 else
                   @savedTimestamp.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @savedTimestamp = _oa
            end
          end
        if !_o['signerKutsumanimi'].nil?
          _oa = _o['signerKutsumanimi']
            if(_oa.is_a? Hash)
              @signerKutsumanimi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @signerKutsumanimi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @signerKutsumanimi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @signerKutsumanimi.push String.from_json(_item)
                 else
                   @signerKutsumanimi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @signerKutsumanimi = _oa
            end
          end
        if !_o['unableToSignReason'].nil?
          _oa = _o['unableToSignReason']
            if(_oa.is_a? Hash)
              @unableToSignReason = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @unableToSignReason =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @unableToSignReason = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @unableToSignReason.push String.from_json(_item)
                 else
                   @unableToSignReason.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @unableToSignReason = _oa
            end
          end
        if !_o['allowHandoverInEmergency'].nil?
          _oa = _o['allowHandoverInEmergency']
            if(_oa.is_a? Hash)
              @allowHandoverInEmergency = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @allowHandoverInEmergency =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @allowHandoverInEmergency = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @allowHandoverInEmergency.push Boolean.from_json(_item)
                 else
                   @allowHandoverInEmergency.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @allowHandoverInEmergency = _oa
            end
          end
    end

    # constructs a RefusalsDTO from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Kanta

module Suostumustenhallinta

  # (no documentation provided)
  class Type

    # (no documentation provided)
    EARKISTO = "EARKISTO"

    # (no documentation provided)
    ERESEPTI = "ERESEPTI"

    # (no documentation provided)
    COMMON_REGISTER = "COMMON_REGISTER"
  end

end

end

end

end

end

end

end

module Fi

module Mediconsult

module Medisos

module Dto

  # (no documentation provided)
  class DocumentSummaryDto < Fi::Mediconsult::Medisos::Dto::MediSosDtoBase 

    # (no documentation provided)
    attr_accessor :documentIdLista
    # (no documentation provided)
    attr_accessor :documentNimiLista
    # (no documentation provided)
    attr_accessor :documentTilaLista
    # (no documentation provided)
    attr_accessor :documentTyyppiLista
    # (no documentation provided)
    attr_accessor :laatijaNimiLista
    # (no documentation provided)
    attr_accessor :laatijaNumeroLista
    # (no documentation provided)
    attr_accessor :laatimisaikaLista
    # (no documentation provided)
    attr_accessor :muutosaikaLista
    # (no documentation provided)
    attr_accessor :palveluyksikkoNimiLista
    # (no documentation provided)
    attr_accessor :palveluyksikkoNumeroLista
    # (no documentation provided)
    attr_accessor :toimialaLista

    # the json hash for this DocumentSummaryDto
    def to_jaxb_json_hash
      _h = super
      if !documentIdLista.nil?
        _ha = Array.new
        documentIdLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['documentIdLista'] = _ha
      end
      if !documentNimiLista.nil?
        _ha = Array.new
        documentNimiLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['documentNimiLista'] = _ha
      end
      if !documentTilaLista.nil?
        _ha = Array.new
        documentTilaLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['documentTilaLista'] = _ha
      end
      if !documentTyyppiLista.nil?
        _ha = Array.new
        documentTyyppiLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['documentTyyppiLista'] = _ha
      end
      if !laatijaNimiLista.nil?
        _ha = Array.new
        laatijaNimiLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['laatijaNimiLista'] = _ha
      end
      if !laatijaNumeroLista.nil?
        _ha = Array.new
        laatijaNumeroLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['laatijaNumeroLista'] = _ha
      end
      if !laatimisaikaLista.nil?
        _ha = Array.new
        laatimisaikaLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['laatimisaikaLista'] = _ha
      end
      if !muutosaikaLista.nil?
        _ha = Array.new
        muutosaikaLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['muutosaikaLista'] = _ha
      end
      if !palveluyksikkoNimiLista.nil?
        _ha = Array.new
        palveluyksikkoNimiLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['palveluyksikkoNimiLista'] = _ha
      end
      if !palveluyksikkoNumeroLista.nil?
        _ha = Array.new
        palveluyksikkoNumeroLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['palveluyksikkoNumeroLista'] = _ha
      end
      if !toimialaLista.nil?
        _ha = Array.new
        toimialaLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['toimialaLista'] = _ha
      end
      return _h
    end

    #initializes this DocumentSummaryDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['documentIdLista'].nil?
          _oa = _o['documentIdLista']
            if(_oa.is_a? Hash)
              @documentIdLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @documentIdLista =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @documentIdLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @documentIdLista.push Bignum.from_json(_item)
                 else
                   @documentIdLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @documentIdLista = _oa
            end
          end
        if !_o['documentNimiLista'].nil?
          _oa = _o['documentNimiLista']
            if(_oa.is_a? Hash)
              @documentNimiLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @documentNimiLista =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @documentNimiLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @documentNimiLista.push String.from_json(_item)
                 else
                   @documentNimiLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @documentNimiLista = _oa
            end
          end
        if !_o['documentTilaLista'].nil?
          _oa = _o['documentTilaLista']
            if(_oa.is_a? Hash)
              @documentTilaLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @documentTilaLista =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @documentTilaLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @documentTilaLista.push String.from_json(_item)
                 else
                   @documentTilaLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @documentTilaLista = _oa
            end
          end
        if !_o['documentTyyppiLista'].nil?
          _oa = _o['documentTyyppiLista']
            if(_oa.is_a? Hash)
              @documentTyyppiLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @documentTyyppiLista =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @documentTyyppiLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @documentTyyppiLista.push String.from_json(_item)
                 else
                   @documentTyyppiLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @documentTyyppiLista = _oa
            end
          end
        if !_o['laatijaNimiLista'].nil?
          _oa = _o['laatijaNimiLista']
            if(_oa.is_a? Hash)
              @laatijaNimiLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laatijaNimiLista =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laatijaNimiLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laatijaNimiLista.push String.from_json(_item)
                 else
                   @laatijaNimiLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laatijaNimiLista = _oa
            end
          end
        if !_o['laatijaNumeroLista'].nil?
          _oa = _o['laatijaNumeroLista']
            if(_oa.is_a? Hash)
              @laatijaNumeroLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laatijaNumeroLista =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laatijaNumeroLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laatijaNumeroLista.push Fixnum.from_json(_item)
                 else
                   @laatijaNumeroLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laatijaNumeroLista = _oa
            end
          end
        if !_o['laatimisaikaLista'].nil?
          _oa = _o['laatimisaikaLista']
            if(_oa.is_a? Hash)
              @laatimisaikaLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laatimisaikaLista =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laatimisaikaLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laatimisaikaLista.push Time.from_json(_item)
                 else
                   @laatimisaikaLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laatimisaikaLista = _oa
            end
          end
        if !_o['muutosaikaLista'].nil?
          _oa = _o['muutosaikaLista']
            if(_oa.is_a? Hash)
              @muutosaikaLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @muutosaikaLista =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @muutosaikaLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @muutosaikaLista.push Time.from_json(_item)
                 else
                   @muutosaikaLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @muutosaikaLista = _oa
            end
          end
        if !_o['palveluyksikkoNimiLista'].nil?
          _oa = _o['palveluyksikkoNimiLista']
            if(_oa.is_a? Hash)
              @palveluyksikkoNimiLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palveluyksikkoNimiLista =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palveluyksikkoNimiLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palveluyksikkoNimiLista.push String.from_json(_item)
                 else
                   @palveluyksikkoNimiLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palveluyksikkoNimiLista = _oa
            end
          end
        if !_o['palveluyksikkoNumeroLista'].nil?
          _oa = _o['palveluyksikkoNumeroLista']
            if(_oa.is_a? Hash)
              @palveluyksikkoNumeroLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palveluyksikkoNumeroLista =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palveluyksikkoNumeroLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palveluyksikkoNumeroLista.push Fixnum.from_json(_item)
                 else
                   @palveluyksikkoNumeroLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palveluyksikkoNumeroLista = _oa
            end
          end
        if !_o['toimialaLista'].nil?
          _oa = _o['toimialaLista']
            if(_oa.is_a? Hash)
              @toimialaLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @toimialaLista =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @toimialaLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @toimialaLista.push String.from_json(_item)
                 else
                   @toimialaLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @toimialaLista = _oa
            end
          end
    end

    # constructs a DocumentSummaryDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Seuranta

  # (no documentation provided)
  class SeurantaEntry < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # (no documentation provided)
    attr_accessor :kirjaaja
    # (no documentation provided)
    attr_accessor :unitId
    # (no documentation provided)
    attr_accessor :patientId
    # (no documentation provided)
    attr_accessor :titles
    # the formId
    attr_accessor :formId

    # the json hash for this SeurantaEntry
    def to_jaxb_json_hash
      _h = super
      _h['kirjaaja'] = kirjaaja.to_jaxb_json_hash unless kirjaaja.nil?
      _h['unitId'] = unitId.to_jaxb_json_hash unless unitId.nil?
      _h['patientId'] = patientId.to_jaxb_json_hash unless patientId.nil?
      if !titles.nil?
        _ha = Array.new
        titles.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['titles'] = _ha
      end
      _h['formId'] = formId.to_jaxb_json_hash unless formId.nil?
      return _h
    end

    #initializes this SeurantaEntry with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['kirjaaja'].nil?
          _oa = _o['kirjaaja']
            if(_oa.is_a? Hash)
              @kirjaaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kirjaaja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kirjaaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kirjaaja.push Fixnum.from_json(_item)
                 else
                   @kirjaaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kirjaaja = _oa
            end
          end
        if !_o['unitId'].nil?
          _oa = _o['unitId']
            if(_oa.is_a? Hash)
              @unitId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @unitId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @unitId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @unitId.push Fixnum.from_json(_item)
                 else
                   @unitId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @unitId = _oa
            end
          end
        if !_o['patientId'].nil?
          _oa = _o['patientId']
            if(_oa.is_a? Hash)
              @patientId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @patientId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @patientId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @patientId.push Fixnum.from_json(_item)
                 else
                   @patientId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @patientId = _oa
            end
          end
        if !_o['titles'].nil?
          _oa = _o['titles']
            if(_oa.is_a? Hash)
              @titles = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @titles =  Fi::Mediconsult::Core::Client::Dto::Title::TitleSettings.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @titles = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @titles.push Fi::Mediconsult::Core::Client::Dto::Title::TitleSettings.from_json(_item)
                 else
                   @titles.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @titles = _oa
            end
          end
        if !_o['formId'].nil?
          _oa = _o['formId']
            if(_oa.is_a? Hash)
              @formId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @formId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @formId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @formId.push Fixnum.from_json(_item)
                 else
                   @formId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @formId = _oa
            end
          end
    end

    # constructs a SeurantaEntry from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Laakitys

  # (no documentation provided)
  class LaakeVastaAihe < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # Returns the id
    attr_accessor :vastaAihe
    # Returns the origin of the contraindication
    attr_accessor :vastaAiheAlkupera
    # Returns the name of the contraindication in plain language
    attr_accessor :selite
    # Returns the type of the contraindication
    # -&#39;Y&#39; age in years
    # -&#39;M&#39; age in months
    # -&#39;W&#39; age in weeks
    # -&#39;G&#39; weight
    # -&#39;P&#39; pregnancy
    # -&#39;B&#39; breastfeeding
    # -&#39;D&#39; diagnose
    # -&#39;1&#39; male
    # -&#39;2&#39; female
    attr_accessor :rajoite
    # Returns the lower limit of the contraindication
    attr_accessor :alaraja
    # Returns the upper limit of the contraindication
    attr_accessor :ylaraja
    # Returns the origin of the contraindication
    # -&#39;O&#39; if therapy group is linked in the current organization
    # -&#39;A&#39; or &#39;M&#39; otherwise
    attr_accessor :alkupera
    # Returns the code of the contraindication removal. &#39;E&#39; - not removed, &#39;K&#39; = removed
    attr_accessor :poistettu
    # Returns the actual DB-change time of the contraindication
    attr_accessor :muutosaika
    # Returns the organization in which the change has been made
    attr_accessor :muutospaikka

    # the json hash for this LaakeVastaAihe
    def to_jaxb_json_hash
      _h = super
      _h['vastaAihe'] = vastaAihe.to_jaxb_json_hash unless vastaAihe.nil?
      _h['vastaAiheAlkupera'] = vastaAiheAlkupera.to_jaxb_json_hash unless vastaAiheAlkupera.nil?
      _h['selite'] = selite.to_jaxb_json_hash unless selite.nil?
      _h['rajoite'] = rajoite.to_jaxb_json_hash unless rajoite.nil?
      _h['alaraja'] = alaraja.to_jaxb_json_hash unless alaraja.nil?
      _h['ylaraja'] = ylaraja.to_jaxb_json_hash unless ylaraja.nil?
      _h['alkupera'] = alkupera.to_jaxb_json_hash unless alkupera.nil?
      _h['poistettu'] = poistettu.to_jaxb_json_hash unless poistettu.nil?
      _h['muutosaika'] = muutosaika.to_jaxb_json_hash unless muutosaika.nil?
      _h['muutospaikka'] = muutospaikka.to_jaxb_json_hash unless muutospaikka.nil?
      return _h
    end

    #initializes this LaakeVastaAihe with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['vastaAihe'].nil?
          _oa = _o['vastaAihe']
            if(_oa.is_a? Hash)
              @vastaAihe = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vastaAihe =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vastaAihe = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vastaAihe.push Fixnum.from_json(_item)
                 else
                   @vastaAihe.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vastaAihe = _oa
            end
          end
        if !_o['vastaAiheAlkupera'].nil?
          _oa = _o['vastaAiheAlkupera']
            if(_oa.is_a? Hash)
              @vastaAiheAlkupera = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vastaAiheAlkupera =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vastaAiheAlkupera = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vastaAiheAlkupera.push Fixnum.from_json(_item)
                 else
                   @vastaAiheAlkupera.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vastaAiheAlkupera = _oa
            end
          end
        if !_o['selite'].nil?
          _oa = _o['selite']
            if(_oa.is_a? Hash)
              @selite = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @selite =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @selite = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @selite.push String.from_json(_item)
                 else
                   @selite.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @selite = _oa
            end
          end
        if !_o['rajoite'].nil?
          _oa = _o['rajoite']
            if(_oa.is_a? Hash)
              @rajoite = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rajoite =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rajoite = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rajoite.push Fixnum.from_json(_item)
                 else
                   @rajoite.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rajoite = _oa
            end
          end
        if !_o['alaraja'].nil?
          _oa = _o['alaraja']
            if(_oa.is_a? Hash)
              @alaraja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @alaraja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @alaraja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @alaraja.push Fixnum.from_json(_item)
                 else
                   @alaraja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @alaraja = _oa
            end
          end
        if !_o['ylaraja'].nil?
          _oa = _o['ylaraja']
            if(_oa.is_a? Hash)
              @ylaraja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ylaraja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ylaraja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ylaraja.push Fixnum.from_json(_item)
                 else
                   @ylaraja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ylaraja = _oa
            end
          end
        if !_o['alkupera'].nil?
          _oa = _o['alkupera']
            if(_oa.is_a? Hash)
              @alkupera = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @alkupera =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @alkupera = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @alkupera.push Fixnum.from_json(_item)
                 else
                   @alkupera.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @alkupera = _oa
            end
          end
        if !_o['poistettu'].nil?
          _oa = _o['poistettu']
            if(_oa.is_a? Hash)
              @poistettu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @poistettu =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @poistettu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @poistettu.push Fixnum.from_json(_item)
                 else
                   @poistettu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @poistettu = _oa
            end
          end
        if !_o['muutosaika'].nil?
          _oa = _o['muutosaika']
            if(_oa.is_a? Hash)
              @muutosaika = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @muutosaika =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @muutosaika = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @muutosaika.push Time.from_json(_item)
                 else
                   @muutosaika.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @muutosaika = _oa
            end
          end
        if !_o['muutospaikka'].nil?
          _oa = _o['muutospaikka']
            if(_oa.is_a? Hash)
              @muutospaikka = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @muutospaikka =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @muutospaikka = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @muutospaikka.push Fixnum.from_json(_item)
                 else
                   @muutospaikka.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @muutospaikka = _oa
            end
          end
    end

    # constructs a LaakeVastaAihe from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Kuha

module Util

  # (no documentation provided)
  class EventCategory

    # (no documentation provided)
    WORK = "WORK"

    # (no documentation provided)
    TIME = "TIME"
  end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class Osastokartta < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # (no documentation provided)
    attr_accessor :listat
    # (no documentation provided)
    attr_accessor :tilanteet
    # (no documentation provided)
    attr_accessor :ryhmat

    # the json hash for this Osastokartta
    def to_jaxb_json_hash
      _h = super
      if !listat.nil?
        _ha = Array.new
        listat.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['listat'] = _ha
      end
      if !tilanteet.nil?
        _ha = Array.new
        tilanteet.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['tilanteet'] = _ha
      end
      if !ryhmat.nil?
        _ha = Array.new
        ryhmat.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['ryhmat'] = _ha
      end
      return _h
    end

    #initializes this Osastokartta with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['listat'].nil?
          _oa = _o['listat']
            if(_oa.is_a? Hash)
              @listat = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @listat =  Fi::Mediconsult::Core::Client::Dto::Osastolista.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @listat = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @listat.push Fi::Mediconsult::Core::Client::Dto::Osastolista.from_json(_item)
                 else
                   @listat.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @listat = _oa
            end
          end
        if !_o['tilanteet'].nil?
          _oa = _o['tilanteet']
            if(_oa.is_a? Hash)
              @tilanteet = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tilanteet =  Fi::Mediconsult::Core::Client::Dto::OsastolistaTilannekoodi.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tilanteet = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tilanteet.push Fi::Mediconsult::Core::Client::Dto::OsastolistaTilannekoodi.from_json(_item)
                 else
                   @tilanteet.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tilanteet = _oa
            end
          end
        if !_o['ryhmat'].nil?
          _oa = _o['ryhmat']
            if(_oa.is_a? Hash)
              @ryhmat = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ryhmat =  Fi::Mediconsult::Core::Client::Dto::Potilasryhma.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ryhmat = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ryhmat.push Fi::Mediconsult::Core::Client::Dto::Potilasryhma.from_json(_item)
                 else
                   @ryhmat.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ryhmat = _oa
            end
          end
    end

    # constructs a Osastokartta from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Laakitys

  # (no documentation provided)
  class LaakeKoostumus < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # Returns the part number of the medicine component
    attr_accessor :osa
    # Returns the type of the medicine component
    # -&#39;B&#39; if &quot;pohja-aine&quot;
    # -Perusaine, johon lisäaineet sekoitetaan
    # -&#39;A&#39; if &quot;lisäaine&quot;
    # -Lisäaineet ovat yleensä varsinaisia vaikuttavia aineita
    attr_accessor :tyyppi
    # Returns the component code (VNR code)
    attr_accessor :komponentinKoodi
    # Returns the component in text format
    attr_accessor :komponentti
    # Returns the amount of component
    attr_accessor :maara
    # Returns the unit of amount
    attr_accessor :yksikko
    # Returns the strength of the component
    attr_accessor :vahvuus
    # Returns the unit of strength
    attr_accessor :vahvuusyksikko

    # the json hash for this LaakeKoostumus
    def to_jaxb_json_hash
      _h = super
      _h['osa'] = osa.to_jaxb_json_hash unless osa.nil?
      _h['tyyppi'] = tyyppi.to_jaxb_json_hash unless tyyppi.nil?
      _h['komponentinKoodi'] = komponentinKoodi.to_jaxb_json_hash unless komponentinKoodi.nil?
      _h['komponentti'] = komponentti.to_jaxb_json_hash unless komponentti.nil?
      _h['maara'] = maara.to_jaxb_json_hash unless maara.nil?
      _h['yksikko'] = yksikko.to_jaxb_json_hash unless yksikko.nil?
      _h['vahvuus'] = vahvuus.to_jaxb_json_hash unless vahvuus.nil?
      _h['vahvuusyksikko'] = vahvuusyksikko.to_jaxb_json_hash unless vahvuusyksikko.nil?
      return _h
    end

    #initializes this LaakeKoostumus with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['osa'].nil?
          _oa = _o['osa']
            if(_oa.is_a? Hash)
              @osa = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @osa =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @osa = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @osa.push Fixnum.from_json(_item)
                 else
                   @osa.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @osa = _oa
            end
          end
        if !_o['tyyppi'].nil?
          _oa = _o['tyyppi']
            if(_oa.is_a? Hash)
              @tyyppi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tyyppi =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tyyppi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tyyppi.push Fixnum.from_json(_item)
                 else
                   @tyyppi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tyyppi = _oa
            end
          end
        if !_o['komponentinKoodi'].nil?
          _oa = _o['komponentinKoodi']
            if(_oa.is_a? Hash)
              @komponentinKoodi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @komponentinKoodi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @komponentinKoodi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @komponentinKoodi.push String.from_json(_item)
                 else
                   @komponentinKoodi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @komponentinKoodi = _oa
            end
          end
        if !_o['komponentti'].nil?
          _oa = _o['komponentti']
            if(_oa.is_a? Hash)
              @komponentti = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @komponentti =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @komponentti = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @komponentti.push String.from_json(_item)
                 else
                   @komponentti.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @komponentti = _oa
            end
          end
        if !_o['maara'].nil?
          _oa = _o['maara']
            if(_oa.is_a? Hash)
              @maara = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @maara =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @maara = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @maara.push Float.from_json(_item)
                 else
                   @maara.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @maara = _oa
            end
          end
        if !_o['yksikko'].nil?
          _oa = _o['yksikko']
            if(_oa.is_a? Hash)
              @yksikko = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @yksikko =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @yksikko = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @yksikko.push String.from_json(_item)
                 else
                   @yksikko.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @yksikko = _oa
            end
          end
        if !_o['vahvuus'].nil?
          _oa = _o['vahvuus']
            if(_oa.is_a? Hash)
              @vahvuus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vahvuus =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vahvuus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vahvuus.push Float.from_json(_item)
                 else
                   @vahvuus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vahvuus = _oa
            end
          end
        if !_o['vahvuusyksikko'].nil?
          _oa = _o['vahvuusyksikko']
            if(_oa.is_a? Hash)
              @vahvuusyksikko = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vahvuusyksikko =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vahvuusyksikko = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vahvuusyksikko.push String.from_json(_item)
                 else
                   @vahvuusyksikko.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vahvuusyksikko = _oa
            end
          end
    end

    # constructs a LaakeKoostumus from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Omistaja

  # (no documentation provided)
  class PatientList < Fi::Mediconsult::Core::Client::Dto::Omistaja::OmistajaList 

    # (no documentation provided)
    attr_accessor :patients

    # the json hash for this PatientList
    def to_jaxb_json_hash
      _h = super
      if !patients.nil?
        _ha = Array.new
        patients.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['patients'] = _ha
      end
      return _h
    end

    #initializes this PatientList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['patients'].nil?
          _oa = _o['patients']
            if(_oa.is_a? Hash)
              @patients = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @patients =  Fi::Mediconsult::Core::Client::Dto::Omistaja::Patient.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @patients = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @patients.push Fi::Mediconsult::Core::Client::Dto::Omistaja::Patient.from_json(_item)
                 else
                   @patients.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @patients = _oa
            end
          end
    end

    # constructs a PatientList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

  # (no documentation provided)
  class LockDto < Fi::Mediconsult::Mediplan::Dto::KuhaDtoBase 

    # (no documentation provided)
    attr_accessor :user
    # (no documentation provided)
    attr_accessor :reason
    # (no documentation provided)
    attr_accessor :ageInMinutes

    # the json hash for this LockDto
    def to_jaxb_json_hash
      _h = super
      _h['user'] = user.to_jaxb_json_hash unless user.nil?
      _h['reason'] = reason.to_jaxb_json_hash unless reason.nil?
      _h['ageInMinutes'] = ageInMinutes.to_jaxb_json_hash unless ageInMinutes.nil?
      return _h
    end

    #initializes this LockDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['user'].nil?
          _oa = _o['user']
            if(_oa.is_a? Hash)
              @user = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @user =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @user = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @user.push Fixnum.from_json(_item)
                 else
                   @user.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @user = _oa
            end
          end
        if !_o['reason'].nil?
          _oa = _o['reason']
            if(_oa.is_a? Hash)
              @reason = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @reason =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @reason = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @reason.push String.from_json(_item)
                 else
                   @reason.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @reason = _oa
            end
          end
        if !_o['ageInMinutes'].nil?
          _oa = _o['ageInMinutes']
            if(_oa.is_a? Hash)
              @ageInMinutes = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ageInMinutes =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ageInMinutes = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ageInMinutes.push Fixnum.from_json(_item)
                 else
                   @ageInMinutes.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ageInMinutes = _oa
            end
          end
    end

    # constructs a LockDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Medisos

module Dto

  # (no documentation provided)
  class AsiakasAsiakirjaDto < Fi::Mediconsult::Medisos::Dto::MediSosDtoBase 

    # (no documentation provided)
    attr_accessor :asiakirjanNimi
    # (no documentation provided)
    attr_accessor :asiakirjaId
    # (no documentation provided)
    attr_accessor :versionumero
    # (no documentation provided)
    attr_accessor :asiaTunnus
    # (no documentation provided)
    attr_accessor :asiaNimi
    # (no documentation provided)
    attr_accessor :laatija
    # (no documentation provided)
    attr_accessor :laatijaInfo
    # (no documentation provided)
    attr_accessor :asiakirjaJson
    # (no documentation provided)
    attr_accessor :asiaIdLista
    # (no documentation provided)
    attr_accessor :asiakirjanTila
    # (no documentation provided)
    attr_accessor :valmistelija
    # (no documentation provided)
    attr_accessor :paatoksentekija
    # (no documentation provided)
    attr_accessor :vastaanottaja
    # (no documentation provided)
    attr_accessor :asiakirjanTyyppi
    # (no documentation provided)
    attr_accessor :ratkaisu
    # (no documentation provided)
    attr_accessor :ratkaisunLaji
    # (no documentation provided)
    attr_accessor :toimeenpanoTapa
    # (no documentation provided)
    attr_accessor :sijoituspaikka
    # (no documentation provided)
    attr_accessor :rajoitusKuvaus
    # (no documentation provided)
    attr_accessor :rajoitustoimenpide
    # (no documentation provided)
    attr_accessor :palvelutehtava
    # (no documentation provided)
    attr_accessor :palvelusetelinArvo
    # (no documentation provided)
    attr_accessor :palvelusetelienYhteisarvo
    # (no documentation provided)
    attr_accessor :maksimisumma
    # (no documentation provided)
    attr_accessor :ratkaisusumma
    # (no documentation provided)
    attr_accessor :vireilletulopaivamaara
    # (no documentation provided)
    attr_accessor :voimassaoloAlkamispaiva
    # (no documentation provided)
    attr_accessor :voimassaoloPaattymispaiva
    # (no documentation provided)
    attr_accessor :kiireellisenSijoitusksenAlkamispaiva
    # (no documentation provided)
    attr_accessor :lapsenSijoitusAlkamispaiva
    # (no documentation provided)
    attr_accessor :lapsenSijoitusPaattymispaiva
    # (no documentation provided)
    attr_accessor :lapsenSijoitusJatkamispaiva
    # (no documentation provided)
    attr_accessor :sijoitusPaattymispaiva
    # (no documentation provided)
    attr_accessor :sijoitusAlkamispaiva
    # (no documentation provided)
    attr_accessor :huostaanottoPaattymispaiva
    # (no documentation provided)
    attr_accessor :huostaanottoAlkamispaiva
    # (no documentation provided)
    attr_accessor :sijaishuollonkestoPaattymispaiva
    # (no documentation provided)
    attr_accessor :sijaishuollonkestoAlkamispaiva
    # (no documentation provided)
    attr_accessor :rajoitusAjanjaksoPaattymispaiva
    # (no documentation provided)
    attr_accessor :rajoitusAjanjaksoAlkamispaiva
    # (no documentation provided)
    attr_accessor :rajoitusPaivamaara
    # (no documentation provided)
    attr_accessor :rajoitustoimenpidePaattymispaiva
    # (no documentation provided)
    attr_accessor :rajoitustoimenpideAlkamispaiva
    # (no documentation provided)
    attr_accessor :asiakas
    # (no documentation provided)
    attr_accessor :asiakasInfo
    # (no documentation provided)
    attr_accessor :sosiaalipalveluList
    # (no documentation provided)
    attr_accessor :muuttaja
    # (no documentation provided)
    attr_accessor :muuttajaInfo
    # (no documentation provided)
    attr_accessor :prosessi
    # (no documentation provided)
    attr_accessor :prosessinvaiheLista
    # (no documentation provided)
    attr_accessor :toimintayksikko
    # (no documentation provided)
    attr_accessor :palvelunjarjestaja
    # (no documentation provided)
    attr_accessor :palveluntuottaja
    # (no documentation provided)
    attr_accessor :palveluntoteuttaja
    # (no documentation provided)
    attr_accessor :myonnettavanTuenMaara
    # (no documentation provided)
    attr_accessor :toimeentulotuenLaji
    # (no documentation provided)
    attr_accessor :dokumentti
    # (no documentation provided)
    attr_accessor :asiakirjaviittaaLista
    # (no documentation provided)
    attr_accessor :asiakirjaanviitataanLista
    # (no documentation provided)
    attr_accessor :asiakirjaanviitataanLiiteasiakirjallaLista
    # (no documentation provided)
    attr_accessor :suostumusTieto
    # (no documentation provided)
    attr_accessor :tulostettu
    # (no documentation provided)
    attr_accessor :allekirjoitus
    # (no documentation provided)
    attr_accessor :luovuttajaInfo
    # (no documentation provided)
    attr_accessor :luovutettu
    # (no documentation provided)
    attr_accessor :luovuttaja
    # (no documentation provided)
    attr_accessor :formId
    # (no documentation provided)
    attr_accessor :blockedAsiaList

    # the json hash for this AsiakasAsiakirjaDto
    def to_jaxb_json_hash
      _h = super
      _h['asiakirjanNimi'] = asiakirjanNimi.to_jaxb_json_hash unless asiakirjanNimi.nil?
      _h['asiakirjaId'] = asiakirjaId.to_jaxb_json_hash unless asiakirjaId.nil?
      _h['versionumero'] = versionumero.to_jaxb_json_hash unless versionumero.nil?
      _h['asiaTunnus'] = asiaTunnus.to_jaxb_json_hash unless asiaTunnus.nil?
      _h['asiaNimi'] = asiaNimi.to_jaxb_json_hash unless asiaNimi.nil?
      _h['laatija'] = laatija.to_jaxb_json_hash unless laatija.nil?
      _h['laatijaInfo'] = laatijaInfo.to_jaxb_json_hash unless laatijaInfo.nil?
      _h['asiakirjaJson'] = asiakirjaJson.to_jaxb_json_hash unless asiakirjaJson.nil?
      if !asiaIdLista.nil?
        _ha = Array.new
        asiaIdLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['asiaIdLista'] = _ha
      end
      _h['asiakirjanTila'] = asiakirjanTila.to_jaxb_json_hash unless asiakirjanTila.nil?
      _h['valmistelija'] = valmistelija.to_jaxb_json_hash unless valmistelija.nil?
      _h['paatoksentekija'] = paatoksentekija.to_jaxb_json_hash unless paatoksentekija.nil?
      _h['vastaanottaja'] = vastaanottaja.to_jaxb_json_hash unless vastaanottaja.nil?
      _h['asiakirjanTyyppi'] = asiakirjanTyyppi.to_jaxb_json_hash unless asiakirjanTyyppi.nil?
      _h['ratkaisu'] = ratkaisu.to_jaxb_json_hash unless ratkaisu.nil?
      _h['ratkaisunLaji'] = ratkaisunLaji.to_jaxb_json_hash unless ratkaisunLaji.nil?
      _h['toimeenpanoTapa'] = toimeenpanoTapa.to_jaxb_json_hash unless toimeenpanoTapa.nil?
      _h['sijoituspaikka'] = sijoituspaikka.to_jaxb_json_hash unless sijoituspaikka.nil?
      _h['rajoitusKuvaus'] = rajoitusKuvaus.to_jaxb_json_hash unless rajoitusKuvaus.nil?
      _h['rajoitustoimenpide'] = rajoitustoimenpide.to_jaxb_json_hash unless rajoitustoimenpide.nil?
      _h['palvelutehtava'] = palvelutehtava.to_jaxb_json_hash unless palvelutehtava.nil?
      _h['palvelusetelinArvo'] = palvelusetelinArvo.to_jaxb_json_hash unless palvelusetelinArvo.nil?
      _h['palvelusetelienYhteisarvo'] = palvelusetelienYhteisarvo.to_jaxb_json_hash unless palvelusetelienYhteisarvo.nil?
      _h['maksimisumma'] = maksimisumma.to_jaxb_json_hash unless maksimisumma.nil?
      _h['ratkaisusumma'] = ratkaisusumma.to_jaxb_json_hash unless ratkaisusumma.nil?
      _h['vireilletulopaivamaara'] = vireilletulopaivamaara.to_jaxb_json_hash unless vireilletulopaivamaara.nil?
      _h['voimassaoloAlkamispaiva'] = voimassaoloAlkamispaiva.to_jaxb_json_hash unless voimassaoloAlkamispaiva.nil?
      _h['voimassaoloPaattymispaiva'] = voimassaoloPaattymispaiva.to_jaxb_json_hash unless voimassaoloPaattymispaiva.nil?
      _h['kiireellisenSijoitusksenAlkamispaiva'] = kiireellisenSijoitusksenAlkamispaiva.to_jaxb_json_hash unless kiireellisenSijoitusksenAlkamispaiva.nil?
      _h['lapsenSijoitusAlkamispaiva'] = lapsenSijoitusAlkamispaiva.to_jaxb_json_hash unless lapsenSijoitusAlkamispaiva.nil?
      _h['lapsenSijoitusPaattymispaiva'] = lapsenSijoitusPaattymispaiva.to_jaxb_json_hash unless lapsenSijoitusPaattymispaiva.nil?
      _h['lapsenSijoitusJatkamispaiva'] = lapsenSijoitusJatkamispaiva.to_jaxb_json_hash unless lapsenSijoitusJatkamispaiva.nil?
      _h['sijoitusPaattymispaiva'] = sijoitusPaattymispaiva.to_jaxb_json_hash unless sijoitusPaattymispaiva.nil?
      _h['sijoitusAlkamispaiva'] = sijoitusAlkamispaiva.to_jaxb_json_hash unless sijoitusAlkamispaiva.nil?
      _h['huostaanottoPaattymispaiva'] = huostaanottoPaattymispaiva.to_jaxb_json_hash unless huostaanottoPaattymispaiva.nil?
      _h['huostaanottoAlkamispaiva'] = huostaanottoAlkamispaiva.to_jaxb_json_hash unless huostaanottoAlkamispaiva.nil?
      _h['sijaishuollonkestoPaattymispaiva'] = sijaishuollonkestoPaattymispaiva.to_jaxb_json_hash unless sijaishuollonkestoPaattymispaiva.nil?
      _h['sijaishuollonkestoAlkamispaiva'] = sijaishuollonkestoAlkamispaiva.to_jaxb_json_hash unless sijaishuollonkestoAlkamispaiva.nil?
      _h['rajoitusAjanjaksoPaattymispaiva'] = rajoitusAjanjaksoPaattymispaiva.to_jaxb_json_hash unless rajoitusAjanjaksoPaattymispaiva.nil?
      _h['rajoitusAjanjaksoAlkamispaiva'] = rajoitusAjanjaksoAlkamispaiva.to_jaxb_json_hash unless rajoitusAjanjaksoAlkamispaiva.nil?
      _h['rajoitusPaivamaara'] = rajoitusPaivamaara.to_jaxb_json_hash unless rajoitusPaivamaara.nil?
      _h['rajoitustoimenpidePaattymispaiva'] = rajoitustoimenpidePaattymispaiva.to_jaxb_json_hash unless rajoitustoimenpidePaattymispaiva.nil?
      _h['rajoitustoimenpideAlkamispaiva'] = rajoitustoimenpideAlkamispaiva.to_jaxb_json_hash unless rajoitustoimenpideAlkamispaiva.nil?
      _h['asiakas'] = asiakas.to_jaxb_json_hash unless asiakas.nil?
      _h['asiakasInfo'] = asiakasInfo.to_jaxb_json_hash unless asiakasInfo.nil?
      if !sosiaalipalveluList.nil?
        _ha = Array.new
        sosiaalipalveluList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['sosiaalipalveluList'] = _ha
      end
      _h['muuttaja'] = muuttaja.to_jaxb_json_hash unless muuttaja.nil?
      _h['muuttajaInfo'] = muuttajaInfo.to_jaxb_json_hash unless muuttajaInfo.nil?
      _h['prosessi'] = prosessi.to_jaxb_json_hash unless prosessi.nil?
      if !prosessinvaiheLista.nil?
        _ha = Array.new
        prosessinvaiheLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['prosessinvaiheLista'] = _ha
      end
      _h['toimintayksikko'] = toimintayksikko.to_jaxb_json_hash unless toimintayksikko.nil?
      _h['palvelunjarjestaja'] = palvelunjarjestaja.to_jaxb_json_hash unless palvelunjarjestaja.nil?
      _h['palveluntuottaja'] = palveluntuottaja.to_jaxb_json_hash unless palveluntuottaja.nil?
      _h['palveluntoteuttaja'] = palveluntoteuttaja.to_jaxb_json_hash unless palveluntoteuttaja.nil?
      _h['myonnettavanTuenMaara'] = myonnettavanTuenMaara.to_jaxb_json_hash unless myonnettavanTuenMaara.nil?
      _h['toimeentulotuenLaji'] = toimeentulotuenLaji.to_jaxb_json_hash unless toimeentulotuenLaji.nil?
      _h['dokumentti'] = dokumentti.to_jaxb_json_hash unless dokumentti.nil?
      if !asiakirjaviittaaLista.nil?
        _ha = Array.new
        asiakirjaviittaaLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['asiakirjaviittaaLista'] = _ha
      end
      if !asiakirjaanviitataanLista.nil?
        _ha = Array.new
        asiakirjaanviitataanLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['asiakirjaanviitataanLista'] = _ha
      end
      if !asiakirjaanviitataanLiiteasiakirjallaLista.nil?
        _ha = Array.new
        asiakirjaanviitataanLiiteasiakirjallaLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['asiakirjaanviitataanLiiteasiakirjallaLista'] = _ha
      end
      _h['suostumusTieto'] = suostumusTieto.to_jaxb_json_hash unless suostumusTieto.nil?
      _h['tulostettu'] = tulostettu.to_jaxb_json_hash unless tulostettu.nil?
      if !allekirjoitus.nil?
        _ha = Array.new
        allekirjoitus.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['allekirjoitus'] = _ha
      end
      _h['luovuttajaInfo'] = luovuttajaInfo.to_jaxb_json_hash unless luovuttajaInfo.nil?
      _h['luovutettu'] = luovutettu.to_jaxb_json_hash unless luovutettu.nil?
      _h['luovuttaja'] = luovuttaja.to_jaxb_json_hash unless luovuttaja.nil?
      _h['formId'] = formId.to_jaxb_json_hash unless formId.nil?
      if !blockedAsiaList.nil?
        _ha = Array.new
        blockedAsiaList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['blockedAsiaList'] = _ha
      end
      return _h
    end

    #initializes this AsiakasAsiakirjaDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['asiakirjanNimi'].nil?
          _oa = _o['asiakirjanNimi']
            if(_oa.is_a? Hash)
              @asiakirjanNimi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakirjanNimi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakirjanNimi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakirjanNimi.push String.from_json(_item)
                 else
                   @asiakirjanNimi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakirjanNimi = _oa
            end
          end
        if !_o['asiakirjaId'].nil?
          _oa = _o['asiakirjaId']
            if(_oa.is_a? Hash)
              @asiakirjaId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakirjaId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakirjaId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakirjaId.push Bignum.from_json(_item)
                 else
                   @asiakirjaId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakirjaId = _oa
            end
          end
        if !_o['versionumero'].nil?
          _oa = _o['versionumero']
            if(_oa.is_a? Hash)
              @versionumero = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @versionumero =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @versionumero = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @versionumero.push Fixnum.from_json(_item)
                 else
                   @versionumero.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @versionumero = _oa
            end
          end
        if !_o['asiaTunnus'].nil?
          _oa = _o['asiaTunnus']
            if(_oa.is_a? Hash)
              @asiaTunnus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiaTunnus =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiaTunnus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiaTunnus.push String.from_json(_item)
                 else
                   @asiaTunnus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiaTunnus = _oa
            end
          end
        if !_o['asiaNimi'].nil?
          _oa = _o['asiaNimi']
            if(_oa.is_a? Hash)
              @asiaNimi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiaNimi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiaNimi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiaNimi.push String.from_json(_item)
                 else
                   @asiaNimi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiaNimi = _oa
            end
          end
        if !_o['laatija'].nil?
          _oa = _o['laatija']
            if(_oa.is_a? Hash)
              @laatija = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laatija =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laatija = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laatija.push Fixnum.from_json(_item)
                 else
                   @laatija.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laatija = _oa
            end
          end
        if !_o['laatijaInfo'].nil?
          _oa = _o['laatijaInfo']
            if(_oa.is_a? Hash)
              @laatijaInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laatijaInfo =  Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laatijaInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laatijaInfo.push Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_item)
                 else
                   @laatijaInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laatijaInfo = _oa
            end
          end
        if !_o['asiakirjaJson'].nil?
          _oa = _o['asiakirjaJson']
            if(_oa.is_a? Hash)
              @asiakirjaJson = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakirjaJson =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakirjaJson = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakirjaJson.push String.from_json(_item)
                 else
                   @asiakirjaJson.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakirjaJson = _oa
            end
          end
        if !_o['asiaIdLista'].nil?
          _oa = _o['asiaIdLista']
            if(_oa.is_a? Hash)
              @asiaIdLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiaIdLista =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiaIdLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiaIdLista.push Bignum.from_json(_item)
                 else
                   @asiaIdLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiaIdLista = _oa
            end
          end
        if !_o['asiakirjanTila'].nil?
          _oa = _o['asiakirjanTila']
            if(_oa.is_a? Hash)
              @asiakirjanTila = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakirjanTila =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakirjanTila = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakirjanTila.push String.from_json(_item)
                 else
                   @asiakirjanTila.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakirjanTila = _oa
            end
          end
        if !_o['valmistelija'].nil?
          _oa = _o['valmistelija']
            if(_oa.is_a? Hash)
              @valmistelija = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @valmistelija =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @valmistelija = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @valmistelija.push String.from_json(_item)
                 else
                   @valmistelija.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @valmistelija = _oa
            end
          end
        if !_o['paatoksentekija'].nil?
          _oa = _o['paatoksentekija']
            if(_oa.is_a? Hash)
              @paatoksentekija = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @paatoksentekija =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @paatoksentekija = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @paatoksentekija.push String.from_json(_item)
                 else
                   @paatoksentekija.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @paatoksentekija = _oa
            end
          end
        if !_o['vastaanottaja'].nil?
          _oa = _o['vastaanottaja']
            if(_oa.is_a? Hash)
              @vastaanottaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vastaanottaja =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vastaanottaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vastaanottaja.push String.from_json(_item)
                 else
                   @vastaanottaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vastaanottaja = _oa
            end
          end
        if !_o['asiakirjanTyyppi'].nil?
          _oa = _o['asiakirjanTyyppi']
            if(_oa.is_a? Hash)
              @asiakirjanTyyppi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakirjanTyyppi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakirjanTyyppi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakirjanTyyppi.push String.from_json(_item)
                 else
                   @asiakirjanTyyppi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakirjanTyyppi = _oa
            end
          end
        if !_o['ratkaisu'].nil?
          _oa = _o['ratkaisu']
            if(_oa.is_a? Hash)
              @ratkaisu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ratkaisu =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ratkaisu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ratkaisu.push String.from_json(_item)
                 else
                   @ratkaisu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ratkaisu = _oa
            end
          end
        if !_o['ratkaisunLaji'].nil?
          _oa = _o['ratkaisunLaji']
            if(_oa.is_a? Hash)
              @ratkaisunLaji = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ratkaisunLaji =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ratkaisunLaji = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ratkaisunLaji.push String.from_json(_item)
                 else
                   @ratkaisunLaji.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ratkaisunLaji = _oa
            end
          end
        if !_o['toimeenpanoTapa'].nil?
          _oa = _o['toimeenpanoTapa']
            if(_oa.is_a? Hash)
              @toimeenpanoTapa = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @toimeenpanoTapa =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @toimeenpanoTapa = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @toimeenpanoTapa.push String.from_json(_item)
                 else
                   @toimeenpanoTapa.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @toimeenpanoTapa = _oa
            end
          end
        if !_o['sijoituspaikka'].nil?
          _oa = _o['sijoituspaikka']
            if(_oa.is_a? Hash)
              @sijoituspaikka = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @sijoituspaikka =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @sijoituspaikka = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @sijoituspaikka.push String.from_json(_item)
                 else
                   @sijoituspaikka.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @sijoituspaikka = _oa
            end
          end
        if !_o['rajoitusKuvaus'].nil?
          _oa = _o['rajoitusKuvaus']
            if(_oa.is_a? Hash)
              @rajoitusKuvaus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rajoitusKuvaus =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rajoitusKuvaus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rajoitusKuvaus.push String.from_json(_item)
                 else
                   @rajoitusKuvaus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rajoitusKuvaus = _oa
            end
          end
        if !_o['rajoitustoimenpide'].nil?
          _oa = _o['rajoitustoimenpide']
            if(_oa.is_a? Hash)
              @rajoitustoimenpide = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rajoitustoimenpide =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rajoitustoimenpide = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rajoitustoimenpide.push String.from_json(_item)
                 else
                   @rajoitustoimenpide.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rajoitustoimenpide = _oa
            end
          end
        if !_o['palvelutehtava'].nil?
          _oa = _o['palvelutehtava']
            if(_oa.is_a? Hash)
              @palvelutehtava = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palvelutehtava =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palvelutehtava = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palvelutehtava.push String.from_json(_item)
                 else
                   @palvelutehtava.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palvelutehtava = _oa
            end
          end
        if !_o['palvelusetelinArvo'].nil?
          _oa = _o['palvelusetelinArvo']
            if(_oa.is_a? Hash)
              @palvelusetelinArvo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palvelusetelinArvo =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palvelusetelinArvo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palvelusetelinArvo.push Float.from_json(_item)
                 else
                   @palvelusetelinArvo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palvelusetelinArvo = _oa
            end
          end
        if !_o['palvelusetelienYhteisarvo'].nil?
          _oa = _o['palvelusetelienYhteisarvo']
            if(_oa.is_a? Hash)
              @palvelusetelienYhteisarvo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palvelusetelienYhteisarvo =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palvelusetelienYhteisarvo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palvelusetelienYhteisarvo.push Float.from_json(_item)
                 else
                   @palvelusetelienYhteisarvo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palvelusetelienYhteisarvo = _oa
            end
          end
        if !_o['maksimisumma'].nil?
          _oa = _o['maksimisumma']
            if(_oa.is_a? Hash)
              @maksimisumma = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @maksimisumma =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @maksimisumma = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @maksimisumma.push Float.from_json(_item)
                 else
                   @maksimisumma.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @maksimisumma = _oa
            end
          end
        if !_o['ratkaisusumma'].nil?
          _oa = _o['ratkaisusumma']
            if(_oa.is_a? Hash)
              @ratkaisusumma = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ratkaisusumma =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ratkaisusumma = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ratkaisusumma.push Float.from_json(_item)
                 else
                   @ratkaisusumma.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ratkaisusumma = _oa
            end
          end
        if !_o['vireilletulopaivamaara'].nil?
          _oa = _o['vireilletulopaivamaara']
            if(_oa.is_a? Hash)
              @vireilletulopaivamaara = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vireilletulopaivamaara =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vireilletulopaivamaara = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vireilletulopaivamaara.push Time.from_json(_item)
                 else
                   @vireilletulopaivamaara.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vireilletulopaivamaara = _oa
            end
          end
        if !_o['voimassaoloAlkamispaiva'].nil?
          _oa = _o['voimassaoloAlkamispaiva']
            if(_oa.is_a? Hash)
              @voimassaoloAlkamispaiva = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @voimassaoloAlkamispaiva =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @voimassaoloAlkamispaiva = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @voimassaoloAlkamispaiva.push Time.from_json(_item)
                 else
                   @voimassaoloAlkamispaiva.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @voimassaoloAlkamispaiva = _oa
            end
          end
        if !_o['voimassaoloPaattymispaiva'].nil?
          _oa = _o['voimassaoloPaattymispaiva']
            if(_oa.is_a? Hash)
              @voimassaoloPaattymispaiva = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @voimassaoloPaattymispaiva =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @voimassaoloPaattymispaiva = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @voimassaoloPaattymispaiva.push Time.from_json(_item)
                 else
                   @voimassaoloPaattymispaiva.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @voimassaoloPaattymispaiva = _oa
            end
          end
        if !_o['kiireellisenSijoitusksenAlkamispaiva'].nil?
          _oa = _o['kiireellisenSijoitusksenAlkamispaiva']
            if(_oa.is_a? Hash)
              @kiireellisenSijoitusksenAlkamispaiva = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kiireellisenSijoitusksenAlkamispaiva =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kiireellisenSijoitusksenAlkamispaiva = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kiireellisenSijoitusksenAlkamispaiva.push Time.from_json(_item)
                 else
                   @kiireellisenSijoitusksenAlkamispaiva.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kiireellisenSijoitusksenAlkamispaiva = _oa
            end
          end
        if !_o['lapsenSijoitusAlkamispaiva'].nil?
          _oa = _o['lapsenSijoitusAlkamispaiva']
            if(_oa.is_a? Hash)
              @lapsenSijoitusAlkamispaiva = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lapsenSijoitusAlkamispaiva =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lapsenSijoitusAlkamispaiva = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lapsenSijoitusAlkamispaiva.push Time.from_json(_item)
                 else
                   @lapsenSijoitusAlkamispaiva.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lapsenSijoitusAlkamispaiva = _oa
            end
          end
        if !_o['lapsenSijoitusPaattymispaiva'].nil?
          _oa = _o['lapsenSijoitusPaattymispaiva']
            if(_oa.is_a? Hash)
              @lapsenSijoitusPaattymispaiva = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lapsenSijoitusPaattymispaiva =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lapsenSijoitusPaattymispaiva = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lapsenSijoitusPaattymispaiva.push Time.from_json(_item)
                 else
                   @lapsenSijoitusPaattymispaiva.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lapsenSijoitusPaattymispaiva = _oa
            end
          end
        if !_o['lapsenSijoitusJatkamispaiva'].nil?
          _oa = _o['lapsenSijoitusJatkamispaiva']
            if(_oa.is_a? Hash)
              @lapsenSijoitusJatkamispaiva = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lapsenSijoitusJatkamispaiva =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lapsenSijoitusJatkamispaiva = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lapsenSijoitusJatkamispaiva.push Time.from_json(_item)
                 else
                   @lapsenSijoitusJatkamispaiva.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lapsenSijoitusJatkamispaiva = _oa
            end
          end
        if !_o['sijoitusPaattymispaiva'].nil?
          _oa = _o['sijoitusPaattymispaiva']
            if(_oa.is_a? Hash)
              @sijoitusPaattymispaiva = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @sijoitusPaattymispaiva =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @sijoitusPaattymispaiva = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @sijoitusPaattymispaiva.push Time.from_json(_item)
                 else
                   @sijoitusPaattymispaiva.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @sijoitusPaattymispaiva = _oa
            end
          end
        if !_o['sijoitusAlkamispaiva'].nil?
          _oa = _o['sijoitusAlkamispaiva']
            if(_oa.is_a? Hash)
              @sijoitusAlkamispaiva = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @sijoitusAlkamispaiva =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @sijoitusAlkamispaiva = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @sijoitusAlkamispaiva.push Time.from_json(_item)
                 else
                   @sijoitusAlkamispaiva.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @sijoitusAlkamispaiva = _oa
            end
          end
        if !_o['huostaanottoPaattymispaiva'].nil?
          _oa = _o['huostaanottoPaattymispaiva']
            if(_oa.is_a? Hash)
              @huostaanottoPaattymispaiva = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @huostaanottoPaattymispaiva =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @huostaanottoPaattymispaiva = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @huostaanottoPaattymispaiva.push Time.from_json(_item)
                 else
                   @huostaanottoPaattymispaiva.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @huostaanottoPaattymispaiva = _oa
            end
          end
        if !_o['huostaanottoAlkamispaiva'].nil?
          _oa = _o['huostaanottoAlkamispaiva']
            if(_oa.is_a? Hash)
              @huostaanottoAlkamispaiva = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @huostaanottoAlkamispaiva =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @huostaanottoAlkamispaiva = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @huostaanottoAlkamispaiva.push Time.from_json(_item)
                 else
                   @huostaanottoAlkamispaiva.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @huostaanottoAlkamispaiva = _oa
            end
          end
        if !_o['sijaishuollonkestoPaattymispaiva'].nil?
          _oa = _o['sijaishuollonkestoPaattymispaiva']
            if(_oa.is_a? Hash)
              @sijaishuollonkestoPaattymispaiva = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @sijaishuollonkestoPaattymispaiva =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @sijaishuollonkestoPaattymispaiva = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @sijaishuollonkestoPaattymispaiva.push Time.from_json(_item)
                 else
                   @sijaishuollonkestoPaattymispaiva.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @sijaishuollonkestoPaattymispaiva = _oa
            end
          end
        if !_o['sijaishuollonkestoAlkamispaiva'].nil?
          _oa = _o['sijaishuollonkestoAlkamispaiva']
            if(_oa.is_a? Hash)
              @sijaishuollonkestoAlkamispaiva = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @sijaishuollonkestoAlkamispaiva =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @sijaishuollonkestoAlkamispaiva = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @sijaishuollonkestoAlkamispaiva.push Time.from_json(_item)
                 else
                   @sijaishuollonkestoAlkamispaiva.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @sijaishuollonkestoAlkamispaiva = _oa
            end
          end
        if !_o['rajoitusAjanjaksoPaattymispaiva'].nil?
          _oa = _o['rajoitusAjanjaksoPaattymispaiva']
            if(_oa.is_a? Hash)
              @rajoitusAjanjaksoPaattymispaiva = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rajoitusAjanjaksoPaattymispaiva =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rajoitusAjanjaksoPaattymispaiva = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rajoitusAjanjaksoPaattymispaiva.push Time.from_json(_item)
                 else
                   @rajoitusAjanjaksoPaattymispaiva.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rajoitusAjanjaksoPaattymispaiva = _oa
            end
          end
        if !_o['rajoitusAjanjaksoAlkamispaiva'].nil?
          _oa = _o['rajoitusAjanjaksoAlkamispaiva']
            if(_oa.is_a? Hash)
              @rajoitusAjanjaksoAlkamispaiva = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rajoitusAjanjaksoAlkamispaiva =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rajoitusAjanjaksoAlkamispaiva = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rajoitusAjanjaksoAlkamispaiva.push Time.from_json(_item)
                 else
                   @rajoitusAjanjaksoAlkamispaiva.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rajoitusAjanjaksoAlkamispaiva = _oa
            end
          end
        if !_o['rajoitusPaivamaara'].nil?
          _oa = _o['rajoitusPaivamaara']
            if(_oa.is_a? Hash)
              @rajoitusPaivamaara = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rajoitusPaivamaara =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rajoitusPaivamaara = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rajoitusPaivamaara.push Time.from_json(_item)
                 else
                   @rajoitusPaivamaara.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rajoitusPaivamaara = _oa
            end
          end
        if !_o['rajoitustoimenpidePaattymispaiva'].nil?
          _oa = _o['rajoitustoimenpidePaattymispaiva']
            if(_oa.is_a? Hash)
              @rajoitustoimenpidePaattymispaiva = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rajoitustoimenpidePaattymispaiva =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rajoitustoimenpidePaattymispaiva = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rajoitustoimenpidePaattymispaiva.push Time.from_json(_item)
                 else
                   @rajoitustoimenpidePaattymispaiva.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rajoitustoimenpidePaattymispaiva = _oa
            end
          end
        if !_o['rajoitustoimenpideAlkamispaiva'].nil?
          _oa = _o['rajoitustoimenpideAlkamispaiva']
            if(_oa.is_a? Hash)
              @rajoitustoimenpideAlkamispaiva = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rajoitustoimenpideAlkamispaiva =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rajoitustoimenpideAlkamispaiva = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rajoitustoimenpideAlkamispaiva.push Time.from_json(_item)
                 else
                   @rajoitustoimenpideAlkamispaiva.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rajoitustoimenpideAlkamispaiva = _oa
            end
          end
        if !_o['asiakas'].nil?
          _oa = _o['asiakas']
            if(_oa.is_a? Hash)
              @asiakas = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakas =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakas = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakas.push Fixnum.from_json(_item)
                 else
                   @asiakas.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakas = _oa
            end
          end
        if !_o['asiakasInfo'].nil?
          _oa = _o['asiakasInfo']
            if(_oa.is_a? Hash)
              @asiakasInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakasInfo =  Fi::Mediconsult::Core::Client::Dto::Omistaja::Patient.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakasInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakasInfo.push Fi::Mediconsult::Core::Client::Dto::Omistaja::Patient.from_json(_item)
                 else
                   @asiakasInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakasInfo = _oa
            end
          end
        if !_o['sosiaalipalveluList'].nil?
          _oa = _o['sosiaalipalveluList']
            if(_oa.is_a? Hash)
              @sosiaalipalveluList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @sosiaalipalveluList =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @sosiaalipalveluList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @sosiaalipalveluList.push String.from_json(_item)
                 else
                   @sosiaalipalveluList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @sosiaalipalveluList = _oa
            end
          end
        if !_o['muuttaja'].nil?
          _oa = _o['muuttaja']
            if(_oa.is_a? Hash)
              @muuttaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @muuttaja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @muuttaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @muuttaja.push Fixnum.from_json(_item)
                 else
                   @muuttaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @muuttaja = _oa
            end
          end
        if !_o['muuttajaInfo'].nil?
          _oa = _o['muuttajaInfo']
            if(_oa.is_a? Hash)
              @muuttajaInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @muuttajaInfo =  Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @muuttajaInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @muuttajaInfo.push Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_item)
                 else
                   @muuttajaInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @muuttajaInfo = _oa
            end
          end
        if !_o['prosessi'].nil?
          _oa = _o['prosessi']
            if(_oa.is_a? Hash)
              @prosessi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @prosessi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @prosessi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @prosessi.push String.from_json(_item)
                 else
                   @prosessi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @prosessi = _oa
            end
          end
        if !_o['prosessinvaiheLista'].nil?
          _oa = _o['prosessinvaiheLista']
            if(_oa.is_a? Hash)
              @prosessinvaiheLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @prosessinvaiheLista =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @prosessinvaiheLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @prosessinvaiheLista.push String.from_json(_item)
                 else
                   @prosessinvaiheLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @prosessinvaiheLista = _oa
            end
          end
        if !_o['toimintayksikko'].nil?
          _oa = _o['toimintayksikko']
            if(_oa.is_a? Hash)
              @toimintayksikko = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @toimintayksikko =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @toimintayksikko = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @toimintayksikko.push String.from_json(_item)
                 else
                   @toimintayksikko.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @toimintayksikko = _oa
            end
          end
        if !_o['palvelunjarjestaja'].nil?
          _oa = _o['palvelunjarjestaja']
            if(_oa.is_a? Hash)
              @palvelunjarjestaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palvelunjarjestaja =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palvelunjarjestaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palvelunjarjestaja.push String.from_json(_item)
                 else
                   @palvelunjarjestaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palvelunjarjestaja = _oa
            end
          end
        if !_o['palveluntuottaja'].nil?
          _oa = _o['palveluntuottaja']
            if(_oa.is_a? Hash)
              @palveluntuottaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palveluntuottaja =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palveluntuottaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palveluntuottaja.push String.from_json(_item)
                 else
                   @palveluntuottaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palveluntuottaja = _oa
            end
          end
        if !_o['palveluntoteuttaja'].nil?
          _oa = _o['palveluntoteuttaja']
            if(_oa.is_a? Hash)
              @palveluntoteuttaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palveluntoteuttaja =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palveluntoteuttaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palveluntoteuttaja.push String.from_json(_item)
                 else
                   @palveluntoteuttaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palveluntoteuttaja = _oa
            end
          end
        if !_o['myonnettavanTuenMaara'].nil?
          _oa = _o['myonnettavanTuenMaara']
            if(_oa.is_a? Hash)
              @myonnettavanTuenMaara = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @myonnettavanTuenMaara =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @myonnettavanTuenMaara = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @myonnettavanTuenMaara.push Float.from_json(_item)
                 else
                   @myonnettavanTuenMaara.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @myonnettavanTuenMaara = _oa
            end
          end
        if !_o['toimeentulotuenLaji'].nil?
          _oa = _o['toimeentulotuenLaji']
            if(_oa.is_a? Hash)
              @toimeentulotuenLaji = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @toimeentulotuenLaji =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @toimeentulotuenLaji = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @toimeentulotuenLaji.push String.from_json(_item)
                 else
                   @toimeentulotuenLaji.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @toimeentulotuenLaji = _oa
            end
          end
        if !_o['dokumentti'].nil?
          _oa = _o['dokumentti']
            if(_oa.is_a? Hash)
              @dokumentti = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @dokumentti =  Fi::Mediconsult::Medisos::Dto::DocumentDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @dokumentti = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @dokumentti.push Fi::Mediconsult::Medisos::Dto::DocumentDto.from_json(_item)
                 else
                   @dokumentti.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @dokumentti = _oa
            end
          end
        if !_o['asiakirjaviittaaLista'].nil?
          _oa = _o['asiakirjaviittaaLista']
            if(_oa.is_a? Hash)
              @asiakirjaviittaaLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakirjaviittaaLista =  Fi::Mediconsult::Medisos::Dto::AsiakirjaviittausDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakirjaviittaaLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakirjaviittaaLista.push Fi::Mediconsult::Medisos::Dto::AsiakirjaviittausDto.from_json(_item)
                 else
                   @asiakirjaviittaaLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakirjaviittaaLista = _oa
            end
          end
        if !_o['asiakirjaanviitataanLista'].nil?
          _oa = _o['asiakirjaanviitataanLista']
            if(_oa.is_a? Hash)
              @asiakirjaanviitataanLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakirjaanviitataanLista =  Fi::Mediconsult::Medisos::Dto::AsiakirjaviittausDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakirjaanviitataanLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakirjaanviitataanLista.push Fi::Mediconsult::Medisos::Dto::AsiakirjaviittausDto.from_json(_item)
                 else
                   @asiakirjaanviitataanLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakirjaanviitataanLista = _oa
            end
          end
        if !_o['asiakirjaanviitataanLiiteasiakirjallaLista'].nil?
          _oa = _o['asiakirjaanviitataanLiiteasiakirjallaLista']
            if(_oa.is_a? Hash)
              @asiakirjaanviitataanLiiteasiakirjallaLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakirjaanviitataanLiiteasiakirjallaLista =  Fi::Mediconsult::Medisos::Dto::AsiakirjaviittausDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakirjaanviitataanLiiteasiakirjallaLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakirjaanviitataanLiiteasiakirjallaLista.push Fi::Mediconsult::Medisos::Dto::AsiakirjaviittausDto.from_json(_item)
                 else
                   @asiakirjaanviitataanLiiteasiakirjallaLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakirjaanviitataanLiiteasiakirjallaLista = _oa
            end
          end
        if !_o['suostumusTieto'].nil?
          _oa = _o['suostumusTieto']
            if(_oa.is_a? Hash)
              @suostumusTieto = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @suostumusTieto =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @suostumusTieto = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @suostumusTieto.push Boolean.from_json(_item)
                 else
                   @suostumusTieto.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @suostumusTieto = _oa
            end
          end
        if !_o['tulostettu'].nil?
          _oa = _o['tulostettu']
            if(_oa.is_a? Hash)
              @tulostettu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tulostettu =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tulostettu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tulostettu.push Time.from_json(_item)
                 else
                   @tulostettu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tulostettu = _oa
            end
          end
        if !_o['allekirjoitus'].nil?
          _oa = _o['allekirjoitus']
            if(_oa.is_a? Hash)
              @allekirjoitus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @allekirjoitus =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @allekirjoitus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @allekirjoitus.push Fixnum.from_json(_item)
                 else
                   @allekirjoitus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @allekirjoitus = _oa
            end
          end
        if !_o['luovuttajaInfo'].nil?
          _oa = _o['luovuttajaInfo']
            if(_oa.is_a? Hash)
              @luovuttajaInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @luovuttajaInfo =  Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @luovuttajaInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @luovuttajaInfo.push Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_item)
                 else
                   @luovuttajaInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @luovuttajaInfo = _oa
            end
          end
        if !_o['luovutettu'].nil?
          _oa = _o['luovutettu']
            if(_oa.is_a? Hash)
              @luovutettu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @luovutettu =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @luovutettu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @luovutettu.push Time.from_json(_item)
                 else
                   @luovutettu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @luovutettu = _oa
            end
          end
        if !_o['luovuttaja'].nil?
          _oa = _o['luovuttaja']
            if(_oa.is_a? Hash)
              @luovuttaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @luovuttaja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @luovuttaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @luovuttaja.push Fixnum.from_json(_item)
                 else
                   @luovuttaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @luovuttaja = _oa
            end
          end
        if !_o['formId'].nil?
          _oa = _o['formId']
            if(_oa.is_a? Hash)
              @formId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @formId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @formId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @formId.push Fixnum.from_json(_item)
                 else
                   @formId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @formId = _oa
            end
          end
        if !_o['blockedAsiaList'].nil?
          _oa = _o['blockedAsiaList']
            if(_oa.is_a? Hash)
              @blockedAsiaList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @blockedAsiaList =  Fi::Mediconsult::Medisos::Dto::BlockedInfoDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @blockedAsiaList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @blockedAsiaList.push Fi::Mediconsult::Medisos::Dto::BlockedInfoDto.from_json(_item)
                 else
                   @blockedAsiaList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @blockedAsiaList = _oa
            end
          end
    end

    # constructs a AsiakasAsiakirjaDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Omistaja

  # (no documentation provided)
  class User < Fi::Mediconsult::Core::Client::Dto::Omistaja::GenericOmistaja 

    # (no documentation provided)
    attr_accessor :omistajaListDescription
    # (no documentation provided)
    attr_accessor :lastName
    # (no documentation provided)
    attr_accessor :skills
    # (no documentation provided)
    attr_accessor :startTime
    # (no documentation provided)
    attr_accessor :basicInfo
    # (no documentation provided)
    attr_accessor :endTime
    # (no documentation provided)
    attr_accessor :userName
    # (no documentation provided)
    attr_accessor :omistajaDescriptionForSearch
    # (no documentation provided)
    attr_accessor :firstName

    # the json hash for this User
    def to_jaxb_json_hash
      _h = super
      _h['omistajaListDescription'] = omistajaListDescription.to_jaxb_json_hash unless omistajaListDescription.nil?
      _h['lastName'] = lastName.to_jaxb_json_hash unless lastName.nil?
      _h['skills'] = skills.to_jaxb_json_hash unless skills.nil?
      _h['startTime'] = startTime.to_jaxb_json_hash unless startTime.nil?
      _h['basicInfo'] = basicInfo.to_jaxb_json_hash unless basicInfo.nil?
      _h['endTime'] = endTime.to_jaxb_json_hash unless endTime.nil?
      _h['userName'] = userName.to_jaxb_json_hash unless userName.nil?
      _h['omistajaDescriptionForSearch'] = omistajaDescriptionForSearch.to_jaxb_json_hash unless omistajaDescriptionForSearch.nil?
      _h['firstName'] = firstName.to_jaxb_json_hash unless firstName.nil?
      return _h
    end

    #initializes this User with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['omistajaListDescription'].nil?
          _oa = _o['omistajaListDescription']
            if(_oa.is_a? Hash)
              @omistajaListDescription = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @omistajaListDescription =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @omistajaListDescription = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @omistajaListDescription.push String.from_json(_item)
                 else
                   @omistajaListDescription.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @omistajaListDescription = _oa
            end
          end
        if !_o['lastName'].nil?
          _oa = _o['lastName']
            if(_oa.is_a? Hash)
              @lastName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lastName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lastName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lastName.push String.from_json(_item)
                 else
                   @lastName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lastName = _oa
            end
          end
        if !_o['skills'].nil?
          _oa = _o['skills']
            if(_oa.is_a? Hash)
              @skills = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @skills =  Fi::Mediconsult::Core::Client::Dto::Omistaja::SkillsInfo.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @skills = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @skills.push Fi::Mediconsult::Core::Client::Dto::Omistaja::SkillsInfo.from_json(_item)
                 else
                   @skills.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @skills = _oa
            end
          end
        if !_o['startTime'].nil?
          _oa = _o['startTime']
            if(_oa.is_a? Hash)
              @startTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @startTime =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @startTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @startTime.push Bignum.from_json(_item)
                 else
                   @startTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @startTime = _oa
            end
          end
        if !_o['basicInfo'].nil?
          _oa = _o['basicInfo']
            if(_oa.is_a? Hash)
              @basicInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @basicInfo =  Fi::Mediconsult::Core::Client::Dto::Omistaja::BasicInfo.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @basicInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @basicInfo.push Fi::Mediconsult::Core::Client::Dto::Omistaja::BasicInfo.from_json(_item)
                 else
                   @basicInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @basicInfo = _oa
            end
          end
        if !_o['endTime'].nil?
          _oa = _o['endTime']
            if(_oa.is_a? Hash)
              @endTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @endTime =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @endTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @endTime.push Bignum.from_json(_item)
                 else
                   @endTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @endTime = _oa
            end
          end
        if !_o['userName'].nil?
          _oa = _o['userName']
            if(_oa.is_a? Hash)
              @userName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @userName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @userName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @userName.push String.from_json(_item)
                 else
                   @userName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @userName = _oa
            end
          end
        if !_o['omistajaDescriptionForSearch'].nil?
          _oa = _o['omistajaDescriptionForSearch']
            if(_oa.is_a? Hash)
              @omistajaDescriptionForSearch = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @omistajaDescriptionForSearch =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @omistajaDescriptionForSearch = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @omistajaDescriptionForSearch.push String.from_json(_item)
                 else
                   @omistajaDescriptionForSearch.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @omistajaDescriptionForSearch = _oa
            end
          end
        if !_o['firstName'].nil?
          _oa = _o['firstName']
            if(_oa.is_a? Hash)
              @firstName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @firstName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @firstName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @firstName.push String.from_json(_item)
                 else
                   @firstName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @firstName = _oa
            end
          end
    end

    # constructs a User from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Riski

  # (no documentation provided)
  class RiskitietoStatus

    # (no documentation provided)
    STATUS_EI_TIEDOSSA = "STATUS_EI_TIEDOSSA"

    # (no documentation provided)
    EI_RISKEJA = "EI_RISKEJA"

    # (no documentation provided)
    HUOMIOITAVIA_RISKEJA = "HUOMIOITAVIA_RISKEJA"

    # (no documentation provided)
    KRIITTISIA_RISKEJA = "KRIITTISIA_RISKEJA"

    # (no documentation provided)
    KRIITTISIA_JA_HUOMIOITAVIA_RISKEJA = "KRIITTISIA_JA_HUOMIOITAVIA_RISKEJA"
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Medisos

module Enums

  # (no documentation provided)
  class AsiakirjanTila

    # (no documentation provided)
    LUKITTU = "LUKITTU"

    # (no documentation provided)
    LUONNOS = "LUONNOS"

    # (no documentation provided)
    VALMIS = "VALMIS"

    # (no documentation provided)
    ARKISTOITU = "ARKISTOITU"

    # (no documentation provided)
    SULJETTU = "SULJETTU"

    # (no documentation provided)
    MITATOITY = "MITATOITY"

    # (no documentation provided)
    UUSI = "UUSI"

    # (no documentation provided)
    JONOSSA = "JONOSSA"

    # (no documentation provided)
    SELVITYKSESSA = "SELVITYKSESSA"

    # (no documentation provided)
    KASITTELYSSA = "KASITTELYSSA"

    # (no documentation provided)
    VALMIS_PAATETTAVAKSI = "VALMIS_PAATETTAVAKSI"

    # (no documentation provided)
    VALMIS_KANTA = "VALMIS_KANTA"
  end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Laakitys

  # (no documentation provided)
  class LaakeTiivistelmaTeksti < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # Returns the part number of the summary text, can be used to order summaries
    attr_accessor :osa
    # Returns the header of the
    attr_accessor :otsikko
    # Returns the summary text
    attr_accessor :teksti

    # the json hash for this LaakeTiivistelmaTeksti
    def to_jaxb_json_hash
      _h = super
      _h['osa'] = osa.to_jaxb_json_hash unless osa.nil?
      _h['otsikko'] = otsikko.to_jaxb_json_hash unless otsikko.nil?
      _h['teksti'] = teksti.to_jaxb_json_hash unless teksti.nil?
      return _h
    end

    #initializes this LaakeTiivistelmaTeksti with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['osa'].nil?
          _oa = _o['osa']
            if(_oa.is_a? Hash)
              @osa = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @osa =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @osa = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @osa.push Fixnum.from_json(_item)
                 else
                   @osa.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @osa = _oa
            end
          end
        if !_o['otsikko'].nil?
          _oa = _o['otsikko']
            if(_oa.is_a? Hash)
              @otsikko = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @otsikko =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @otsikko = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @otsikko.push Fixnum.from_json(_item)
                 else
                   @otsikko.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @otsikko = _oa
            end
          end
        if !_o['teksti'].nil?
          _oa = _o['teksti']
            if(_oa.is_a? Hash)
              @teksti = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @teksti =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @teksti = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @teksti.push String.from_json(_item)
                 else
                   @teksti.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @teksti = _oa
            end
          end
    end

    # constructs a LaakeTiivistelmaTeksti from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Medisos

module Enums

  # (no documentation provided)
  class SocialConfigurationTags

    # (no documentation provided)
    KOODISTO = "KOODISTO"

    # (no documentation provided)
    DOCUMENT_TEMPLATE_LOCK_TIME = "DOCUMENT_TEMPLATE_LOCK_TIME"

    # (no documentation provided)
    DOCUMENT_LOCK_TIME = "DOCUMENT_LOCK_TIME"

    # (no documentation provided)
    TEST_1 = "TEST_1"

    # (no documentation provided)
    TEST_2 = "TEST_2"

    # (no documentation provided)
    TEST_3 = "TEST_3"

    # (no documentation provided)
    TEST_4 = "TEST_4"

    # (no documentation provided)
    TEST_5 = "TEST_5"

    # (no documentation provided)
    TEST_6 = "TEST_6"

    # (no documentation provided)
    TEST_7 = "TEST_7"

    # (no documentation provided)
    TEST_8 = "TEST_8"

    # (no documentation provided)
    TEST_9 = "TEST_9"
  end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Kertomus

  # (no documentation provided)
  class KertomusTilaEnum

    # (no documentation provided)
    KERTOMUS_LUONNOS = "KERTOMUS_LUONNOS"

    # (no documentation provided)
    KERTOMUS_KESKEN = "KERTOMUS_KESKEN"

    # (no documentation provided)
    KERTOMUS_VALMIS = "KERTOMUS_VALMIS"

    # (no documentation provided)
    KERTOMUS_UNDEFIND = "KERTOMUS_UNDEFIND"
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Medisos

module Dto

  # (no documentation provided)
  class AsiakirjaviittausDto < Fi::Mediconsult::Medisos::Dto::MediSosDtoBase 

    # (no documentation provided)
    attr_accessor :asiakirjaId
    # (no documentation provided)
    attr_accessor :viittausId
    # (no documentation provided)
    attr_accessor :formId

    # the json hash for this AsiakirjaviittausDto
    def to_jaxb_json_hash
      _h = super
      _h['asiakirjaId'] = asiakirjaId.to_jaxb_json_hash unless asiakirjaId.nil?
      _h['viittausId'] = viittausId.to_jaxb_json_hash unless viittausId.nil?
      _h['formId'] = formId.to_jaxb_json_hash unless formId.nil?
      return _h
    end

    #initializes this AsiakirjaviittausDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['asiakirjaId'].nil?
          _oa = _o['asiakirjaId']
            if(_oa.is_a? Hash)
              @asiakirjaId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakirjaId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakirjaId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakirjaId.push Bignum.from_json(_item)
                 else
                   @asiakirjaId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakirjaId = _oa
            end
          end
        if !_o['viittausId'].nil?
          _oa = _o['viittausId']
            if(_oa.is_a? Hash)
              @viittausId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @viittausId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @viittausId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @viittausId.push Bignum.from_json(_item)
                 else
                   @viittausId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @viittausId = _oa
            end
          end
        if !_o['formId'].nil?
          _oa = _o['formId']
            if(_oa.is_a? Hash)
              @formId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @formId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @formId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @formId.push Fixnum.from_json(_item)
                 else
                   @formId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @formId = _oa
            end
          end
    end

    # constructs a AsiakirjaviittausDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class TutkimuspyyntoMikrobi < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # (no documentation provided)
    attr_accessor :rivi
    # (no documentation provided)
    attr_accessor :mikrobi
    # (no documentation provided)
    attr_accessor :tutkimustyyppi
    # (no documentation provided)
    attr_accessor :maara
    # (no documentation provided)
    attr_accessor :numero
    # (no documentation provided)
    attr_accessor :kommentti
    # (no documentation provided)
    attr_accessor :poistettu
    # (no documentation provided)
    attr_accessor :muutosaika
    # (no documentation provided)
    attr_accessor :muutospaikka
    # (no documentation provided)
    attr_accessor :herkkyydet

    # the json hash for this TutkimuspyyntoMikrobi
    def to_jaxb_json_hash
      _h = super
      _h['rivi'] = rivi.to_jaxb_json_hash unless rivi.nil?
      _h['mikrobi'] = mikrobi.to_jaxb_json_hash unless mikrobi.nil?
      _h['tutkimustyyppi'] = tutkimustyyppi.to_jaxb_json_hash unless tutkimustyyppi.nil?
      _h['maara'] = maara.to_jaxb_json_hash unless maara.nil?
      _h['numero'] = numero.to_jaxb_json_hash unless numero.nil?
      _h['kommentti'] = kommentti.to_jaxb_json_hash unless kommentti.nil?
      _h['poistettu'] = poistettu.to_jaxb_json_hash unless poistettu.nil?
      _h['muutosaika'] = muutosaika.to_jaxb_json_hash unless muutosaika.nil?
      _h['muutospaikka'] = muutospaikka.to_jaxb_json_hash unless muutospaikka.nil?
      if !herkkyydet.nil?
        _ha = Array.new
        herkkyydet.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['herkkyydet'] = _ha
      end
      return _h
    end

    #initializes this TutkimuspyyntoMikrobi with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['rivi'].nil?
          _oa = _o['rivi']
            if(_oa.is_a? Hash)
              @rivi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rivi =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rivi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rivi.push Fixnum.from_json(_item)
                 else
                   @rivi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rivi = _oa
            end
          end
        if !_o['mikrobi'].nil?
          _oa = _o['mikrobi']
            if(_oa.is_a? Hash)
              @mikrobi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @mikrobi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @mikrobi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @mikrobi.push String.from_json(_item)
                 else
                   @mikrobi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @mikrobi = _oa
            end
          end
        if !_o['tutkimustyyppi'].nil?
          _oa = _o['tutkimustyyppi']
            if(_oa.is_a? Hash)
              @tutkimustyyppi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tutkimustyyppi =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tutkimustyyppi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tutkimustyyppi.push Fixnum.from_json(_item)
                 else
                   @tutkimustyyppi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tutkimustyyppi = _oa
            end
          end
        if !_o['maara'].nil?
          _oa = _o['maara']
            if(_oa.is_a? Hash)
              @maara = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @maara =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @maara = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @maara.push String.from_json(_item)
                 else
                   @maara.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @maara = _oa
            end
          end
        if !_o['numero'].nil?
          _oa = _o['numero']
            if(_oa.is_a? Hash)
              @numero = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @numero =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @numero = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @numero.push String.from_json(_item)
                 else
                   @numero.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @numero = _oa
            end
          end
        if !_o['kommentti'].nil?
          _oa = _o['kommentti']
            if(_oa.is_a? Hash)
              @kommentti = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kommentti =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kommentti = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kommentti.push String.from_json(_item)
                 else
                   @kommentti.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kommentti = _oa
            end
          end
        if !_o['poistettu'].nil?
          _oa = _o['poistettu']
            if(_oa.is_a? Hash)
              @poistettu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @poistettu =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @poistettu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @poistettu.push Fixnum.from_json(_item)
                 else
                   @poistettu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @poistettu = _oa
            end
          end
        if !_o['muutosaika'].nil?
          _oa = _o['muutosaika']
            if(_oa.is_a? Hash)
              @muutosaika = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @muutosaika =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @muutosaika = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @muutosaika.push Time.from_json(_item)
                 else
                   @muutosaika.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @muutosaika = _oa
            end
          end
        if !_o['muutospaikka'].nil?
          _oa = _o['muutospaikka']
            if(_oa.is_a? Hash)
              @muutospaikka = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @muutospaikka =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @muutospaikka = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @muutospaikka.push Fixnum.from_json(_item)
                 else
                   @muutospaikka.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @muutospaikka = _oa
            end
          end
        if !_o['herkkyydet'].nil?
          _oa = _o['herkkyydet']
            if(_oa.is_a? Hash)
              @herkkyydet = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @herkkyydet =  Fi::Mediconsult::Core::Client::Dto::TutkimuspyyntoHerkkyys.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @herkkyydet = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @herkkyydet.push Fi::Mediconsult::Core::Client::Dto::TutkimuspyyntoHerkkyys.from_json(_item)
                 else
                   @herkkyydet.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @herkkyydet = _oa
            end
          end
    end

    # constructs a TutkimuspyyntoMikrobi from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Palvelupaatos

  # (no documentation provided)
  class PaatosSeurantaTilaCodes

    # (no documentation provided)
    SUUNNITELTU = "SUUNNITELTU"

    # (no documentation provided)
    MUUTETTU = "MUUTETTU"

    # (no documentation provided)
    KESKEYTETTY = "KESKEYTETTY"

    # (no documentation provided)
    KESKEN = "KESKEN"

    # (no documentation provided)
    TOTEUTUNUT = "TOTEUTUNUT"

    # (no documentation provided)
    ITSE_PERUNUT = "ITSE_PERUNUT"

    # (no documentation provided)
    PERUUTETTU = "PERUUTETTU"

    # (no documentation provided)
    EI_TOTEUTUNUT = "EI_TOTEUTUNUT"
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Laakitys

  # (no documentation provided)
  class LaakeSeloste < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # Returns the id of the medication description
    attr_accessor :seloste
    # Returns the name of the medication
    attr_accessor :nimi
    # Returns the preconditions for the medicine
    # (määräys-/toimitusehto)
    attr_accessor :ehto
    # Returns the manufacturer of the medicine
    attr_accessor :valmistaja
    # Returns the code of the description removal. &#39;E&#39; - not removed, &#39;K&#39; = removed
    attr_accessor :poistettu
    # Returns the actual DB-change time of the desctription
    attr_accessor :muutosaika
    # Returns the organization in which the change has been made
    attr_accessor :muutospaikka
    # Returns a list of description texts
    attr_accessor :tekstit

    # the json hash for this LaakeSeloste
    def to_jaxb_json_hash
      _h = super
      _h['seloste'] = seloste.to_jaxb_json_hash unless seloste.nil?
      _h['nimi'] = nimi.to_jaxb_json_hash unless nimi.nil?
      _h['ehto'] = ehto.to_jaxb_json_hash unless ehto.nil?
      _h['valmistaja'] = valmistaja.to_jaxb_json_hash unless valmistaja.nil?
      _h['poistettu'] = poistettu.to_jaxb_json_hash unless poistettu.nil?
      _h['muutosaika'] = muutosaika.to_jaxb_json_hash unless muutosaika.nil?
      _h['muutospaikka'] = muutospaikka.to_jaxb_json_hash unless muutospaikka.nil?
      if !tekstit.nil?
        _ha = Array.new
        tekstit.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['tekstit'] = _ha
      end
      return _h
    end

    #initializes this LaakeSeloste with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['seloste'].nil?
          _oa = _o['seloste']
            if(_oa.is_a? Hash)
              @seloste = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @seloste =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @seloste = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @seloste.push Fixnum.from_json(_item)
                 else
                   @seloste.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @seloste = _oa
            end
          end
        if !_o['nimi'].nil?
          _oa = _o['nimi']
            if(_oa.is_a? Hash)
              @nimi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @nimi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @nimi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @nimi.push String.from_json(_item)
                 else
                   @nimi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @nimi = _oa
            end
          end
        if !_o['ehto'].nil?
          _oa = _o['ehto']
            if(_oa.is_a? Hash)
              @ehto = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ehto =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ehto = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ehto.push String.from_json(_item)
                 else
                   @ehto.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ehto = _oa
            end
          end
        if !_o['valmistaja'].nil?
          _oa = _o['valmistaja']
            if(_oa.is_a? Hash)
              @valmistaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @valmistaja =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @valmistaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @valmistaja.push String.from_json(_item)
                 else
                   @valmistaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @valmistaja = _oa
            end
          end
        if !_o['poistettu'].nil?
          _oa = _o['poistettu']
            if(_oa.is_a? Hash)
              @poistettu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @poistettu =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @poistettu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @poistettu.push Fixnum.from_json(_item)
                 else
                   @poistettu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @poistettu = _oa
            end
          end
        if !_o['muutosaika'].nil?
          _oa = _o['muutosaika']
            if(_oa.is_a? Hash)
              @muutosaika = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @muutosaika =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @muutosaika = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @muutosaika.push Time.from_json(_item)
                 else
                   @muutosaika.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @muutosaika = _oa
            end
          end
        if !_o['muutospaikka'].nil?
          _oa = _o['muutospaikka']
            if(_oa.is_a? Hash)
              @muutospaikka = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @muutospaikka =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @muutospaikka = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @muutospaikka.push Fixnum.from_json(_item)
                 else
                   @muutospaikka.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @muutospaikka = _oa
            end
          end
        if !_o['tekstit'].nil?
          _oa = _o['tekstit']
            if(_oa.is_a? Hash)
              @tekstit = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tekstit =  Fi::Mediconsult::Core::Client::Dto::Laakitys::LaakeSelosteTeksti.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tekstit = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tekstit.push Fi::Mediconsult::Core::Client::Dto::Laakitys::LaakeSelosteTeksti.from_json(_item)
                 else
                   @tekstit.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tekstit = _oa
            end
          end
    end

    # constructs a LaakeSeloste from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Paatoksentuki

  # (no documentation provided)
  class DrugsAndPregnancyOrLactation < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # (no documentation provided)
    attr_accessor :drug
    # (no documentation provided)
    attr_accessor :drugsAndPregnancyOrLactationText
    # (no documentation provided)
    attr_accessor :contraindicationLevel
    # (no documentation provided)
    attr_accessor :drugsAndPregnancyOrLactiationLink

    # the json hash for this DrugsAndPregnancyOrLactation
    def to_jaxb_json_hash
      _h = super
      _h['drug'] = drug.to_jaxb_json_hash unless drug.nil?
      _h['drugsAndPregnancyOrLactationText'] = drugsAndPregnancyOrLactationText.to_jaxb_json_hash unless drugsAndPregnancyOrLactationText.nil?
      _h['contraindicationLevel'] = contraindicationLevel.to_jaxb_json_hash unless contraindicationLevel.nil?
      _h['drugsAndPregnancyOrLactiationLink'] = drugsAndPregnancyOrLactiationLink.to_jaxb_json_hash unless drugsAndPregnancyOrLactiationLink.nil?
      return _h
    end

    #initializes this DrugsAndPregnancyOrLactation with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['drug'].nil?
          _oa = _o['drug']
            if(_oa.is_a? Hash)
              @drug = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @drug =  Fi::Mediconsult::Core::Client::Dto::Paatoksentuki::Drug.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @drug = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @drug.push Fi::Mediconsult::Core::Client::Dto::Paatoksentuki::Drug.from_json(_item)
                 else
                   @drug.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @drug = _oa
            end
          end
        if !_o['drugsAndPregnancyOrLactationText'].nil?
          _oa = _o['drugsAndPregnancyOrLactationText']
            if(_oa.is_a? Hash)
              @drugsAndPregnancyOrLactationText = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @drugsAndPregnancyOrLactationText =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @drugsAndPregnancyOrLactationText = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @drugsAndPregnancyOrLactationText.push String.from_json(_item)
                 else
                   @drugsAndPregnancyOrLactationText.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @drugsAndPregnancyOrLactationText = _oa
            end
          end
        if !_o['contraindicationLevel'].nil?
          _oa = _o['contraindicationLevel']
            if(_oa.is_a? Hash)
              @contraindicationLevel = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @contraindicationLevel =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @contraindicationLevel = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @contraindicationLevel.push String.from_json(_item)
                 else
                   @contraindicationLevel.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @contraindicationLevel = _oa
            end
          end
        if !_o['drugsAndPregnancyOrLactiationLink'].nil?
          _oa = _o['drugsAndPregnancyOrLactiationLink']
            if(_oa.is_a? Hash)
              @drugsAndPregnancyOrLactiationLink = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @drugsAndPregnancyOrLactiationLink =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @drugsAndPregnancyOrLactiationLink = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @drugsAndPregnancyOrLactiationLink.push String.from_json(_item)
                 else
                   @drugsAndPregnancyOrLactiationLink.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @drugsAndPregnancyOrLactiationLink = _oa
            end
          end
    end

    # constructs a DrugsAndPregnancyOrLactation from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Laakitys

  # (no documentation provided)
  class LaakeAnnostus < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # Returns the id of the dosage
    attr_accessor :numero
    # Returns the explanation of the dosage
    attr_accessor :selite
    # Returns the lower age limit
    attr_accessor :alaikaraja
    # Returns the upper age limit
    attr_accessor :ylaikaraja
    # Returns the lower weight limit
    attr_accessor :alapainoraja
    # Returns the upper weight limit
    attr_accessor :ylapainoraja
    # Returns the model for the prescription text
    attr_accessor :malli
    # Returns the amount of decimals in prescription text
    attr_accessor :desimaaleja
    # Returns &#39;K&#39; if dosage should be multiplied by patients weight
    attr_accessor :painokerroin
    # Returns the size of the single dosage
    attr_accessor :annettavaMaara
    # Returns the maximum size of a single dosage
    attr_accessor :annettavaMaksimi
    # Returns the unit of the single dosage
    attr_accessor :annettavaYksikko
    # Returns the speed of dosing
    attr_accessor :antotahti
    # Returns the unit of the dosing speed
    attr_accessor :antotahtiYksikko
    # Returns the total duratio of the dosage
    attr_accessor :kokonaiskesto
    # Returns the total amount of the dosage
    attr_accessor :kokonaismaara
    # Returns the unit of total amount of the dosage
    attr_accessor :kokonaismaaraYksikko
    # Returns the confirmation for the dosage
    # -&#39;K&#39; if &quot;sic!&quot; should be added to the prescription text
    # -&#39;E&#39; otherwise
    attr_accessor :varmistus
    # Returns the use of the dosage
    attr_accessor :kayttotarkoitus
    # Returns the instructions of the dosage
    attr_accessor :ohjeet
    # Returns the iteration
    attr_accessor :iterointi
    # Returns the permanence of the dosage
    # -&#39;K&#39; pysyvä
    # -&#39;E&#39; otherwise
    attr_accessor :pysyva
    # Returns if the medicine is taken when needed
    # -&#39;K&#39; tarvittaessa
    # -&#39;E&#39; otherwise
    attr_accessor :tarvittaessa
    # Returns &#39;K&#39; if Kela wants user to explain the usage of medicine. &#39;E&#39; otherwise.
    attr_accessor :perusteluVaaditaan
    # Returns &quot;antoreitit&quot; for the medicine
    attr_accessor :antoreitit
    # Returns &quot;antopaikat&quot; for the medicine
    attr_accessor :antopaikat
    # Returns &quot;antovälineet&quot; for the medicine
    attr_accessor :antovalineet
    # Returns &quot;antotavat&quot; for the medicine
    attr_accessor :antotavat
    # Returns the origin of the dosage
    # -&#39;O&#39; if current organization
    # -&#39;A&#39; or &#39;M&#39; otherwise
    attr_accessor :alkupera
    # Returns the code of the dosage removal. &#39;E&#39; - not removed, &#39;K&#39; = removed
    attr_accessor :poistettu
    # Returns the actual DB-change time of the dosage
    attr_accessor :muutosaika
    # Returns the organization in which the change has been made
    attr_accessor :muutospaikka
    # Returns whose dosage it is
    attr_accessor :kenen
    # Returns a summary of the dosage
    attr_accessor :lyhyesti
    # Returns the repetition of the dosage
    attr_accessor :toisto
    # Returns the repetition in plain language
    attr_accessor :toistokuvaus
    # Returns the time unit used
    attr_accessor :aikayksikko

    # the json hash for this LaakeAnnostus
    def to_jaxb_json_hash
      _h = super
      _h['numero'] = numero.to_jaxb_json_hash unless numero.nil?
      _h['selite'] = selite.to_jaxb_json_hash unless selite.nil?
      _h['alaikaraja'] = alaikaraja.to_jaxb_json_hash unless alaikaraja.nil?
      _h['ylaikaraja'] = ylaikaraja.to_jaxb_json_hash unless ylaikaraja.nil?
      _h['alapainoraja'] = alapainoraja.to_jaxb_json_hash unless alapainoraja.nil?
      _h['ylapainoraja'] = ylapainoraja.to_jaxb_json_hash unless ylapainoraja.nil?
      _h['malli'] = malli.to_jaxb_json_hash unless malli.nil?
      _h['desimaaleja'] = desimaaleja.to_jaxb_json_hash unless desimaaleja.nil?
      _h['painokerroin'] = painokerroin.to_jaxb_json_hash unless painokerroin.nil?
      _h['annettavaMaara'] = annettavaMaara.to_jaxb_json_hash unless annettavaMaara.nil?
      _h['annettavaMaksimi'] = annettavaMaksimi.to_jaxb_json_hash unless annettavaMaksimi.nil?
      _h['annettavaYksikko'] = annettavaYksikko.to_jaxb_json_hash unless annettavaYksikko.nil?
      _h['antotahti'] = antotahti.to_jaxb_json_hash unless antotahti.nil?
      _h['antotahtiYksikko'] = antotahtiYksikko.to_jaxb_json_hash unless antotahtiYksikko.nil?
      _h['kokonaiskesto'] = kokonaiskesto.to_jaxb_json_hash unless kokonaiskesto.nil?
      _h['kokonaismaara'] = kokonaismaara.to_jaxb_json_hash unless kokonaismaara.nil?
      _h['kokonaismaaraYksikko'] = kokonaismaaraYksikko.to_jaxb_json_hash unless kokonaismaaraYksikko.nil?
      _h['varmistus'] = varmistus.to_jaxb_json_hash unless varmistus.nil?
      _h['kayttotarkoitus'] = kayttotarkoitus.to_jaxb_json_hash unless kayttotarkoitus.nil?
      _h['ohjeet'] = ohjeet.to_jaxb_json_hash unless ohjeet.nil?
      _h['iterointi'] = iterointi.to_jaxb_json_hash unless iterointi.nil?
      _h['pysyva'] = pysyva.to_jaxb_json_hash unless pysyva.nil?
      _h['tarvittaessa'] = tarvittaessa.to_jaxb_json_hash unless tarvittaessa.nil?
      _h['perusteluVaaditaan'] = perusteluVaaditaan.to_jaxb_json_hash unless perusteluVaaditaan.nil?
      _h['antoreitit'] = antoreitit.to_jaxb_json_hash unless antoreitit.nil?
      _h['antopaikat'] = antopaikat.to_jaxb_json_hash unless antopaikat.nil?
      _h['antovalineet'] = antovalineet.to_jaxb_json_hash unless antovalineet.nil?
      _h['antotavat'] = antotavat.to_jaxb_json_hash unless antotavat.nil?
      _h['alkupera'] = alkupera.to_jaxb_json_hash unless alkupera.nil?
      _h['poistettu'] = poistettu.to_jaxb_json_hash unless poistettu.nil?
      _h['muutosaika'] = muutosaika.to_jaxb_json_hash unless muutosaika.nil?
      _h['muutospaikka'] = muutospaikka.to_jaxb_json_hash unless muutospaikka.nil?
      _h['kenen'] = kenen.to_jaxb_json_hash unless kenen.nil?
      _h['lyhyesti'] = lyhyesti.to_jaxb_json_hash unless lyhyesti.nil?
      _h['toisto'] = toisto.to_jaxb_json_hash unless toisto.nil?
      _h['toistokuvaus'] = toistokuvaus.to_jaxb_json_hash unless toistokuvaus.nil?
      _h['aikayksikko'] = aikayksikko.to_jaxb_json_hash unless aikayksikko.nil?
      return _h
    end

    #initializes this LaakeAnnostus with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['numero'].nil?
          _oa = _o['numero']
            if(_oa.is_a? Hash)
              @numero = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @numero =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @numero = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @numero.push Fixnum.from_json(_item)
                 else
                   @numero.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @numero = _oa
            end
          end
        if !_o['selite'].nil?
          _oa = _o['selite']
            if(_oa.is_a? Hash)
              @selite = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @selite =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @selite = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @selite.push String.from_json(_item)
                 else
                   @selite.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @selite = _oa
            end
          end
        if !_o['alaikaraja'].nil?
          _oa = _o['alaikaraja']
            if(_oa.is_a? Hash)
              @alaikaraja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @alaikaraja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @alaikaraja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @alaikaraja.push Fixnum.from_json(_item)
                 else
                   @alaikaraja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @alaikaraja = _oa
            end
          end
        if !_o['ylaikaraja'].nil?
          _oa = _o['ylaikaraja']
            if(_oa.is_a? Hash)
              @ylaikaraja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ylaikaraja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ylaikaraja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ylaikaraja.push Fixnum.from_json(_item)
                 else
                   @ylaikaraja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ylaikaraja = _oa
            end
          end
        if !_o['alapainoraja'].nil?
          _oa = _o['alapainoraja']
            if(_oa.is_a? Hash)
              @alapainoraja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @alapainoraja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @alapainoraja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @alapainoraja.push Fixnum.from_json(_item)
                 else
                   @alapainoraja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @alapainoraja = _oa
            end
          end
        if !_o['ylapainoraja'].nil?
          _oa = _o['ylapainoraja']
            if(_oa.is_a? Hash)
              @ylapainoraja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ylapainoraja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ylapainoraja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ylapainoraja.push Fixnum.from_json(_item)
                 else
                   @ylapainoraja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ylapainoraja = _oa
            end
          end
        if !_o['malli'].nil?
          _oa = _o['malli']
            if(_oa.is_a? Hash)
              @malli = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @malli =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @malli = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @malli.push String.from_json(_item)
                 else
                   @malli.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @malli = _oa
            end
          end
        if !_o['desimaaleja'].nil?
          _oa = _o['desimaaleja']
            if(_oa.is_a? Hash)
              @desimaaleja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @desimaaleja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @desimaaleja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @desimaaleja.push Fixnum.from_json(_item)
                 else
                   @desimaaleja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @desimaaleja = _oa
            end
          end
        if !_o['painokerroin'].nil?
          _oa = _o['painokerroin']
            if(_oa.is_a? Hash)
              @painokerroin = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @painokerroin =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @painokerroin = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @painokerroin.push Fixnum.from_json(_item)
                 else
                   @painokerroin.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @painokerroin = _oa
            end
          end
        if !_o['annettavaMaara'].nil?
          _oa = _o['annettavaMaara']
            if(_oa.is_a? Hash)
              @annettavaMaara = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @annettavaMaara =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @annettavaMaara = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @annettavaMaara.push Float.from_json(_item)
                 else
                   @annettavaMaara.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @annettavaMaara = _oa
            end
          end
        if !_o['annettavaMaksimi'].nil?
          _oa = _o['annettavaMaksimi']
            if(_oa.is_a? Hash)
              @annettavaMaksimi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @annettavaMaksimi =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @annettavaMaksimi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @annettavaMaksimi.push Float.from_json(_item)
                 else
                   @annettavaMaksimi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @annettavaMaksimi = _oa
            end
          end
        if !_o['annettavaYksikko'].nil?
          _oa = _o['annettavaYksikko']
            if(_oa.is_a? Hash)
              @annettavaYksikko = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @annettavaYksikko =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @annettavaYksikko = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @annettavaYksikko.push String.from_json(_item)
                 else
                   @annettavaYksikko.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @annettavaYksikko = _oa
            end
          end
        if !_o['antotahti'].nil?
          _oa = _o['antotahti']
            if(_oa.is_a? Hash)
              @antotahti = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @antotahti =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @antotahti = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @antotahti.push Float.from_json(_item)
                 else
                   @antotahti.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @antotahti = _oa
            end
          end
        if !_o['antotahtiYksikko'].nil?
          _oa = _o['antotahtiYksikko']
            if(_oa.is_a? Hash)
              @antotahtiYksikko = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @antotahtiYksikko =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @antotahtiYksikko = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @antotahtiYksikko.push String.from_json(_item)
                 else
                   @antotahtiYksikko.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @antotahtiYksikko = _oa
            end
          end
        if !_o['kokonaiskesto'].nil?
          _oa = _o['kokonaiskesto']
            if(_oa.is_a? Hash)
              @kokonaiskesto = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kokonaiskesto =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kokonaiskesto = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kokonaiskesto.push String.from_json(_item)
                 else
                   @kokonaiskesto.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kokonaiskesto = _oa
            end
          end
        if !_o['kokonaismaara'].nil?
          _oa = _o['kokonaismaara']
            if(_oa.is_a? Hash)
              @kokonaismaara = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kokonaismaara =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kokonaismaara = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kokonaismaara.push Float.from_json(_item)
                 else
                   @kokonaismaara.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kokonaismaara = _oa
            end
          end
        if !_o['kokonaismaaraYksikko'].nil?
          _oa = _o['kokonaismaaraYksikko']
            if(_oa.is_a? Hash)
              @kokonaismaaraYksikko = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kokonaismaaraYksikko =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kokonaismaaraYksikko = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kokonaismaaraYksikko.push String.from_json(_item)
                 else
                   @kokonaismaaraYksikko.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kokonaismaaraYksikko = _oa
            end
          end
        if !_o['varmistus'].nil?
          _oa = _o['varmistus']
            if(_oa.is_a? Hash)
              @varmistus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @varmistus =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @varmistus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @varmistus.push Fixnum.from_json(_item)
                 else
                   @varmistus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @varmistus = _oa
            end
          end
        if !_o['kayttotarkoitus'].nil?
          _oa = _o['kayttotarkoitus']
            if(_oa.is_a? Hash)
              @kayttotarkoitus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kayttotarkoitus =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kayttotarkoitus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kayttotarkoitus.push String.from_json(_item)
                 else
                   @kayttotarkoitus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kayttotarkoitus = _oa
            end
          end
        if !_o['ohjeet'].nil?
          _oa = _o['ohjeet']
            if(_oa.is_a? Hash)
              @ohjeet = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ohjeet =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ohjeet = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ohjeet.push String.from_json(_item)
                 else
                   @ohjeet.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ohjeet = _oa
            end
          end
        if !_o['iterointi'].nil?
          _oa = _o['iterointi']
            if(_oa.is_a? Hash)
              @iterointi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @iterointi =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @iterointi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @iterointi.push Fixnum.from_json(_item)
                 else
                   @iterointi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @iterointi = _oa
            end
          end
        if !_o['pysyva'].nil?
          _oa = _o['pysyva']
            if(_oa.is_a? Hash)
              @pysyva = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @pysyva =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @pysyva = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @pysyva.push Fixnum.from_json(_item)
                 else
                   @pysyva.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @pysyva = _oa
            end
          end
        if !_o['tarvittaessa'].nil?
          _oa = _o['tarvittaessa']
            if(_oa.is_a? Hash)
              @tarvittaessa = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tarvittaessa =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tarvittaessa = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tarvittaessa.push Fixnum.from_json(_item)
                 else
                   @tarvittaessa.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tarvittaessa = _oa
            end
          end
        if !_o['perusteluVaaditaan'].nil?
          _oa = _o['perusteluVaaditaan']
            if(_oa.is_a? Hash)
              @perusteluVaaditaan = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @perusteluVaaditaan =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @perusteluVaaditaan = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @perusteluVaaditaan.push Fixnum.from_json(_item)
                 else
                   @perusteluVaaditaan.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @perusteluVaaditaan = _oa
            end
          end
        if !_o['antoreitit'].nil?
          _oa = _o['antoreitit']
            if(_oa.is_a? Hash)
              @antoreitit = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @antoreitit =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @antoreitit = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @antoreitit.push String.from_json(_item)
                 else
                   @antoreitit.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @antoreitit = _oa
            end
          end
        if !_o['antopaikat'].nil?
          _oa = _o['antopaikat']
            if(_oa.is_a? Hash)
              @antopaikat = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @antopaikat =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @antopaikat = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @antopaikat.push String.from_json(_item)
                 else
                   @antopaikat.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @antopaikat = _oa
            end
          end
        if !_o['antovalineet'].nil?
          _oa = _o['antovalineet']
            if(_oa.is_a? Hash)
              @antovalineet = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @antovalineet =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @antovalineet = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @antovalineet.push String.from_json(_item)
                 else
                   @antovalineet.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @antovalineet = _oa
            end
          end
        if !_o['antotavat'].nil?
          _oa = _o['antotavat']
            if(_oa.is_a? Hash)
              @antotavat = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @antotavat =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @antotavat = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @antotavat.push String.from_json(_item)
                 else
                   @antotavat.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @antotavat = _oa
            end
          end
        if !_o['alkupera'].nil?
          _oa = _o['alkupera']
            if(_oa.is_a? Hash)
              @alkupera = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @alkupera =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @alkupera = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @alkupera.push Fixnum.from_json(_item)
                 else
                   @alkupera.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @alkupera = _oa
            end
          end
        if !_o['poistettu'].nil?
          _oa = _o['poistettu']
            if(_oa.is_a? Hash)
              @poistettu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @poistettu =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @poistettu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @poistettu.push Fixnum.from_json(_item)
                 else
                   @poistettu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @poistettu = _oa
            end
          end
        if !_o['muutosaika'].nil?
          _oa = _o['muutosaika']
            if(_oa.is_a? Hash)
              @muutosaika = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @muutosaika =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @muutosaika = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @muutosaika.push Time.from_json(_item)
                 else
                   @muutosaika.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @muutosaika = _oa
            end
          end
        if !_o['muutospaikka'].nil?
          _oa = _o['muutospaikka']
            if(_oa.is_a? Hash)
              @muutospaikka = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @muutospaikka =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @muutospaikka = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @muutospaikka.push Fixnum.from_json(_item)
                 else
                   @muutospaikka.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @muutospaikka = _oa
            end
          end
        if !_o['kenen'].nil?
          _oa = _o['kenen']
            if(_oa.is_a? Hash)
              @kenen = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kenen =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kenen = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kenen.push Fixnum.from_json(_item)
                 else
                   @kenen.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kenen = _oa
            end
          end
        if !_o['lyhyesti'].nil?
          _oa = _o['lyhyesti']
            if(_oa.is_a? Hash)
              @lyhyesti = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lyhyesti =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lyhyesti = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lyhyesti.push String.from_json(_item)
                 else
                   @lyhyesti.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lyhyesti = _oa
            end
          end
        if !_o['toisto'].nil?
          _oa = _o['toisto']
            if(_oa.is_a? Hash)
              @toisto = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @toisto =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @toisto = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @toisto.push String.from_json(_item)
                 else
                   @toisto.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @toisto = _oa
            end
          end
        if !_o['toistokuvaus'].nil?
          _oa = _o['toistokuvaus']
            if(_oa.is_a? Hash)
              @toistokuvaus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @toistokuvaus =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @toistokuvaus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @toistokuvaus.push String.from_json(_item)
                 else
                   @toistokuvaus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @toistokuvaus = _oa
            end
          end
        if !_o['aikayksikko'].nil?
          _oa = _o['aikayksikko']
            if(_oa.is_a? Hash)
              @aikayksikko = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @aikayksikko =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @aikayksikko = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @aikayksikko.push String.from_json(_item)
                 else
                   @aikayksikko.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @aikayksikko = _oa
            end
          end
    end

    # constructs a LaakeAnnostus from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Paatoksentuki

  # (no documentation provided)
  class Contraindication < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # (no documentation provided)
    attr_accessor :contraindicationText
    # (no documentation provided)
    attr_accessor :contraindicationLevel
    # (no documentation provided)
    attr_accessor :drug
    # (no documentation provided)
    attr_accessor :diagnosis

    # the json hash for this Contraindication
    def to_jaxb_json_hash
      _h = super
      _h['contraindicationText'] = contraindicationText.to_jaxb_json_hash unless contraindicationText.nil?
      _h['contraindicationLevel'] = contraindicationLevel.to_jaxb_json_hash unless contraindicationLevel.nil?
      _h['drug'] = drug.to_jaxb_json_hash unless drug.nil?
      _h['diagnosis'] = diagnosis.to_jaxb_json_hash unless diagnosis.nil?
      return _h
    end

    #initializes this Contraindication with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['contraindicationText'].nil?
          _oa = _o['contraindicationText']
            if(_oa.is_a? Hash)
              @contraindicationText = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @contraindicationText =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @contraindicationText = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @contraindicationText.push String.from_json(_item)
                 else
                   @contraindicationText.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @contraindicationText = _oa
            end
          end
        if !_o['contraindicationLevel'].nil?
          _oa = _o['contraindicationLevel']
            if(_oa.is_a? Hash)
              @contraindicationLevel = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @contraindicationLevel =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @contraindicationLevel = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @contraindicationLevel.push Bignum.from_json(_item)
                 else
                   @contraindicationLevel.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @contraindicationLevel = _oa
            end
          end
        if !_o['drug'].nil?
          _oa = _o['drug']
            if(_oa.is_a? Hash)
              @drug = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @drug =  Fi::Mediconsult::Core::Client::Dto::Paatoksentuki::Drug.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @drug = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @drug.push Fi::Mediconsult::Core::Client::Dto::Paatoksentuki::Drug.from_json(_item)
                 else
                   @drug.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @drug = _oa
            end
          end
        if !_o['diagnosis'].nil?
          _oa = _o['diagnosis']
            if(_oa.is_a? Hash)
              @diagnosis = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @diagnosis =  Fi::Mediconsult::Core::Client::Dto::Paatoksentuki::Diagnosis.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @diagnosis = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @diagnosis.push Fi::Mediconsult::Core::Client::Dto::Paatoksentuki::Diagnosis.from_json(_item)
                 else
                   @diagnosis.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @diagnosis = _oa
            end
          end
    end

    # constructs a Contraindication from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Kanta

module Suostumustenhallinta

  # (no documentation provided)
  class ConsentDTO < Fi::Mediconsult::Core::Client::Dto::Kanta::KantaDTO 

    # (no documentation provided)
    attr_accessor :representativeSSN
    # (no documentation provided)
    attr_accessor :giveConsentSignature
    # (no documentation provided)
    attr_accessor :representativeGivennames
    # (no documentation provided)
    attr_accessor :savedServiceProviderId
    # (no documentation provided)
    attr_accessor :documentInfo
    # (no documentation provided)
    attr_accessor :savedServiceProvider
    # (no documentation provided)
    attr_accessor :newDocumentOid
    # (no documentation provided)
    attr_accessor :representativeLastname
    # (no documentation provided)
    attr_accessor :cancelled
    # (no documentation provided)
    attr_accessor :cancelConsentSignature

    # the json hash for this ConsentDTO
    def to_jaxb_json_hash
      _h = super
      _h['representativeSSN'] = representativeSSN.to_jaxb_json_hash unless representativeSSN.nil?
      _h['giveConsentSignature'] = giveConsentSignature.to_jaxb_json_hash unless giveConsentSignature.nil?
      _h['representativeGivennames'] = representativeGivennames.to_jaxb_json_hash unless representativeGivennames.nil?
      _h['savedServiceProviderId'] = savedServiceProviderId.to_jaxb_json_hash unless savedServiceProviderId.nil?
      _h['documentInfo'] = documentInfo.to_jaxb_json_hash unless documentInfo.nil?
      _h['savedServiceProvider'] = savedServiceProvider.to_jaxb_json_hash unless savedServiceProvider.nil?
      _h['newDocumentOid'] = newDocumentOid.to_jaxb_json_hash unless newDocumentOid.nil?
      _h['representativeLastname'] = representativeLastname.to_jaxb_json_hash unless representativeLastname.nil?
      _h['cancelled'] = cancelled.to_jaxb_json_hash unless cancelled.nil?
      _h['cancelConsentSignature'] = cancelConsentSignature.to_jaxb_json_hash unless cancelConsentSignature.nil?
      return _h
    end

    #initializes this ConsentDTO with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['representativeSSN'].nil?
          _oa = _o['representativeSSN']
            if(_oa.is_a? Hash)
              @representativeSSN = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @representativeSSN =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @representativeSSN = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @representativeSSN.push String.from_json(_item)
                 else
                   @representativeSSN.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @representativeSSN = _oa
            end
          end
        if !_o['giveConsentSignature'].nil?
          _oa = _o['giveConsentSignature']
            if(_oa.is_a? Hash)
              @giveConsentSignature = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @giveConsentSignature =  Fi::Mediconsult::Core::Client::Dto::Kanta::Suostumustenhallinta::ConsentSignature.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @giveConsentSignature = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @giveConsentSignature.push Fi::Mediconsult::Core::Client::Dto::Kanta::Suostumustenhallinta::ConsentSignature.from_json(_item)
                 else
                   @giveConsentSignature.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @giveConsentSignature = _oa
            end
          end
        if !_o['representativeGivennames'].nil?
          _oa = _o['representativeGivennames']
            if(_oa.is_a? Hash)
              @representativeGivennames = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @representativeGivennames =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @representativeGivennames = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @representativeGivennames.push String.from_json(_item)
                 else
                   @representativeGivennames.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @representativeGivennames = _oa
            end
          end
        if !_o['savedServiceProviderId'].nil?
          _oa = _o['savedServiceProviderId']
            if(_oa.is_a? Hash)
              @savedServiceProviderId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @savedServiceProviderId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @savedServiceProviderId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @savedServiceProviderId.push String.from_json(_item)
                 else
                   @savedServiceProviderId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @savedServiceProviderId = _oa
            end
          end
        if !_o['documentInfo'].nil?
          _oa = _o['documentInfo']
            if(_oa.is_a? Hash)
              @documentInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @documentInfo =  Fi::Mediconsult::Core::Client::Dto::Kanta::DocumentInfo.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @documentInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @documentInfo.push Fi::Mediconsult::Core::Client::Dto::Kanta::DocumentInfo.from_json(_item)
                 else
                   @documentInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @documentInfo = _oa
            end
          end
        if !_o['savedServiceProvider'].nil?
          _oa = _o['savedServiceProvider']
            if(_oa.is_a? Hash)
              @savedServiceProvider = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @savedServiceProvider =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @savedServiceProvider = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @savedServiceProvider.push String.from_json(_item)
                 else
                   @savedServiceProvider.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @savedServiceProvider = _oa
            end
          end
        if !_o['newDocumentOid'].nil?
          _oa = _o['newDocumentOid']
            if(_oa.is_a? Hash)
              @newDocumentOid = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @newDocumentOid =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @newDocumentOid = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @newDocumentOid.push String.from_json(_item)
                 else
                   @newDocumentOid.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @newDocumentOid = _oa
            end
          end
        if !_o['representativeLastname'].nil?
          _oa = _o['representativeLastname']
            if(_oa.is_a? Hash)
              @representativeLastname = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @representativeLastname =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @representativeLastname = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @representativeLastname.push String.from_json(_item)
                 else
                   @representativeLastname.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @representativeLastname = _oa
            end
          end
        if !_o['cancelled'].nil?
          _oa = _o['cancelled']
            if(_oa.is_a? Hash)
              @cancelled = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @cancelled =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @cancelled = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @cancelled.push Boolean.from_json(_item)
                 else
                   @cancelled.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @cancelled = _oa
            end
          end
        if !_o['cancelConsentSignature'].nil?
          _oa = _o['cancelConsentSignature']
            if(_oa.is_a? Hash)
              @cancelConsentSignature = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @cancelConsentSignature =  Fi::Mediconsult::Core::Client::Dto::Kanta::Suostumustenhallinta::ConsentSignature.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @cancelConsentSignature = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @cancelConsentSignature.push Fi::Mediconsult::Core::Client::Dto::Kanta::Suostumustenhallinta::ConsentSignature.from_json(_item)
                 else
                   @cancelConsentSignature.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @cancelConsentSignature = _oa
            end
          end
    end

    # constructs a ConsentDTO from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Omistaja

  # (no documentation provided)
  class Patient < Fi::Mediconsult::Core::Client::Dto::Omistaja::GenericOmistaja 

    # (no documentation provided)
    attr_accessor :uuid
    # (no documentation provided)
    attr_accessor :omistajaListDescription
    # (no documentation provided)
    attr_accessor :lastName
    # (no documentation provided)
    attr_accessor :state
    # (no documentation provided)
    attr_accessor :riskitietoStatus
    # (no documentation provided)
    attr_accessor :domainId
    # (no documentation provided)
    attr_accessor :wardCareStatus
    # (no documentation provided)
    attr_accessor :omistajaDescriptionForSearch
    # (no documentation provided)
    attr_accessor :hoitojakso
    # (no documentation provided)
    attr_accessor :firstName
    # (no documentation provided)
    attr_accessor :birthDate
    # (no documentation provided)
    attr_accessor :age
    # (no documentation provided)
    attr_accessor :register
    # (no documentation provided)
    attr_accessor :basicInfo
    # (no documentation provided)
    attr_accessor :gender
    # (no documentation provided)
    attr_accessor :passivatedDate
    # (no documentation provided)
    attr_accessor :temporaryssn
    # (no documentation provided)
    attr_accessor :hoitosuhde
    # (no documentation provided)
    attr_accessor :realmId
    # (no documentation provided)
    attr_accessor :ssn
    # (no documentation provided)
    attr_accessor :passive
    # (no documentation provided)
    attr_accessor :genderHL7Code
    # (no documentation provided)
    attr_accessor :careRelationPreferenceList

    # the json hash for this Patient
    def to_jaxb_json_hash
      _h = super
      _h['uuid'] = uuid.to_jaxb_json_hash unless uuid.nil?
      _h['omistajaListDescription'] = omistajaListDescription.to_jaxb_json_hash unless omistajaListDescription.nil?
      _h['lastName'] = lastName.to_jaxb_json_hash unless lastName.nil?
      _h['state'] = state.to_jaxb_json_hash unless state.nil?
      _h['riskitietoStatus'] = riskitietoStatus.to_jaxb_json_hash unless riskitietoStatus.nil?
      _h['domainId'] = domainId.to_jaxb_json_hash unless domainId.nil?
      _h['wardCareStatus'] = wardCareStatus.to_jaxb_json_hash unless wardCareStatus.nil?
      _h['omistajaDescriptionForSearch'] = omistajaDescriptionForSearch.to_jaxb_json_hash unless omistajaDescriptionForSearch.nil?
      _h['hoitojakso'] = hoitojakso.to_jaxb_json_hash unless hoitojakso.nil?
      _h['firstName'] = firstName.to_jaxb_json_hash unless firstName.nil?
      _h['birthDate'] = birthDate.to_jaxb_json_hash unless birthDate.nil?
      _h['age'] = age.to_jaxb_json_hash unless age.nil?
      _h['register'] = register.to_jaxb_json_hash unless register.nil?
      _h['basicInfo'] = basicInfo.to_jaxb_json_hash unless basicInfo.nil?
      _h['gender'] = gender.to_jaxb_json_hash unless gender.nil?
      _h['passivatedDate'] = passivatedDate.to_jaxb_json_hash unless passivatedDate.nil?
      _h['temporaryssn'] = temporaryssn.to_jaxb_json_hash unless temporaryssn.nil?
      _h['hoitosuhde'] = hoitosuhde.to_jaxb_json_hash unless hoitosuhde.nil?
      _h['realmId'] = realmId.to_jaxb_json_hash unless realmId.nil?
      _h['ssn'] = ssn.to_jaxb_json_hash unless ssn.nil?
      _h['passive'] = passive.to_jaxb_json_hash unless passive.nil?
      _h['genderHL7Code'] = genderHL7Code.to_jaxb_json_hash unless genderHL7Code.nil?
      _h['careRelationPreferenceList'] = careRelationPreferenceList.to_jaxb_json_hash unless careRelationPreferenceList.nil?
      return _h
    end

    #initializes this Patient with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['uuid'].nil?
          _oa = _o['uuid']
            if(_oa.is_a? Hash)
              @uuid = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @uuid =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @uuid = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @uuid.push String.from_json(_item)
                 else
                   @uuid.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @uuid = _oa
            end
          end
        if !_o['omistajaListDescription'].nil?
          _oa = _o['omistajaListDescription']
            if(_oa.is_a? Hash)
              @omistajaListDescription = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @omistajaListDescription =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @omistajaListDescription = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @omistajaListDescription.push String.from_json(_item)
                 else
                   @omistajaListDescription.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @omistajaListDescription = _oa
            end
          end
        if !_o['lastName'].nil?
          _oa = _o['lastName']
            if(_oa.is_a? Hash)
              @lastName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lastName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lastName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lastName.push String.from_json(_item)
                 else
                   @lastName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lastName = _oa
            end
          end
        if !_o['state'].nil?
          _oa = _o['state']
            if(_oa.is_a? Hash)
              @state = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @state =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @state = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @state.push String.from_json(_item)
                 else
                   @state.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @state = _oa
            end
          end
        if !_o['riskitietoStatus'].nil?
          _oa = _o['riskitietoStatus']
            if(_oa.is_a? Hash)
              @riskitietoStatus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @riskitietoStatus =  Fi::Mediconsult::Core::Client::Dto::Omistaja::LazyLoadedDtoOfRiskitietoStatus.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @riskitietoStatus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @riskitietoStatus.push Fi::Mediconsult::Core::Client::Dto::Omistaja::LazyLoadedDtoOfRiskitietoStatus.from_json(_item)
                 else
                   @riskitietoStatus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @riskitietoStatus = _oa
            end
          end
        if !_o['domainId'].nil?
          _oa = _o['domainId']
            if(_oa.is_a? Hash)
              @domainId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @domainId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @domainId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @domainId.push String.from_json(_item)
                 else
                   @domainId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @domainId = _oa
            end
          end
        if !_o['wardCareStatus'].nil?
          _oa = _o['wardCareStatus']
            if(_oa.is_a? Hash)
              @wardCareStatus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @wardCareStatus =  Fi::Mediconsult::Core::Client::Dto::Omistaja::LazyLoadedDtoOfWardCareStatus.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @wardCareStatus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @wardCareStatus.push Fi::Mediconsult::Core::Client::Dto::Omistaja::LazyLoadedDtoOfWardCareStatus.from_json(_item)
                 else
                   @wardCareStatus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @wardCareStatus = _oa
            end
          end
        if !_o['omistajaDescriptionForSearch'].nil?
          _oa = _o['omistajaDescriptionForSearch']
            if(_oa.is_a? Hash)
              @omistajaDescriptionForSearch = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @omistajaDescriptionForSearch =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @omistajaDescriptionForSearch = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @omistajaDescriptionForSearch.push String.from_json(_item)
                 else
                   @omistajaDescriptionForSearch.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @omistajaDescriptionForSearch = _oa
            end
          end
        if !_o['hoitojakso'].nil?
          _oa = _o['hoitojakso']
            if(_oa.is_a? Hash)
              @hoitojakso = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @hoitojakso =  Fi::Mediconsult::Core::Client::Dto::Omistaja::LazyLoadedDtoOfHoitojakso.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @hoitojakso = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @hoitojakso.push Fi::Mediconsult::Core::Client::Dto::Omistaja::LazyLoadedDtoOfHoitojakso.from_json(_item)
                 else
                   @hoitojakso.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @hoitojakso = _oa
            end
          end
        if !_o['firstName'].nil?
          _oa = _o['firstName']
            if(_oa.is_a? Hash)
              @firstName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @firstName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @firstName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @firstName.push String.from_json(_item)
                 else
                   @firstName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @firstName = _oa
            end
          end
        if !_o['birthDate'].nil?
          _oa = _o['birthDate']
            if(_oa.is_a? Hash)
              @birthDate = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @birthDate =  java.time::LocalDate.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @birthDate = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @birthDate.push java.time::LocalDate.from_json(_item)
                 else
                   @birthDate.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @birthDate = _oa
            end
          end
        if !_o['age'].nil?
          _oa = _o['age']
            if(_oa.is_a? Hash)
              @age = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @age =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @age = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @age.push Fixnum.from_json(_item)
                 else
                   @age.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @age = _oa
            end
          end
        if !_o['register'].nil?
          _oa = _o['register']
            if(_oa.is_a? Hash)
              @register = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @register =  Fi::Mediconsult::Core::Client::Dto::Rekisteri.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @register = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @register.push Fi::Mediconsult::Core::Client::Dto::Rekisteri.from_json(_item)
                 else
                   @register.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @register = _oa
            end
          end
        if !_o['basicInfo'].nil?
          _oa = _o['basicInfo']
            if(_oa.is_a? Hash)
              @basicInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @basicInfo =  Fi::Mediconsult::Core::Client::Dto::Omistaja::BasicInfo.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @basicInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @basicInfo.push Fi::Mediconsult::Core::Client::Dto::Omistaja::BasicInfo.from_json(_item)
                 else
                   @basicInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @basicInfo = _oa
            end
          end
        if !_o['gender'].nil?
          _oa = _o['gender']
            if(_oa.is_a? Hash)
              @gender = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @gender =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @gender = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @gender.push String.from_json(_item)
                 else
                   @gender.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @gender = _oa
            end
          end
        if !_o['passivatedDate'].nil?
          _oa = _o['passivatedDate']
            if(_oa.is_a? Hash)
              @passivatedDate = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @passivatedDate =  java.time::LocalDate.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @passivatedDate = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @passivatedDate.push java.time::LocalDate.from_json(_item)
                 else
                   @passivatedDate.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @passivatedDate = _oa
            end
          end
        if !_o['temporaryssn'].nil?
          _oa = _o['temporaryssn']
            if(_oa.is_a? Hash)
              @temporaryssn = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @temporaryssn =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @temporaryssn = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @temporaryssn.push Boolean.from_json(_item)
                 else
                   @temporaryssn.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @temporaryssn = _oa
            end
          end
        if !_o['hoitosuhde'].nil?
          _oa = _o['hoitosuhde']
            if(_oa.is_a? Hash)
              @hoitosuhde = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @hoitosuhde =  Fi::Mediconsult::Core::Client::Dto::Omistaja::LazyLoadedDtoOfHoitosuhde.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @hoitosuhde = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @hoitosuhde.push Fi::Mediconsult::Core::Client::Dto::Omistaja::LazyLoadedDtoOfHoitosuhde.from_json(_item)
                 else
                   @hoitosuhde.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @hoitosuhde = _oa
            end
          end
        if !_o['realmId'].nil?
          _oa = _o['realmId']
            if(_oa.is_a? Hash)
              @realmId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @realmId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @realmId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @realmId.push String.from_json(_item)
                 else
                   @realmId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @realmId = _oa
            end
          end
        if !_o['ssn'].nil?
          _oa = _o['ssn']
            if(_oa.is_a? Hash)
              @ssn = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ssn =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ssn = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ssn.push String.from_json(_item)
                 else
                   @ssn.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ssn = _oa
            end
          end
        if !_o['passive'].nil?
          _oa = _o['passive']
            if(_oa.is_a? Hash)
              @passive = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @passive =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @passive = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @passive.push Boolean.from_json(_item)
                 else
                   @passive.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @passive = _oa
            end
          end
        if !_o['genderHL7Code'].nil?
          _oa = _o['genderHL7Code']
            if(_oa.is_a? Hash)
              @genderHL7Code = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @genderHL7Code =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @genderHL7Code = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @genderHL7Code.push String.from_json(_item)
                 else
                   @genderHL7Code.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @genderHL7Code = _oa
            end
          end
        if !_o['careRelationPreferenceList'].nil?
          _oa = _o['careRelationPreferenceList']
            if(_oa.is_a? Hash)
              @careRelationPreferenceList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @careRelationPreferenceList =  Fi::Mediconsult::Core::Client::Dto::Omistaja::LazyLoadedDtoOfPalvelutapahtumaList.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @careRelationPreferenceList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @careRelationPreferenceList.push Fi::Mediconsult::Core::Client::Dto::Omistaja::LazyLoadedDtoOfPalvelutapahtumaList.from_json(_item)
                 else
                   @careRelationPreferenceList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @careRelationPreferenceList = _oa
            end
          end
    end

    # constructs a Patient from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Omistaja

  # (no documentation provided)
  class UserList < Fi::Mediconsult::Core::Client::Dto::Omistaja::OmistajaList 

    # (no documentation provided)
    attr_accessor :users

    # the json hash for this UserList
    def to_jaxb_json_hash
      _h = super
      if !users.nil?
        _ha = Array.new
        users.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['users'] = _ha
      end
      return _h
    end

    #initializes this UserList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['users'].nil?
          _oa = _o['users']
            if(_oa.is_a? Hash)
              @users = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @users =  Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @users = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @users.push Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_item)
                 else
                   @users.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @users = _oa
            end
          end
    end

    # constructs a UserList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Medisos

module Dto

  # (no documentation provided)
  class AsiayhteysDto < Fi::Mediconsult::Medisos::Dto::MediSosDtoBase 

    # (no documentation provided)
    attr_accessor :asianumero
    # (no documentation provided)
    attr_accessor :alkamisaika
    # (no documentation provided)
    attr_accessor :paattymisaika
    # (no documentation provided)
    attr_accessor :ammattihenkilonumero
    # (no documentation provided)
    attr_accessor :palvelutehtavanAsiakkuusId

    # the json hash for this AsiayhteysDto
    def to_jaxb_json_hash
      _h = super
      _h['asianumero'] = asianumero.to_jaxb_json_hash unless asianumero.nil?
      _h['alkamisaika'] = alkamisaika.to_jaxb_json_hash unless alkamisaika.nil?
      _h['paattymisaika'] = paattymisaika.to_jaxb_json_hash unless paattymisaika.nil?
      _h['ammattihenkilonumero'] = ammattihenkilonumero.to_jaxb_json_hash unless ammattihenkilonumero.nil?
      _h['palvelutehtavanAsiakkuusId'] = palvelutehtavanAsiakkuusId.to_jaxb_json_hash unless palvelutehtavanAsiakkuusId.nil?
      return _h
    end

    #initializes this AsiayhteysDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['asianumero'].nil?
          _oa = _o['asianumero']
            if(_oa.is_a? Hash)
              @asianumero = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asianumero =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asianumero = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asianumero.push Bignum.from_json(_item)
                 else
                   @asianumero.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asianumero = _oa
            end
          end
        if !_o['alkamisaika'].nil?
          _oa = _o['alkamisaika']
            if(_oa.is_a? Hash)
              @alkamisaika = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @alkamisaika =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @alkamisaika = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @alkamisaika.push Time.from_json(_item)
                 else
                   @alkamisaika.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @alkamisaika = _oa
            end
          end
        if !_o['paattymisaika'].nil?
          _oa = _o['paattymisaika']
            if(_oa.is_a? Hash)
              @paattymisaika = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @paattymisaika =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @paattymisaika = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @paattymisaika.push Time.from_json(_item)
                 else
                   @paattymisaika.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @paattymisaika = _oa
            end
          end
        if !_o['ammattihenkilonumero'].nil?
          _oa = _o['ammattihenkilonumero']
            if(_oa.is_a? Hash)
              @ammattihenkilonumero = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ammattihenkilonumero =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ammattihenkilonumero = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ammattihenkilonumero.push Fixnum.from_json(_item)
                 else
                   @ammattihenkilonumero.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ammattihenkilonumero = _oa
            end
          end
        if !_o['palvelutehtavanAsiakkuusId'].nil?
          _oa = _o['palvelutehtavanAsiakkuusId']
            if(_oa.is_a? Hash)
              @palvelutehtavanAsiakkuusId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palvelutehtavanAsiakkuusId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palvelutehtavanAsiakkuusId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palvelutehtavanAsiakkuusId.push Bignum.from_json(_item)
                 else
                   @palvelutehtavanAsiakkuusId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palvelutehtavanAsiakkuusId = _oa
            end
          end
    end

    # constructs a AsiayhteysDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class Tapahtumalaji

    # (no documentation provided)
    JONO = "JONO"

    # (no documentation provided)
    PALVELUJEN_OSTO = "PALVELUJEN_OSTO"

    # (no documentation provided)
    KOTIHOITO = "KOTIHOITO"

    # (no documentation provided)
    PALVELUASUMINEN = "PALVELUASUMINEN"

    # (no documentation provided)
    LAHETE_JA_HOITOPALAUTE = "LAHETE_JA_HOITOPALAUTE"

    # (no documentation provided)
    YHTEYDENOTTO_HOIDON_TARPEEN_ARVIOIMISEKSI = "YHTEYDENOTTO_HOIDON_TARPEEN_ARVIOIMISEKSI"

    # (no documentation provided)
    LAAKEMAARAYKSEN_UUDISTAMISPYYNTO = "LAAKEMAARAYKSEN_UUDISTAMISPYYNTO"

    # (no documentation provided)
    ERITYINEN_SYY = "ERITYINEN_SYY"

    # (no documentation provided)
    AJANVARAUS = "AJANVARAUS"

    # (no documentation provided)
    AVOHOITO = "AVOHOITO"

    # (no documentation provided)
    OSASTOHOITO = "OSASTOHOITO"

    # (no documentation provided)
    KONSULTAATIO = "KONSULTAATIO"

    # (no documentation provided)
    TOIMENPIDE = "TOIMENPIDE"

    # (no documentation provided)
    ANESTESIA = "ANESTESIA"

    # (no documentation provided)
    LABORATORIO = "LABORATORIO"

    # (no documentation provided)
    RADIOLOGIA = "RADIOLOGIA"
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Title

module Diagnose

  # (no documentation provided)
  class DiagnoseTitleConfig < Fi::Mediconsult::Core::Client::Dto::Title::Config::ClientTitleConfig 

    # (no documentation provided)
    attr_accessor :canBeNegated
    # (no documentation provided)
    attr_accessor :canBeEnded
    # (no documentation provided)
    attr_accessor :reference
    # the priority
    attr_accessor :priority
    # the permanency
    attr_accessor :permanency
    # the certainty
    attr_accessor :certainty
    # the diagnoseType
    attr_accessor :diagnoseType
    # the priorities
    attr_accessor :priorities
    # (no documentation provided)
    attr_accessor :permanencies
    # (no documentation provided)
    attr_accessor :certainties
    # (no documentation provided)
    attr_accessor :sources
    # (no documentation provided)
    attr_accessor :cancelations

    # the json hash for this DiagnoseTitleConfig
    def to_jaxb_json_hash
      _h = super
      _h['canBeNegated'] = canBeNegated.to_jaxb_json_hash unless canBeNegated.nil?
      _h['canBeEnded'] = canBeEnded.to_jaxb_json_hash unless canBeEnded.nil?
      _h['reference'] = reference.to_jaxb_json_hash unless reference.nil?
      _h['priority'] = priority.to_jaxb_json_hash unless priority.nil?
      _h['permanency'] = permanency.to_jaxb_json_hash unless permanency.nil?
      _h['certainty'] = certainty.to_jaxb_json_hash unless certainty.nil?
      _h['diagnoseType'] = diagnoseType.to_jaxb_json_hash unless diagnoseType.nil?
      if !priorities.nil?
        _ha = Array.new
        priorities.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['priorities'] = _ha
      end
      if !permanencies.nil?
        _ha = Array.new
        permanencies.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['permanencies'] = _ha
      end
      if !certainties.nil?
        _ha = Array.new
        certainties.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['certainties'] = _ha
      end
      if !sources.nil?
        _ha = Array.new
        sources.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['sources'] = _ha
      end
      if !cancelations.nil?
        _ha = Array.new
        cancelations.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['cancelations'] = _ha
      end
      return _h
    end

    #initializes this DiagnoseTitleConfig with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['canBeNegated'].nil?
          _oa = _o['canBeNegated']
            if(_oa.is_a? Hash)
              @canBeNegated = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @canBeNegated =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @canBeNegated = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @canBeNegated.push Boolean.from_json(_item)
                 else
                   @canBeNegated.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @canBeNegated = _oa
            end
          end
        if !_o['canBeEnded'].nil?
          _oa = _o['canBeEnded']
            if(_oa.is_a? Hash)
              @canBeEnded = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @canBeEnded =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @canBeEnded = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @canBeEnded.push Boolean.from_json(_item)
                 else
                   @canBeEnded.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @canBeEnded = _oa
            end
          end
        if !_o['reference'].nil?
          _oa = _o['reference']
            if(_oa.is_a? Hash)
              @reference = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @reference =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @reference = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @reference.push Boolean.from_json(_item)
                 else
                   @reference.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @reference = _oa
            end
          end
        if !_o['priority'].nil?
          _oa = _o['priority']
            if(_oa.is_a? Hash)
              @priority = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @priority =  Fi::Mediconsult::Core::Client::Dto::Title::Diagnose::DiagnoseProperty.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @priority = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @priority.push Fi::Mediconsult::Core::Client::Dto::Title::Diagnose::DiagnoseProperty.from_json(_item)
                 else
                   @priority.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @priority = _oa
            end
          end
        if !_o['permanency'].nil?
          _oa = _o['permanency']
            if(_oa.is_a? Hash)
              @permanency = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @permanency =  Fi::Mediconsult::Core::Client::Dto::Title::Diagnose::DiagnoseProperty.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @permanency = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @permanency.push Fi::Mediconsult::Core::Client::Dto::Title::Diagnose::DiagnoseProperty.from_json(_item)
                 else
                   @permanency.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @permanency = _oa
            end
          end
        if !_o['certainty'].nil?
          _oa = _o['certainty']
            if(_oa.is_a? Hash)
              @certainty = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @certainty =  Fi::Mediconsult::Core::Client::Dto::Title::Diagnose::DiagnoseProperty.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @certainty = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @certainty.push Fi::Mediconsult::Core::Client::Dto::Title::Diagnose::DiagnoseProperty.from_json(_item)
                 else
                   @certainty.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @certainty = _oa
            end
          end
        if !_o['diagnoseType'].nil?
          _oa = _o['diagnoseType']
            if(_oa.is_a? Hash)
              @diagnoseType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @diagnoseType =  Fi::Mediconsult::Core::Client::Dto::Title::Diagnose::DiagnoseProperty.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @diagnoseType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @diagnoseType.push Fi::Mediconsult::Core::Client::Dto::Title::Diagnose::DiagnoseProperty.from_json(_item)
                 else
                   @diagnoseType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @diagnoseType = _oa
            end
          end
        if !_o['priorities'].nil?
          _oa = _o['priorities']
            if(_oa.is_a? Hash)
              @priorities = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @priorities =  Fi::Mediconsult::Core::Client::Dto::Title::Diagnose::DiagnoseProperty.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @priorities = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @priorities.push Fi::Mediconsult::Core::Client::Dto::Title::Diagnose::DiagnoseProperty.from_json(_item)
                 else
                   @priorities.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @priorities = _oa
            end
          end
        if !_o['permanencies'].nil?
          _oa = _o['permanencies']
            if(_oa.is_a? Hash)
              @permanencies = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @permanencies =  Fi::Mediconsult::Core::Client::Dto::Title::Diagnose::DiagnoseProperty.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @permanencies = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @permanencies.push Fi::Mediconsult::Core::Client::Dto::Title::Diagnose::DiagnoseProperty.from_json(_item)
                 else
                   @permanencies.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @permanencies = _oa
            end
          end
        if !_o['certainties'].nil?
          _oa = _o['certainties']
            if(_oa.is_a? Hash)
              @certainties = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @certainties =  Fi::Mediconsult::Core::Client::Dto::Title::Diagnose::DiagnoseProperty.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @certainties = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @certainties.push Fi::Mediconsult::Core::Client::Dto::Title::Diagnose::DiagnoseProperty.from_json(_item)
                 else
                   @certainties.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @certainties = _oa
            end
          end
        if !_o['sources'].nil?
          _oa = _o['sources']
            if(_oa.is_a? Hash)
              @sources = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @sources =  Fi::Mediconsult::Core::Client::Dto::Title::Diagnose::DiagnoseProperty.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @sources = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @sources.push Fi::Mediconsult::Core::Client::Dto::Title::Diagnose::DiagnoseProperty.from_json(_item)
                 else
                   @sources.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @sources = _oa
            end
          end
        if !_o['cancelations'].nil?
          _oa = _o['cancelations']
            if(_oa.is_a? Hash)
              @cancelations = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @cancelations =  Fi::Mediconsult::Core::Client::Dto::Title::Diagnose::DiagnoseProperty.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @cancelations = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @cancelations.push Fi::Mediconsult::Core::Client::Dto::Title::Diagnose::DiagnoseProperty.from_json(_item)
                 else
                   @cancelations.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @cancelations = _oa
            end
          end
    end

    # constructs a DiagnoseTitleConfig from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Planner

  # (no documentation provided)
  class RoutingVsClustering

    # (no documentation provided)
    EMPHASIZE_ROUTING = "EMPHASIZE_ROUTING"

    # (no documentation provided)
    EMPHASIZE_CLUSTERING = "EMPHASIZE_CLUSTERING"
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class Rekisteritunnus

    # (no documentation provided)
    JULKINEN_TERVEYDENHUOLTO = "JULKINEN_TERVEYDENHUOLTO"

    # (no documentation provided)
    YKSITYINEN_TERVEYDENHUOLTO = "YKSITYINEN_TERVEYDENHUOLTO"

    # (no documentation provided)
    TYOTERVEYSHUOLTO = "TYOTERVEYSHUOLTO"

    # (no documentation provided)
    AMMATINHARJOITTAJAT = "AMMATINHARJOITTAJAT"
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Kanta

  # (no documentation provided)
  class LivingWillStatus

    # (no documentation provided)
    KUMOAN_HOITOTAHTONI = "KUMOAN_HOITOTAHTONI"

    # (no documentation provided)
    MAARAAN_HOITOTAHTONANI = "MAARAAN_HOITOTAHTONANI"

    # (no documentation provided)
    NO_WILL = "NO_WILL"

    # (no documentation provided)
    ERROR = "ERROR"
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Omistaja

  # (no documentation provided)
  class Unit < Fi::Mediconsult::Core::Client::Dto::Omistaja::GenericOmistaja 

    # the abbreviation
    attr_accessor :abbreviation
    # (no documentation provided)
    attr_accessor :omistajaListDescription
    # (no documentation provided)
    attr_accessor :basicInfo

    # the json hash for this Unit
    def to_jaxb_json_hash
      _h = super
      _h['abbreviation'] = abbreviation.to_jaxb_json_hash unless abbreviation.nil?
      _h['omistajaListDescription'] = omistajaListDescription.to_jaxb_json_hash unless omistajaListDescription.nil?
      _h['basicInfo'] = basicInfo.to_jaxb_json_hash unless basicInfo.nil?
      return _h
    end

    #initializes this Unit with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['abbreviation'].nil?
          _oa = _o['abbreviation']
            if(_oa.is_a? Hash)
              @abbreviation = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @abbreviation =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @abbreviation = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @abbreviation.push String.from_json(_item)
                 else
                   @abbreviation.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @abbreviation = _oa
            end
          end
        if !_o['omistajaListDescription'].nil?
          _oa = _o['omistajaListDescription']
            if(_oa.is_a? Hash)
              @omistajaListDescription = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @omistajaListDescription =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @omistajaListDescription = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @omistajaListDescription.push String.from_json(_item)
                 else
                   @omistajaListDescription.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @omistajaListDescription = _oa
            end
          end
        if !_o['basicInfo'].nil?
          _oa = _o['basicInfo']
            if(_oa.is_a? Hash)
              @basicInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @basicInfo =  Fi::Mediconsult::Core::Client::Dto::Omistaja::LazyLoadedDtoOfBasicInfo.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @basicInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @basicInfo.push Fi::Mediconsult::Core::Client::Dto::Omistaja::LazyLoadedDtoOfBasicInfo.from_json(_item)
                 else
                   @basicInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @basicInfo = _oa
            end
          end
    end

    # constructs a Unit from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Eventmodel

  # (no documentation provided)
  class EventModelSkillDto < Fi::Mediconsult::Mediplan::Dto::KuhaDtoBase 

    # (no documentation provided)
    attr_accessor :role
    # (no documentation provided)
    attr_accessor :eventModelSkillId
    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :changeable

    # the json hash for this EventModelSkillDto
    def to_jaxb_json_hash
      _h = super
      _h['role'] = role.to_jaxb_json_hash unless role.nil?
      _h['eventModelSkillId'] = eventModelSkillId.to_jaxb_json_hash unless eventModelSkillId.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['changeable'] = changeable.to_jaxb_json_hash unless changeable.nil?
      return _h
    end

    #initializes this EventModelSkillDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['role'].nil?
          _oa = _o['role']
            if(_oa.is_a? Hash)
              @role = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @role =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @role = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @role.push String.from_json(_item)
                 else
                   @role.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @role = _oa
            end
          end
        if !_o['eventModelSkillId'].nil?
          _oa = _o['eventModelSkillId']
            if(_oa.is_a? Hash)
              @eventModelSkillId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @eventModelSkillId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @eventModelSkillId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @eventModelSkillId.push Bignum.from_json(_item)
                 else
                   @eventModelSkillId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @eventModelSkillId = _oa
            end
          end
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['changeable'].nil?
          _oa = _o['changeable']
            if(_oa.is_a? Hash)
              @changeable = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @changeable =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @changeable = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @changeable.push Boolean.from_json(_item)
                 else
                   @changeable.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @changeable = _oa
            end
          end
    end

    # constructs a EventModelSkillDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class RiskEndReason

    # (no documentation provided)
    PARANTUNUT = "PARANTUNUT"

    # (no documentation provided)
    TARKENTUNUT = "TARKENTUNUT"

    # (no documentation provided)
    KIRJAUSVIRHE = "KIRJAUSVIRHE"

    # (no documentation provided)
    OTHER = "OTHER"

    # (no documentation provided)
    MAARAAIKAINEN = "MAARAAIKAINEN"
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Kertomus

  # (no documentation provided)
  class KertomuksetView < Fi::Mediconsult::Core::Client::Dto::BaseModel 

    # (no documentation provided)
    attr_accessor :entries
    # (no documentation provided)
    attr_accessor :updated
    # (no documentation provided)
    attr_accessor :currentPage
    # (no documentation provided)
    attr_accessor :prevUrl
    # (no documentation provided)
    attr_accessor :nextUrl
    # (no documentation provided)
    attr_accessor :maxSize
    # (no documentation provided)
    attr_accessor :pageSize
    # (no documentation provided)
    attr_accessor :protections

    # the json hash for this KertomuksetView
    def to_jaxb_json_hash
      _h = super
      if !entries.nil?
        _ha = Array.new
        entries.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['entries'] = _ha
      end
      _h['updated'] = updated.to_jaxb_json_hash unless updated.nil?
      _h['currentPage'] = currentPage.to_jaxb_json_hash unless currentPage.nil?
      _h['prevUrl'] = prevUrl.to_jaxb_json_hash unless prevUrl.nil?
      _h['nextUrl'] = nextUrl.to_jaxb_json_hash unless nextUrl.nil?
      _h['maxSize'] = maxSize.to_jaxb_json_hash unless maxSize.nil?
      _h['pageSize'] = pageSize.to_jaxb_json_hash unless pageSize.nil?
      if !protections.nil?
        _ha = Array.new
        protections.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['protections'] = _ha
      end
      return _h
    end

    #initializes this KertomuksetView with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['entries'].nil?
          _oa = _o['entries']
            if(_oa.is_a? Hash)
              @entries = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @entries =  Fi::Mediconsult::Core::Client::Dto::Kertomus::KertomusEntryView.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @entries = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @entries.push Fi::Mediconsult::Core::Client::Dto::Kertomus::KertomusEntryView.from_json(_item)
                 else
                   @entries.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @entries = _oa
            end
          end
        if !_o['updated'].nil?
          _oa = _o['updated']
            if(_oa.is_a? Hash)
              @updated = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @updated =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @updated = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @updated.push Boolean.from_json(_item)
                 else
                   @updated.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @updated = _oa
            end
          end
        if !_o['currentPage'].nil?
          _oa = _o['currentPage']
            if(_oa.is_a? Hash)
              @currentPage = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @currentPage =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @currentPage = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @currentPage.push Fixnum.from_json(_item)
                 else
                   @currentPage.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @currentPage = _oa
            end
          end
        if !_o['prevUrl'].nil?
          _oa = _o['prevUrl']
            if(_oa.is_a? Hash)
              @prevUrl = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @prevUrl =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @prevUrl = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @prevUrl.push String.from_json(_item)
                 else
                   @prevUrl.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @prevUrl = _oa
            end
          end
        if !_o['nextUrl'].nil?
          _oa = _o['nextUrl']
            if(_oa.is_a? Hash)
              @nextUrl = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @nextUrl =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @nextUrl = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @nextUrl.push String.from_json(_item)
                 else
                   @nextUrl.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @nextUrl = _oa
            end
          end
        if !_o['maxSize'].nil?
          _oa = _o['maxSize']
            if(_oa.is_a? Hash)
              @maxSize = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @maxSize =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @maxSize = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @maxSize.push Fixnum.from_json(_item)
                 else
                   @maxSize.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @maxSize = _oa
            end
          end
        if !_o['pageSize'].nil?
          _oa = _o['pageSize']
            if(_oa.is_a? Hash)
              @pageSize = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @pageSize =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @pageSize = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @pageSize.push Fixnum.from_json(_item)
                 else
                   @pageSize.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @pageSize = _oa
            end
          end
        if !_o['protections'].nil?
          _oa = _o['protections']
            if(_oa.is_a? Hash)
              @protections = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @protections =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @protections = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @protections.push String.from_json(_item)
                 else
                   @protections.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @protections = _oa
            end
          end
    end

    # constructs a KertomuksetView from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Title

module Data

  # (no documentation provided)
  class RiskSource

    # (no documentation provided)
    TEXT = "TEXT"

    # (no documentation provided)
    DIAGNOSE = "DIAGNOSE"

    # (no documentation provided)
    PROCEDURE = "PROCEDURE"
  end

end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Paatoksentuki

  # (no documentation provided)
  class Drug < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # (no documentation provided)
    attr_accessor :drugCode
    # (no documentation provided)
    attr_accessor :drugName
    # (no documentation provided)
    attr_accessor :activeIngredientName
    # (no documentation provided)
    attr_accessor :riskLevel

    # the json hash for this Drug
    def to_jaxb_json_hash
      _h = super
      _h['drugCode'] = drugCode.to_jaxb_json_hash unless drugCode.nil?
      _h['drugName'] = drugName.to_jaxb_json_hash unless drugName.nil?
      _h['activeIngredientName'] = activeIngredientName.to_jaxb_json_hash unless activeIngredientName.nil?
      _h['riskLevel'] = riskLevel.to_jaxb_json_hash unless riskLevel.nil?
      return _h
    end

    #initializes this Drug with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['drugCode'].nil?
          _oa = _o['drugCode']
            if(_oa.is_a? Hash)
              @drugCode = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @drugCode =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @drugCode = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @drugCode.push String.from_json(_item)
                 else
                   @drugCode.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @drugCode = _oa
            end
          end
        if !_o['drugName'].nil?
          _oa = _o['drugName']
            if(_oa.is_a? Hash)
              @drugName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @drugName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @drugName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @drugName.push String.from_json(_item)
                 else
                   @drugName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @drugName = _oa
            end
          end
        if !_o['activeIngredientName'].nil?
          _oa = _o['activeIngredientName']
            if(_oa.is_a? Hash)
              @activeIngredientName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @activeIngredientName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @activeIngredientName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @activeIngredientName.push String.from_json(_item)
                 else
                   @activeIngredientName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @activeIngredientName = _oa
            end
          end
        if !_o['riskLevel'].nil?
          _oa = _o['riskLevel']
            if(_oa.is_a? Hash)
              @riskLevel = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @riskLevel =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @riskLevel = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @riskLevel.push Fixnum.from_json(_item)
                 else
                   @riskLevel.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @riskLevel = _oa
            end
          end
    end

    # constructs a Drug from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Medisos

module Dto

  # (no documentation provided)
  class SosiaalihuollonAsiakkuusKyselyDto < Fi::Mediconsult::Medisos::Dto::MediSosDtoBase 

    # (no documentation provided)
    attr_accessor :pageSize
    # (no documentation provided)
    attr_accessor :pageIndex
    # (no documentation provided)
    attr_accessor :grouping
    # (no documentation provided)
    attr_accessor :asiakasnumeroList
    # (no documentation provided)
    attr_accessor :asiakasnimiList
    # (no documentation provided)
    attr_accessor :omatyontekijanumeroList
    # (no documentation provided)
    attr_accessor :omatyontekijanimiList
    # (no documentation provided)
    attr_accessor :yksiloAsiakkuus
    # (no documentation provided)
    attr_accessor :formId

    # the json hash for this SosiaalihuollonAsiakkuusKyselyDto
    def to_jaxb_json_hash
      _h = super
      _h['pageSize'] = pageSize.to_jaxb_json_hash unless pageSize.nil?
      _h['pageIndex'] = pageIndex.to_jaxb_json_hash unless pageIndex.nil?
      _h['grouping'] = grouping.to_jaxb_json_hash unless grouping.nil?
      if !asiakasnumeroList.nil?
        _ha = Array.new
        asiakasnumeroList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['asiakasnumeroList'] = _ha
      end
      if !asiakasnimiList.nil?
        _ha = Array.new
        asiakasnimiList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['asiakasnimiList'] = _ha
      end
      if !omatyontekijanumeroList.nil?
        _ha = Array.new
        omatyontekijanumeroList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['omatyontekijanumeroList'] = _ha
      end
      if !omatyontekijanimiList.nil?
        _ha = Array.new
        omatyontekijanimiList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['omatyontekijanimiList'] = _ha
      end
      _h['yksiloAsiakkuus'] = yksiloAsiakkuus.to_jaxb_json_hash unless yksiloAsiakkuus.nil?
      _h['formId'] = formId.to_jaxb_json_hash unless formId.nil?
      return _h
    end

    #initializes this SosiaalihuollonAsiakkuusKyselyDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['pageSize'].nil?
          _oa = _o['pageSize']
            if(_oa.is_a? Hash)
              @pageSize = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @pageSize =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @pageSize = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @pageSize.push Fixnum.from_json(_item)
                 else
                   @pageSize.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @pageSize = _oa
            end
          end
        if !_o['pageIndex'].nil?
          _oa = _o['pageIndex']
            if(_oa.is_a? Hash)
              @pageIndex = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @pageIndex =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @pageIndex = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @pageIndex.push Fixnum.from_json(_item)
                 else
                   @pageIndex.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @pageIndex = _oa
            end
          end
        if !_o['grouping'].nil?
          _oa = _o['grouping']
            if(_oa.is_a? Hash)
              @grouping = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @grouping =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @grouping = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @grouping.push String.from_json(_item)
                 else
                   @grouping.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @grouping = _oa
            end
          end
        if !_o['asiakasnumeroList'].nil?
          _oa = _o['asiakasnumeroList']
            if(_oa.is_a? Hash)
              @asiakasnumeroList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakasnumeroList =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakasnumeroList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakasnumeroList.push Fixnum.from_json(_item)
                 else
                   @asiakasnumeroList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakasnumeroList = _oa
            end
          end
        if !_o['asiakasnimiList'].nil?
          _oa = _o['asiakasnimiList']
            if(_oa.is_a? Hash)
              @asiakasnimiList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakasnimiList =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakasnimiList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakasnimiList.push String.from_json(_item)
                 else
                   @asiakasnimiList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakasnimiList = _oa
            end
          end
        if !_o['omatyontekijanumeroList'].nil?
          _oa = _o['omatyontekijanumeroList']
            if(_oa.is_a? Hash)
              @omatyontekijanumeroList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @omatyontekijanumeroList =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @omatyontekijanumeroList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @omatyontekijanumeroList.push Fixnum.from_json(_item)
                 else
                   @omatyontekijanumeroList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @omatyontekijanumeroList = _oa
            end
          end
        if !_o['omatyontekijanimiList'].nil?
          _oa = _o['omatyontekijanimiList']
            if(_oa.is_a? Hash)
              @omatyontekijanimiList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @omatyontekijanimiList =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @omatyontekijanimiList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @omatyontekijanimiList.push String.from_json(_item)
                 else
                   @omatyontekijanimiList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @omatyontekijanimiList = _oa
            end
          end
        if !_o['yksiloAsiakkuus'].nil?
          _oa = _o['yksiloAsiakkuus']
            if(_oa.is_a? Hash)
              @yksiloAsiakkuus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @yksiloAsiakkuus =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @yksiloAsiakkuus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @yksiloAsiakkuus.push Boolean.from_json(_item)
                 else
                   @yksiloAsiakkuus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @yksiloAsiakkuus = _oa
            end
          end
        if !_o['formId'].nil?
          _oa = _o['formId']
            if(_oa.is_a? Hash)
              @formId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @formId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @formId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @formId.push Fixnum.from_json(_item)
                 else
                   @formId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @formId = _oa
            end
          end
    end

    # constructs a SosiaalihuollonAsiakkuusKyselyDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class RiskLevel

    # (no documentation provided)
    CRITICAL = "CRITICAL"

    # (no documentation provided)
    AFFECT_TREATMENT = "AFFECT_TREATMENT"
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Laakitys

  # (no documentation provided)
  class LaakeAtc < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # (no documentation provided)
    attr_accessor :atc
    # (no documentation provided)
    attr_accessor :alkupera
    # (no documentation provided)
    attr_accessor :atcCategory
    # (no documentation provided)
    attr_accessor :atcCategoryString

    # the json hash for this LaakeAtc
    def to_jaxb_json_hash
      _h = super
      _h['atc'] = atc.to_jaxb_json_hash unless atc.nil?
      _h['alkupera'] = alkupera.to_jaxb_json_hash unless alkupera.nil?
      _h['atcCategory'] = atcCategory.to_jaxb_json_hash unless atcCategory.nil?
      _h['atcCategoryString'] = atcCategoryString.to_jaxb_json_hash unless atcCategoryString.nil?
      return _h
    end

    #initializes this LaakeAtc with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['atc'].nil?
          _oa = _o['atc']
            if(_oa.is_a? Hash)
              @atc = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @atc =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @atc = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @atc.push String.from_json(_item)
                 else
                   @atc.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @atc = _oa
            end
          end
        if !_o['alkupera'].nil?
          _oa = _o['alkupera']
            if(_oa.is_a? Hash)
              @alkupera = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @alkupera =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @alkupera = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @alkupera.push Fixnum.from_json(_item)
                 else
                   @alkupera.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @alkupera = _oa
            end
          end
        if !_o['atcCategory'].nil?
          _oa = _o['atcCategory']
            if(_oa.is_a? Hash)
              @atcCategory = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @atcCategory =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @atcCategory = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @atcCategory.push String.from_json(_item)
                 else
                   @atcCategory.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @atcCategory = _oa
            end
          end
        if !_o['atcCategoryString'].nil?
          _oa = _o['atcCategoryString']
            if(_oa.is_a? Hash)
              @atcCategoryString = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @atcCategoryString =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @atcCategoryString = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @atcCategoryString.push String.from_json(_item)
                 else
                   @atcCategoryString.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @atcCategoryString = _oa
            end
          end
    end

    # constructs a LaakeAtc from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Medisos

module Dto

  # (no documentation provided)
  class DocumentDto < Fi::Mediconsult::Medisos::Dto::MediSosDtoBase 

    # (no documentation provided)
    attr_accessor :versionumero
    # (no documentation provided)
    attr_accessor :lukittu
    # (no documentation provided)
    attr_accessor :lukitsijaID
    # (no documentation provided)
    attr_accessor :lukitsijaInfo
    # (no documentation provided)
    attr_accessor :lukituksenVapautusaika
    # (no documentation provided)
    attr_accessor :templaattiId
    # (no documentation provided)
    attr_accessor :templaattiVersionumero
    # (no documentation provided)
    attr_accessor :luoja
    # (no documentation provided)
    attr_accessor :luojaInfo
    # (no documentation provided)
    attr_accessor :muuttaja
    # (no documentation provided)
    attr_accessor :muuttajaInfo
    # (no documentation provided)
    attr_accessor :nimi
    # (no documentation provided)
    attr_accessor :tyyppi
    # (no documentation provided)
    attr_accessor :tila
    # (no documentation provided)
    attr_accessor :toimiala
    # (no documentation provided)
    attr_accessor :yksikko
    # (no documentation provided)
    attr_accessor :yksikkoInfo
    # (no documentation provided)
    attr_accessor :data
    # (no documentation provided)
    attr_accessor :metadata
    # (no documentation provided)
    attr_accessor :templaatti
    # (no documentation provided)
    attr_accessor :asiakas
    # (no documentation provided)
    attr_accessor :asiakasInfo
    # (no documentation provided)
    attr_accessor :suostumusTieto
    # (no documentation provided)
    attr_accessor :allekirjoitus
    # (no documentation provided)
    attr_accessor :formId

    # the json hash for this DocumentDto
    def to_jaxb_json_hash
      _h = super
      _h['versionumero'] = versionumero.to_jaxb_json_hash unless versionumero.nil?
      _h['lukittu'] = lukittu.to_jaxb_json_hash unless lukittu.nil?
      _h['lukitsijaID'] = lukitsijaID.to_jaxb_json_hash unless lukitsijaID.nil?
      _h['lukitsijaInfo'] = lukitsijaInfo.to_jaxb_json_hash unless lukitsijaInfo.nil?
      _h['lukituksenVapautusaika'] = lukituksenVapautusaika.to_jaxb_json_hash unless lukituksenVapautusaika.nil?
      _h['templaattiId'] = templaattiId.to_jaxb_json_hash unless templaattiId.nil?
      _h['templaattiVersionumero'] = templaattiVersionumero.to_jaxb_json_hash unless templaattiVersionumero.nil?
      _h['luoja'] = luoja.to_jaxb_json_hash unless luoja.nil?
      _h['luojaInfo'] = luojaInfo.to_jaxb_json_hash unless luojaInfo.nil?
      _h['muuttaja'] = muuttaja.to_jaxb_json_hash unless muuttaja.nil?
      _h['muuttajaInfo'] = muuttajaInfo.to_jaxb_json_hash unless muuttajaInfo.nil?
      _h['nimi'] = nimi.to_jaxb_json_hash unless nimi.nil?
      _h['tyyppi'] = tyyppi.to_jaxb_json_hash unless tyyppi.nil?
      _h['tila'] = tila.to_jaxb_json_hash unless tila.nil?
      _h['toimiala'] = toimiala.to_jaxb_json_hash unless toimiala.nil?
      _h['yksikko'] = yksikko.to_jaxb_json_hash unless yksikko.nil?
      _h['yksikkoInfo'] = yksikkoInfo.to_jaxb_json_hash unless yksikkoInfo.nil?
      _h['data'] = data.to_jaxb_json_hash unless data.nil?
      _h['metadata'] = metadata.to_jaxb_json_hash unless metadata.nil?
      _h['templaatti'] = templaatti.to_jaxb_json_hash unless templaatti.nil?
      _h['asiakas'] = asiakas.to_jaxb_json_hash unless asiakas.nil?
      _h['asiakasInfo'] = asiakasInfo.to_jaxb_json_hash unless asiakasInfo.nil?
      _h['suostumusTieto'] = suostumusTieto.to_jaxb_json_hash unless suostumusTieto.nil?
      if !allekirjoitus.nil?
        _ha = Array.new
        allekirjoitus.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['allekirjoitus'] = _ha
      end
      _h['formId'] = formId.to_jaxb_json_hash unless formId.nil?
      return _h
    end

    #initializes this DocumentDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['versionumero'].nil?
          _oa = _o['versionumero']
            if(_oa.is_a? Hash)
              @versionumero = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @versionumero =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @versionumero = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @versionumero.push Fixnum.from_json(_item)
                 else
                   @versionumero.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @versionumero = _oa
            end
          end
        if !_o['lukittu'].nil?
          _oa = _o['lukittu']
            if(_oa.is_a? Hash)
              @lukittu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lukittu =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lukittu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lukittu.push Boolean.from_json(_item)
                 else
                   @lukittu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lukittu = _oa
            end
          end
        if !_o['lukitsijaID'].nil?
          _oa = _o['lukitsijaID']
            if(_oa.is_a? Hash)
              @lukitsijaID = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lukitsijaID =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lukitsijaID = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lukitsijaID.push Fixnum.from_json(_item)
                 else
                   @lukitsijaID.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lukitsijaID = _oa
            end
          end
        if !_o['lukitsijaInfo'].nil?
          _oa = _o['lukitsijaInfo']
            if(_oa.is_a? Hash)
              @lukitsijaInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lukitsijaInfo =  Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lukitsijaInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lukitsijaInfo.push Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_item)
                 else
                   @lukitsijaInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lukitsijaInfo = _oa
            end
          end
        if !_o['lukituksenVapautusaika'].nil?
          _oa = _o['lukituksenVapautusaika']
            if(_oa.is_a? Hash)
              @lukituksenVapautusaika = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lukituksenVapautusaika =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lukituksenVapautusaika = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lukituksenVapautusaika.push Time.from_json(_item)
                 else
                   @lukituksenVapautusaika.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lukituksenVapautusaika = _oa
            end
          end
        if !_o['templaattiId'].nil?
          _oa = _o['templaattiId']
            if(_oa.is_a? Hash)
              @templaattiId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @templaattiId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @templaattiId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @templaattiId.push Bignum.from_json(_item)
                 else
                   @templaattiId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @templaattiId = _oa
            end
          end
        if !_o['templaattiVersionumero'].nil?
          _oa = _o['templaattiVersionumero']
            if(_oa.is_a? Hash)
              @templaattiVersionumero = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @templaattiVersionumero =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @templaattiVersionumero = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @templaattiVersionumero.push Fixnum.from_json(_item)
                 else
                   @templaattiVersionumero.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @templaattiVersionumero = _oa
            end
          end
        if !_o['luoja'].nil?
          _oa = _o['luoja']
            if(_oa.is_a? Hash)
              @luoja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @luoja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @luoja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @luoja.push Fixnum.from_json(_item)
                 else
                   @luoja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @luoja = _oa
            end
          end
        if !_o['luojaInfo'].nil?
          _oa = _o['luojaInfo']
            if(_oa.is_a? Hash)
              @luojaInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @luojaInfo =  Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @luojaInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @luojaInfo.push Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_item)
                 else
                   @luojaInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @luojaInfo = _oa
            end
          end
        if !_o['muuttaja'].nil?
          _oa = _o['muuttaja']
            if(_oa.is_a? Hash)
              @muuttaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @muuttaja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @muuttaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @muuttaja.push Fixnum.from_json(_item)
                 else
                   @muuttaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @muuttaja = _oa
            end
          end
        if !_o['muuttajaInfo'].nil?
          _oa = _o['muuttajaInfo']
            if(_oa.is_a? Hash)
              @muuttajaInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @muuttajaInfo =  Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @muuttajaInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @muuttajaInfo.push Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_item)
                 else
                   @muuttajaInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @muuttajaInfo = _oa
            end
          end
        if !_o['nimi'].nil?
          _oa = _o['nimi']
            if(_oa.is_a? Hash)
              @nimi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @nimi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @nimi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @nimi.push String.from_json(_item)
                 else
                   @nimi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @nimi = _oa
            end
          end
        if !_o['tyyppi'].nil?
          _oa = _o['tyyppi']
            if(_oa.is_a? Hash)
              @tyyppi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tyyppi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tyyppi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tyyppi.push String.from_json(_item)
                 else
                   @tyyppi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tyyppi = _oa
            end
          end
        if !_o['tila'].nil?
          _oa = _o['tila']
            if(_oa.is_a? Hash)
              @tila = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tila =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tila = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tila.push String.from_json(_item)
                 else
                   @tila.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tila = _oa
            end
          end
        if !_o['toimiala'].nil?
          _oa = _o['toimiala']
            if(_oa.is_a? Hash)
              @toimiala = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @toimiala =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @toimiala = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @toimiala.push String.from_json(_item)
                 else
                   @toimiala.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @toimiala = _oa
            end
          end
        if !_o['yksikko'].nil?
          _oa = _o['yksikko']
            if(_oa.is_a? Hash)
              @yksikko = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @yksikko =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @yksikko = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @yksikko.push Fixnum.from_json(_item)
                 else
                   @yksikko.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @yksikko = _oa
            end
          end
        if !_o['yksikkoInfo'].nil?
          _oa = _o['yksikkoInfo']
            if(_oa.is_a? Hash)
              @yksikkoInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @yksikkoInfo =  Fi::Mediconsult::Core::Client::Dto::Omistaja::Unit.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @yksikkoInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @yksikkoInfo.push Fi::Mediconsult::Core::Client::Dto::Omistaja::Unit.from_json(_item)
                 else
                   @yksikkoInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @yksikkoInfo = _oa
            end
          end
        if !_o['data'].nil?
          _oa = _o['data']
            if(_oa.is_a? Hash)
              @data = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @data =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @data = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @data.push String.from_json(_item)
                 else
                   @data.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @data = _oa
            end
          end
        if !_o['metadata'].nil?
          _oa = _o['metadata']
            if(_oa.is_a? Hash)
              @metadata = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @metadata =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @metadata = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @metadata.push String.from_json(_item)
                 else
                   @metadata.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @metadata = _oa
            end
          end
        if !_o['templaatti'].nil?
          _oa = _o['templaatti']
            if(_oa.is_a? Hash)
              @templaatti = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @templaatti =  Fi::Mediconsult::Medisos::Dto::DocumentTemplateDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @templaatti = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @templaatti.push Fi::Mediconsult::Medisos::Dto::DocumentTemplateDto.from_json(_item)
                 else
                   @templaatti.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @templaatti = _oa
            end
          end
        if !_o['asiakas'].nil?
          _oa = _o['asiakas']
            if(_oa.is_a? Hash)
              @asiakas = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakas =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakas = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakas.push Fixnum.from_json(_item)
                 else
                   @asiakas.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakas = _oa
            end
          end
        if !_o['asiakasInfo'].nil?
          _oa = _o['asiakasInfo']
            if(_oa.is_a? Hash)
              @asiakasInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakasInfo =  Fi::Mediconsult::Core::Client::Dto::Omistaja::Patient.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakasInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakasInfo.push Fi::Mediconsult::Core::Client::Dto::Omistaja::Patient.from_json(_item)
                 else
                   @asiakasInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakasInfo = _oa
            end
          end
        if !_o['suostumusTieto'].nil?
          _oa = _o['suostumusTieto']
            if(_oa.is_a? Hash)
              @suostumusTieto = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @suostumusTieto =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @suostumusTieto = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @suostumusTieto.push Boolean.from_json(_item)
                 else
                   @suostumusTieto.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @suostumusTieto = _oa
            end
          end
        if !_o['allekirjoitus'].nil?
          _oa = _o['allekirjoitus']
            if(_oa.is_a? Hash)
              @allekirjoitus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @allekirjoitus =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @allekirjoitus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @allekirjoitus.push Fixnum.from_json(_item)
                 else
                   @allekirjoitus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @allekirjoitus = _oa
            end
          end
        if !_o['formId'].nil?
          _oa = _o['formId']
            if(_oa.is_a? Hash)
              @formId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @formId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @formId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @formId.push Fixnum.from_json(_item)
                 else
                   @formId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @formId = _oa
            end
          end
    end

    # constructs a DocumentDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Medisos

module Dto

  # (no documentation provided)
  class AsiakkaanMaksutDto < Fi::Mediconsult::Medisos::Dto::MediSosDtoBase 

    # (no documentation provided)
    attr_accessor :asiakasnumero
    # (no documentation provided)
    attr_accessor :asiakasInfo
    # (no documentation provided)
    attr_accessor :alkamisaika
    # (no documentation provided)
    attr_accessor :paattymisaika
    # (no documentation provided)
    attr_accessor :asiakkaanMaksut

    # the json hash for this AsiakkaanMaksutDto
    def to_jaxb_json_hash
      _h = super
      _h['asiakasnumero'] = asiakasnumero.to_jaxb_json_hash unless asiakasnumero.nil?
      _h['asiakasInfo'] = asiakasInfo.to_jaxb_json_hash unless asiakasInfo.nil?
      _h['alkamisaika'] = alkamisaika.to_jaxb_json_hash unless alkamisaika.nil?
      _h['paattymisaika'] = paattymisaika.to_jaxb_json_hash unless paattymisaika.nil?
      if !asiakkaanMaksut.nil?
        _ha = Array.new
        asiakkaanMaksut.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['asiakkaanMaksut'] = _ha
      end
      return _h
    end

    #initializes this AsiakkaanMaksutDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['asiakasnumero'].nil?
          _oa = _o['asiakasnumero']
            if(_oa.is_a? Hash)
              @asiakasnumero = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakasnumero =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakasnumero = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakasnumero.push Fixnum.from_json(_item)
                 else
                   @asiakasnumero.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakasnumero = _oa
            end
          end
        if !_o['asiakasInfo'].nil?
          _oa = _o['asiakasInfo']
            if(_oa.is_a? Hash)
              @asiakasInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakasInfo =  Fi::Mediconsult::Core::Client::Dto::Omistaja::Patient.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakasInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakasInfo.push Fi::Mediconsult::Core::Client::Dto::Omistaja::Patient.from_json(_item)
                 else
                   @asiakasInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakasInfo = _oa
            end
          end
        if !_o['alkamisaika'].nil?
          _oa = _o['alkamisaika']
            if(_oa.is_a? Hash)
              @alkamisaika = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @alkamisaika =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @alkamisaika = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @alkamisaika.push Time.from_json(_item)
                 else
                   @alkamisaika.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @alkamisaika = _oa
            end
          end
        if !_o['paattymisaika'].nil?
          _oa = _o['paattymisaika']
            if(_oa.is_a? Hash)
              @paattymisaika = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @paattymisaika =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @paattymisaika = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @paattymisaika.push Time.from_json(_item)
                 else
                   @paattymisaika.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @paattymisaika = _oa
            end
          end
        if !_o['asiakkaanMaksut'].nil?
          _oa = _o['asiakkaanMaksut']
            if(_oa.is_a? Hash)
              @asiakkaanMaksut = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakkaanMaksut =  Fi::Mediconsult::Medisos::Dto::MaksusummaDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakkaanMaksut = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakkaanMaksut.push Fi::Mediconsult::Medisos::Dto::MaksusummaDto.from_json(_item)
                 else
                   @asiakkaanMaksut.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakkaanMaksut = _oa
            end
          end
    end

    # constructs a AsiakkaanMaksutDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Event

  # (no documentation provided)
  class CalendarEventDto < Fi::Mediconsult::Mediplan::Dto::KuhaDtoBase 

    # (no documentation provided)
    attr_accessor :restricted
    # the startTime
    attr_accessor :startTime
    # the status
    attr_accessor :status
    # the description
    attr_accessor :description
    # the durationInMinutes
    attr_accessor :durationInMinutes
    # the serviceClass
    attr_accessor :serviceClass
    # the internalNote
    attr_accessor :internalNote
    # transition type
    attr_accessor :transitionType
    # flag to indicate missing/invalid address of a transition event
    attr_accessor :addressProblem
    # the event
    attr_accessor :event
    # the workers
    attr_accessor :workers
    # (no documentation provided)
    attr_accessor :requiredSkills
    # the customers
    attr_accessor :customers
    # the rooms
    attr_accessor :rooms
    # the equipmentTypes
    attr_accessor :equipmentTypes
    # (no documentation provided)
    attr_accessor :coursePeriods
    # (no documentation provided)
    attr_accessor :locked
    # the lock
    attr_accessor :lock
    # the contentGroups
    attr_accessor :contentGroups
    # the actualStartTime
    attr_accessor :actualStartTime
    # the actualEndTime
    attr_accessor :actualEndTime
    # the missingResources
    attr_accessor :missingResources
    # (no documentation provided)
    attr_accessor :primaryNurseStatus
    # the planningSettings
    attr_accessor :planningSettings

    # the json hash for this CalendarEventDto
    def to_jaxb_json_hash
      _h = super
      _h['restricted'] = restricted.to_jaxb_json_hash unless restricted.nil?
      _h['startTime'] = startTime.to_jaxb_json_hash unless startTime.nil?
      _h['status'] = status.to_jaxb_json_hash unless status.nil?
      _h['description'] = description.to_jaxb_json_hash unless description.nil?
      _h['durationInMinutes'] = durationInMinutes.to_jaxb_json_hash unless durationInMinutes.nil?
      _h['serviceClass'] = serviceClass.to_jaxb_json_hash unless serviceClass.nil?
      _h['internalNote'] = internalNote.to_jaxb_json_hash unless internalNote.nil?
      _h['transitionType'] = transitionType.to_jaxb_json_hash unless transitionType.nil?
      _h['addressProblem'] = addressProblem.to_jaxb_json_hash unless addressProblem.nil?
      _h['event'] = event.to_jaxb_json_hash unless event.nil?
      if !workers.nil?
        _ha = Array.new
        workers.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['workers'] = _ha
      end
      if !requiredSkills.nil?
        _ha = Array.new
        requiredSkills.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['requiredSkills'] = _ha
      end
      if !customers.nil?
        _ha = Array.new
        customers.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['customers'] = _ha
      end
      if !rooms.nil?
        _ha = Array.new
        rooms.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['rooms'] = _ha
      end
      if !equipmentTypes.nil?
        _ha = Array.new
        equipmentTypes.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['equipmentTypes'] = _ha
      end
      if !coursePeriods.nil?
        _ha = Array.new
        coursePeriods.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['coursePeriods'] = _ha
      end
      _h['locked'] = locked.to_jaxb_json_hash unless locked.nil?
      _h['lock'] = lock.to_jaxb_json_hash unless lock.nil?
      if !contentGroups.nil?
        _ha = Array.new
        contentGroups.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['contentGroups'] = _ha
      end
      _h['actualStartTime'] = actualStartTime.to_jaxb_json_hash unless actualStartTime.nil?
      _h['actualEndTime'] = actualEndTime.to_jaxb_json_hash unless actualEndTime.nil?
      _h['missingResources'] = missingResources.to_jaxb_json_hash unless missingResources.nil?
      _h['primaryNurseStatus'] = primaryNurseStatus.to_jaxb_json_hash unless primaryNurseStatus.nil?
      _h['planningSettings'] = planningSettings.to_jaxb_json_hash unless planningSettings.nil?
      return _h
    end

    #initializes this CalendarEventDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['restricted'].nil?
          _oa = _o['restricted']
            if(_oa.is_a? Hash)
              @restricted = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @restricted =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @restricted = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @restricted.push Boolean.from_json(_item)
                 else
                   @restricted.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @restricted = _oa
            end
          end
        if !_o['startTime'].nil?
          _oa = _o['startTime']
            if(_oa.is_a? Hash)
              @startTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @startTime =  java.time::OffsetDateTime.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @startTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @startTime.push java.time::OffsetDateTime.from_json(_item)
                 else
                   @startTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @startTime = _oa
            end
          end
        if !_o['status'].nil?
          _oa = _o['status']
            if(_oa.is_a? Hash)
              @status = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @status =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @status = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @status.push String.from_json(_item)
                 else
                   @status.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @status = _oa
            end
          end
        if !_o['description'].nil?
          _oa = _o['description']
            if(_oa.is_a? Hash)
              @description = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @description =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @description = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @description.push String.from_json(_item)
                 else
                   @description.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @description = _oa
            end
          end
        if !_o['durationInMinutes'].nil?
          _oa = _o['durationInMinutes']
            if(_oa.is_a? Hash)
              @durationInMinutes = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @durationInMinutes =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @durationInMinutes = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @durationInMinutes.push Fixnum.from_json(_item)
                 else
                   @durationInMinutes.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @durationInMinutes = _oa
            end
          end
        if !_o['serviceClass'].nil?
          _oa = _o['serviceClass']
            if(_oa.is_a? Hash)
              @serviceClass = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @serviceClass =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @serviceClass = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @serviceClass.push String.from_json(_item)
                 else
                   @serviceClass.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @serviceClass = _oa
            end
          end
        if !_o['internalNote'].nil?
          _oa = _o['internalNote']
            if(_oa.is_a? Hash)
              @internalNote = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @internalNote =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @internalNote = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @internalNote.push String.from_json(_item)
                 else
                   @internalNote.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @internalNote = _oa
            end
          end
        if !_o['transitionType'].nil?
          _oa = _o['transitionType']
            if(_oa.is_a? Hash)
              @transitionType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @transitionType =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @transitionType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @transitionType.push String.from_json(_item)
                 else
                   @transitionType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @transitionType = _oa
            end
          end
        if !_o['addressProblem'].nil?
          _oa = _o['addressProblem']
            if(_oa.is_a? Hash)
              @addressProblem = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @addressProblem =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @addressProblem = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @addressProblem.push Boolean.from_json(_item)
                 else
                   @addressProblem.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @addressProblem = _oa
            end
          end
        if !_o['event'].nil?
          _oa = _o['event']
            if(_oa.is_a? Hash)
              @event = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @event =  Fi::Mediconsult::Mediplan::Dto::Event::EventDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @event = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @event.push Fi::Mediconsult::Mediplan::Dto::Event::EventDto.from_json(_item)
                 else
                   @event.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @event = _oa
            end
          end
        if !_o['workers'].nil?
          _oa = _o['workers']
            if(_oa.is_a? Hash)
              @workers = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @workers =  Fi::Mediconsult::Mediplan::Dto::Event::EventWorkerDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @workers = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @workers.push Fi::Mediconsult::Mediplan::Dto::Event::EventWorkerDto.from_json(_item)
                 else
                   @workers.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @workers = _oa
            end
          end
        if !_o['requiredSkills'].nil?
          _oa = _o['requiredSkills']
            if(_oa.is_a? Hash)
              @requiredSkills = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @requiredSkills =  Fi::Mediconsult::Mediplan::Dto::Event::EventSkillDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @requiredSkills = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @requiredSkills.push Fi::Mediconsult::Mediplan::Dto::Event::EventSkillDto.from_json(_item)
                 else
                   @requiredSkills.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @requiredSkills = _oa
            end
          end
        if !_o['customers'].nil?
          _oa = _o['customers']
            if(_oa.is_a? Hash)
              @customers = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @customers =  Fi::Mediconsult::Mediplan::Dto::Event::EventCustomerDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @customers = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @customers.push Fi::Mediconsult::Mediplan::Dto::Event::EventCustomerDto.from_json(_item)
                 else
                   @customers.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @customers = _oa
            end
          end
        if !_o['rooms'].nil?
          _oa = _o['rooms']
            if(_oa.is_a? Hash)
              @rooms = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rooms =  Fi::Mediconsult::Mediplan::Dto::Event::EventResourceDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rooms = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rooms.push Fi::Mediconsult::Mediplan::Dto::Event::EventResourceDto.from_json(_item)
                 else
                   @rooms.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rooms = _oa
            end
          end
        if !_o['equipmentTypes'].nil?
          _oa = _o['equipmentTypes']
            if(_oa.is_a? Hash)
              @equipmentTypes = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @equipmentTypes =  Fi::Mediconsult::Mediplan::Dto::Event::EventResourceDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @equipmentTypes = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @equipmentTypes.push Fi::Mediconsult::Mediplan::Dto::Event::EventResourceDto.from_json(_item)
                 else
                   @equipmentTypes.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @equipmentTypes = _oa
            end
          end
        if !_o['coursePeriods'].nil?
          _oa = _o['coursePeriods']
            if(_oa.is_a? Hash)
              @coursePeriods = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @coursePeriods =  Fi::Mediconsult::Mediplan::Dto::Event::EventCoursePeriodDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @coursePeriods = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @coursePeriods.push Fi::Mediconsult::Mediplan::Dto::Event::EventCoursePeriodDto.from_json(_item)
                 else
                   @coursePeriods.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @coursePeriods = _oa
            end
          end
        if !_o['locked'].nil?
          _oa = _o['locked']
            if(_oa.is_a? Hash)
              @locked = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @locked =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @locked = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @locked.push Boolean.from_json(_item)
                 else
                   @locked.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @locked = _oa
            end
          end
        if !_o['lock'].nil?
          _oa = _o['lock']
            if(_oa.is_a? Hash)
              @lock = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lock =  Fi::Mediconsult::Mediplan::Dto::LockDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lock = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lock.push Fi::Mediconsult::Mediplan::Dto::LockDto.from_json(_item)
                 else
                   @lock.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lock = _oa
            end
          end
        if !_o['contentGroups'].nil?
          _oa = _o['contentGroups']
            if(_oa.is_a? Hash)
              @contentGroups = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @contentGroups =  Fi::Mediconsult::Mediplan::Dto::Contentgroup::CalendarEventContentGroupDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @contentGroups = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @contentGroups.push Fi::Mediconsult::Mediplan::Dto::Contentgroup::CalendarEventContentGroupDto.from_json(_item)
                 else
                   @contentGroups.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @contentGroups = _oa
            end
          end
        if !_o['actualStartTime'].nil?
          _oa = _o['actualStartTime']
            if(_oa.is_a? Hash)
              @actualStartTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @actualStartTime =  java.time::OffsetDateTime.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @actualStartTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @actualStartTime.push java.time::OffsetDateTime.from_json(_item)
                 else
                   @actualStartTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @actualStartTime = _oa
            end
          end
        if !_o['actualEndTime'].nil?
          _oa = _o['actualEndTime']
            if(_oa.is_a? Hash)
              @actualEndTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @actualEndTime =  java.time::OffsetDateTime.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @actualEndTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @actualEndTime.push java.time::OffsetDateTime.from_json(_item)
                 else
                   @actualEndTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @actualEndTime = _oa
            end
          end
        if !_o['missingResources'].nil?
          _oa = _o['missingResources']
            if(_oa.is_a? Hash)
              @missingResources = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @missingResources =  Fi::Mediconsult::Mediplan::Dto::Event::EventMissingResourcesDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @missingResources = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @missingResources.push Fi::Mediconsult::Mediplan::Dto::Event::EventMissingResourcesDto.from_json(_item)
                 else
                   @missingResources.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @missingResources = _oa
            end
          end
        if !_o['primaryNurseStatus'].nil?
          _oa = _o['primaryNurseStatus']
            if(_oa.is_a? Hash)
              @primaryNurseStatus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @primaryNurseStatus =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @primaryNurseStatus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @primaryNurseStatus.push String.from_json(_item)
                 else
                   @primaryNurseStatus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @primaryNurseStatus = _oa
            end
          end
        if !_o['planningSettings'].nil?
          _oa = _o['planningSettings']
            if(_oa.is_a? Hash)
              @planningSettings = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @planningSettings =  Fi::Mediconsult::Mediplan::Dto::Eventmodel::PlanningSettings.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @planningSettings = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @planningSettings.push Fi::Mediconsult::Mediplan::Dto::Eventmodel::PlanningSettings.from_json(_item)
                 else
                   @planningSettings.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @planningSettings = _oa
            end
          end
    end

    # constructs a CalendarEventDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Planner

  # (no documentation provided)
  class OptimizationCategory

    # (no documentation provided)
    BASIC = "BASIC"

    # (no documentation provided)
    LOCATIONS = "LOCATIONS"
  end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Enums

  # (no documentation provided)
  class EquipmentRequirement

    # (no documentation provided)
    FOR_EVERY_CUSTOMER = "FOR_EVERY_CUSTOMER"

    # (no documentation provided)
    FOR_EVERY_CUSTOMER_AND_WORKER = "FOR_EVERY_CUSTOMER_AND_WORKER"

    # (no documentation provided)
    FIXED_AMOUNT = "FIXED_AMOUNT"
  end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Laakitys

  # (no documentation provided)
  class Uusimispyynto < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # (no documentation provided)
    attr_accessor :omistaja
    # (no documentation provided)
    attr_accessor :osa
    # (no documentation provided)
    attr_accessor :pyynto
    # (no documentation provided)
    attr_accessor :resepti
    # (no documentation provided)
    attr_accessor :reseptiversio
    # (no documentation provided)
    attr_accessor :laakitys
    # (no documentation provided)
    attr_accessor :uusiLaakitys
    # (no documentation provided)
    attr_accessor :maaraysaika
    # (no documentation provided)
    attr_accessor :maaraaja
    # (no documentation provided)
    attr_accessor :valmiste
    # (no documentation provided)
    attr_accessor :kirjausaika
    # (no documentation provided)
    attr_accessor :kirjauspaikkatieto
    # (no documentation provided)
    attr_accessor :kirjaajatieto
    # (no documentation provided)
    attr_accessor :kirjaajanOsoite
    # (no documentation provided)
    attr_accessor :kirjaajanPuhelin
    # (no documentation provided)
    attr_accessor :kirjausyksikko
    # (no documentation provided)
    attr_accessor :kirjaaja
    # (no documentation provided)
    attr_accessor :tila
    # (no documentation provided)
    attr_accessor :vanhenee
    # (no documentation provided)
    attr_accessor :suostumus
    # (no documentation provided)
    attr_accessor :puhelin
    # (no documentation provided)
    attr_accessor :yksikko
    # (no documentation provided)
    attr_accessor :kasittelija
    # (no documentation provided)
    attr_accessor :potilasohje
    # (no documentation provided)
    attr_accessor :viestiUusijalle
    # (no documentation provided)
    attr_accessor :viestiApteekille
    # (no documentation provided)
    attr_accessor :perustelu
    # (no documentation provided)
    attr_accessor :ohjePotilaalle
    # (no documentation provided)
    attr_accessor :informoitu
    # (no documentation provided)
    attr_accessor :kasittelyaika
    # (no documentation provided)
    attr_accessor :lahetysaika
    # (no documentation provided)
    attr_accessor :lahetystila
    # (no documentation provided)
    attr_accessor :lahetysvirhe
    # (no documentation provided)
    attr_accessor :poistettu
    # (no documentation provided)
    attr_accessor :muutosaika
    # (no documentation provided)
    attr_accessor :muutospaikka
    # (no documentation provided)
    attr_accessor :cda

    # the json hash for this Uusimispyynto
    def to_jaxb_json_hash
      _h = super
      _h['omistaja'] = omistaja.to_jaxb_json_hash unless omistaja.nil?
      _h['osa'] = osa.to_jaxb_json_hash unless osa.nil?
      _h['pyynto'] = pyynto.to_jaxb_json_hash unless pyynto.nil?
      _h['resepti'] = resepti.to_jaxb_json_hash unless resepti.nil?
      _h['reseptiversio'] = reseptiversio.to_jaxb_json_hash unless reseptiversio.nil?
      _h['laakitys'] = laakitys.to_jaxb_json_hash unless laakitys.nil?
      _h['uusiLaakitys'] = uusiLaakitys.to_jaxb_json_hash unless uusiLaakitys.nil?
      _h['maaraysaika'] = maaraysaika.to_jaxb_json_hash unless maaraysaika.nil?
      _h['maaraaja'] = maaraaja.to_jaxb_json_hash unless maaraaja.nil?
      _h['valmiste'] = valmiste.to_jaxb_json_hash unless valmiste.nil?
      _h['kirjausaika'] = kirjausaika.to_jaxb_json_hash unless kirjausaika.nil?
      _h['kirjauspaikkatieto'] = kirjauspaikkatieto.to_jaxb_json_hash unless kirjauspaikkatieto.nil?
      _h['kirjaajatieto'] = kirjaajatieto.to_jaxb_json_hash unless kirjaajatieto.nil?
      _h['kirjaajanOsoite'] = kirjaajanOsoite.to_jaxb_json_hash unless kirjaajanOsoite.nil?
      _h['kirjaajanPuhelin'] = kirjaajanPuhelin.to_jaxb_json_hash unless kirjaajanPuhelin.nil?
      _h['kirjausyksikko'] = kirjausyksikko.to_jaxb_json_hash unless kirjausyksikko.nil?
      _h['kirjaaja'] = kirjaaja.to_jaxb_json_hash unless kirjaaja.nil?
      _h['tila'] = tila.to_jaxb_json_hash unless tila.nil?
      _h['vanhenee'] = vanhenee.to_jaxb_json_hash unless vanhenee.nil?
      _h['suostumus'] = suostumus.to_jaxb_json_hash unless suostumus.nil?
      _h['puhelin'] = puhelin.to_jaxb_json_hash unless puhelin.nil?
      _h['yksikko'] = yksikko.to_jaxb_json_hash unless yksikko.nil?
      _h['kasittelija'] = kasittelija.to_jaxb_json_hash unless kasittelija.nil?
      _h['potilasohje'] = potilasohje.to_jaxb_json_hash unless potilasohje.nil?
      _h['viestiUusijalle'] = viestiUusijalle.to_jaxb_json_hash unless viestiUusijalle.nil?
      _h['viestiApteekille'] = viestiApteekille.to_jaxb_json_hash unless viestiApteekille.nil?
      _h['perustelu'] = perustelu.to_jaxb_json_hash unless perustelu.nil?
      _h['ohjePotilaalle'] = ohjePotilaalle.to_jaxb_json_hash unless ohjePotilaalle.nil?
      _h['informoitu'] = informoitu.to_jaxb_json_hash unless informoitu.nil?
      _h['kasittelyaika'] = kasittelyaika.to_jaxb_json_hash unless kasittelyaika.nil?
      _h['lahetysaika'] = lahetysaika.to_jaxb_json_hash unless lahetysaika.nil?
      _h['lahetystila'] = lahetystila.to_jaxb_json_hash unless lahetystila.nil?
      _h['lahetysvirhe'] = lahetysvirhe.to_jaxb_json_hash unless lahetysvirhe.nil?
      _h['poistettu'] = poistettu.to_jaxb_json_hash unless poistettu.nil?
      _h['muutosaika'] = muutosaika.to_jaxb_json_hash unless muutosaika.nil?
      _h['muutospaikka'] = muutospaikka.to_jaxb_json_hash unless muutospaikka.nil?
      _h['cda'] = cda.to_jaxb_json_hash unless cda.nil?
      return _h
    end

    #initializes this Uusimispyynto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['omistaja'].nil?
          _oa = _o['omistaja']
            if(_oa.is_a? Hash)
              @omistaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @omistaja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @omistaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @omistaja.push Fixnum.from_json(_item)
                 else
                   @omistaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @omistaja = _oa
            end
          end
        if !_o['osa'].nil?
          _oa = _o['osa']
            if(_oa.is_a? Hash)
              @osa = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @osa =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @osa = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @osa.push Fixnum.from_json(_item)
                 else
                   @osa.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @osa = _oa
            end
          end
        if !_o['pyynto'].nil?
          _oa = _o['pyynto']
            if(_oa.is_a? Hash)
              @pyynto = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @pyynto =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @pyynto = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @pyynto.push String.from_json(_item)
                 else
                   @pyynto.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @pyynto = _oa
            end
          end
        if !_o['resepti'].nil?
          _oa = _o['resepti']
            if(_oa.is_a? Hash)
              @resepti = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @resepti =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @resepti = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @resepti.push String.from_json(_item)
                 else
                   @resepti.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @resepti = _oa
            end
          end
        if !_o['reseptiversio'].nil?
          _oa = _o['reseptiversio']
            if(_oa.is_a? Hash)
              @reseptiversio = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @reseptiversio =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @reseptiversio = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @reseptiversio.push String.from_json(_item)
                 else
                   @reseptiversio.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @reseptiversio = _oa
            end
          end
        if !_o['laakitys'].nil?
          _oa = _o['laakitys']
            if(_oa.is_a? Hash)
              @laakitys = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laakitys =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laakitys = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laakitys.push Fixnum.from_json(_item)
                 else
                   @laakitys.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laakitys = _oa
            end
          end
        if !_o['uusiLaakitys'].nil?
          _oa = _o['uusiLaakitys']
            if(_oa.is_a? Hash)
              @uusiLaakitys = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @uusiLaakitys =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @uusiLaakitys = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @uusiLaakitys.push Fixnum.from_json(_item)
                 else
                   @uusiLaakitys.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @uusiLaakitys = _oa
            end
          end
        if !_o['maaraysaika'].nil?
          _oa = _o['maaraysaika']
            if(_oa.is_a? Hash)
              @maaraysaika = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @maaraysaika =  Java::Sql::Date.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @maaraysaika = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @maaraysaika.push Java::Sql::Date.from_json(_item)
                 else
                   @maaraysaika.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @maaraysaika = _oa
            end
          end
        if !_o['maaraaja'].nil?
          _oa = _o['maaraaja']
            if(_oa.is_a? Hash)
              @maaraaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @maaraaja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @maaraaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @maaraaja.push Fixnum.from_json(_item)
                 else
                   @maaraaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @maaraaja = _oa
            end
          end
        if !_o['valmiste'].nil?
          _oa = _o['valmiste']
            if(_oa.is_a? Hash)
              @valmiste = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @valmiste =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @valmiste = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @valmiste.push String.from_json(_item)
                 else
                   @valmiste.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @valmiste = _oa
            end
          end
        if !_o['kirjausaika'].nil?
          _oa = _o['kirjausaika']
            if(_oa.is_a? Hash)
              @kirjausaika = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kirjausaika =  Java::Sql::Date.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kirjausaika = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kirjausaika.push Java::Sql::Date.from_json(_item)
                 else
                   @kirjausaika.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kirjausaika = _oa
            end
          end
        if !_o['kirjauspaikkatieto'].nil?
          _oa = _o['kirjauspaikkatieto']
            if(_oa.is_a? Hash)
              @kirjauspaikkatieto = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kirjauspaikkatieto =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kirjauspaikkatieto = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kirjauspaikkatieto.push Fixnum.from_json(_item)
                 else
                   @kirjauspaikkatieto.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kirjauspaikkatieto = _oa
            end
          end
        if !_o['kirjaajatieto'].nil?
          _oa = _o['kirjaajatieto']
            if(_oa.is_a? Hash)
              @kirjaajatieto = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kirjaajatieto =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kirjaajatieto = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kirjaajatieto.push Fixnum.from_json(_item)
                 else
                   @kirjaajatieto.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kirjaajatieto = _oa
            end
          end
        if !_o['kirjaajanOsoite'].nil?
          _oa = _o['kirjaajanOsoite']
            if(_oa.is_a? Hash)
              @kirjaajanOsoite = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kirjaajanOsoite =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kirjaajanOsoite = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kirjaajanOsoite.push String.from_json(_item)
                 else
                   @kirjaajanOsoite.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kirjaajanOsoite = _oa
            end
          end
        if !_o['kirjaajanPuhelin'].nil?
          _oa = _o['kirjaajanPuhelin']
            if(_oa.is_a? Hash)
              @kirjaajanPuhelin = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kirjaajanPuhelin =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kirjaajanPuhelin = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kirjaajanPuhelin.push String.from_json(_item)
                 else
                   @kirjaajanPuhelin.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kirjaajanPuhelin = _oa
            end
          end
        if !_o['kirjausyksikko'].nil?
          _oa = _o['kirjausyksikko']
            if(_oa.is_a? Hash)
              @kirjausyksikko = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kirjausyksikko =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kirjausyksikko = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kirjausyksikko.push String.from_json(_item)
                 else
                   @kirjausyksikko.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kirjausyksikko = _oa
            end
          end
        if !_o['kirjaaja'].nil?
          _oa = _o['kirjaaja']
            if(_oa.is_a? Hash)
              @kirjaaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kirjaaja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kirjaaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kirjaaja.push Fixnum.from_json(_item)
                 else
                   @kirjaaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kirjaaja = _oa
            end
          end
        if !_o['tila'].nil?
          _oa = _o['tila']
            if(_oa.is_a? Hash)
              @tila = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tila =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tila = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tila.push String.from_json(_item)
                 else
                   @tila.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tila = _oa
            end
          end
        if !_o['vanhenee'].nil?
          _oa = _o['vanhenee']
            if(_oa.is_a? Hash)
              @vanhenee = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vanhenee =  Java::Sql::Date.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vanhenee = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vanhenee.push Java::Sql::Date.from_json(_item)
                 else
                   @vanhenee.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vanhenee = _oa
            end
          end
        if !_o['suostumus'].nil?
          _oa = _o['suostumus']
            if(_oa.is_a? Hash)
              @suostumus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @suostumus =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @suostumus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @suostumus.push String.from_json(_item)
                 else
                   @suostumus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @suostumus = _oa
            end
          end
        if !_o['puhelin'].nil?
          _oa = _o['puhelin']
            if(_oa.is_a? Hash)
              @puhelin = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @puhelin =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @puhelin = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @puhelin.push String.from_json(_item)
                 else
                   @puhelin.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @puhelin = _oa
            end
          end
        if !_o['yksikko'].nil?
          _oa = _o['yksikko']
            if(_oa.is_a? Hash)
              @yksikko = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @yksikko =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @yksikko = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @yksikko.push Fixnum.from_json(_item)
                 else
                   @yksikko.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @yksikko = _oa
            end
          end
        if !_o['kasittelija'].nil?
          _oa = _o['kasittelija']
            if(_oa.is_a? Hash)
              @kasittelija = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kasittelija =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kasittelija = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kasittelija.push Fixnum.from_json(_item)
                 else
                   @kasittelija.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kasittelija = _oa
            end
          end
        if !_o['potilasohje'].nil?
          _oa = _o['potilasohje']
            if(_oa.is_a? Hash)
              @potilasohje = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @potilasohje =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @potilasohje = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @potilasohje.push String.from_json(_item)
                 else
                   @potilasohje.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @potilasohje = _oa
            end
          end
        if !_o['viestiUusijalle'].nil?
          _oa = _o['viestiUusijalle']
            if(_oa.is_a? Hash)
              @viestiUusijalle = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @viestiUusijalle =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @viestiUusijalle = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @viestiUusijalle.push String.from_json(_item)
                 else
                   @viestiUusijalle.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @viestiUusijalle = _oa
            end
          end
        if !_o['viestiApteekille'].nil?
          _oa = _o['viestiApteekille']
            if(_oa.is_a? Hash)
              @viestiApteekille = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @viestiApteekille =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @viestiApteekille = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @viestiApteekille.push String.from_json(_item)
                 else
                   @viestiApteekille.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @viestiApteekille = _oa
            end
          end
        if !_o['perustelu'].nil?
          _oa = _o['perustelu']
            if(_oa.is_a? Hash)
              @perustelu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @perustelu =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @perustelu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @perustelu.push String.from_json(_item)
                 else
                   @perustelu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @perustelu = _oa
            end
          end
        if !_o['ohjePotilaalle'].nil?
          _oa = _o['ohjePotilaalle']
            if(_oa.is_a? Hash)
              @ohjePotilaalle = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ohjePotilaalle =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ohjePotilaalle = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ohjePotilaalle.push String.from_json(_item)
                 else
                   @ohjePotilaalle.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ohjePotilaalle = _oa
            end
          end
        if !_o['informoitu'].nil?
          _oa = _o['informoitu']
            if(_oa.is_a? Hash)
              @informoitu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @informoitu =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @informoitu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @informoitu.push String.from_json(_item)
                 else
                   @informoitu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @informoitu = _oa
            end
          end
        if !_o['kasittelyaika'].nil?
          _oa = _o['kasittelyaika']
            if(_oa.is_a? Hash)
              @kasittelyaika = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kasittelyaika =  Java::Sql::Date.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kasittelyaika = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kasittelyaika.push Java::Sql::Date.from_json(_item)
                 else
                   @kasittelyaika.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kasittelyaika = _oa
            end
          end
        if !_o['lahetysaika'].nil?
          _oa = _o['lahetysaika']
            if(_oa.is_a? Hash)
              @lahetysaika = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lahetysaika =  Java::Sql::Date.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lahetysaika = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lahetysaika.push Java::Sql::Date.from_json(_item)
                 else
                   @lahetysaika.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lahetysaika = _oa
            end
          end
        if !_o['lahetystila'].nil?
          _oa = _o['lahetystila']
            if(_oa.is_a? Hash)
              @lahetystila = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lahetystila =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lahetystila = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lahetystila.push String.from_json(_item)
                 else
                   @lahetystila.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lahetystila = _oa
            end
          end
        if !_o['lahetysvirhe'].nil?
          _oa = _o['lahetysvirhe']
            if(_oa.is_a? Hash)
              @lahetysvirhe = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lahetysvirhe =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lahetysvirhe = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lahetysvirhe.push String.from_json(_item)
                 else
                   @lahetysvirhe.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lahetysvirhe = _oa
            end
          end
        if !_o['poistettu'].nil?
          _oa = _o['poistettu']
            if(_oa.is_a? Hash)
              @poistettu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @poistettu =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @poistettu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @poistettu.push String.from_json(_item)
                 else
                   @poistettu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @poistettu = _oa
            end
          end
        if !_o['muutosaika'].nil?
          _oa = _o['muutosaika']
            if(_oa.is_a? Hash)
              @muutosaika = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @muutosaika =  Java::Sql::Date.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @muutosaika = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @muutosaika.push Java::Sql::Date.from_json(_item)
                 else
                   @muutosaika.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @muutosaika = _oa
            end
          end
        if !_o['muutospaikka'].nil?
          _oa = _o['muutospaikka']
            if(_oa.is_a? Hash)
              @muutospaikka = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @muutospaikka =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @muutospaikka = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @muutospaikka.push Fixnum.from_json(_item)
                 else
                   @muutospaikka.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @muutospaikka = _oa
            end
          end
        if !_o['cda'].nil?
          _oa = _o['cda']
            if(_oa.is_a? Hash)
              @cda = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @cda =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @cda = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @cda.push String.from_json(_item)
                 else
                   @cda.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @cda = _oa
            end
          end
    end

    # constructs a Uusimispyynto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Palvelupaatos

  # (no documentation provided)
  class Weekday

    # (no documentation provided)
    MA = "MA"

    # (no documentation provided)
    TI = "TI"

    # (no documentation provided)
    KE = "KE"

    # (no documentation provided)
    TO = "TO"

    # (no documentation provided)
    PE = "PE"

    # (no documentation provided)
    LA = "LA"

    # (no documentation provided)
    SU = "SU"
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Diagnose

  # (no documentation provided)
  class DiagnoseCodeType

    # (no documentation provided)
    Basic = "Basic"

    # (no documentation provided)
    Additional = "Additional"

    # (no documentation provided)
    Adverse = "Adverse"

    # (no documentation provided)
    External = "External"

    # (no documentation provided)
    Accident = "Accident"
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Laakitys

  # (no documentation provided)
  class LaakePakkaus < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 


    # the json hash for this LaakePakkaus
    def to_jaxb_json_hash
      _h = super
      return _h
    end

    #initializes this LaakePakkaus with a json hash
    def init_jaxb_json_hash(_o)
      super _o
    end

    # constructs a LaakePakkaus from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class Palvelutapahtumaluokitus

    # (no documentation provided)
    VUODEOSASTOHOITOJAKSO = "VUODEOSASTOHOITOJAKSO"

    # (no documentation provided)
    KAYNTI_VASTAANOTOLLA = "KAYNTI_VASTAANOTOLLA"

    # (no documentation provided)
    AMMATTIHENKILON_KAYNTI_ASIKKAAN_LUONA = "AMMATTIHENKILON_KAYNTI_ASIKKAAN_LUONA"

    # (no documentation provided)
    ASIAKASKONTAKTI_ILMAN_KAYNTIA = "ASIAKASKONTAKTI_ILMAN_KAYNTIA"

    # (no documentation provided)
    KONSULTAATIO = "KONSULTAATIO"

    # (no documentation provided)
    ASIAKKAAN_ASIOIDEN_HOITO_ILMAN_ASIAKASKONTAKTIA = "ASIAKKAAN_ASIOIDEN_HOITO_ILMAN_ASIAKASKONTAKTIA"

    # (no documentation provided)
    MUU_LAITOSHOITOJAKSO = "MUU_LAITOSHOITOJAKSO"

    # (no documentation provided)
    SARJAHOITO = "SARJAHOITO"

    # (no documentation provided)
    ASIA = "ASIA"

    # (no documentation provided)
    MUU = "MUU"
  end

end

end

end

end

end

module Fi

module Mediconsult

module Medisos

module Dto

  # (no documentation provided)
  class AsiakirjaKyselyDto < Fi::Mediconsult::Medisos::Dto::MediSosDtoBase 

    # (no documentation provided)
    attr_accessor :vapaasanaHakuLista
    # (no documentation provided)
    attr_accessor :palvelutehtavaLista
    # (no documentation provided)
    attr_accessor :sosiaalipalveluLista
    # (no documentation provided)
    attr_accessor :palveluyksikkoLista
    # (no documentation provided)
    attr_accessor :prosessinvaiheLista
    # (no documentation provided)
    attr_accessor :asiakirjanNimiLista
    # (no documentation provided)
    attr_accessor :asiakirjanLaatimisaikaLista
    # (no documentation provided)
    attr_accessor :laatijaIdLista
    # (no documentation provided)
    attr_accessor :laatijaKokoNimiLista
    # (no documentation provided)
    attr_accessor :asiakirjaIdLista
    # (no documentation provided)
    attr_accessor :asiakirjaliittyyLista
    # (no documentation provided)
    attr_accessor :asiakirjanTilaLista
    # (no documentation provided)
    attr_accessor :asiakirjanTyyppiLista
    # (no documentation provided)
    attr_accessor :asiakirjanValmistelijaLista
    # (no documentation provided)
    attr_accessor :asiakasnumero
    # (no documentation provided)
    attr_accessor :includeJson
    # (no documentation provided)
    attr_accessor :includeDocument
    # (no documentation provided)
    attr_accessor :pageSize
    # (no documentation provided)
    attr_accessor :pageIndex
    # (no documentation provided)
    attr_accessor :palvelunjarjestajaLista
    # (no documentation provided)
    attr_accessor :palveluntuottajaLista
    # (no documentation provided)
    attr_accessor :palveluntoteuttajaLista
    # (no documentation provided)
    attr_accessor :valmistelijaLista
    # (no documentation provided)
    attr_accessor :ratkaisuLista
    # (no documentation provided)
    attr_accessor :rajoitusKuvausLista
    # (no documentation provided)
    attr_accessor :paatoksentekijaLista
    # (no documentation provided)
    attr_accessor :grouping
    # (no documentation provided)
    attr_accessor :idLista
    # (no documentation provided)
    attr_accessor :formId

    # the json hash for this AsiakirjaKyselyDto
    def to_jaxb_json_hash
      _h = super
      if !vapaasanaHakuLista.nil?
        _ha = Array.new
        vapaasanaHakuLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['vapaasanaHakuLista'] = _ha
      end
      if !palvelutehtavaLista.nil?
        _ha = Array.new
        palvelutehtavaLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['palvelutehtavaLista'] = _ha
      end
      if !sosiaalipalveluLista.nil?
        _ha = Array.new
        sosiaalipalveluLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['sosiaalipalveluLista'] = _ha
      end
      if !palveluyksikkoLista.nil?
        _ha = Array.new
        palveluyksikkoLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['palveluyksikkoLista'] = _ha
      end
      if !prosessinvaiheLista.nil?
        _ha = Array.new
        prosessinvaiheLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['prosessinvaiheLista'] = _ha
      end
      if !asiakirjanNimiLista.nil?
        _ha = Array.new
        asiakirjanNimiLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['asiakirjanNimiLista'] = _ha
      end
      if !asiakirjanLaatimisaikaLista.nil?
        _ha = Array.new
        asiakirjanLaatimisaikaLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['asiakirjanLaatimisaikaLista'] = _ha
      end
      if !laatijaIdLista.nil?
        _ha = Array.new
        laatijaIdLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['laatijaIdLista'] = _ha
      end
      if !laatijaKokoNimiLista.nil?
        _ha = Array.new
        laatijaKokoNimiLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['laatijaKokoNimiLista'] = _ha
      end
      if !asiakirjaIdLista.nil?
        _ha = Array.new
        asiakirjaIdLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['asiakirjaIdLista'] = _ha
      end
      if !asiakirjaliittyyLista.nil?
        _ha = Array.new
        asiakirjaliittyyLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['asiakirjaliittyyLista'] = _ha
      end
      if !asiakirjanTilaLista.nil?
        _ha = Array.new
        asiakirjanTilaLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['asiakirjanTilaLista'] = _ha
      end
      if !asiakirjanTyyppiLista.nil?
        _ha = Array.new
        asiakirjanTyyppiLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['asiakirjanTyyppiLista'] = _ha
      end
      if !asiakirjanValmistelijaLista.nil?
        _ha = Array.new
        asiakirjanValmistelijaLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['asiakirjanValmistelijaLista'] = _ha
      end
      _h['asiakasnumero'] = asiakasnumero.to_jaxb_json_hash unless asiakasnumero.nil?
      _h['includeJson'] = includeJson.to_jaxb_json_hash unless includeJson.nil?
      _h['includeDocument'] = includeDocument.to_jaxb_json_hash unless includeDocument.nil?
      _h['pageSize'] = pageSize.to_jaxb_json_hash unless pageSize.nil?
      _h['pageIndex'] = pageIndex.to_jaxb_json_hash unless pageIndex.nil?
      if !palvelunjarjestajaLista.nil?
        _ha = Array.new
        palvelunjarjestajaLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['palvelunjarjestajaLista'] = _ha
      end
      if !palveluntuottajaLista.nil?
        _ha = Array.new
        palveluntuottajaLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['palveluntuottajaLista'] = _ha
      end
      if !palveluntoteuttajaLista.nil?
        _ha = Array.new
        palveluntoteuttajaLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['palveluntoteuttajaLista'] = _ha
      end
      if !valmistelijaLista.nil?
        _ha = Array.new
        valmistelijaLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['valmistelijaLista'] = _ha
      end
      if !ratkaisuLista.nil?
        _ha = Array.new
        ratkaisuLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['ratkaisuLista'] = _ha
      end
      if !rajoitusKuvausLista.nil?
        _ha = Array.new
        rajoitusKuvausLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['rajoitusKuvausLista'] = _ha
      end
      if !paatoksentekijaLista.nil?
        _ha = Array.new
        paatoksentekijaLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['paatoksentekijaLista'] = _ha
      end
      _h['grouping'] = grouping.to_jaxb_json_hash unless grouping.nil?
      if !idLista.nil?
        _ha = Array.new
        idLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['idLista'] = _ha
      end
      _h['formId'] = formId.to_jaxb_json_hash unless formId.nil?
      return _h
    end

    #initializes this AsiakirjaKyselyDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['vapaasanaHakuLista'].nil?
          _oa = _o['vapaasanaHakuLista']
            if(_oa.is_a? Hash)
              @vapaasanaHakuLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vapaasanaHakuLista =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vapaasanaHakuLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vapaasanaHakuLista.push String.from_json(_item)
                 else
                   @vapaasanaHakuLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vapaasanaHakuLista = _oa
            end
          end
        if !_o['palvelutehtavaLista'].nil?
          _oa = _o['palvelutehtavaLista']
            if(_oa.is_a? Hash)
              @palvelutehtavaLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palvelutehtavaLista =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palvelutehtavaLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palvelutehtavaLista.push String.from_json(_item)
                 else
                   @palvelutehtavaLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palvelutehtavaLista = _oa
            end
          end
        if !_o['sosiaalipalveluLista'].nil?
          _oa = _o['sosiaalipalveluLista']
            if(_oa.is_a? Hash)
              @sosiaalipalveluLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @sosiaalipalveluLista =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @sosiaalipalveluLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @sosiaalipalveluLista.push String.from_json(_item)
                 else
                   @sosiaalipalveluLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @sosiaalipalveluLista = _oa
            end
          end
        if !_o['palveluyksikkoLista'].nil?
          _oa = _o['palveluyksikkoLista']
            if(_oa.is_a? Hash)
              @palveluyksikkoLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palveluyksikkoLista =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palveluyksikkoLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palveluyksikkoLista.push String.from_json(_item)
                 else
                   @palveluyksikkoLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palveluyksikkoLista = _oa
            end
          end
        if !_o['prosessinvaiheLista'].nil?
          _oa = _o['prosessinvaiheLista']
            if(_oa.is_a? Hash)
              @prosessinvaiheLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @prosessinvaiheLista =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @prosessinvaiheLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @prosessinvaiheLista.push String.from_json(_item)
                 else
                   @prosessinvaiheLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @prosessinvaiheLista = _oa
            end
          end
        if !_o['asiakirjanNimiLista'].nil?
          _oa = _o['asiakirjanNimiLista']
            if(_oa.is_a? Hash)
              @asiakirjanNimiLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakirjanNimiLista =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakirjanNimiLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakirjanNimiLista.push String.from_json(_item)
                 else
                   @asiakirjanNimiLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakirjanNimiLista = _oa
            end
          end
        if !_o['asiakirjanLaatimisaikaLista'].nil?
          _oa = _o['asiakirjanLaatimisaikaLista']
            if(_oa.is_a? Hash)
              @asiakirjanLaatimisaikaLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakirjanLaatimisaikaLista =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakirjanLaatimisaikaLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakirjanLaatimisaikaLista.push Bignum.from_json(_item)
                 else
                   @asiakirjanLaatimisaikaLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakirjanLaatimisaikaLista = _oa
            end
          end
        if !_o['laatijaIdLista'].nil?
          _oa = _o['laatijaIdLista']
            if(_oa.is_a? Hash)
              @laatijaIdLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laatijaIdLista =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laatijaIdLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laatijaIdLista.push Fixnum.from_json(_item)
                 else
                   @laatijaIdLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laatijaIdLista = _oa
            end
          end
        if !_o['laatijaKokoNimiLista'].nil?
          _oa = _o['laatijaKokoNimiLista']
            if(_oa.is_a? Hash)
              @laatijaKokoNimiLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laatijaKokoNimiLista =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laatijaKokoNimiLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laatijaKokoNimiLista.push String.from_json(_item)
                 else
                   @laatijaKokoNimiLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laatijaKokoNimiLista = _oa
            end
          end
        if !_o['asiakirjaIdLista'].nil?
          _oa = _o['asiakirjaIdLista']
            if(_oa.is_a? Hash)
              @asiakirjaIdLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakirjaIdLista =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakirjaIdLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakirjaIdLista.push Bignum.from_json(_item)
                 else
                   @asiakirjaIdLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakirjaIdLista = _oa
            end
          end
        if !_o['asiakirjaliittyyLista'].nil?
          _oa = _o['asiakirjaliittyyLista']
            if(_oa.is_a? Hash)
              @asiakirjaliittyyLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakirjaliittyyLista =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakirjaliittyyLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakirjaliittyyLista.push Bignum.from_json(_item)
                 else
                   @asiakirjaliittyyLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakirjaliittyyLista = _oa
            end
          end
        if !_o['asiakirjanTilaLista'].nil?
          _oa = _o['asiakirjanTilaLista']
            if(_oa.is_a? Hash)
              @asiakirjanTilaLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakirjanTilaLista =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakirjanTilaLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakirjanTilaLista.push String.from_json(_item)
                 else
                   @asiakirjanTilaLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakirjanTilaLista = _oa
            end
          end
        if !_o['asiakirjanTyyppiLista'].nil?
          _oa = _o['asiakirjanTyyppiLista']
            if(_oa.is_a? Hash)
              @asiakirjanTyyppiLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakirjanTyyppiLista =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakirjanTyyppiLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakirjanTyyppiLista.push String.from_json(_item)
                 else
                   @asiakirjanTyyppiLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakirjanTyyppiLista = _oa
            end
          end
        if !_o['asiakirjanValmistelijaLista'].nil?
          _oa = _o['asiakirjanValmistelijaLista']
            if(_oa.is_a? Hash)
              @asiakirjanValmistelijaLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakirjanValmistelijaLista =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakirjanValmistelijaLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakirjanValmistelijaLista.push String.from_json(_item)
                 else
                   @asiakirjanValmistelijaLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakirjanValmistelijaLista = _oa
            end
          end
        if !_o['asiakasnumero'].nil?
          _oa = _o['asiakasnumero']
            if(_oa.is_a? Hash)
              @asiakasnumero = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakasnumero =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakasnumero = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakasnumero.push Fixnum.from_json(_item)
                 else
                   @asiakasnumero.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakasnumero = _oa
            end
          end
        if !_o['includeJson'].nil?
          _oa = _o['includeJson']
            if(_oa.is_a? Hash)
              @includeJson = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @includeJson =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @includeJson = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @includeJson.push Boolean.from_json(_item)
                 else
                   @includeJson.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @includeJson = _oa
            end
          end
        if !_o['includeDocument'].nil?
          _oa = _o['includeDocument']
            if(_oa.is_a? Hash)
              @includeDocument = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @includeDocument =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @includeDocument = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @includeDocument.push Boolean.from_json(_item)
                 else
                   @includeDocument.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @includeDocument = _oa
            end
          end
        if !_o['pageSize'].nil?
          _oa = _o['pageSize']
            if(_oa.is_a? Hash)
              @pageSize = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @pageSize =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @pageSize = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @pageSize.push Fixnum.from_json(_item)
                 else
                   @pageSize.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @pageSize = _oa
            end
          end
        if !_o['pageIndex'].nil?
          _oa = _o['pageIndex']
            if(_oa.is_a? Hash)
              @pageIndex = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @pageIndex =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @pageIndex = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @pageIndex.push Fixnum.from_json(_item)
                 else
                   @pageIndex.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @pageIndex = _oa
            end
          end
        if !_o['palvelunjarjestajaLista'].nil?
          _oa = _o['palvelunjarjestajaLista']
            if(_oa.is_a? Hash)
              @palvelunjarjestajaLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palvelunjarjestajaLista =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palvelunjarjestajaLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palvelunjarjestajaLista.push String.from_json(_item)
                 else
                   @palvelunjarjestajaLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palvelunjarjestajaLista = _oa
            end
          end
        if !_o['palveluntuottajaLista'].nil?
          _oa = _o['palveluntuottajaLista']
            if(_oa.is_a? Hash)
              @palveluntuottajaLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palveluntuottajaLista =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palveluntuottajaLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palveluntuottajaLista.push String.from_json(_item)
                 else
                   @palveluntuottajaLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palveluntuottajaLista = _oa
            end
          end
        if !_o['palveluntoteuttajaLista'].nil?
          _oa = _o['palveluntoteuttajaLista']
            if(_oa.is_a? Hash)
              @palveluntoteuttajaLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palveluntoteuttajaLista =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palveluntoteuttajaLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palveluntoteuttajaLista.push String.from_json(_item)
                 else
                   @palveluntoteuttajaLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palveluntoteuttajaLista = _oa
            end
          end
        if !_o['valmistelijaLista'].nil?
          _oa = _o['valmistelijaLista']
            if(_oa.is_a? Hash)
              @valmistelijaLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @valmistelijaLista =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @valmistelijaLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @valmistelijaLista.push String.from_json(_item)
                 else
                   @valmistelijaLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @valmistelijaLista = _oa
            end
          end
        if !_o['ratkaisuLista'].nil?
          _oa = _o['ratkaisuLista']
            if(_oa.is_a? Hash)
              @ratkaisuLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ratkaisuLista =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ratkaisuLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ratkaisuLista.push String.from_json(_item)
                 else
                   @ratkaisuLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ratkaisuLista = _oa
            end
          end
        if !_o['rajoitusKuvausLista'].nil?
          _oa = _o['rajoitusKuvausLista']
            if(_oa.is_a? Hash)
              @rajoitusKuvausLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rajoitusKuvausLista =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rajoitusKuvausLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rajoitusKuvausLista.push String.from_json(_item)
                 else
                   @rajoitusKuvausLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rajoitusKuvausLista = _oa
            end
          end
        if !_o['paatoksentekijaLista'].nil?
          _oa = _o['paatoksentekijaLista']
            if(_oa.is_a? Hash)
              @paatoksentekijaLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @paatoksentekijaLista =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @paatoksentekijaLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @paatoksentekijaLista.push String.from_json(_item)
                 else
                   @paatoksentekijaLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @paatoksentekijaLista = _oa
            end
          end
        if !_o['grouping'].nil?
          _oa = _o['grouping']
            if(_oa.is_a? Hash)
              @grouping = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @grouping =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @grouping = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @grouping.push String.from_json(_item)
                 else
                   @grouping.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @grouping = _oa
            end
          end
        if !_o['idLista'].nil?
          _oa = _o['idLista']
            if(_oa.is_a? Hash)
              @idLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @idLista =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @idLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @idLista.push Bignum.from_json(_item)
                 else
                   @idLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @idLista = _oa
            end
          end
        if !_o['formId'].nil?
          _oa = _o['formId']
            if(_oa.is_a? Hash)
              @formId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @formId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @formId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @formId.push Fixnum.from_json(_item)
                 else
                   @formId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @formId = _oa
            end
          end
    end

    # constructs a AsiakirjaKyselyDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Kuha

module Util

  # (no documentation provided)
  class TapahtumaLuonne

    # (no documentation provided)
    ASSIGNED = "ASSIGNED"

    # (no documentation provided)
    TEMPLATE = "TEMPLATE"

    # (no documentation provided)
    COMMON = "COMMON"

    # (no documentation provided)
    TRANSITION = "TRANSITION"

    # (no documentation provided)
    ANCHOR = "ANCHOR"

    # (no documentation provided)
    WORKING_TIME = "WORKING_TIME"
  end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Eventmodel

  # (no documentation provided)
  class PlanningSettingsChangeable < Fi::Mediconsult::Mediplan::Dto::Eventmodel::PlanningSettings 

    # (no documentation provided)
    attr_accessor :timeLimitChangeable
    # (no documentation provided)
    attr_accessor :optimizationInUseChangeable
    # (no documentation provided)
    attr_accessor :keepResourcesInOptimizationChangeable
    # (no documentation provided)
    attr_accessor :customerVisitChangeable

    # the json hash for this PlanningSettingsChangeable
    def to_jaxb_json_hash
      _h = super
      _h['timeLimitChangeable'] = timeLimitChangeable.to_jaxb_json_hash unless timeLimitChangeable.nil?
      _h['optimizationInUseChangeable'] = optimizationInUseChangeable.to_jaxb_json_hash unless optimizationInUseChangeable.nil?
      _h['keepResourcesInOptimizationChangeable'] = keepResourcesInOptimizationChangeable.to_jaxb_json_hash unless keepResourcesInOptimizationChangeable.nil?
      _h['customerVisitChangeable'] = customerVisitChangeable.to_jaxb_json_hash unless customerVisitChangeable.nil?
      return _h
    end

    #initializes this PlanningSettingsChangeable with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['timeLimitChangeable'].nil?
          _oa = _o['timeLimitChangeable']
            if(_oa.is_a? Hash)
              @timeLimitChangeable = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @timeLimitChangeable =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @timeLimitChangeable = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @timeLimitChangeable.push Boolean.from_json(_item)
                 else
                   @timeLimitChangeable.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @timeLimitChangeable = _oa
            end
          end
        if !_o['optimizationInUseChangeable'].nil?
          _oa = _o['optimizationInUseChangeable']
            if(_oa.is_a? Hash)
              @optimizationInUseChangeable = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @optimizationInUseChangeable =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @optimizationInUseChangeable = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @optimizationInUseChangeable.push Boolean.from_json(_item)
                 else
                   @optimizationInUseChangeable.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @optimizationInUseChangeable = _oa
            end
          end
        if !_o['keepResourcesInOptimizationChangeable'].nil?
          _oa = _o['keepResourcesInOptimizationChangeable']
            if(_oa.is_a? Hash)
              @keepResourcesInOptimizationChangeable = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @keepResourcesInOptimizationChangeable =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @keepResourcesInOptimizationChangeable = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @keepResourcesInOptimizationChangeable.push Boolean.from_json(_item)
                 else
                   @keepResourcesInOptimizationChangeable.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @keepResourcesInOptimizationChangeable = _oa
            end
          end
        if !_o['customerVisitChangeable'].nil?
          _oa = _o['customerVisitChangeable']
            if(_oa.is_a? Hash)
              @customerVisitChangeable = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @customerVisitChangeable =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @customerVisitChangeable = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @customerVisitChangeable.push Boolean.from_json(_item)
                 else
                   @customerVisitChangeable.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @customerVisitChangeable = _oa
            end
          end
    end

    # constructs a PlanningSettingsChangeable from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class LaakitysView < Fi::Mediconsult::Core::Client::Dto::BaseModel 

    # Returns the laakityskategoria. Map of laakitysKategorias. Laakityskategoria type as key
    attr_accessor :laakityskategoria
    # Returns the permissionDTO object.
    attr_accessor :permissionDTO

    # the json hash for this LaakitysView
    def to_jaxb_json_hash
      _h = super
      _h['laakityskategoria'] = laakityskategoria.to_jaxb_json_hash unless laakityskategoria.nil?
      _h['permissionDTO'] = permissionDTO.to_jaxb_json_hash unless permissionDTO.nil?
      return _h
    end

    #initializes this LaakitysView with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['laakityskategoria'].nil?
          _oa = _o['laakityskategoria']
            if(_oa.is_a? Hash)
              @laakityskategoria = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laakityskategoria =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laakityskategoria = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laakityskategoria.push Hash.from_json(_item)
                 else
                   @laakityskategoria.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laakityskategoria = _oa
            end
          end
        if !_o['permissionDTO'].nil?
          _oa = _o['permissionDTO']
            if(_oa.is_a? Hash)
              @permissionDTO = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @permissionDTO =  Fi::Mediconsult::Core::Client::Dto::Permission.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @permissionDTO = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @permissionDTO.push Fi::Mediconsult::Core::Client::Dto::Permission.from_json(_item)
                 else
                   @permissionDTO.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @permissionDTO = _oa
            end
          end
    end

    # constructs a LaakitysView from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Paatoksentuki

  # (no documentation provided)
  class Indication < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # (no documentation provided)
    attr_accessor :drug
    # (no documentation provided)
    attr_accessor :diagnosis
    # (no documentation provided)
    attr_accessor :indicationLevel
    # (no documentation provided)
    attr_accessor :indicationText

    # the json hash for this Indication
    def to_jaxb_json_hash
      _h = super
      _h['drug'] = drug.to_jaxb_json_hash unless drug.nil?
      _h['diagnosis'] = diagnosis.to_jaxb_json_hash unless diagnosis.nil?
      _h['indicationLevel'] = indicationLevel.to_jaxb_json_hash unless indicationLevel.nil?
      _h['indicationText'] = indicationText.to_jaxb_json_hash unless indicationText.nil?
      return _h
    end

    #initializes this Indication with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['drug'].nil?
          _oa = _o['drug']
            if(_oa.is_a? Hash)
              @drug = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @drug =  Fi::Mediconsult::Core::Client::Dto::Paatoksentuki::Drug.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @drug = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @drug.push Fi::Mediconsult::Core::Client::Dto::Paatoksentuki::Drug.from_json(_item)
                 else
                   @drug.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @drug = _oa
            end
          end
        if !_o['diagnosis'].nil?
          _oa = _o['diagnosis']
            if(_oa.is_a? Hash)
              @diagnosis = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @diagnosis =  Fi::Mediconsult::Core::Client::Dto::Paatoksentuki::Diagnosis.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @diagnosis = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @diagnosis.push Fi::Mediconsult::Core::Client::Dto::Paatoksentuki::Diagnosis.from_json(_item)
                 else
                   @diagnosis.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @diagnosis = _oa
            end
          end
        if !_o['indicationLevel'].nil?
          _oa = _o['indicationLevel']
            if(_oa.is_a? Hash)
              @indicationLevel = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @indicationLevel =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @indicationLevel = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @indicationLevel.push Fixnum.from_json(_item)
                 else
                   @indicationLevel.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @indicationLevel = _oa
            end
          end
        if !_o['indicationText'].nil?
          _oa = _o['indicationText']
            if(_oa.is_a? Hash)
              @indicationText = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @indicationText =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @indicationText = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @indicationText.push String.from_json(_item)
                 else
                   @indicationText.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @indicationText = _oa
            end
          end
    end

    # constructs a Indication from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Laakitys

  # (no documentation provided)
  class Annostelu < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # (no documentation provided)
    attr_accessor :annosteluTeksti
    # (no documentation provided)
    attr_accessor :pakkauksia
    # (no documentation provided)
    attr_accessor :kokonaiskesto
    # (no documentation provided)
    attr_accessor :kokonaismaara
    # (no documentation provided)
    attr_accessor :kokonaismaarayksikko
    # (no documentation provided)
    attr_accessor :lyhyesti
    # (no documentation provided)
    attr_accessor :annettavaMaara
    # (no documentation provided)
    attr_accessor :annettavaMaksimi
    # (no documentation provided)
    attr_accessor :annettavaYksikko
    # (no documentation provided)
    attr_accessor :kertaAnnos
    # (no documentation provided)
    attr_accessor :desimaaleja
    # (no documentation provided)
    attr_accessor :paino
    # (no documentation provided)
    attr_accessor :lapsenPaino
    # (no documentation provided)
    attr_accessor :toisto
    # (no documentation provided)
    attr_accessor :toistoKuvaus
    # (no documentation provided)
    attr_accessor :aikayksikko
    # (no documentation provided)
    attr_accessor :antotahti
    # (no documentation provided)
    attr_accessor :antotahtiYksikko
    # (no documentation provided)
    attr_accessor :kellonajat
    # (no documentation provided)
    attr_accessor :vrkmaara
    # (no documentation provided)
    attr_accessor :vrkmaaraYksikko
    # (no documentation provided)
    attr_accessor :riittoisuus

    # the json hash for this Annostelu
    def to_jaxb_json_hash
      _h = super
      _h['annosteluTeksti'] = annosteluTeksti.to_jaxb_json_hash unless annosteluTeksti.nil?
      _h['pakkauksia'] = pakkauksia.to_jaxb_json_hash unless pakkauksia.nil?
      _h['kokonaiskesto'] = kokonaiskesto.to_jaxb_json_hash unless kokonaiskesto.nil?
      _h['kokonaismaara'] = kokonaismaara.to_jaxb_json_hash unless kokonaismaara.nil?
      _h['kokonaismaarayksikko'] = kokonaismaarayksikko.to_jaxb_json_hash unless kokonaismaarayksikko.nil?
      _h['lyhyesti'] = lyhyesti.to_jaxb_json_hash unless lyhyesti.nil?
      _h['annettavaMaara'] = annettavaMaara.to_jaxb_json_hash unless annettavaMaara.nil?
      _h['annettavaMaksimi'] = annettavaMaksimi.to_jaxb_json_hash unless annettavaMaksimi.nil?
      _h['annettavaYksikko'] = annettavaYksikko.to_jaxb_json_hash unless annettavaYksikko.nil?
      _h['kertaAnnos'] = kertaAnnos.to_jaxb_json_hash unless kertaAnnos.nil?
      _h['desimaaleja'] = desimaaleja.to_jaxb_json_hash unless desimaaleja.nil?
      _h['paino'] = paino.to_jaxb_json_hash unless paino.nil?
      _h['lapsenPaino'] = lapsenPaino.to_jaxb_json_hash unless lapsenPaino.nil?
      _h['toisto'] = toisto.to_jaxb_json_hash unless toisto.nil?
      _h['toistoKuvaus'] = toistoKuvaus.to_jaxb_json_hash unless toistoKuvaus.nil?
      _h['aikayksikko'] = aikayksikko.to_jaxb_json_hash unless aikayksikko.nil?
      _h['antotahti'] = antotahti.to_jaxb_json_hash unless antotahti.nil?
      _h['antotahtiYksikko'] = antotahtiYksikko.to_jaxb_json_hash unless antotahtiYksikko.nil?
      if !kellonajat.nil?
        _ha = Array.new
        kellonajat.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['kellonajat'] = _ha
      end
      _h['vrkmaara'] = vrkmaara.to_jaxb_json_hash unless vrkmaara.nil?
      _h['vrkmaaraYksikko'] = vrkmaaraYksikko.to_jaxb_json_hash unless vrkmaaraYksikko.nil?
      _h['riittoisuus'] = riittoisuus.to_jaxb_json_hash unless riittoisuus.nil?
      return _h
    end

    #initializes this Annostelu with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['annosteluTeksti'].nil?
          _oa = _o['annosteluTeksti']
            if(_oa.is_a? Hash)
              @annosteluTeksti = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @annosteluTeksti =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @annosteluTeksti = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @annosteluTeksti.push String.from_json(_item)
                 else
                   @annosteluTeksti.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @annosteluTeksti = _oa
            end
          end
        if !_o['pakkauksia'].nil?
          _oa = _o['pakkauksia']
            if(_oa.is_a? Hash)
              @pakkauksia = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @pakkauksia =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @pakkauksia = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @pakkauksia.push Fixnum.from_json(_item)
                 else
                   @pakkauksia.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @pakkauksia = _oa
            end
          end
        if !_o['kokonaiskesto'].nil?
          _oa = _o['kokonaiskesto']
            if(_oa.is_a? Hash)
              @kokonaiskesto = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kokonaiskesto =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kokonaiskesto = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kokonaiskesto.push String.from_json(_item)
                 else
                   @kokonaiskesto.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kokonaiskesto = _oa
            end
          end
        if !_o['kokonaismaara'].nil?
          _oa = _o['kokonaismaara']
            if(_oa.is_a? Hash)
              @kokonaismaara = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kokonaismaara =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kokonaismaara = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kokonaismaara.push Float.from_json(_item)
                 else
                   @kokonaismaara.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kokonaismaara = _oa
            end
          end
        if !_o['kokonaismaarayksikko'].nil?
          _oa = _o['kokonaismaarayksikko']
            if(_oa.is_a? Hash)
              @kokonaismaarayksikko = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kokonaismaarayksikko =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kokonaismaarayksikko = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kokonaismaarayksikko.push String.from_json(_item)
                 else
                   @kokonaismaarayksikko.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kokonaismaarayksikko = _oa
            end
          end
        if !_o['lyhyesti'].nil?
          _oa = _o['lyhyesti']
            if(_oa.is_a? Hash)
              @lyhyesti = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lyhyesti =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lyhyesti = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lyhyesti.push String.from_json(_item)
                 else
                   @lyhyesti.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lyhyesti = _oa
            end
          end
        if !_o['annettavaMaara'].nil?
          _oa = _o['annettavaMaara']
            if(_oa.is_a? Hash)
              @annettavaMaara = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @annettavaMaara =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @annettavaMaara = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @annettavaMaara.push Fixnum.from_json(_item)
                 else
                   @annettavaMaara.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @annettavaMaara = _oa
            end
          end
        if !_o['annettavaMaksimi'].nil?
          _oa = _o['annettavaMaksimi']
            if(_oa.is_a? Hash)
              @annettavaMaksimi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @annettavaMaksimi =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @annettavaMaksimi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @annettavaMaksimi.push Fixnum.from_json(_item)
                 else
                   @annettavaMaksimi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @annettavaMaksimi = _oa
            end
          end
        if !_o['annettavaYksikko'].nil?
          _oa = _o['annettavaYksikko']
            if(_oa.is_a? Hash)
              @annettavaYksikko = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @annettavaYksikko =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @annettavaYksikko = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @annettavaYksikko.push String.from_json(_item)
                 else
                   @annettavaYksikko.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @annettavaYksikko = _oa
            end
          end
        if !_o['kertaAnnos'].nil?
          _oa = _o['kertaAnnos']
            if(_oa.is_a? Hash)
              @kertaAnnos = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kertaAnnos =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kertaAnnos = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kertaAnnos.push String.from_json(_item)
                 else
                   @kertaAnnos.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kertaAnnos = _oa
            end
          end
        if !_o['desimaaleja'].nil?
          _oa = _o['desimaaleja']
            if(_oa.is_a? Hash)
              @desimaaleja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @desimaaleja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @desimaaleja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @desimaaleja.push Fixnum.from_json(_item)
                 else
                   @desimaaleja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @desimaaleja = _oa
            end
          end
        if !_o['paino'].nil?
          _oa = _o['paino']
            if(_oa.is_a? Hash)
              @paino = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @paino =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @paino = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @paino.push Float.from_json(_item)
                 else
                   @paino.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @paino = _oa
            end
          end
        if !_o['lapsenPaino'].nil?
          _oa = _o['lapsenPaino']
            if(_oa.is_a? Hash)
              @lapsenPaino = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lapsenPaino =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lapsenPaino = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lapsenPaino.push Float.from_json(_item)
                 else
                   @lapsenPaino.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lapsenPaino = _oa
            end
          end
        if !_o['toisto'].nil?
          _oa = _o['toisto']
            if(_oa.is_a? Hash)
              @toisto = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @toisto =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @toisto = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @toisto.push String.from_json(_item)
                 else
                   @toisto.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @toisto = _oa
            end
          end
        if !_o['toistoKuvaus'].nil?
          _oa = _o['toistoKuvaus']
            if(_oa.is_a? Hash)
              @toistoKuvaus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @toistoKuvaus =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @toistoKuvaus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @toistoKuvaus.push String.from_json(_item)
                 else
                   @toistoKuvaus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @toistoKuvaus = _oa
            end
          end
        if !_o['aikayksikko'].nil?
          _oa = _o['aikayksikko']
            if(_oa.is_a? Hash)
              @aikayksikko = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @aikayksikko =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @aikayksikko = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @aikayksikko.push String.from_json(_item)
                 else
                   @aikayksikko.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @aikayksikko = _oa
            end
          end
        if !_o['antotahti'].nil?
          _oa = _o['antotahti']
            if(_oa.is_a? Hash)
              @antotahti = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @antotahti =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @antotahti = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @antotahti.push Float.from_json(_item)
                 else
                   @antotahti.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @antotahti = _oa
            end
          end
        if !_o['antotahtiYksikko'].nil?
          _oa = _o['antotahtiYksikko']
            if(_oa.is_a? Hash)
              @antotahtiYksikko = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @antotahtiYksikko =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @antotahtiYksikko = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @antotahtiYksikko.push String.from_json(_item)
                 else
                   @antotahtiYksikko.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @antotahtiYksikko = _oa
            end
          end
        if !_o['kellonajat'].nil?
          _oa = _o['kellonajat']
            if(_oa.is_a? Hash)
              @kellonajat = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kellonajat =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kellonajat = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kellonajat.push String.from_json(_item)
                 else
                   @kellonajat.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kellonajat = _oa
            end
          end
        if !_o['vrkmaara'].nil?
          _oa = _o['vrkmaara']
            if(_oa.is_a? Hash)
              @vrkmaara = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vrkmaara =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vrkmaara = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vrkmaara.push Float.from_json(_item)
                 else
                   @vrkmaara.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vrkmaara = _oa
            end
          end
        if !_o['vrkmaaraYksikko'].nil?
          _oa = _o['vrkmaaraYksikko']
            if(_oa.is_a? Hash)
              @vrkmaaraYksikko = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vrkmaaraYksikko =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vrkmaaraYksikko = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vrkmaaraYksikko.push String.from_json(_item)
                 else
                   @vrkmaaraYksikko.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vrkmaaraYksikko = _oa
            end
          end
        if !_o['riittoisuus'].nil?
          _oa = _o['riittoisuus']
            if(_oa.is_a? Hash)
              @riittoisuus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @riittoisuus =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @riittoisuus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @riittoisuus.push String.from_json(_item)
                 else
                   @riittoisuus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @riittoisuus = _oa
            end
          end
    end

    # constructs a Annostelu from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Medisos

module Dto

  # (no documentation provided)
  class AsiakirjanSosiaalipalveluTietoDto < Fi::Mediconsult::Medisos::Dto::MediSosDtoBase 

    # (no documentation provided)
    attr_accessor :sosiaalipalveluList
    # (no documentation provided)
    attr_accessor :alkamispaiva
    # (no documentation provided)
    attr_accessor :paattymispaiva
    # (no documentation provided)
    attr_accessor :toimeenpanoTapa
    # (no documentation provided)
    attr_accessor :vastaavaTyontekija
    # (no documentation provided)
    attr_accessor :vastaavaTyontekijaInfo
    # (no documentation provided)
    attr_accessor :asiakirjaId
    # (no documentation provided)
    attr_accessor :asiakirjanNimi
    # (no documentation provided)
    attr_accessor :prosessinvaiheLista

    # the json hash for this AsiakirjanSosiaalipalveluTietoDto
    def to_jaxb_json_hash
      _h = super
      if !sosiaalipalveluList.nil?
        _ha = Array.new
        sosiaalipalveluList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['sosiaalipalveluList'] = _ha
      end
      _h['alkamispaiva'] = alkamispaiva.to_jaxb_json_hash unless alkamispaiva.nil?
      _h['paattymispaiva'] = paattymispaiva.to_jaxb_json_hash unless paattymispaiva.nil?
      _h['toimeenpanoTapa'] = toimeenpanoTapa.to_jaxb_json_hash unless toimeenpanoTapa.nil?
      _h['vastaavaTyontekija'] = vastaavaTyontekija.to_jaxb_json_hash unless vastaavaTyontekija.nil?
      _h['vastaavaTyontekijaInfo'] = vastaavaTyontekijaInfo.to_jaxb_json_hash unless vastaavaTyontekijaInfo.nil?
      _h['asiakirjaId'] = asiakirjaId.to_jaxb_json_hash unless asiakirjaId.nil?
      _h['asiakirjanNimi'] = asiakirjanNimi.to_jaxb_json_hash unless asiakirjanNimi.nil?
      if !prosessinvaiheLista.nil?
        _ha = Array.new
        prosessinvaiheLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['prosessinvaiheLista'] = _ha
      end
      return _h
    end

    #initializes this AsiakirjanSosiaalipalveluTietoDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['sosiaalipalveluList'].nil?
          _oa = _o['sosiaalipalveluList']
            if(_oa.is_a? Hash)
              @sosiaalipalveluList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @sosiaalipalveluList =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @sosiaalipalveluList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @sosiaalipalveluList.push String.from_json(_item)
                 else
                   @sosiaalipalveluList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @sosiaalipalveluList = _oa
            end
          end
        if !_o['alkamispaiva'].nil?
          _oa = _o['alkamispaiva']
            if(_oa.is_a? Hash)
              @alkamispaiva = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @alkamispaiva =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @alkamispaiva = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @alkamispaiva.push Time.from_json(_item)
                 else
                   @alkamispaiva.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @alkamispaiva = _oa
            end
          end
        if !_o['paattymispaiva'].nil?
          _oa = _o['paattymispaiva']
            if(_oa.is_a? Hash)
              @paattymispaiva = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @paattymispaiva =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @paattymispaiva = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @paattymispaiva.push Time.from_json(_item)
                 else
                   @paattymispaiva.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @paattymispaiva = _oa
            end
          end
        if !_o['toimeenpanoTapa'].nil?
          _oa = _o['toimeenpanoTapa']
            if(_oa.is_a? Hash)
              @toimeenpanoTapa = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @toimeenpanoTapa =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @toimeenpanoTapa = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @toimeenpanoTapa.push String.from_json(_item)
                 else
                   @toimeenpanoTapa.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @toimeenpanoTapa = _oa
            end
          end
        if !_o['vastaavaTyontekija'].nil?
          _oa = _o['vastaavaTyontekija']
            if(_oa.is_a? Hash)
              @vastaavaTyontekija = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vastaavaTyontekija =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vastaavaTyontekija = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vastaavaTyontekija.push Fixnum.from_json(_item)
                 else
                   @vastaavaTyontekija.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vastaavaTyontekija = _oa
            end
          end
        if !_o['vastaavaTyontekijaInfo'].nil?
          _oa = _o['vastaavaTyontekijaInfo']
            if(_oa.is_a? Hash)
              @vastaavaTyontekijaInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vastaavaTyontekijaInfo =  Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vastaavaTyontekijaInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vastaavaTyontekijaInfo.push Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_item)
                 else
                   @vastaavaTyontekijaInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vastaavaTyontekijaInfo = _oa
            end
          end
        if !_o['asiakirjaId'].nil?
          _oa = _o['asiakirjaId']
            if(_oa.is_a? Hash)
              @asiakirjaId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakirjaId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakirjaId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakirjaId.push Bignum.from_json(_item)
                 else
                   @asiakirjaId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakirjaId = _oa
            end
          end
        if !_o['asiakirjanNimi'].nil?
          _oa = _o['asiakirjanNimi']
            if(_oa.is_a? Hash)
              @asiakirjanNimi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakirjanNimi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakirjanNimi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakirjanNimi.push String.from_json(_item)
                 else
                   @asiakirjanNimi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakirjanNimi = _oa
            end
          end
        if !_o['prosessinvaiheLista'].nil?
          _oa = _o['prosessinvaiheLista']
            if(_oa.is_a? Hash)
              @prosessinvaiheLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @prosessinvaiheLista =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @prosessinvaiheLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @prosessinvaiheLista.push String.from_json(_item)
                 else
                   @prosessinvaiheLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @prosessinvaiheLista = _oa
            end
          end
    end

    # constructs a AsiakirjanSosiaalipalveluTietoDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class Potilasryhma < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # (no documentation provided)
    attr_accessor :otsikko
    # (no documentation provided)
    attr_accessor :koodi
    # (no documentation provided)
    attr_accessor :selite

    # the json hash for this Potilasryhma
    def to_jaxb_json_hash
      _h = super
      _h['otsikko'] = otsikko.to_jaxb_json_hash unless otsikko.nil?
      _h['koodi'] = koodi.to_jaxb_json_hash unless koodi.nil?
      _h['selite'] = selite.to_jaxb_json_hash unless selite.nil?
      return _h
    end

    #initializes this Potilasryhma with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['otsikko'].nil?
          _oa = _o['otsikko']
            if(_oa.is_a? Hash)
              @otsikko = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @otsikko =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @otsikko = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @otsikko.push String.from_json(_item)
                 else
                   @otsikko.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @otsikko = _oa
            end
          end
        if !_o['koodi'].nil?
          _oa = _o['koodi']
            if(_oa.is_a? Hash)
              @koodi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @koodi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @koodi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @koodi.push String.from_json(_item)
                 else
                   @koodi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @koodi = _oa
            end
          end
        if !_o['selite'].nil?
          _oa = _o['selite']
            if(_oa.is_a? Hash)
              @selite = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @selite =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @selite = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @selite.push String.from_json(_item)
                 else
                   @selite.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @selite = _oa
            end
          end
    end

    # constructs a Potilasryhma from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class TutkimuspyyntoHerkkyys < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # (no documentation provided)
    attr_accessor :rivi
    # (no documentation provided)
    attr_accessor :antibiootti
    # (no documentation provided)
    attr_accessor :kiekkoherkkyys
    # (no documentation provided)
    attr_accessor :micherkkyys
    # (no documentation provided)
    attr_accessor :lyhenne
    # (no documentation provided)
    attr_accessor :numero
    # (no documentation provided)
    attr_accessor :ryhma

    # the json hash for this TutkimuspyyntoHerkkyys
    def to_jaxb_json_hash
      _h = super
      _h['rivi'] = rivi.to_jaxb_json_hash unless rivi.nil?
      _h['antibiootti'] = antibiootti.to_jaxb_json_hash unless antibiootti.nil?
      _h['kiekkoherkkyys'] = kiekkoherkkyys.to_jaxb_json_hash unless kiekkoherkkyys.nil?
      _h['micherkkyys'] = micherkkyys.to_jaxb_json_hash unless micherkkyys.nil?
      _h['lyhenne'] = lyhenne.to_jaxb_json_hash unless lyhenne.nil?
      _h['numero'] = numero.to_jaxb_json_hash unless numero.nil?
      _h['ryhma'] = ryhma.to_jaxb_json_hash unless ryhma.nil?
      return _h
    end

    #initializes this TutkimuspyyntoHerkkyys with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['rivi'].nil?
          _oa = _o['rivi']
            if(_oa.is_a? Hash)
              @rivi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rivi =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rivi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rivi.push Fixnum.from_json(_item)
                 else
                   @rivi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rivi = _oa
            end
          end
        if !_o['antibiootti'].nil?
          _oa = _o['antibiootti']
            if(_oa.is_a? Hash)
              @antibiootti = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @antibiootti =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @antibiootti = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @antibiootti.push String.from_json(_item)
                 else
                   @antibiootti.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @antibiootti = _oa
            end
          end
        if !_o['kiekkoherkkyys'].nil?
          _oa = _o['kiekkoherkkyys']
            if(_oa.is_a? Hash)
              @kiekkoherkkyys = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kiekkoherkkyys =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kiekkoherkkyys = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kiekkoherkkyys.push Fixnum.from_json(_item)
                 else
                   @kiekkoherkkyys.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kiekkoherkkyys = _oa
            end
          end
        if !_o['micherkkyys'].nil?
          _oa = _o['micherkkyys']
            if(_oa.is_a? Hash)
              @micherkkyys = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @micherkkyys =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @micherkkyys = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @micherkkyys.push String.from_json(_item)
                 else
                   @micherkkyys.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @micherkkyys = _oa
            end
          end
        if !_o['lyhenne'].nil?
          _oa = _o['lyhenne']
            if(_oa.is_a? Hash)
              @lyhenne = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lyhenne =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lyhenne = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lyhenne.push String.from_json(_item)
                 else
                   @lyhenne.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lyhenne = _oa
            end
          end
        if !_o['numero'].nil?
          _oa = _o['numero']
            if(_oa.is_a? Hash)
              @numero = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @numero =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @numero = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @numero.push String.from_json(_item)
                 else
                   @numero.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @numero = _oa
            end
          end
        if !_o['ryhma'].nil?
          _oa = _o['ryhma']
            if(_oa.is_a? Hash)
              @ryhma = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ryhma =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ryhma = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ryhma.push String.from_json(_item)
                 else
                   @ryhma.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ryhma = _oa
            end
          end
    end

    # constructs a TutkimuspyyntoHerkkyys from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Kanta

module Suostumustenhallinta

  # (no documentation provided)
  class InformationsDTO < Fi::Mediconsult::Core::Client::Dto::Kanta::KantaDTO 

    # (no documentation provided)
    attr_accessor :informations
    # (no documentation provided)
    attr_accessor :documentInfo

    # the json hash for this InformationsDTO
    def to_jaxb_json_hash
      _h = super
      if !informations.nil?
        _ha = Array.new
        informations.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['informations'] = _ha
      end
      _h['documentInfo'] = documentInfo.to_jaxb_json_hash unless documentInfo.nil?
      return _h
    end

    #initializes this InformationsDTO with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['informations'].nil?
          _oa = _o['informations']
            if(_oa.is_a? Hash)
              @informations = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @informations =  Fi::Mediconsult::Core::Client::Dto::Kanta::Suostumustenhallinta::Information.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @informations = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @informations.push Fi::Mediconsult::Core::Client::Dto::Kanta::Suostumustenhallinta::Information.from_json(_item)
                 else
                   @informations.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @informations = _oa
            end
          end
        if !_o['documentInfo'].nil?
          _oa = _o['documentInfo']
            if(_oa.is_a? Hash)
              @documentInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @documentInfo =  Fi::Mediconsult::Core::Client::Dto::Kanta::DocumentInfo.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @documentInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @documentInfo.push Fi::Mediconsult::Core::Client::Dto::Kanta::DocumentInfo.from_json(_item)
                 else
                   @documentInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @documentInfo = _oa
            end
          end
    end

    # constructs a InformationsDTO from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Laakitys

  # (no documentation provided)
  class LaakeYhteisvaikutus < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # Returns the ATC code or the name of the agent (atc tai vaikuttava aine)
    attr_accessor :aine
    # Returns the used code system
    # -If getAine returns an ATC code, getKoodisto returns &quot;ATC&quot;
    attr_accessor :koodisto
    # Returns the origin of interaction
    # -&#39;O&#39; if interaction is linked in the current organization
    # -&#39;A&#39; or &#39;M&#39; otherwise
    attr_accessor :alkupera

    # the json hash for this LaakeYhteisvaikutus
    def to_jaxb_json_hash
      _h = super
      _h['aine'] = aine.to_jaxb_json_hash unless aine.nil?
      _h['koodisto'] = koodisto.to_jaxb_json_hash unless koodisto.nil?
      _h['alkupera'] = alkupera.to_jaxb_json_hash unless alkupera.nil?
      return _h
    end

    #initializes this LaakeYhteisvaikutus with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['aine'].nil?
          _oa = _o['aine']
            if(_oa.is_a? Hash)
              @aine = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @aine =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @aine = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @aine.push String.from_json(_item)
                 else
                   @aine.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @aine = _oa
            end
          end
        if !_o['koodisto'].nil?
          _oa = _o['koodisto']
            if(_oa.is_a? Hash)
              @koodisto = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @koodisto =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @koodisto = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @koodisto.push String.from_json(_item)
                 else
                   @koodisto.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @koodisto = _oa
            end
          end
        if !_o['alkupera'].nil?
          _oa = _o['alkupera']
            if(_oa.is_a? Hash)
              @alkupera = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @alkupera =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @alkupera = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @alkupera.push Fixnum.from_json(_item)
                 else
                   @alkupera.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @alkupera = _oa
            end
          end
    end

    # constructs a LaakeYhteisvaikutus from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Paatoksentuki

  # (no documentation provided)
  class DrugsAndRenalFunction < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # (no documentation provided)
    attr_accessor :drug
    # (no documentation provided)
    attr_accessor :drugAndRenalFunctionText
    # (no documentation provided)
    attr_accessor :contraindicationLevel
    # (no documentation provided)
    attr_accessor :drugAndRenalFunctionLink

    # the json hash for this DrugsAndRenalFunction
    def to_jaxb_json_hash
      _h = super
      _h['drug'] = drug.to_jaxb_json_hash unless drug.nil?
      _h['drugAndRenalFunctionText'] = drugAndRenalFunctionText.to_jaxb_json_hash unless drugAndRenalFunctionText.nil?
      _h['contraindicationLevel'] = contraindicationLevel.to_jaxb_json_hash unless contraindicationLevel.nil?
      _h['drugAndRenalFunctionLink'] = drugAndRenalFunctionLink.to_jaxb_json_hash unless drugAndRenalFunctionLink.nil?
      return _h
    end

    #initializes this DrugsAndRenalFunction with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['drug'].nil?
          _oa = _o['drug']
            if(_oa.is_a? Hash)
              @drug = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @drug =  Fi::Mediconsult::Core::Client::Dto::Paatoksentuki::Drug.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @drug = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @drug.push Fi::Mediconsult::Core::Client::Dto::Paatoksentuki::Drug.from_json(_item)
                 else
                   @drug.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @drug = _oa
            end
          end
        if !_o['drugAndRenalFunctionText'].nil?
          _oa = _o['drugAndRenalFunctionText']
            if(_oa.is_a? Hash)
              @drugAndRenalFunctionText = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @drugAndRenalFunctionText =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @drugAndRenalFunctionText = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @drugAndRenalFunctionText.push String.from_json(_item)
                 else
                   @drugAndRenalFunctionText.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @drugAndRenalFunctionText = _oa
            end
          end
        if !_o['contraindicationLevel'].nil?
          _oa = _o['contraindicationLevel']
            if(_oa.is_a? Hash)
              @contraindicationLevel = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @contraindicationLevel =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @contraindicationLevel = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @contraindicationLevel.push String.from_json(_item)
                 else
                   @contraindicationLevel.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @contraindicationLevel = _oa
            end
          end
        if !_o['drugAndRenalFunctionLink'].nil?
          _oa = _o['drugAndRenalFunctionLink']
            if(_oa.is_a? Hash)
              @drugAndRenalFunctionLink = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @drugAndRenalFunctionLink =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @drugAndRenalFunctionLink = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @drugAndRenalFunctionLink.push String.from_json(_item)
                 else
                   @drugAndRenalFunctionLink.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @drugAndRenalFunctionLink = _oa
            end
          end
    end

    # constructs a DrugsAndRenalFunction from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Medisos

module Dto

  # (no documentation provided)
  class PalveluyksikkoAsiakkuusKyselyDto < Fi::Mediconsult::Medisos::Dto::MediSosDtoBase 

    # (no documentation provided)
    attr_accessor :pageSize
    # (no documentation provided)
    attr_accessor :pageIndex
    # (no documentation provided)
    attr_accessor :grouping
    # (no documentation provided)
    attr_accessor :asiakasnumeroList
    # (no documentation provided)
    attr_accessor :asiakasnimiList
    # (no documentation provided)
    attr_accessor :lahityontekijanumeroList
    # (no documentation provided)
    attr_accessor :lahityontekijanimiList
    # (no documentation provided)
    attr_accessor :palveluyksikkonumeroList
    # (no documentation provided)
    attr_accessor :palveluyksikkonimiList
    # (no documentation provided)
    attr_accessor :palveluyksikkoAsiakkuusTilaList
    # (no documentation provided)
    attr_accessor :formId

    # the json hash for this PalveluyksikkoAsiakkuusKyselyDto
    def to_jaxb_json_hash
      _h = super
      _h['pageSize'] = pageSize.to_jaxb_json_hash unless pageSize.nil?
      _h['pageIndex'] = pageIndex.to_jaxb_json_hash unless pageIndex.nil?
      _h['grouping'] = grouping.to_jaxb_json_hash unless grouping.nil?
      if !asiakasnumeroList.nil?
        _ha = Array.new
        asiakasnumeroList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['asiakasnumeroList'] = _ha
      end
      if !asiakasnimiList.nil?
        _ha = Array.new
        asiakasnimiList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['asiakasnimiList'] = _ha
      end
      if !lahityontekijanumeroList.nil?
        _ha = Array.new
        lahityontekijanumeroList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['lahityontekijanumeroList'] = _ha
      end
      if !lahityontekijanimiList.nil?
        _ha = Array.new
        lahityontekijanimiList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['lahityontekijanimiList'] = _ha
      end
      if !palveluyksikkonumeroList.nil?
        _ha = Array.new
        palveluyksikkonumeroList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['palveluyksikkonumeroList'] = _ha
      end
      if !palveluyksikkonimiList.nil?
        _ha = Array.new
        palveluyksikkonimiList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['palveluyksikkonimiList'] = _ha
      end
      if !palveluyksikkoAsiakkuusTilaList.nil?
        _ha = Array.new
        palveluyksikkoAsiakkuusTilaList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['palveluyksikkoAsiakkuusTilaList'] = _ha
      end
      _h['formId'] = formId.to_jaxb_json_hash unless formId.nil?
      return _h
    end

    #initializes this PalveluyksikkoAsiakkuusKyselyDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['pageSize'].nil?
          _oa = _o['pageSize']
            if(_oa.is_a? Hash)
              @pageSize = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @pageSize =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @pageSize = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @pageSize.push Fixnum.from_json(_item)
                 else
                   @pageSize.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @pageSize = _oa
            end
          end
        if !_o['pageIndex'].nil?
          _oa = _o['pageIndex']
            if(_oa.is_a? Hash)
              @pageIndex = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @pageIndex =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @pageIndex = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @pageIndex.push Fixnum.from_json(_item)
                 else
                   @pageIndex.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @pageIndex = _oa
            end
          end
        if !_o['grouping'].nil?
          _oa = _o['grouping']
            if(_oa.is_a? Hash)
              @grouping = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @grouping =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @grouping = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @grouping.push String.from_json(_item)
                 else
                   @grouping.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @grouping = _oa
            end
          end
        if !_o['asiakasnumeroList'].nil?
          _oa = _o['asiakasnumeroList']
            if(_oa.is_a? Hash)
              @asiakasnumeroList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakasnumeroList =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakasnumeroList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakasnumeroList.push Fixnum.from_json(_item)
                 else
                   @asiakasnumeroList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakasnumeroList = _oa
            end
          end
        if !_o['asiakasnimiList'].nil?
          _oa = _o['asiakasnimiList']
            if(_oa.is_a? Hash)
              @asiakasnimiList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakasnimiList =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakasnimiList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakasnimiList.push String.from_json(_item)
                 else
                   @asiakasnimiList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakasnimiList = _oa
            end
          end
        if !_o['lahityontekijanumeroList'].nil?
          _oa = _o['lahityontekijanumeroList']
            if(_oa.is_a? Hash)
              @lahityontekijanumeroList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lahityontekijanumeroList =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lahityontekijanumeroList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lahityontekijanumeroList.push Fixnum.from_json(_item)
                 else
                   @lahityontekijanumeroList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lahityontekijanumeroList = _oa
            end
          end
        if !_o['lahityontekijanimiList'].nil?
          _oa = _o['lahityontekijanimiList']
            if(_oa.is_a? Hash)
              @lahityontekijanimiList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lahityontekijanimiList =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lahityontekijanimiList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lahityontekijanimiList.push String.from_json(_item)
                 else
                   @lahityontekijanimiList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lahityontekijanimiList = _oa
            end
          end
        if !_o['palveluyksikkonumeroList'].nil?
          _oa = _o['palveluyksikkonumeroList']
            if(_oa.is_a? Hash)
              @palveluyksikkonumeroList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palveluyksikkonumeroList =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palveluyksikkonumeroList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palveluyksikkonumeroList.push Fixnum.from_json(_item)
                 else
                   @palveluyksikkonumeroList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palveluyksikkonumeroList = _oa
            end
          end
        if !_o['palveluyksikkonimiList'].nil?
          _oa = _o['palveluyksikkonimiList']
            if(_oa.is_a? Hash)
              @palveluyksikkonimiList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palveluyksikkonimiList =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palveluyksikkonimiList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palveluyksikkonimiList.push String.from_json(_item)
                 else
                   @palveluyksikkonimiList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palveluyksikkonimiList = _oa
            end
          end
        if !_o['palveluyksikkoAsiakkuusTilaList'].nil?
          _oa = _o['palveluyksikkoAsiakkuusTilaList']
            if(_oa.is_a? Hash)
              @palveluyksikkoAsiakkuusTilaList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palveluyksikkoAsiakkuusTilaList =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palveluyksikkoAsiakkuusTilaList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palveluyksikkoAsiakkuusTilaList.push String.from_json(_item)
                 else
                   @palveluyksikkoAsiakkuusTilaList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palveluyksikkoAsiakkuusTilaList = _oa
            end
          end
        if !_o['formId'].nil?
          _oa = _o['formId']
            if(_oa.is_a? Hash)
              @formId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @formId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @formId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @formId.push Fixnum.from_json(_item)
                 else
                   @formId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @formId = _oa
            end
          end
    end

    # constructs a PalveluyksikkoAsiakkuusKyselyDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Laakitys

  # (no documentation provided)
  class LaakitysTapa < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # Returns the &quot;antoreitti&quot; in code
    attr_accessor :reittikoodi
    # Returns the &quot;antoreitti&quot; in text
    attr_accessor :reittiteksti
    # Returns the &quot;antopaikka&quot; in code
    attr_accessor :paikkakoodi
    # Returns the &quot;antopaikka&quot; in text
    attr_accessor :paikkateksti
    # Returns the &quot;antoväline&quot; in code
    attr_accessor :valinekoodi
    # Returns the &quot;antoväline&quot; in text
    attr_accessor :valineteksti
    # Returns the &quot;antotapa&quot; in code
    attr_accessor :tapakoodi
    # Returns the &quot;antotapa&quot; in text
    attr_accessor :tapateksti
    # (no documentation provided)
    attr_accessor :rivi

    # the json hash for this LaakitysTapa
    def to_jaxb_json_hash
      _h = super
      _h['reittikoodi'] = reittikoodi.to_jaxb_json_hash unless reittikoodi.nil?
      _h['reittiteksti'] = reittiteksti.to_jaxb_json_hash unless reittiteksti.nil?
      _h['paikkakoodi'] = paikkakoodi.to_jaxb_json_hash unless paikkakoodi.nil?
      _h['paikkateksti'] = paikkateksti.to_jaxb_json_hash unless paikkateksti.nil?
      _h['valinekoodi'] = valinekoodi.to_jaxb_json_hash unless valinekoodi.nil?
      _h['valineteksti'] = valineteksti.to_jaxb_json_hash unless valineteksti.nil?
      _h['tapakoodi'] = tapakoodi.to_jaxb_json_hash unless tapakoodi.nil?
      _h['tapateksti'] = tapateksti.to_jaxb_json_hash unless tapateksti.nil?
      _h['rivi'] = rivi.to_jaxb_json_hash unless rivi.nil?
      return _h
    end

    #initializes this LaakitysTapa with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['reittikoodi'].nil?
          _oa = _o['reittikoodi']
            if(_oa.is_a? Hash)
              @reittikoodi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @reittikoodi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @reittikoodi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @reittikoodi.push String.from_json(_item)
                 else
                   @reittikoodi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @reittikoodi = _oa
            end
          end
        if !_o['reittiteksti'].nil?
          _oa = _o['reittiteksti']
            if(_oa.is_a? Hash)
              @reittiteksti = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @reittiteksti =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @reittiteksti = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @reittiteksti.push String.from_json(_item)
                 else
                   @reittiteksti.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @reittiteksti = _oa
            end
          end
        if !_o['paikkakoodi'].nil?
          _oa = _o['paikkakoodi']
            if(_oa.is_a? Hash)
              @paikkakoodi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @paikkakoodi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @paikkakoodi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @paikkakoodi.push String.from_json(_item)
                 else
                   @paikkakoodi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @paikkakoodi = _oa
            end
          end
        if !_o['paikkateksti'].nil?
          _oa = _o['paikkateksti']
            if(_oa.is_a? Hash)
              @paikkateksti = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @paikkateksti =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @paikkateksti = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @paikkateksti.push String.from_json(_item)
                 else
                   @paikkateksti.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @paikkateksti = _oa
            end
          end
        if !_o['valinekoodi'].nil?
          _oa = _o['valinekoodi']
            if(_oa.is_a? Hash)
              @valinekoodi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @valinekoodi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @valinekoodi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @valinekoodi.push String.from_json(_item)
                 else
                   @valinekoodi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @valinekoodi = _oa
            end
          end
        if !_o['valineteksti'].nil?
          _oa = _o['valineteksti']
            if(_oa.is_a? Hash)
              @valineteksti = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @valineteksti =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @valineteksti = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @valineteksti.push String.from_json(_item)
                 else
                   @valineteksti.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @valineteksti = _oa
            end
          end
        if !_o['tapakoodi'].nil?
          _oa = _o['tapakoodi']
            if(_oa.is_a? Hash)
              @tapakoodi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tapakoodi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tapakoodi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tapakoodi.push String.from_json(_item)
                 else
                   @tapakoodi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tapakoodi = _oa
            end
          end
        if !_o['tapateksti'].nil?
          _oa = _o['tapateksti']
            if(_oa.is_a? Hash)
              @tapateksti = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tapateksti =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tapateksti = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tapateksti.push String.from_json(_item)
                 else
                   @tapateksti.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tapateksti = _oa
            end
          end
        if !_o['rivi'].nil?
          _oa = _o['rivi']
            if(_oa.is_a? Hash)
              @rivi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rivi =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rivi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rivi.push Fixnum.from_json(_item)
                 else
                   @rivi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rivi = _oa
            end
          end
    end

    # constructs a LaakitysTapa from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Event

  # (no documentation provided)
  class EventResourceDto < Fi::Mediconsult::Mediplan::Dto::KuhaDtoBase 

    # the name
    attr_accessor :name
    # the delay
    attr_accessor :delay
    # the duration
    attr_accessor :duration
    # the amount
    attr_accessor :amount
    # (no documentation provided)
    attr_accessor :waitingRoom
    # the required
    attr_accessor :required
    # the conflicting
    attr_accessor :conflicting
    # the overlapConflicts
    attr_accessor :overlapConflicts
    # the resourceId
    attr_accessor :resourceId

    # the json hash for this EventResourceDto
    def to_jaxb_json_hash
      _h = super
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['delay'] = delay.to_jaxb_json_hash unless delay.nil?
      _h['duration'] = duration.to_jaxb_json_hash unless duration.nil?
      _h['amount'] = amount.to_jaxb_json_hash unless amount.nil?
      _h['waitingRoom'] = waitingRoom.to_jaxb_json_hash unless waitingRoom.nil?
      _h['required'] = required.to_jaxb_json_hash unless required.nil?
      _h['conflicting'] = conflicting.to_jaxb_json_hash unless conflicting.nil?
      if !overlapConflicts.nil?
        _ha = Array.new
        overlapConflicts.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['overlapConflicts'] = _ha
      end
      _h['resourceId'] = resourceId.to_jaxb_json_hash unless resourceId.nil?
      return _h
    end

    #initializes this EventResourceDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['delay'].nil?
          _oa = _o['delay']
            if(_oa.is_a? Hash)
              @delay = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @delay =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @delay = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @delay.push Fixnum.from_json(_item)
                 else
                   @delay.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @delay = _oa
            end
          end
        if !_o['duration'].nil?
          _oa = _o['duration']
            if(_oa.is_a? Hash)
              @duration = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @duration =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @duration = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @duration.push Fixnum.from_json(_item)
                 else
                   @duration.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @duration = _oa
            end
          end
        if !_o['amount'].nil?
          _oa = _o['amount']
            if(_oa.is_a? Hash)
              @amount = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @amount =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @amount = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @amount.push Fixnum.from_json(_item)
                 else
                   @amount.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @amount = _oa
            end
          end
        if !_o['waitingRoom'].nil?
          _oa = _o['waitingRoom']
            if(_oa.is_a? Hash)
              @waitingRoom = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @waitingRoom =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @waitingRoom = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @waitingRoom.push String.from_json(_item)
                 else
                   @waitingRoom.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @waitingRoom = _oa
            end
          end
        if !_o['required'].nil?
          _oa = _o['required']
            if(_oa.is_a? Hash)
              @required = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @required =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @required = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @required.push Boolean.from_json(_item)
                 else
                   @required.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @required = _oa
            end
          end
        if !_o['conflicting'].nil?
          _oa = _o['conflicting']
            if(_oa.is_a? Hash)
              @conflicting = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @conflicting =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @conflicting = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @conflicting.push Boolean.from_json(_item)
                 else
                   @conflicting.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @conflicting = _oa
            end
          end
        if !_o['overlapConflicts'].nil?
          _oa = _o['overlapConflicts']
            if(_oa.is_a? Hash)
              @overlapConflicts = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @overlapConflicts =  Fi::Mediconsult::Mediplan::Dto::Event::EventOverlapConflictDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @overlapConflicts = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @overlapConflicts.push Fi::Mediconsult::Mediplan::Dto::Event::EventOverlapConflictDto.from_json(_item)
                 else
                   @overlapConflicts.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @overlapConflicts = _oa
            end
          end
        if !_o['resourceId'].nil?
          _oa = _o['resourceId']
            if(_oa.is_a? Hash)
              @resourceId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @resourceId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @resourceId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @resourceId.push Bignum.from_json(_item)
                 else
                   @resourceId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @resourceId = _oa
            end
          end
    end

    # constructs a EventResourceDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Mediatri

module Base

  # (no documentation provided)
  class OmistajatyyppiEnum

    # (no documentation provided)
    HENKILO = "HENKILO"

    # (no documentation provided)
    TYONANTAJA = "TYONANTAJA"

    # (no documentation provided)
    OSASTO = "OSASTO"

    # (no documentation provided)
    VAKUUTUSYHTIO = "VAKUUTUSYHTIO"

    # (no documentation provided)
    KUNTA = "KUNTA"

    # (no documentation provided)
    MUU_ORGANISAATIO = "MUU_ORGANISAATIO"

    # (no documentation provided)
    YKSIKKO = "YKSIKKO"

    # (no documentation provided)
    KAYTTAJA = "KAYTTAJA"

    # (no documentation provided)
    VAESTOVASTUUPIIRI = "VAESTOVASTUUPIIRI"

    # (no documentation provided)
    JARJESTELMA = "JARJESTELMA"
  end

end

end

end

end

module Fi

module Mediconsult

module Medisos

module Dto

  # (no documentation provided)
  class AsiaDto < Fi::Mediconsult::Medisos::Dto::MediSosDtoBase 

    # (no documentation provided)
    attr_accessor :asiaId
    # (no documentation provided)
    attr_accessor :asiaTunnus
    # (no documentation provided)
    attr_accessor :asiaNimi
    # (no documentation provided)
    attr_accessor :asiakasnumero
    # (no documentation provided)
    attr_accessor :asiakas
    # (no documentation provided)
    attr_accessor :asiaTila
    # (no documentation provided)
    attr_accessor :avausAika
    # (no documentation provided)
    attr_accessor :avauspaiva
    # (no documentation provided)
    attr_accessor :paattymisAika
    # (no documentation provided)
    attr_accessor :paattymispaiva
    # (no documentation provided)
    attr_accessor :palvelutehtavacode
    # (no documentation provided)
    attr_accessor :palvelutehtavadisplay
    # (no documentation provided)
    attr_accessor :versionumero
    # (no documentation provided)
    attr_accessor :palvelutehtavanAsiakkuus
    # (no documentation provided)
    attr_accessor :sosiaalihuollonAsiakkuus
    # (no documentation provided)
    attr_accessor :asiakirjaIdLista
    # (no documentation provided)
    attr_accessor :asiakirjaLista
    # (no documentation provided)
    attr_accessor :liiteasiakirjaIdLista
    # (no documentation provided)
    attr_accessor :muuttajanumero
    # (no documentation provided)
    attr_accessor :muuttaja
    # (no documentation provided)
    attr_accessor :laatijanumero
    # (no documentation provided)
    attr_accessor :laatija
    # (no documentation provided)
    attr_accessor :palveluyksikonAsiakkuudet
    # (no documentation provided)
    attr_accessor :liiteAsiakirjaLista
    # (no documentation provided)
    attr_accessor :suostumusTieto
    # (no documentation provided)
    attr_accessor :kantaAsia
    # (no documentation provided)
    attr_accessor :asiaviittausLista
    # (no documentation provided)
    attr_accessor :formId

    # the json hash for this AsiaDto
    def to_jaxb_json_hash
      _h = super
      _h['asiaId'] = asiaId.to_jaxb_json_hash unless asiaId.nil?
      _h['asiaTunnus'] = asiaTunnus.to_jaxb_json_hash unless asiaTunnus.nil?
      _h['asiaNimi'] = asiaNimi.to_jaxb_json_hash unless asiaNimi.nil?
      _h['asiakasnumero'] = asiakasnumero.to_jaxb_json_hash unless asiakasnumero.nil?
      _h['asiakas'] = asiakas.to_jaxb_json_hash unless asiakas.nil?
      _h['asiaTila'] = asiaTila.to_jaxb_json_hash unless asiaTila.nil?
      _h['avausAika'] = avausAika.to_jaxb_json_hash unless avausAika.nil?
      _h['avauspaiva'] = avauspaiva.to_jaxb_json_hash unless avauspaiva.nil?
      _h['paattymisAika'] = paattymisAika.to_jaxb_json_hash unless paattymisAika.nil?
      _h['paattymispaiva'] = paattymispaiva.to_jaxb_json_hash unless paattymispaiva.nil?
      _h['palvelutehtavacode'] = palvelutehtavacode.to_jaxb_json_hash unless palvelutehtavacode.nil?
      _h['palvelutehtavadisplay'] = palvelutehtavadisplay.to_jaxb_json_hash unless palvelutehtavadisplay.nil?
      _h['versionumero'] = versionumero.to_jaxb_json_hash unless versionumero.nil?
      _h['palvelutehtavanAsiakkuus'] = palvelutehtavanAsiakkuus.to_jaxb_json_hash unless palvelutehtavanAsiakkuus.nil?
      _h['sosiaalihuollonAsiakkuus'] = sosiaalihuollonAsiakkuus.to_jaxb_json_hash unless sosiaalihuollonAsiakkuus.nil?
      if !asiakirjaIdLista.nil?
        _ha = Array.new
        asiakirjaIdLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['asiakirjaIdLista'] = _ha
      end
      if !asiakirjaLista.nil?
        _ha = Array.new
        asiakirjaLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['asiakirjaLista'] = _ha
      end
      if !liiteasiakirjaIdLista.nil?
        _ha = Array.new
        liiteasiakirjaIdLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['liiteasiakirjaIdLista'] = _ha
      end
      _h['muuttajanumero'] = muuttajanumero.to_jaxb_json_hash unless muuttajanumero.nil?
      _h['muuttaja'] = muuttaja.to_jaxb_json_hash unless muuttaja.nil?
      _h['laatijanumero'] = laatijanumero.to_jaxb_json_hash unless laatijanumero.nil?
      _h['laatija'] = laatija.to_jaxb_json_hash unless laatija.nil?
      if !palveluyksikonAsiakkuudet.nil?
        _ha = Array.new
        palveluyksikonAsiakkuudet.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['palveluyksikonAsiakkuudet'] = _ha
      end
      if !liiteAsiakirjaLista.nil?
        _ha = Array.new
        liiteAsiakirjaLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['liiteAsiakirjaLista'] = _ha
      end
      _h['suostumusTieto'] = suostumusTieto.to_jaxb_json_hash unless suostumusTieto.nil?
      _h['kantaAsia'] = kantaAsia.to_jaxb_json_hash unless kantaAsia.nil?
      if !asiaviittausLista.nil?
        _ha = Array.new
        asiaviittausLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['asiaviittausLista'] = _ha
      end
      _h['formId'] = formId.to_jaxb_json_hash unless formId.nil?
      return _h
    end

    #initializes this AsiaDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['asiaId'].nil?
          _oa = _o['asiaId']
            if(_oa.is_a? Hash)
              @asiaId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiaId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiaId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiaId.push Bignum.from_json(_item)
                 else
                   @asiaId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiaId = _oa
            end
          end
        if !_o['asiaTunnus'].nil?
          _oa = _o['asiaTunnus']
            if(_oa.is_a? Hash)
              @asiaTunnus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiaTunnus =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiaTunnus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiaTunnus.push String.from_json(_item)
                 else
                   @asiaTunnus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiaTunnus = _oa
            end
          end
        if !_o['asiaNimi'].nil?
          _oa = _o['asiaNimi']
            if(_oa.is_a? Hash)
              @asiaNimi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiaNimi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiaNimi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiaNimi.push String.from_json(_item)
                 else
                   @asiaNimi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiaNimi = _oa
            end
          end
        if !_o['asiakasnumero'].nil?
          _oa = _o['asiakasnumero']
            if(_oa.is_a? Hash)
              @asiakasnumero = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakasnumero =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakasnumero = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakasnumero.push Fixnum.from_json(_item)
                 else
                   @asiakasnumero.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakasnumero = _oa
            end
          end
        if !_o['asiakas'].nil?
          _oa = _o['asiakas']
            if(_oa.is_a? Hash)
              @asiakas = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakas =  Fi::Mediconsult::Core::Client::Dto::Omistaja::Patient.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakas = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakas.push Fi::Mediconsult::Core::Client::Dto::Omistaja::Patient.from_json(_item)
                 else
                   @asiakas.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakas = _oa
            end
          end
        if !_o['asiaTila'].nil?
          _oa = _o['asiaTila']
            if(_oa.is_a? Hash)
              @asiaTila = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiaTila =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiaTila = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiaTila.push String.from_json(_item)
                 else
                   @asiaTila.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiaTila = _oa
            end
          end
        if !_o['avausAika'].nil?
          _oa = _o['avausAika']
            if(_oa.is_a? Hash)
              @avausAika = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @avausAika =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @avausAika = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @avausAika.push Time.from_json(_item)
                 else
                   @avausAika.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @avausAika = _oa
            end
          end
        if !_o['avauspaiva'].nil?
          _oa = _o['avauspaiva']
            if(_oa.is_a? Hash)
              @avauspaiva = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @avauspaiva =  java.time::LocalDate.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @avauspaiva = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @avauspaiva.push java.time::LocalDate.from_json(_item)
                 else
                   @avauspaiva.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @avauspaiva = _oa
            end
          end
        if !_o['paattymisAika'].nil?
          _oa = _o['paattymisAika']
            if(_oa.is_a? Hash)
              @paattymisAika = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @paattymisAika =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @paattymisAika = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @paattymisAika.push Time.from_json(_item)
                 else
                   @paattymisAika.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @paattymisAika = _oa
            end
          end
        if !_o['paattymispaiva'].nil?
          _oa = _o['paattymispaiva']
            if(_oa.is_a? Hash)
              @paattymispaiva = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @paattymispaiva =  java.time::LocalDate.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @paattymispaiva = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @paattymispaiva.push java.time::LocalDate.from_json(_item)
                 else
                   @paattymispaiva.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @paattymispaiva = _oa
            end
          end
        if !_o['palvelutehtavacode'].nil?
          _oa = _o['palvelutehtavacode']
            if(_oa.is_a? Hash)
              @palvelutehtavacode = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palvelutehtavacode =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palvelutehtavacode = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palvelutehtavacode.push Fixnum.from_json(_item)
                 else
                   @palvelutehtavacode.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palvelutehtavacode = _oa
            end
          end
        if !_o['palvelutehtavadisplay'].nil?
          _oa = _o['palvelutehtavadisplay']
            if(_oa.is_a? Hash)
              @palvelutehtavadisplay = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palvelutehtavadisplay =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palvelutehtavadisplay = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palvelutehtavadisplay.push String.from_json(_item)
                 else
                   @palvelutehtavadisplay.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palvelutehtavadisplay = _oa
            end
          end
        if !_o['versionumero'].nil?
          _oa = _o['versionumero']
            if(_oa.is_a? Hash)
              @versionumero = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @versionumero =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @versionumero = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @versionumero.push Fixnum.from_json(_item)
                 else
                   @versionumero.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @versionumero = _oa
            end
          end
        if !_o['palvelutehtavanAsiakkuus'].nil?
          _oa = _o['palvelutehtavanAsiakkuus']
            if(_oa.is_a? Hash)
              @palvelutehtavanAsiakkuus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palvelutehtavanAsiakkuus =  Fi::Mediconsult::Medisos::Dto::PalvelutehtavanAsiakkuusDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palvelutehtavanAsiakkuus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palvelutehtavanAsiakkuus.push Fi::Mediconsult::Medisos::Dto::PalvelutehtavanAsiakkuusDto.from_json(_item)
                 else
                   @palvelutehtavanAsiakkuus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palvelutehtavanAsiakkuus = _oa
            end
          end
        if !_o['sosiaalihuollonAsiakkuus'].nil?
          _oa = _o['sosiaalihuollonAsiakkuus']
            if(_oa.is_a? Hash)
              @sosiaalihuollonAsiakkuus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @sosiaalihuollonAsiakkuus =  Fi::Mediconsult::Medisos::Dto::SosiaalihuollonAsiakkuusDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @sosiaalihuollonAsiakkuus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @sosiaalihuollonAsiakkuus.push Fi::Mediconsult::Medisos::Dto::SosiaalihuollonAsiakkuusDto.from_json(_item)
                 else
                   @sosiaalihuollonAsiakkuus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @sosiaalihuollonAsiakkuus = _oa
            end
          end
        if !_o['asiakirjaIdLista'].nil?
          _oa = _o['asiakirjaIdLista']
            if(_oa.is_a? Hash)
              @asiakirjaIdLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakirjaIdLista =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakirjaIdLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakirjaIdLista.push Bignum.from_json(_item)
                 else
                   @asiakirjaIdLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakirjaIdLista = _oa
            end
          end
        if !_o['asiakirjaLista'].nil?
          _oa = _o['asiakirjaLista']
            if(_oa.is_a? Hash)
              @asiakirjaLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakirjaLista =  Fi::Mediconsult::Medisos::Dto::AsiakasAsiakirjaDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakirjaLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakirjaLista.push Fi::Mediconsult::Medisos::Dto::AsiakasAsiakirjaDto.from_json(_item)
                 else
                   @asiakirjaLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakirjaLista = _oa
            end
          end
        if !_o['liiteasiakirjaIdLista'].nil?
          _oa = _o['liiteasiakirjaIdLista']
            if(_oa.is_a? Hash)
              @liiteasiakirjaIdLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @liiteasiakirjaIdLista =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @liiteasiakirjaIdLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @liiteasiakirjaIdLista.push Bignum.from_json(_item)
                 else
                   @liiteasiakirjaIdLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @liiteasiakirjaIdLista = _oa
            end
          end
        if !_o['muuttajanumero'].nil?
          _oa = _o['muuttajanumero']
            if(_oa.is_a? Hash)
              @muuttajanumero = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @muuttajanumero =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @muuttajanumero = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @muuttajanumero.push Fixnum.from_json(_item)
                 else
                   @muuttajanumero.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @muuttajanumero = _oa
            end
          end
        if !_o['muuttaja'].nil?
          _oa = _o['muuttaja']
            if(_oa.is_a? Hash)
              @muuttaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @muuttaja =  Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @muuttaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @muuttaja.push Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_item)
                 else
                   @muuttaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @muuttaja = _oa
            end
          end
        if !_o['laatijanumero'].nil?
          _oa = _o['laatijanumero']
            if(_oa.is_a? Hash)
              @laatijanumero = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laatijanumero =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laatijanumero = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laatijanumero.push Fixnum.from_json(_item)
                 else
                   @laatijanumero.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laatijanumero = _oa
            end
          end
        if !_o['laatija'].nil?
          _oa = _o['laatija']
            if(_oa.is_a? Hash)
              @laatija = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laatija =  Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laatija = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laatija.push Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_item)
                 else
                   @laatija.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laatija = _oa
            end
          end
        if !_o['palveluyksikonAsiakkuudet'].nil?
          _oa = _o['palveluyksikonAsiakkuudet']
            if(_oa.is_a? Hash)
              @palveluyksikonAsiakkuudet = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palveluyksikonAsiakkuudet =  Fi::Mediconsult::Medisos::Dto::PalveluyksikkoAsiakkuusDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palveluyksikonAsiakkuudet = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palveluyksikonAsiakkuudet.push Fi::Mediconsult::Medisos::Dto::PalveluyksikkoAsiakkuusDto.from_json(_item)
                 else
                   @palveluyksikonAsiakkuudet.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palveluyksikonAsiakkuudet = _oa
            end
          end
        if !_o['liiteAsiakirjaLista'].nil?
          _oa = _o['liiteAsiakirjaLista']
            if(_oa.is_a? Hash)
              @liiteAsiakirjaLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @liiteAsiakirjaLista =  Fi::Mediconsult::Medisos::Dto::LiiteasiakirjaDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @liiteAsiakirjaLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @liiteAsiakirjaLista.push Fi::Mediconsult::Medisos::Dto::LiiteasiakirjaDto.from_json(_item)
                 else
                   @liiteAsiakirjaLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @liiteAsiakirjaLista = _oa
            end
          end
        if !_o['suostumusTieto'].nil?
          _oa = _o['suostumusTieto']
            if(_oa.is_a? Hash)
              @suostumusTieto = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @suostumusTieto =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @suostumusTieto = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @suostumusTieto.push Boolean.from_json(_item)
                 else
                   @suostumusTieto.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @suostumusTieto = _oa
            end
          end
        if !_o['kantaAsia'].nil?
          _oa = _o['kantaAsia']
            if(_oa.is_a? Hash)
              @kantaAsia = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kantaAsia =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kantaAsia = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kantaAsia.push Boolean.from_json(_item)
                 else
                   @kantaAsia.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kantaAsia = _oa
            end
          end
        if !_o['asiaviittausLista'].nil?
          _oa = _o['asiaviittausLista']
            if(_oa.is_a? Hash)
              @asiaviittausLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiaviittausLista =  Fi::Mediconsult::Medisos::Dto::AsiaviittausDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiaviittausLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiaviittausLista.push Fi::Mediconsult::Medisos::Dto::AsiaviittausDto.from_json(_item)
                 else
                   @asiaviittausLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiaviittausLista = _oa
            end
          end
        if !_o['formId'].nil?
          _oa = _o['formId']
            if(_oa.is_a? Hash)
              @formId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @formId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @formId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @formId.push Fixnum.from_json(_item)
                 else
                   @formId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @formId = _oa
            end
          end
    end

    # constructs a AsiaDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Planner

  # (no documentation provided)
  class EmployeeAddressType

    # (no documentation provided)
    HOME_ADDRESS = "HOME_ADDRESS"

    # (no documentation provided)
    OFFICE_ADDRESS = "OFFICE_ADDRESS"

    # (no documentation provided)
    CUSTOM_ADDRESS = "CUSTOM_ADDRESS"
  end

end

end

end

end

end

module Fi

module Mediconsult

module Medisos

module Dto

  # (no documentation provided)
  class DocumentKyselyDto < Fi::Mediconsult::Medisos::Dto::MediSosDtoBase 

    # (no documentation provided)
    attr_accessor :pageSize
    # (no documentation provided)
    attr_accessor :pageIndex
    # (no documentation provided)
    attr_accessor :asiakasnumero
    # (no documentation provided)
    attr_accessor :includeMetadata
    # (no documentation provided)
    attr_accessor :includeTemplate
    # (no documentation provided)
    attr_accessor :vapaasanaHakuLista
    # (no documentation provided)
    attr_accessor :toimialaLista
    # (no documentation provided)
    attr_accessor :palveluyksikkoLista
    # (no documentation provided)
    attr_accessor :documentNimiLista
    # (no documentation provided)
    attr_accessor :documentLaatimisaikaLista
    # (no documentation provided)
    attr_accessor :documentLaatijaLista
    # (no documentation provided)
    attr_accessor :documentIdLista
    # (no documentation provided)
    attr_accessor :documentTilaLista
    # (no documentation provided)
    attr_accessor :documentTyyppiLista
    # (no documentation provided)
    attr_accessor :grouping
    # (no documentation provided)
    attr_accessor :formId

    # the json hash for this DocumentKyselyDto
    def to_jaxb_json_hash
      _h = super
      _h['pageSize'] = pageSize.to_jaxb_json_hash unless pageSize.nil?
      _h['pageIndex'] = pageIndex.to_jaxb_json_hash unless pageIndex.nil?
      _h['asiakasnumero'] = asiakasnumero.to_jaxb_json_hash unless asiakasnumero.nil?
      _h['includeMetadata'] = includeMetadata.to_jaxb_json_hash unless includeMetadata.nil?
      _h['includeTemplate'] = includeTemplate.to_jaxb_json_hash unless includeTemplate.nil?
      if !vapaasanaHakuLista.nil?
        _ha = Array.new
        vapaasanaHakuLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['vapaasanaHakuLista'] = _ha
      end
      if !toimialaLista.nil?
        _ha = Array.new
        toimialaLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['toimialaLista'] = _ha
      end
      if !palveluyksikkoLista.nil?
        _ha = Array.new
        palveluyksikkoLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['palveluyksikkoLista'] = _ha
      end
      if !documentNimiLista.nil?
        _ha = Array.new
        documentNimiLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['documentNimiLista'] = _ha
      end
      if !documentLaatimisaikaLista.nil?
        _ha = Array.new
        documentLaatimisaikaLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['documentLaatimisaikaLista'] = _ha
      end
      if !documentLaatijaLista.nil?
        _ha = Array.new
        documentLaatijaLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['documentLaatijaLista'] = _ha
      end
      if !documentIdLista.nil?
        _ha = Array.new
        documentIdLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['documentIdLista'] = _ha
      end
      if !documentTilaLista.nil?
        _ha = Array.new
        documentTilaLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['documentTilaLista'] = _ha
      end
      if !documentTyyppiLista.nil?
        _ha = Array.new
        documentTyyppiLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['documentTyyppiLista'] = _ha
      end
      _h['grouping'] = grouping.to_jaxb_json_hash unless grouping.nil?
      _h['formId'] = formId.to_jaxb_json_hash unless formId.nil?
      return _h
    end

    #initializes this DocumentKyselyDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['pageSize'].nil?
          _oa = _o['pageSize']
            if(_oa.is_a? Hash)
              @pageSize = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @pageSize =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @pageSize = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @pageSize.push Fixnum.from_json(_item)
                 else
                   @pageSize.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @pageSize = _oa
            end
          end
        if !_o['pageIndex'].nil?
          _oa = _o['pageIndex']
            if(_oa.is_a? Hash)
              @pageIndex = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @pageIndex =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @pageIndex = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @pageIndex.push Fixnum.from_json(_item)
                 else
                   @pageIndex.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @pageIndex = _oa
            end
          end
        if !_o['asiakasnumero'].nil?
          _oa = _o['asiakasnumero']
            if(_oa.is_a? Hash)
              @asiakasnumero = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakasnumero =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakasnumero = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakasnumero.push Fixnum.from_json(_item)
                 else
                   @asiakasnumero.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakasnumero = _oa
            end
          end
        if !_o['includeMetadata'].nil?
          _oa = _o['includeMetadata']
            if(_oa.is_a? Hash)
              @includeMetadata = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @includeMetadata =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @includeMetadata = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @includeMetadata.push Boolean.from_json(_item)
                 else
                   @includeMetadata.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @includeMetadata = _oa
            end
          end
        if !_o['includeTemplate'].nil?
          _oa = _o['includeTemplate']
            if(_oa.is_a? Hash)
              @includeTemplate = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @includeTemplate =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @includeTemplate = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @includeTemplate.push Boolean.from_json(_item)
                 else
                   @includeTemplate.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @includeTemplate = _oa
            end
          end
        if !_o['vapaasanaHakuLista'].nil?
          _oa = _o['vapaasanaHakuLista']
            if(_oa.is_a? Hash)
              @vapaasanaHakuLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vapaasanaHakuLista =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vapaasanaHakuLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vapaasanaHakuLista.push String.from_json(_item)
                 else
                   @vapaasanaHakuLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vapaasanaHakuLista = _oa
            end
          end
        if !_o['toimialaLista'].nil?
          _oa = _o['toimialaLista']
            if(_oa.is_a? Hash)
              @toimialaLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @toimialaLista =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @toimialaLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @toimialaLista.push String.from_json(_item)
                 else
                   @toimialaLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @toimialaLista = _oa
            end
          end
        if !_o['palveluyksikkoLista'].nil?
          _oa = _o['palveluyksikkoLista']
            if(_oa.is_a? Hash)
              @palveluyksikkoLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palveluyksikkoLista =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palveluyksikkoLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palveluyksikkoLista.push String.from_json(_item)
                 else
                   @palveluyksikkoLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palveluyksikkoLista = _oa
            end
          end
        if !_o['documentNimiLista'].nil?
          _oa = _o['documentNimiLista']
            if(_oa.is_a? Hash)
              @documentNimiLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @documentNimiLista =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @documentNimiLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @documentNimiLista.push String.from_json(_item)
                 else
                   @documentNimiLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @documentNimiLista = _oa
            end
          end
        if !_o['documentLaatimisaikaLista'].nil?
          _oa = _o['documentLaatimisaikaLista']
            if(_oa.is_a? Hash)
              @documentLaatimisaikaLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @documentLaatimisaikaLista =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @documentLaatimisaikaLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @documentLaatimisaikaLista.push Bignum.from_json(_item)
                 else
                   @documentLaatimisaikaLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @documentLaatimisaikaLista = _oa
            end
          end
        if !_o['documentLaatijaLista'].nil?
          _oa = _o['documentLaatijaLista']
            if(_oa.is_a? Hash)
              @documentLaatijaLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @documentLaatijaLista =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @documentLaatijaLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @documentLaatijaLista.push Fixnum.from_json(_item)
                 else
                   @documentLaatijaLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @documentLaatijaLista = _oa
            end
          end
        if !_o['documentIdLista'].nil?
          _oa = _o['documentIdLista']
            if(_oa.is_a? Hash)
              @documentIdLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @documentIdLista =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @documentIdLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @documentIdLista.push Bignum.from_json(_item)
                 else
                   @documentIdLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @documentIdLista = _oa
            end
          end
        if !_o['documentTilaLista'].nil?
          _oa = _o['documentTilaLista']
            if(_oa.is_a? Hash)
              @documentTilaLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @documentTilaLista =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @documentTilaLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @documentTilaLista.push String.from_json(_item)
                 else
                   @documentTilaLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @documentTilaLista = _oa
            end
          end
        if !_o['documentTyyppiLista'].nil?
          _oa = _o['documentTyyppiLista']
            if(_oa.is_a? Hash)
              @documentTyyppiLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @documentTyyppiLista =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @documentTyyppiLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @documentTyyppiLista.push String.from_json(_item)
                 else
                   @documentTyyppiLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @documentTyyppiLista = _oa
            end
          end
        if !_o['grouping'].nil?
          _oa = _o['grouping']
            if(_oa.is_a? Hash)
              @grouping = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @grouping =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @grouping = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @grouping.push String.from_json(_item)
                 else
                   @grouping.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @grouping = _oa
            end
          end
        if !_o['formId'].nil?
          _oa = _o['formId']
            if(_oa.is_a? Hash)
              @formId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @formId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @formId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @formId.push Fixnum.from_json(_item)
                 else
                   @formId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @formId = _oa
            end
          end
    end

    # constructs a DocumentKyselyDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Team

  # (no documentation provided)
  class TeamMemberDto < Fi::Mediconsult::Core::Client::Dto::Team::TeamBaseDto 

    # (no documentation provided)
    attr_accessor :memberId
    # (no documentation provided)
    attr_accessor :member
    # (no documentation provided)
    attr_accessor :startDate
    # (no documentation provided)
    attr_accessor :endDate
    # (no documentation provided)
    attr_accessor :order
    # (no documentation provided)
    attr_accessor :attributes

    # the json hash for this TeamMemberDto
    def to_jaxb_json_hash
      _h = super
      _h['memberId'] = memberId.to_jaxb_json_hash unless memberId.nil?
      _h['member'] = member.to_jaxb_json_hash unless member.nil?
      _h['startDate'] = startDate.to_jaxb_json_hash unless startDate.nil?
      _h['endDate'] = endDate.to_jaxb_json_hash unless endDate.nil?
      _h['order'] = order.to_jaxb_json_hash unless order.nil?
      if !attributes.nil?
        _ha = Array.new
        attributes.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['attributes'] = _ha
      end
      return _h
    end

    #initializes this TeamMemberDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['memberId'].nil?
          _oa = _o['memberId']
            if(_oa.is_a? Hash)
              @memberId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @memberId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @memberId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @memberId.push Fixnum.from_json(_item)
                 else
                   @memberId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @memberId = _oa
            end
          end
        if !_o['member'].nil?
          _oa = _o['member']
            if(_oa.is_a? Hash)
              @member = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @member =  Fi::Mediconsult::Core::Client::Dto::Omistaja::GenericOmistaja.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @member = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @member.push Fi::Mediconsult::Core::Client::Dto::Omistaja::GenericOmistaja.from_json(_item)
                 else
                   @member.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @member = _oa
            end
          end
        if !_o['startDate'].nil?
          _oa = _o['startDate']
            if(_oa.is_a? Hash)
              @startDate = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @startDate =  java.time::LocalDate.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @startDate = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @startDate.push java.time::LocalDate.from_json(_item)
                 else
                   @startDate.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @startDate = _oa
            end
          end
        if !_o['endDate'].nil?
          _oa = _o['endDate']
            if(_oa.is_a? Hash)
              @endDate = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @endDate =  java.time::LocalDate.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @endDate = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @endDate.push java.time::LocalDate.from_json(_item)
                 else
                   @endDate.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @endDate = _oa
            end
          end
        if !_o['order'].nil?
          _oa = _o['order']
            if(_oa.is_a? Hash)
              @order = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @order =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @order = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @order.push Fixnum.from_json(_item)
                 else
                   @order.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @order = _oa
            end
          end
        if !_o['attributes'].nil?
          _oa = _o['attributes']
            if(_oa.is_a? Hash)
              @attributes = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @attributes =  Fi::Mediconsult::Core::Client::Dto::Title::TitleSettings.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @attributes = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @attributes.push Fi::Mediconsult::Core::Client::Dto::Title::TitleSettings.from_json(_item)
                 else
                   @attributes.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @attributes = _oa
            end
          end
    end

    # constructs a TeamMemberDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Medisos

module Dto

  # (no documentation provided)
  class PalveluyksikkoAsiakkuusListaDto < Fi::Mediconsult::Medisos::Dto::MediSosDtoBase 

    # (no documentation provided)
    attr_accessor :kokonaisLkm
    # (no documentation provided)
    attr_accessor :pageSize
    # (no documentation provided)
    attr_accessor :pageIndex
    # (no documentation provided)
    attr_accessor :indexAlku
    # (no documentation provided)
    attr_accessor :indexLoppu
    # (no documentation provided)
    attr_accessor :palveluyksikkoAsiakkuusDtoLista

    # the json hash for this PalveluyksikkoAsiakkuusListaDto
    def to_jaxb_json_hash
      _h = super
      _h['kokonaisLkm'] = kokonaisLkm.to_jaxb_json_hash unless kokonaisLkm.nil?
      _h['pageSize'] = pageSize.to_jaxb_json_hash unless pageSize.nil?
      _h['pageIndex'] = pageIndex.to_jaxb_json_hash unless pageIndex.nil?
      _h['indexAlku'] = indexAlku.to_jaxb_json_hash unless indexAlku.nil?
      _h['indexLoppu'] = indexLoppu.to_jaxb_json_hash unless indexLoppu.nil?
      if !palveluyksikkoAsiakkuusDtoLista.nil?
        _ha = Array.new
        palveluyksikkoAsiakkuusDtoLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['palveluyksikkoAsiakkuusDtoLista'] = _ha
      end
      return _h
    end

    #initializes this PalveluyksikkoAsiakkuusListaDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['kokonaisLkm'].nil?
          _oa = _o['kokonaisLkm']
            if(_oa.is_a? Hash)
              @kokonaisLkm = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kokonaisLkm =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kokonaisLkm = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kokonaisLkm.push Fixnum.from_json(_item)
                 else
                   @kokonaisLkm.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kokonaisLkm = _oa
            end
          end
        if !_o['pageSize'].nil?
          _oa = _o['pageSize']
            if(_oa.is_a? Hash)
              @pageSize = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @pageSize =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @pageSize = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @pageSize.push Fixnum.from_json(_item)
                 else
                   @pageSize.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @pageSize = _oa
            end
          end
        if !_o['pageIndex'].nil?
          _oa = _o['pageIndex']
            if(_oa.is_a? Hash)
              @pageIndex = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @pageIndex =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @pageIndex = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @pageIndex.push Fixnum.from_json(_item)
                 else
                   @pageIndex.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @pageIndex = _oa
            end
          end
        if !_o['indexAlku'].nil?
          _oa = _o['indexAlku']
            if(_oa.is_a? Hash)
              @indexAlku = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @indexAlku =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @indexAlku = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @indexAlku.push Fixnum.from_json(_item)
                 else
                   @indexAlku.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @indexAlku = _oa
            end
          end
        if !_o['indexLoppu'].nil?
          _oa = _o['indexLoppu']
            if(_oa.is_a? Hash)
              @indexLoppu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @indexLoppu =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @indexLoppu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @indexLoppu.push Fixnum.from_json(_item)
                 else
                   @indexLoppu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @indexLoppu = _oa
            end
          end
        if !_o['palveluyksikkoAsiakkuusDtoLista'].nil?
          _oa = _o['palveluyksikkoAsiakkuusDtoLista']
            if(_oa.is_a? Hash)
              @palveluyksikkoAsiakkuusDtoLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palveluyksikkoAsiakkuusDtoLista =  Fi::Mediconsult::Medisos::Dto::PalveluyksikkoAsiakkuusDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palveluyksikkoAsiakkuusDtoLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palveluyksikkoAsiakkuusDtoLista.push Fi::Mediconsult::Medisos::Dto::PalveluyksikkoAsiakkuusDto.from_json(_item)
                 else
                   @palveluyksikkoAsiakkuusDtoLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palveluyksikkoAsiakkuusDtoLista = _oa
            end
          end
    end

    # constructs a PalveluyksikkoAsiakkuusListaDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Contentgroup

  # (no documentation provided)
  class ContentGroupTitle < Fi::Mediconsult::Mediplan::Dto::KuhaDtoBase 

    # (no documentation provided)
    attr_accessor :title
    # (no documentation provided)
    attr_accessor :meaningId
    # (no documentation provided)
    attr_accessor :meaningChangeable
    # (no documentation provided)
    attr_accessor :ordering
    # (no documentation provided)
    attr_accessor :mandatory
    # (no documentation provided)
    attr_accessor :changeable

    # the json hash for this ContentGroupTitle
    def to_jaxb_json_hash
      _h = super
      _h['title'] = title.to_jaxb_json_hash unless title.nil?
      _h['meaningId'] = meaningId.to_jaxb_json_hash unless meaningId.nil?
      _h['meaningChangeable'] = meaningChangeable.to_jaxb_json_hash unless meaningChangeable.nil?
      _h['ordering'] = ordering.to_jaxb_json_hash unless ordering.nil?
      _h['mandatory'] = mandatory.to_jaxb_json_hash unless mandatory.nil?
      _h['changeable'] = changeable.to_jaxb_json_hash unless changeable.nil?
      return _h
    end

    #initializes this ContentGroupTitle with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['title'].nil?
          _oa = _o['title']
            if(_oa.is_a? Hash)
              @title = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @title =  Fi::Mediconsult::Core::Client::Dto::Title::TitleSettings.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @title = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @title.push Fi::Mediconsult::Core::Client::Dto::Title::TitleSettings.from_json(_item)
                 else
                   @title.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @title = _oa
            end
          end
        if !_o['meaningId'].nil?
          _oa = _o['meaningId']
            if(_oa.is_a? Hash)
              @meaningId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @meaningId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @meaningId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @meaningId.push Fixnum.from_json(_item)
                 else
                   @meaningId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @meaningId = _oa
            end
          end
        if !_o['meaningChangeable'].nil?
          _oa = _o['meaningChangeable']
            if(_oa.is_a? Hash)
              @meaningChangeable = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @meaningChangeable =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @meaningChangeable = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @meaningChangeable.push Boolean.from_json(_item)
                 else
                   @meaningChangeable.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @meaningChangeable = _oa
            end
          end
        if !_o['ordering'].nil?
          _oa = _o['ordering']
            if(_oa.is_a? Hash)
              @ordering = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ordering =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ordering = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ordering.push Fixnum.from_json(_item)
                 else
                   @ordering.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ordering = _oa
            end
          end
        if !_o['mandatory'].nil?
          _oa = _o['mandatory']
            if(_oa.is_a? Hash)
              @mandatory = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @mandatory =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @mandatory = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @mandatory.push Boolean.from_json(_item)
                 else
                   @mandatory.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @mandatory = _oa
            end
          end
        if !_o['changeable'].nil?
          _oa = _o['changeable']
            if(_oa.is_a? Hash)
              @changeable = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @changeable =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @changeable = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @changeable.push Boolean.from_json(_item)
                 else
                   @changeable.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @changeable = _oa
            end
          end
    end

    # constructs a ContentGroupTitle from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Course

  # (no documentation provided)
  class CourseCustomerDto < Fi::Mediconsult::Mediplan::Dto::KuhaDtoBase 

    # (no documentation provided)
    attr_accessor :customerId
    # (no documentation provided)
    attr_accessor :customer
    # true if canceled
    attr_accessor :canceled
    # (no documentation provided)
    attr_accessor :cancellation
    # (no documentation provided)
    attr_accessor :cancellations

    # the json hash for this CourseCustomerDto
    def to_jaxb_json_hash
      _h = super
      _h['customerId'] = customerId.to_jaxb_json_hash unless customerId.nil?
      _h['customer'] = customer.to_jaxb_json_hash unless customer.nil?
      _h['canceled'] = canceled.to_jaxb_json_hash unless canceled.nil?
      _h['cancellation'] = cancellation.to_jaxb_json_hash unless cancellation.nil?
      if !cancellations.nil?
        _ha = Array.new
        cancellations.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['cancellations'] = _ha
      end
      return _h
    end

    #initializes this CourseCustomerDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['customerId'].nil?
          _oa = _o['customerId']
            if(_oa.is_a? Hash)
              @customerId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @customerId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @customerId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @customerId.push Fixnum.from_json(_item)
                 else
                   @customerId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @customerId = _oa
            end
          end
        if !_o['customer'].nil?
          _oa = _o['customer']
            if(_oa.is_a? Hash)
              @customer = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @customer =  Fi::Mediconsult::Mediplan::Dto::Customer.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @customer = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @customer.push Fi::Mediconsult::Mediplan::Dto::Customer.from_json(_item)
                 else
                   @customer.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @customer = _oa
            end
          end
        if !_o['canceled'].nil?
          _oa = _o['canceled']
            if(_oa.is_a? Hash)
              @canceled = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @canceled =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @canceled = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @canceled.push Boolean.from_json(_item)
                 else
                   @canceled.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @canceled = _oa
            end
          end
        if !_o['cancellation'].nil?
          _oa = _o['cancellation']
            if(_oa.is_a? Hash)
              @cancellation = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @cancellation =  Fi::Mediconsult::Mediplan::Dto::Course::PeriodCancellationDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @cancellation = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @cancellation.push Fi::Mediconsult::Mediplan::Dto::Course::PeriodCancellationDto.from_json(_item)
                 else
                   @cancellation.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @cancellation = _oa
            end
          end
        if !_o['cancellations'].nil?
          _oa = _o['cancellations']
            if(_oa.is_a? Hash)
              @cancellations = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @cancellations =  Fi::Mediconsult::Mediplan::Dto::Course::PeriodCancellationDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @cancellations = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @cancellations.push Fi::Mediconsult::Mediplan::Dto::Course::PeriodCancellationDto.from_json(_item)
                 else
                   @cancellations.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @cancellations = _oa
            end
          end
    end

    # constructs a CourseCustomerDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Kuha

module Util

  # (no documentation provided)
  class Meaning

    # (no documentation provided)
    AVAILABLE = "AVAILABLE"

    # (no documentation provided)
    BUSY_MANDATORY = "BUSY_MANDATORY"

    # (no documentation provided)
    BUSY_OPTIONAL = "BUSY_OPTIONAL"
  end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Paatoksentuki

  # (no documentation provided)
  class RelevantBreakPoint < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # (no documentation provided)
    attr_accessor :scriptID
    # (no documentation provided)
    attr_accessor :messageNumber
    # (no documentation provided)
    attr_accessor :messageID
    # (no documentation provided)
    attr_accessor :value

    # the json hash for this RelevantBreakPoint
    def to_jaxb_json_hash
      _h = super
      _h['scriptID'] = scriptID.to_jaxb_json_hash unless scriptID.nil?
      _h['messageNumber'] = messageNumber.to_jaxb_json_hash unless messageNumber.nil?
      _h['messageID'] = messageID.to_jaxb_json_hash unless messageID.nil?
      _h['value'] = value.to_jaxb_json_hash unless value.nil?
      return _h
    end

    #initializes this RelevantBreakPoint with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['scriptID'].nil?
          _oa = _o['scriptID']
            if(_oa.is_a? Hash)
              @scriptID = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @scriptID =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @scriptID = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @scriptID.push String.from_json(_item)
                 else
                   @scriptID.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @scriptID = _oa
            end
          end
        if !_o['messageNumber'].nil?
          _oa = _o['messageNumber']
            if(_oa.is_a? Hash)
              @messageNumber = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @messageNumber =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @messageNumber = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @messageNumber.push Fixnum.from_json(_item)
                 else
                   @messageNumber.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @messageNumber = _oa
            end
          end
        if !_o['messageID'].nil?
          _oa = _o['messageID']
            if(_oa.is_a? Hash)
              @messageID = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @messageID =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @messageID = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @messageID.push Fixnum.from_json(_item)
                 else
                   @messageID.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @messageID = _oa
            end
          end
        if !_o['value'].nil?
          _oa = _o['value']
            if(_oa.is_a? Hash)
              @value = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @value =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @value = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @value.push Boolean.from_json(_item)
                 else
                   @value.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @value = _oa
            end
          end
    end

    # constructs a RelevantBreakPoint from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Medisos

module Dto

  # (no documentation provided)
  class SocialConfigurationDto < Fi::Mediconsult::Medisos::Dto::MediSosDtoBase 

    # (no documentation provided)
    attr_accessor :tag
    # (no documentation provided)
    attr_accessor :originator
    # (no documentation provided)
    attr_accessor :configurationStr
    # (no documentation provided)
    attr_accessor :formId

    # the json hash for this SocialConfigurationDto
    def to_jaxb_json_hash
      _h = super
      _h['tag'] = tag.to_jaxb_json_hash unless tag.nil?
      _h['originator'] = originator.to_jaxb_json_hash unless originator.nil?
      _h['configurationStr'] = configurationStr.to_jaxb_json_hash unless configurationStr.nil?
      _h['formId'] = formId.to_jaxb_json_hash unless formId.nil?
      return _h
    end

    #initializes this SocialConfigurationDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['tag'].nil?
          _oa = _o['tag']
            if(_oa.is_a? Hash)
              @tag = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tag =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tag = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tag.push String.from_json(_item)
                 else
                   @tag.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tag = _oa
            end
          end
        if !_o['originator'].nil?
          _oa = _o['originator']
            if(_oa.is_a? Hash)
              @originator = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @originator =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @originator = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @originator.push Fixnum.from_json(_item)
                 else
                   @originator.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @originator = _oa
            end
          end
        if !_o['configurationStr'].nil?
          _oa = _o['configurationStr']
            if(_oa.is_a? Hash)
              @configurationStr = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @configurationStr =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @configurationStr = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @configurationStr.push String.from_json(_item)
                 else
                   @configurationStr.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @configurationStr = _oa
            end
          end
        if !_o['formId'].nil?
          _oa = _o['formId']
            if(_oa.is_a? Hash)
              @formId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @formId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @formId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @formId.push Fixnum.from_json(_item)
                 else
                   @formId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @formId = _oa
            end
          end
    end

    # constructs a SocialConfigurationDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Palvelupaatos

  # (no documentation provided)
  class BillingType

    # (no documentation provided)
    FROM_START_OF_PERIOD = "FROM_START_OF_PERIOD"

    # (no documentation provided)
    FROM_END_OF_PERIOD = "FROM_END_OF_PERIOD"
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Medisos

module Dto

  # (no documentation provided)
  class GroupMemberDto < Fi::Mediconsult::Medisos::Dto::DtoBase 

    # (no documentation provided)
    attr_accessor :form
    # (no documentation provided)
    attr_accessor :customerId
    # (no documentation provided)
    attr_accessor :customerInfo
    # (no documentation provided)
    attr_accessor :memberRoleList

    # the json hash for this GroupMemberDto
    def to_jaxb_json_hash
      _h = super
      _h['form'] = form.to_jaxb_json_hash unless form.nil?
      _h['customerId'] = customerId.to_jaxb_json_hash unless customerId.nil?
      _h['customerInfo'] = customerInfo.to_jaxb_json_hash unless customerInfo.nil?
      if !memberRoleList.nil?
        _ha = Array.new
        memberRoleList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['memberRoleList'] = _ha
      end
      return _h
    end

    #initializes this GroupMemberDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['form'].nil?
          _oa = _o['form']
            if(_oa.is_a? Hash)
              @form = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @form =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @form = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @form.push Fixnum.from_json(_item)
                 else
                   @form.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @form = _oa
            end
          end
        if !_o['customerId'].nil?
          _oa = _o['customerId']
            if(_oa.is_a? Hash)
              @customerId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @customerId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @customerId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @customerId.push Fixnum.from_json(_item)
                 else
                   @customerId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @customerId = _oa
            end
          end
        if !_o['customerInfo'].nil?
          _oa = _o['customerInfo']
            if(_oa.is_a? Hash)
              @customerInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @customerInfo =  Fi::Mediconsult::Core::Client::Dto::Omistaja::Patient.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @customerInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @customerInfo.push Fi::Mediconsult::Core::Client::Dto::Omistaja::Patient.from_json(_item)
                 else
                   @customerInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @customerInfo = _oa
            end
          end
        if !_o['memberRoleList'].nil?
          _oa = _o['memberRoleList']
            if(_oa.is_a? Hash)
              @memberRoleList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @memberRoleList =  Fi::Mediconsult::Medisos::Dto::GroupMemberRoleDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @memberRoleList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @memberRoleList.push Fi::Mediconsult::Medisos::Dto::GroupMemberRoleDto.from_json(_item)
                 else
                   @memberRoleList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @memberRoleList = _oa
            end
          end
    end

    # constructs a GroupMemberDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Java

module Sql

  # (no documentation provided)
  class Date < Time 

    # (no documentation provided)
    attr_accessor :hours
    # (no documentation provided)
    attr_accessor :minutes
    # (no documentation provided)
    attr_accessor :seconds

    # the json hash for this Date
    def to_jaxb_json_hash
      _h = super
      _h['hours'] = hours.to_jaxb_json_hash unless hours.nil?
      _h['minutes'] = minutes.to_jaxb_json_hash unless minutes.nil?
      _h['seconds'] = seconds.to_jaxb_json_hash unless seconds.nil?
      return _h
    end

    #initializes this Date with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['hours'].nil?
          _oa = _o['hours']
            if(_oa.is_a? Hash)
              @hours = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @hours =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @hours = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @hours.push Fixnum.from_json(_item)
                 else
                   @hours.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @hours = _oa
            end
          end
        if !_o['minutes'].nil?
          _oa = _o['minutes']
            if(_oa.is_a? Hash)
              @minutes = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @minutes =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @minutes = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @minutes.push Fixnum.from_json(_item)
                 else
                   @minutes.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @minutes = _oa
            end
          end
        if !_o['seconds'].nil?
          _oa = _o['seconds']
            if(_oa.is_a? Hash)
              @seconds = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @seconds =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @seconds = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @seconds.push Fixnum.from_json(_item)
                 else
                   @seconds.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @seconds = _oa
            end
          end
    end

    # constructs a Date from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Laakitys

  # (no documentation provided)
  class LaakeAine < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # Get medicine vnr code
    attr_accessor :laake
    # Get medicine ingredient
    attr_accessor :aine
    # Get ingredient amount
    attr_accessor :maara
    # Get ingredient amount unit
    attr_accessor :yksikko
    # Get the origin
    # -&#39;O&#39; if added by organization
    # -&#39;A&#39; or &#39;M&#39; otherwise
    attr_accessor :alkupera
    # Get the code for the ingredient (lääketietokannasta)
    attr_accessor :ainekoodi
    # Get the ATC code, if available
    attr_accessor :atc
    # Get the order number for the ingredient, if available
    attr_accessor :jarjestys

    # the json hash for this LaakeAine
    def to_jaxb_json_hash
      _h = super
      _h['laake'] = laake.to_jaxb_json_hash unless laake.nil?
      _h['aine'] = aine.to_jaxb_json_hash unless aine.nil?
      _h['maara'] = maara.to_jaxb_json_hash unless maara.nil?
      _h['yksikko'] = yksikko.to_jaxb_json_hash unless yksikko.nil?
      _h['alkupera'] = alkupera.to_jaxb_json_hash unless alkupera.nil?
      _h['ainekoodi'] = ainekoodi.to_jaxb_json_hash unless ainekoodi.nil?
      _h['atc'] = atc.to_jaxb_json_hash unless atc.nil?
      _h['jarjestys'] = jarjestys.to_jaxb_json_hash unless jarjestys.nil?
      return _h
    end

    #initializes this LaakeAine with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['laake'].nil?
          _oa = _o['laake']
            if(_oa.is_a? Hash)
              @laake = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laake =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laake = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laake.push String.from_json(_item)
                 else
                   @laake.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laake = _oa
            end
          end
        if !_o['aine'].nil?
          _oa = _o['aine']
            if(_oa.is_a? Hash)
              @aine = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @aine =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @aine = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @aine.push String.from_json(_item)
                 else
                   @aine.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @aine = _oa
            end
          end
        if !_o['maara'].nil?
          _oa = _o['maara']
            if(_oa.is_a? Hash)
              @maara = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @maara =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @maara = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @maara.push Float.from_json(_item)
                 else
                   @maara.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @maara = _oa
            end
          end
        if !_o['yksikko'].nil?
          _oa = _o['yksikko']
            if(_oa.is_a? Hash)
              @yksikko = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @yksikko =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @yksikko = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @yksikko.push String.from_json(_item)
                 else
                   @yksikko.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @yksikko = _oa
            end
          end
        if !_o['alkupera'].nil?
          _oa = _o['alkupera']
            if(_oa.is_a? Hash)
              @alkupera = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @alkupera =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @alkupera = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @alkupera.push Fixnum.from_json(_item)
                 else
                   @alkupera.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @alkupera = _oa
            end
          end
        if !_o['ainekoodi'].nil?
          _oa = _o['ainekoodi']
            if(_oa.is_a? Hash)
              @ainekoodi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ainekoodi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ainekoodi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ainekoodi.push String.from_json(_item)
                 else
                   @ainekoodi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ainekoodi = _oa
            end
          end
        if !_o['atc'].nil?
          _oa = _o['atc']
            if(_oa.is_a? Hash)
              @atc = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @atc =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @atc = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @atc.push String.from_json(_item)
                 else
                   @atc.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @atc = _oa
            end
          end
        if !_o['jarjestys'].nil?
          _oa = _o['jarjestys']
            if(_oa.is_a? Hash)
              @jarjestys = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @jarjestys =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @jarjestys = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @jarjestys.push Fixnum.from_json(_item)
                 else
                   @jarjestys.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @jarjestys = _oa
            end
          end
    end

    # constructs a LaakeAine from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Medisos

module Dto

  # (no documentation provided)
  class GroupMemberRoleDto < Fi::Mediconsult::Medisos::Dto::DtoBase 

    # (no documentation provided)
    attr_accessor :role

    # the json hash for this GroupMemberRoleDto
    def to_jaxb_json_hash
      _h = super
      _h['role'] = role.to_jaxb_json_hash unless role.nil?
      return _h
    end

    #initializes this GroupMemberRoleDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['role'].nil?
          _oa = _o['role']
            if(_oa.is_a? Hash)
              @role = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @role =  Fi::Mediconsult::Medisos::Dto::GroupRoleDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @role = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @role.push Fi::Mediconsult::Medisos::Dto::GroupRoleDto.from_json(_item)
                 else
                   @role.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @role = _oa
            end
          end
    end

    # constructs a GroupMemberRoleDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Omistaja

  # (no documentation provided)
  class DataOrigin

    # (no documentation provided)
    DEFAULT_VALUE = "DEFAULT_VALUE"

    # (no documentation provided)
    NO_WARD_CARE_DATA_MATCHES_FOUND = "NO_WARD_CARE_DATA_MATCHES_FOUND"

    # (no documentation provided)
    ENCOUNTER_EVENT = "ENCOUNTER_EVENT"

    # (no documentation provided)
    ACTIVE_TREATMENT = "ACTIVE_TREATMENT"
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Kanta

  # (no documentation provided)
  class AbstractWillDTO < Fi::Mediconsult::Core::Client::Dto::Kanta::KantaDTO 

    # (no documentation provided)
    attr_accessor :signPlace
    # (no documentation provided)
    attr_accessor :previousId
    # (no documentation provided)
    attr_accessor :invalidationReason
    # (no documentation provided)
    attr_accessor :effectiveTime
    # (no documentation provided)
    attr_accessor :signDate
    # (no documentation provided)
    attr_accessor :state
    # (no documentation provided)
    attr_accessor :willTextPattern
    # (no documentation provided)
    attr_accessor :versionNumber
    # (no documentation provided)
    attr_accessor :previousSetId
    # (no documentation provided)
    attr_accessor :id
    # (no documentation provided)
    attr_accessor :sign
    # (no documentation provided)
    attr_accessor :signDateCode

    # the json hash for this AbstractWillDTO
    def to_jaxb_json_hash
      _h = super
      _h['signPlace'] = signPlace.to_jaxb_json_hash unless signPlace.nil?
      _h['previousId'] = previousId.to_jaxb_json_hash unless previousId.nil?
      _h['invalidationReason'] = invalidationReason.to_jaxb_json_hash unless invalidationReason.nil?
      _h['effectiveTime'] = effectiveTime.to_jaxb_json_hash unless effectiveTime.nil?
      _h['signDate'] = signDate.to_jaxb_json_hash unless signDate.nil?
      _h['state'] = state.to_jaxb_json_hash unless state.nil?
      _h['willTextPattern'] = willTextPattern.to_jaxb_json_hash unless willTextPattern.nil?
      _h['versionNumber'] = versionNumber.to_jaxb_json_hash unless versionNumber.nil?
      _h['previousSetId'] = previousSetId.to_jaxb_json_hash unless previousSetId.nil?
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['sign'] = sign.to_jaxb_json_hash unless sign.nil?
      _h['signDateCode'] = signDateCode.to_jaxb_json_hash unless signDateCode.nil?
      return _h
    end

    #initializes this AbstractWillDTO with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['signPlace'].nil?
          _oa = _o['signPlace']
            if(_oa.is_a? Hash)
              @signPlace = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @signPlace =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @signPlace = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @signPlace.push String.from_json(_item)
                 else
                   @signPlace.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @signPlace = _oa
            end
          end
        if !_o['previousId'].nil?
          _oa = _o['previousId']
            if(_oa.is_a? Hash)
              @previousId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @previousId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @previousId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @previousId.push String.from_json(_item)
                 else
                   @previousId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @previousId = _oa
            end
          end
        if !_o['invalidationReason'].nil?
          _oa = _o['invalidationReason']
            if(_oa.is_a? Hash)
              @invalidationReason = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @invalidationReason =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @invalidationReason = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @invalidationReason.push String.from_json(_item)
                 else
                   @invalidationReason.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @invalidationReason = _oa
            end
          end
        if !_o['effectiveTime'].nil?
          _oa = _o['effectiveTime']
            if(_oa.is_a? Hash)
              @effectiveTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @effectiveTime =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @effectiveTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @effectiveTime.push String.from_json(_item)
                 else
                   @effectiveTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @effectiveTime = _oa
            end
          end
        if !_o['signDate'].nil?
          _oa = _o['signDate']
            if(_oa.is_a? Hash)
              @signDate = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @signDate =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @signDate = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @signDate.push String.from_json(_item)
                 else
                   @signDate.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @signDate = _oa
            end
          end
        if !_o['state'].nil?
          _oa = _o['state']
            if(_oa.is_a? Hash)
              @state = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @state =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @state = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @state.push String.from_json(_item)
                 else
                   @state.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @state = _oa
            end
          end
        if !_o['willTextPattern'].nil?
          _oa = _o['willTextPattern']
            if(_oa.is_a? Hash)
              @willTextPattern = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @willTextPattern =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @willTextPattern = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @willTextPattern.push String.from_json(_item)
                 else
                   @willTextPattern.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @willTextPattern = _oa
            end
          end
        if !_o['versionNumber'].nil?
          _oa = _o['versionNumber']
            if(_oa.is_a? Hash)
              @versionNumber = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @versionNumber =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @versionNumber = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @versionNumber.push Fixnum.from_json(_item)
                 else
                   @versionNumber.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @versionNumber = _oa
            end
          end
        if !_o['previousSetId'].nil?
          _oa = _o['previousSetId']
            if(_oa.is_a? Hash)
              @previousSetId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @previousSetId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @previousSetId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @previousSetId.push String.from_json(_item)
                 else
                   @previousSetId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @previousSetId = _oa
            end
          end
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push String.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
        if !_o['sign'].nil?
          _oa = _o['sign']
            if(_oa.is_a? Hash)
              @sign = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @sign =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @sign = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @sign.push String.from_json(_item)
                 else
                   @sign.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @sign = _oa
            end
          end
        if !_o['signDateCode'].nil?
          _oa = _o['signDateCode']
            if(_oa.is_a? Hash)
              @signDateCode = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @signDateCode =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @signDateCode = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @signDateCode.push String.from_json(_item)
                 else
                   @signDateCode.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @signDateCode = _oa
            end
          end
    end

    # constructs a AbstractWillDTO from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Medisos

module Dto

  # (no documentation provided)
  class PalveluyksikkoAsiakkuusDto < Fi::Mediconsult::Medisos::Dto::MediSosDtoBase 

    # (no documentation provided)
    attr_accessor :yksikkoOmistaja
    # (no documentation provided)
    attr_accessor :yksikko
    # (no documentation provided)
    attr_accessor :henkiloOmistaja
    # (no documentation provided)
    attr_accessor :asiakas
    # (no documentation provided)
    attr_accessor :asiakkuudenAlkamisaika
    # (no documentation provided)
    attr_accessor :asiakkuudenAlkamispaiva
    # (no documentation provided)
    attr_accessor :asiakkuudenPaattymisaika
    # (no documentation provided)
    attr_accessor :asiakkuudenPaattymispaiva
    # (no documentation provided)
    attr_accessor :palvelutehtavanAsiakkuusInfo
    # (no documentation provided)
    attr_accessor :sosiaalihuollonAsiakkuusInfo
    # (no documentation provided)
    attr_accessor :versionumero
    # (no documentation provided)
    attr_accessor :asiat
    # (no documentation provided)
    attr_accessor :yksikonRooli
    # (no documentation provided)
    attr_accessor :laatijanumero
    # (no documentation provided)
    attr_accessor :laatija
    # (no documentation provided)
    attr_accessor :muuttajanumero
    # (no documentation provided)
    attr_accessor :muuttaja
    # (no documentation provided)
    attr_accessor :suostumusTieto
    # (no documentation provided)
    attr_accessor :palveluyksikkoAsiakkuusTila
    # (no documentation provided)
    attr_accessor :lahityontekijanumeroLista
    # (no documentation provided)
    attr_accessor :lahityontekijaLista
    # (no documentation provided)
    attr_accessor :lomanAlkamisaika
    # (no documentation provided)
    attr_accessor :lomanAlkamispaiva
    # (no documentation provided)
    attr_accessor :lomanPaattymisaika
    # (no documentation provided)
    attr_accessor :lomanPaattymispaiva
    # (no documentation provided)
    attr_accessor :palvelutehtavanAsiakkuus
    # (no documentation provided)
    attr_accessor :sosiaalihuollonAsiakkuus
    # (no documentation provided)
    attr_accessor :osastoNumero
    # (no documentation provided)
    attr_accessor :osasto
    # (no documentation provided)
    attr_accessor :formId
    # (no documentation provided)
    attr_accessor :uusiTilainenAsiakirja

    # the json hash for this PalveluyksikkoAsiakkuusDto
    def to_jaxb_json_hash
      _h = super
      _h['yksikkoOmistaja'] = yksikkoOmistaja.to_jaxb_json_hash unless yksikkoOmistaja.nil?
      _h['yksikko'] = yksikko.to_jaxb_json_hash unless yksikko.nil?
      _h['henkiloOmistaja'] = henkiloOmistaja.to_jaxb_json_hash unless henkiloOmistaja.nil?
      _h['asiakas'] = asiakas.to_jaxb_json_hash unless asiakas.nil?
      _h['asiakkuudenAlkamisaika'] = asiakkuudenAlkamisaika.to_jaxb_json_hash unless asiakkuudenAlkamisaika.nil?
      _h['asiakkuudenAlkamispaiva'] = asiakkuudenAlkamispaiva.to_jaxb_json_hash unless asiakkuudenAlkamispaiva.nil?
      _h['asiakkuudenPaattymisaika'] = asiakkuudenPaattymisaika.to_jaxb_json_hash unless asiakkuudenPaattymisaika.nil?
      _h['asiakkuudenPaattymispaiva'] = asiakkuudenPaattymispaiva.to_jaxb_json_hash unless asiakkuudenPaattymispaiva.nil?
      _h['palvelutehtavanAsiakkuusInfo'] = palvelutehtavanAsiakkuusInfo.to_jaxb_json_hash unless palvelutehtavanAsiakkuusInfo.nil?
      _h['sosiaalihuollonAsiakkuusInfo'] = sosiaalihuollonAsiakkuusInfo.to_jaxb_json_hash unless sosiaalihuollonAsiakkuusInfo.nil?
      _h['versionumero'] = versionumero.to_jaxb_json_hash unless versionumero.nil?
      if !asiat.nil?
        _ha = Array.new
        asiat.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['asiat'] = _ha
      end
      _h['yksikonRooli'] = yksikonRooli.to_jaxb_json_hash unless yksikonRooli.nil?
      _h['laatijanumero'] = laatijanumero.to_jaxb_json_hash unless laatijanumero.nil?
      _h['laatija'] = laatija.to_jaxb_json_hash unless laatija.nil?
      _h['muuttajanumero'] = muuttajanumero.to_jaxb_json_hash unless muuttajanumero.nil?
      _h['muuttaja'] = muuttaja.to_jaxb_json_hash unless muuttaja.nil?
      _h['suostumusTieto'] = suostumusTieto.to_jaxb_json_hash unless suostumusTieto.nil?
      _h['palveluyksikkoAsiakkuusTila'] = palveluyksikkoAsiakkuusTila.to_jaxb_json_hash unless palveluyksikkoAsiakkuusTila.nil?
      if !lahityontekijanumeroLista.nil?
        _ha = Array.new
        lahityontekijanumeroLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['lahityontekijanumeroLista'] = _ha
      end
      if !lahityontekijaLista.nil?
        _ha = Array.new
        lahityontekijaLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['lahityontekijaLista'] = _ha
      end
      _h['lomanAlkamisaika'] = lomanAlkamisaika.to_jaxb_json_hash unless lomanAlkamisaika.nil?
      _h['lomanAlkamispaiva'] = lomanAlkamispaiva.to_jaxb_json_hash unless lomanAlkamispaiva.nil?
      _h['lomanPaattymisaika'] = lomanPaattymisaika.to_jaxb_json_hash unless lomanPaattymisaika.nil?
      _h['lomanPaattymispaiva'] = lomanPaattymispaiva.to_jaxb_json_hash unless lomanPaattymispaiva.nil?
      _h['palvelutehtavanAsiakkuus'] = palvelutehtavanAsiakkuus.to_jaxb_json_hash unless palvelutehtavanAsiakkuus.nil?
      _h['sosiaalihuollonAsiakkuus'] = sosiaalihuollonAsiakkuus.to_jaxb_json_hash unless sosiaalihuollonAsiakkuus.nil?
      _h['osastoNumero'] = osastoNumero.to_jaxb_json_hash unless osastoNumero.nil?
      _h['osasto'] = osasto.to_jaxb_json_hash unless osasto.nil?
      _h['formId'] = formId.to_jaxb_json_hash unless formId.nil?
      _h['uusiTilainenAsiakirja'] = uusiTilainenAsiakirja.to_jaxb_json_hash unless uusiTilainenAsiakirja.nil?
      return _h
    end

    #initializes this PalveluyksikkoAsiakkuusDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['yksikkoOmistaja'].nil?
          _oa = _o['yksikkoOmistaja']
            if(_oa.is_a? Hash)
              @yksikkoOmistaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @yksikkoOmistaja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @yksikkoOmistaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @yksikkoOmistaja.push Fixnum.from_json(_item)
                 else
                   @yksikkoOmistaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @yksikkoOmistaja = _oa
            end
          end
        if !_o['yksikko'].nil?
          _oa = _o['yksikko']
            if(_oa.is_a? Hash)
              @yksikko = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @yksikko =  Fi::Mediconsult::Core::Client::Dto::Omistaja::Unit.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @yksikko = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @yksikko.push Fi::Mediconsult::Core::Client::Dto::Omistaja::Unit.from_json(_item)
                 else
                   @yksikko.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @yksikko = _oa
            end
          end
        if !_o['henkiloOmistaja'].nil?
          _oa = _o['henkiloOmistaja']
            if(_oa.is_a? Hash)
              @henkiloOmistaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @henkiloOmistaja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @henkiloOmistaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @henkiloOmistaja.push Fixnum.from_json(_item)
                 else
                   @henkiloOmistaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @henkiloOmistaja = _oa
            end
          end
        if !_o['asiakas'].nil?
          _oa = _o['asiakas']
            if(_oa.is_a? Hash)
              @asiakas = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakas =  Fi::Mediconsult::Core::Client::Dto::Omistaja::Patient.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakas = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakas.push Fi::Mediconsult::Core::Client::Dto::Omistaja::Patient.from_json(_item)
                 else
                   @asiakas.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakas = _oa
            end
          end
        if !_o['asiakkuudenAlkamisaika'].nil?
          _oa = _o['asiakkuudenAlkamisaika']
            if(_oa.is_a? Hash)
              @asiakkuudenAlkamisaika = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakkuudenAlkamisaika =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakkuudenAlkamisaika = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakkuudenAlkamisaika.push Time.from_json(_item)
                 else
                   @asiakkuudenAlkamisaika.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakkuudenAlkamisaika = _oa
            end
          end
        if !_o['asiakkuudenAlkamispaiva'].nil?
          _oa = _o['asiakkuudenAlkamispaiva']
            if(_oa.is_a? Hash)
              @asiakkuudenAlkamispaiva = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakkuudenAlkamispaiva =  java.time::LocalDate.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakkuudenAlkamispaiva = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakkuudenAlkamispaiva.push java.time::LocalDate.from_json(_item)
                 else
                   @asiakkuudenAlkamispaiva.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakkuudenAlkamispaiva = _oa
            end
          end
        if !_o['asiakkuudenPaattymisaika'].nil?
          _oa = _o['asiakkuudenPaattymisaika']
            if(_oa.is_a? Hash)
              @asiakkuudenPaattymisaika = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakkuudenPaattymisaika =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakkuudenPaattymisaika = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakkuudenPaattymisaika.push Time.from_json(_item)
                 else
                   @asiakkuudenPaattymisaika.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakkuudenPaattymisaika = _oa
            end
          end
        if !_o['asiakkuudenPaattymispaiva'].nil?
          _oa = _o['asiakkuudenPaattymispaiva']
            if(_oa.is_a? Hash)
              @asiakkuudenPaattymispaiva = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakkuudenPaattymispaiva =  java.time::LocalDate.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakkuudenPaattymispaiva = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakkuudenPaattymispaiva.push java.time::LocalDate.from_json(_item)
                 else
                   @asiakkuudenPaattymispaiva.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakkuudenPaattymispaiva = _oa
            end
          end
        if !_o['palvelutehtavanAsiakkuusInfo'].nil?
          _oa = _o['palvelutehtavanAsiakkuusInfo']
            if(_oa.is_a? Hash)
              @palvelutehtavanAsiakkuusInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palvelutehtavanAsiakkuusInfo =  Fi::Mediconsult::Medisos::Dto::PalvelutehtavanAsiakkuusDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palvelutehtavanAsiakkuusInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palvelutehtavanAsiakkuusInfo.push Fi::Mediconsult::Medisos::Dto::PalvelutehtavanAsiakkuusDto.from_json(_item)
                 else
                   @palvelutehtavanAsiakkuusInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palvelutehtavanAsiakkuusInfo = _oa
            end
          end
        if !_o['sosiaalihuollonAsiakkuusInfo'].nil?
          _oa = _o['sosiaalihuollonAsiakkuusInfo']
            if(_oa.is_a? Hash)
              @sosiaalihuollonAsiakkuusInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @sosiaalihuollonAsiakkuusInfo =  Fi::Mediconsult::Medisos::Dto::SosiaalihuollonAsiakkuusDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @sosiaalihuollonAsiakkuusInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @sosiaalihuollonAsiakkuusInfo.push Fi::Mediconsult::Medisos::Dto::SosiaalihuollonAsiakkuusDto.from_json(_item)
                 else
                   @sosiaalihuollonAsiakkuusInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @sosiaalihuollonAsiakkuusInfo = _oa
            end
          end
        if !_o['versionumero'].nil?
          _oa = _o['versionumero']
            if(_oa.is_a? Hash)
              @versionumero = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @versionumero =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @versionumero = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @versionumero.push Fixnum.from_json(_item)
                 else
                   @versionumero.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @versionumero = _oa
            end
          end
        if !_o['asiat'].nil?
          _oa = _o['asiat']
            if(_oa.is_a? Hash)
              @asiat = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiat =  Fi::Mediconsult::Medisos::Dto::AsiaDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiat = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiat.push Fi::Mediconsult::Medisos::Dto::AsiaDto.from_json(_item)
                 else
                   @asiat.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiat = _oa
            end
          end
        if !_o['yksikonRooli'].nil?
          _oa = _o['yksikonRooli']
            if(_oa.is_a? Hash)
              @yksikonRooli = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @yksikonRooli =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @yksikonRooli = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @yksikonRooli.push String.from_json(_item)
                 else
                   @yksikonRooli.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @yksikonRooli = _oa
            end
          end
        if !_o['laatijanumero'].nil?
          _oa = _o['laatijanumero']
            if(_oa.is_a? Hash)
              @laatijanumero = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laatijanumero =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laatijanumero = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laatijanumero.push Fixnum.from_json(_item)
                 else
                   @laatijanumero.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laatijanumero = _oa
            end
          end
        if !_o['laatija'].nil?
          _oa = _o['laatija']
            if(_oa.is_a? Hash)
              @laatija = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laatija =  Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laatija = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laatija.push Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_item)
                 else
                   @laatija.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laatija = _oa
            end
          end
        if !_o['muuttajanumero'].nil?
          _oa = _o['muuttajanumero']
            if(_oa.is_a? Hash)
              @muuttajanumero = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @muuttajanumero =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @muuttajanumero = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @muuttajanumero.push Fixnum.from_json(_item)
                 else
                   @muuttajanumero.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @muuttajanumero = _oa
            end
          end
        if !_o['muuttaja'].nil?
          _oa = _o['muuttaja']
            if(_oa.is_a? Hash)
              @muuttaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @muuttaja =  Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @muuttaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @muuttaja.push Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_item)
                 else
                   @muuttaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @muuttaja = _oa
            end
          end
        if !_o['suostumusTieto'].nil?
          _oa = _o['suostumusTieto']
            if(_oa.is_a? Hash)
              @suostumusTieto = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @suostumusTieto =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @suostumusTieto = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @suostumusTieto.push Boolean.from_json(_item)
                 else
                   @suostumusTieto.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @suostumusTieto = _oa
            end
          end
        if !_o['palveluyksikkoAsiakkuusTila'].nil?
          _oa = _o['palveluyksikkoAsiakkuusTila']
            if(_oa.is_a? Hash)
              @palveluyksikkoAsiakkuusTila = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palveluyksikkoAsiakkuusTila =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palveluyksikkoAsiakkuusTila = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palveluyksikkoAsiakkuusTila.push String.from_json(_item)
                 else
                   @palveluyksikkoAsiakkuusTila.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palveluyksikkoAsiakkuusTila = _oa
            end
          end
        if !_o['lahityontekijanumeroLista'].nil?
          _oa = _o['lahityontekijanumeroLista']
            if(_oa.is_a? Hash)
              @lahityontekijanumeroLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lahityontekijanumeroLista =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lahityontekijanumeroLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lahityontekijanumeroLista.push Fixnum.from_json(_item)
                 else
                   @lahityontekijanumeroLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lahityontekijanumeroLista = _oa
            end
          end
        if !_o['lahityontekijaLista'].nil?
          _oa = _o['lahityontekijaLista']
            if(_oa.is_a? Hash)
              @lahityontekijaLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lahityontekijaLista =  Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lahityontekijaLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lahityontekijaLista.push Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_item)
                 else
                   @lahityontekijaLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lahityontekijaLista = _oa
            end
          end
        if !_o['lomanAlkamisaika'].nil?
          _oa = _o['lomanAlkamisaika']
            if(_oa.is_a? Hash)
              @lomanAlkamisaika = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lomanAlkamisaika =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lomanAlkamisaika = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lomanAlkamisaika.push Time.from_json(_item)
                 else
                   @lomanAlkamisaika.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lomanAlkamisaika = _oa
            end
          end
        if !_o['lomanAlkamispaiva'].nil?
          _oa = _o['lomanAlkamispaiva']
            if(_oa.is_a? Hash)
              @lomanAlkamispaiva = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lomanAlkamispaiva =  java.time::LocalDate.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lomanAlkamispaiva = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lomanAlkamispaiva.push java.time::LocalDate.from_json(_item)
                 else
                   @lomanAlkamispaiva.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lomanAlkamispaiva = _oa
            end
          end
        if !_o['lomanPaattymisaika'].nil?
          _oa = _o['lomanPaattymisaika']
            if(_oa.is_a? Hash)
              @lomanPaattymisaika = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lomanPaattymisaika =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lomanPaattymisaika = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lomanPaattymisaika.push Time.from_json(_item)
                 else
                   @lomanPaattymisaika.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lomanPaattymisaika = _oa
            end
          end
        if !_o['lomanPaattymispaiva'].nil?
          _oa = _o['lomanPaattymispaiva']
            if(_oa.is_a? Hash)
              @lomanPaattymispaiva = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lomanPaattymispaiva =  java.time::LocalDate.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lomanPaattymispaiva = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lomanPaattymispaiva.push java.time::LocalDate.from_json(_item)
                 else
                   @lomanPaattymispaiva.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lomanPaattymispaiva = _oa
            end
          end
        if !_o['palvelutehtavanAsiakkuus'].nil?
          _oa = _o['palvelutehtavanAsiakkuus']
            if(_oa.is_a? Hash)
              @palvelutehtavanAsiakkuus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palvelutehtavanAsiakkuus =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palvelutehtavanAsiakkuus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palvelutehtavanAsiakkuus.push Bignum.from_json(_item)
                 else
                   @palvelutehtavanAsiakkuus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palvelutehtavanAsiakkuus = _oa
            end
          end
        if !_o['sosiaalihuollonAsiakkuus'].nil?
          _oa = _o['sosiaalihuollonAsiakkuus']
            if(_oa.is_a? Hash)
              @sosiaalihuollonAsiakkuus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @sosiaalihuollonAsiakkuus =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @sosiaalihuollonAsiakkuus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @sosiaalihuollonAsiakkuus.push Bignum.from_json(_item)
                 else
                   @sosiaalihuollonAsiakkuus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @sosiaalihuollonAsiakkuus = _oa
            end
          end
        if !_o['osastoNumero'].nil?
          _oa = _o['osastoNumero']
            if(_oa.is_a? Hash)
              @osastoNumero = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @osastoNumero =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @osastoNumero = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @osastoNumero.push Fixnum.from_json(_item)
                 else
                   @osastoNumero.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @osastoNumero = _oa
            end
          end
        if !_o['osasto'].nil?
          _oa = _o['osasto']
            if(_oa.is_a? Hash)
              @osasto = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @osasto =  Fi::Mediconsult::Core::Client::Dto::Omistaja::Unit.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @osasto = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @osasto.push Fi::Mediconsult::Core::Client::Dto::Omistaja::Unit.from_json(_item)
                 else
                   @osasto.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @osasto = _oa
            end
          end
        if !_o['formId'].nil?
          _oa = _o['formId']
            if(_oa.is_a? Hash)
              @formId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @formId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @formId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @formId.push Fixnum.from_json(_item)
                 else
                   @formId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @formId = _oa
            end
          end
        if !_o['uusiTilainenAsiakirja'].nil?
          _oa = _o['uusiTilainenAsiakirja']
            if(_oa.is_a? Hash)
              @uusiTilainenAsiakirja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @uusiTilainenAsiakirja =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @uusiTilainenAsiakirja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @uusiTilainenAsiakirja.push Boolean.from_json(_item)
                 else
                   @uusiTilainenAsiakirja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @uusiTilainenAsiakirja = _oa
            end
          end
    end

    # constructs a PalveluyksikkoAsiakkuusDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class RiskPermanency

    # (no documentation provided)
    PRELIMINARY = "PRELIMINARY"

    # (no documentation provided)
    TEMPORARY = "TEMPORARY"

    # (no documentation provided)
    PERMANENT = "PERMANENT"
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Laakitys

  # (no documentation provided)
  class ReseptiTiedot < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # (no documentation provided)
    attr_accessor :maaraysAika
    # (no documentation provided)
    attr_accessor :lukitus
    # (no documentation provided)
    attr_accessor :lukituskoodi
    # (no documentation provided)
    attr_accessor :toimitettu
    # (no documentation provided)
    attr_accessor :mitatointipvm
    # (no documentation provided)
    attr_accessor :mitatoija
    # (no documentation provided)
    attr_accessor :mitatoinninSyy
    # (no documentation provided)
    attr_accessor :mitatoinninSyyKoodi
    # (no documentation provided)
    attr_accessor :mitatoinninSyyKoodiTeksti
    # (no documentation provided)
    attr_accessor :mitatoinninTila
    # (no documentation provided)
    attr_accessor :mitatoinninTyyppi
    # (no documentation provided)
    attr_accessor :reseptinMuutoksenSyy
    # (no documentation provided)
    attr_accessor :reseptinMuutoksenSyyKoodi
    # (no documentation provided)
    attr_accessor :reseptinMuutoksenPaikka
    # (no documentation provided)
    attr_accessor :reseptinMuuttaja
    # (no documentation provided)
    attr_accessor :reseptinMuutoksenAika
    # (no documentation provided)
    attr_accessor :alkuperainenReseptinMuutoksenSyy
    # (no documentation provided)
    attr_accessor :uusimiskielto
    # (no documentation provided)
    attr_accessor :uusimiskiellonSyy
    # (no documentation provided)
    attr_accessor :uusimiskiellonPerustelu
    # (no documentation provided)
    attr_accessor :OID
    # (no documentation provided)
    attr_accessor :setOID
    # (no documentation provided)
    attr_accessor :lukitusID
    # (no documentation provided)
    attr_accessor :apteekkiviesti
    # (no documentation provided)
    attr_accessor :tunnistustapa
    # (no documentation provided)
    attr_accessor :tunnistustapaSelite
    # (no documentation provided)
    attr_accessor :iterointi
    # (no documentation provided)
    attr_accessor :iterointiVali
    # (no documentation provided)
    attr_accessor :perustelu
    # (no documentation provided)
    attr_accessor :ulkomaanResepti
    # (no documentation provided)
    attr_accessor :eresSpecVersion
    # (no documentation provided)
    attr_accessor :laakarinPalkkio
    # (no documentation provided)
    attr_accessor :uusiminen
    # (no documentation provided)
    attr_accessor :uusiminenKoodi
    # (no documentation provided)
    attr_accessor :lahetetty
    # (no documentation provided)
    attr_accessor :reseptiTeksti
    # (no documentation provided)
    attr_accessor :ereseptiKielto

    # the json hash for this ReseptiTiedot
    def to_jaxb_json_hash
      _h = super
      _h['maaraysAika'] = maaraysAika.to_jaxb_json_hash unless maaraysAika.nil?
      _h['lukitus'] = lukitus.to_jaxb_json_hash unless lukitus.nil?
      _h['lukituskoodi'] = lukituskoodi.to_jaxb_json_hash unless lukituskoodi.nil?
      _h['toimitettu'] = toimitettu.to_jaxb_json_hash unless toimitettu.nil?
      _h['mitatointipvm'] = mitatointipvm.to_jaxb_json_hash unless mitatointipvm.nil?
      _h['mitatoija'] = mitatoija.to_jaxb_json_hash unless mitatoija.nil?
      _h['mitatoinninSyy'] = mitatoinninSyy.to_jaxb_json_hash unless mitatoinninSyy.nil?
      _h['mitatoinninSyyKoodi'] = mitatoinninSyyKoodi.to_jaxb_json_hash unless mitatoinninSyyKoodi.nil?
      _h['mitatoinninSyyKoodiTeksti'] = mitatoinninSyyKoodiTeksti.to_jaxb_json_hash unless mitatoinninSyyKoodiTeksti.nil?
      _h['mitatoinninTila'] = mitatoinninTila.to_jaxb_json_hash unless mitatoinninTila.nil?
      _h['mitatoinninTyyppi'] = mitatoinninTyyppi.to_jaxb_json_hash unless mitatoinninTyyppi.nil?
      _h['reseptinMuutoksenSyy'] = reseptinMuutoksenSyy.to_jaxb_json_hash unless reseptinMuutoksenSyy.nil?
      _h['reseptinMuutoksenSyyKoodi'] = reseptinMuutoksenSyyKoodi.to_jaxb_json_hash unless reseptinMuutoksenSyyKoodi.nil?
      _h['reseptinMuutoksenPaikka'] = reseptinMuutoksenPaikka.to_jaxb_json_hash unless reseptinMuutoksenPaikka.nil?
      _h['reseptinMuuttaja'] = reseptinMuuttaja.to_jaxb_json_hash unless reseptinMuuttaja.nil?
      _h['reseptinMuutoksenAika'] = reseptinMuutoksenAika.to_jaxb_json_hash unless reseptinMuutoksenAika.nil?
      _h['alkuperainenReseptinMuutoksenSyy'] = alkuperainenReseptinMuutoksenSyy.to_jaxb_json_hash unless alkuperainenReseptinMuutoksenSyy.nil?
      _h['uusimiskielto'] = uusimiskielto.to_jaxb_json_hash unless uusimiskielto.nil?
      _h['uusimiskiellonSyy'] = uusimiskiellonSyy.to_jaxb_json_hash unless uusimiskiellonSyy.nil?
      _h['uusimiskiellonPerustelu'] = uusimiskiellonPerustelu.to_jaxb_json_hash unless uusimiskiellonPerustelu.nil?
      _h['OID'] = OID.to_jaxb_json_hash unless OID.nil?
      _h['setOID'] = setOID.to_jaxb_json_hash unless setOID.nil?
      _h['lukitusID'] = lukitusID.to_jaxb_json_hash unless lukitusID.nil?
      _h['apteekkiviesti'] = apteekkiviesti.to_jaxb_json_hash unless apteekkiviesti.nil?
      _h['tunnistustapa'] = tunnistustapa.to_jaxb_json_hash unless tunnistustapa.nil?
      _h['tunnistustapaSelite'] = tunnistustapaSelite.to_jaxb_json_hash unless tunnistustapaSelite.nil?
      _h['iterointi'] = iterointi.to_jaxb_json_hash unless iterointi.nil?
      _h['iterointiVali'] = iterointiVali.to_jaxb_json_hash unless iterointiVali.nil?
      _h['perustelu'] = perustelu.to_jaxb_json_hash unless perustelu.nil?
      _h['ulkomaanResepti'] = ulkomaanResepti.to_jaxb_json_hash unless ulkomaanResepti.nil?
      _h['eresSpecVersion'] = eresSpecVersion.to_jaxb_json_hash unless eresSpecVersion.nil?
      _h['laakarinPalkkio'] = laakarinPalkkio.to_jaxb_json_hash unless laakarinPalkkio.nil?
      _h['uusiminen'] = uusiminen.to_jaxb_json_hash unless uusiminen.nil?
      _h['uusiminenKoodi'] = uusiminenKoodi.to_jaxb_json_hash unless uusiminenKoodi.nil?
      _h['lahetetty'] = lahetetty.to_jaxb_json_hash unless lahetetty.nil?
      _h['reseptiTeksti'] = reseptiTeksti.to_jaxb_json_hash unless reseptiTeksti.nil?
      _h['ereseptiKielto'] = ereseptiKielto.to_jaxb_json_hash unless ereseptiKielto.nil?
      return _h
    end

    #initializes this ReseptiTiedot with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['maaraysAika'].nil?
          _oa = _o['maaraysAika']
            if(_oa.is_a? Hash)
              @maaraysAika = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @maaraysAika =  Java::Sql::Date.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @maaraysAika = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @maaraysAika.push Java::Sql::Date.from_json(_item)
                 else
                   @maaraysAika.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @maaraysAika = _oa
            end
          end
        if !_o['lukitus'].nil?
          _oa = _o['lukitus']
            if(_oa.is_a? Hash)
              @lukitus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lukitus =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lukitus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lukitus.push String.from_json(_item)
                 else
                   @lukitus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lukitus = _oa
            end
          end
        if !_o['lukituskoodi'].nil?
          _oa = _o['lukituskoodi']
            if(_oa.is_a? Hash)
              @lukituskoodi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lukituskoodi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lukituskoodi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lukituskoodi.push String.from_json(_item)
                 else
                   @lukituskoodi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lukituskoodi = _oa
            end
          end
        if !_o['toimitettu'].nil?
          _oa = _o['toimitettu']
            if(_oa.is_a? Hash)
              @toimitettu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @toimitettu =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @toimitettu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @toimitettu.push String.from_json(_item)
                 else
                   @toimitettu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @toimitettu = _oa
            end
          end
        if !_o['mitatointipvm'].nil?
          _oa = _o['mitatointipvm']
            if(_oa.is_a? Hash)
              @mitatointipvm = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @mitatointipvm =  Java::Sql::Date.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @mitatointipvm = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @mitatointipvm.push Java::Sql::Date.from_json(_item)
                 else
                   @mitatointipvm.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @mitatointipvm = _oa
            end
          end
        if !_o['mitatoija'].nil?
          _oa = _o['mitatoija']
            if(_oa.is_a? Hash)
              @mitatoija = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @mitatoija =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @mitatoija = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @mitatoija.push String.from_json(_item)
                 else
                   @mitatoija.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @mitatoija = _oa
            end
          end
        if !_o['mitatoinninSyy'].nil?
          _oa = _o['mitatoinninSyy']
            if(_oa.is_a? Hash)
              @mitatoinninSyy = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @mitatoinninSyy =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @mitatoinninSyy = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @mitatoinninSyy.push String.from_json(_item)
                 else
                   @mitatoinninSyy.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @mitatoinninSyy = _oa
            end
          end
        if !_o['mitatoinninSyyKoodi'].nil?
          _oa = _o['mitatoinninSyyKoodi']
            if(_oa.is_a? Hash)
              @mitatoinninSyyKoodi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @mitatoinninSyyKoodi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @mitatoinninSyyKoodi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @mitatoinninSyyKoodi.push String.from_json(_item)
                 else
                   @mitatoinninSyyKoodi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @mitatoinninSyyKoodi = _oa
            end
          end
        if !_o['mitatoinninSyyKoodiTeksti'].nil?
          _oa = _o['mitatoinninSyyKoodiTeksti']
            if(_oa.is_a? Hash)
              @mitatoinninSyyKoodiTeksti = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @mitatoinninSyyKoodiTeksti =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @mitatoinninSyyKoodiTeksti = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @mitatoinninSyyKoodiTeksti.push String.from_json(_item)
                 else
                   @mitatoinninSyyKoodiTeksti.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @mitatoinninSyyKoodiTeksti = _oa
            end
          end
        if !_o['mitatoinninTila'].nil?
          _oa = _o['mitatoinninTila']
            if(_oa.is_a? Hash)
              @mitatoinninTila = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @mitatoinninTila =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @mitatoinninTila = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @mitatoinninTila.push String.from_json(_item)
                 else
                   @mitatoinninTila.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @mitatoinninTila = _oa
            end
          end
        if !_o['mitatoinninTyyppi'].nil?
          _oa = _o['mitatoinninTyyppi']
            if(_oa.is_a? Hash)
              @mitatoinninTyyppi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @mitatoinninTyyppi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @mitatoinninTyyppi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @mitatoinninTyyppi.push String.from_json(_item)
                 else
                   @mitatoinninTyyppi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @mitatoinninTyyppi = _oa
            end
          end
        if !_o['reseptinMuutoksenSyy'].nil?
          _oa = _o['reseptinMuutoksenSyy']
            if(_oa.is_a? Hash)
              @reseptinMuutoksenSyy = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @reseptinMuutoksenSyy =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @reseptinMuutoksenSyy = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @reseptinMuutoksenSyy.push String.from_json(_item)
                 else
                   @reseptinMuutoksenSyy.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @reseptinMuutoksenSyy = _oa
            end
          end
        if !_o['reseptinMuutoksenSyyKoodi'].nil?
          _oa = _o['reseptinMuutoksenSyyKoodi']
            if(_oa.is_a? Hash)
              @reseptinMuutoksenSyyKoodi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @reseptinMuutoksenSyyKoodi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @reseptinMuutoksenSyyKoodi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @reseptinMuutoksenSyyKoodi.push String.from_json(_item)
                 else
                   @reseptinMuutoksenSyyKoodi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @reseptinMuutoksenSyyKoodi = _oa
            end
          end
        if !_o['reseptinMuutoksenPaikka'].nil?
          _oa = _o['reseptinMuutoksenPaikka']
            if(_oa.is_a? Hash)
              @reseptinMuutoksenPaikka = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @reseptinMuutoksenPaikka =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @reseptinMuutoksenPaikka = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @reseptinMuutoksenPaikka.push String.from_json(_item)
                 else
                   @reseptinMuutoksenPaikka.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @reseptinMuutoksenPaikka = _oa
            end
          end
        if !_o['reseptinMuuttaja'].nil?
          _oa = _o['reseptinMuuttaja']
            if(_oa.is_a? Hash)
              @reseptinMuuttaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @reseptinMuuttaja =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @reseptinMuuttaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @reseptinMuuttaja.push String.from_json(_item)
                 else
                   @reseptinMuuttaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @reseptinMuuttaja = _oa
            end
          end
        if !_o['reseptinMuutoksenAika'].nil?
          _oa = _o['reseptinMuutoksenAika']
            if(_oa.is_a? Hash)
              @reseptinMuutoksenAika = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @reseptinMuutoksenAika =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @reseptinMuutoksenAika = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @reseptinMuutoksenAika.push String.from_json(_item)
                 else
                   @reseptinMuutoksenAika.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @reseptinMuutoksenAika = _oa
            end
          end
        if !_o['alkuperainenReseptinMuutoksenSyy'].nil?
          _oa = _o['alkuperainenReseptinMuutoksenSyy']
            if(_oa.is_a? Hash)
              @alkuperainenReseptinMuutoksenSyy = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @alkuperainenReseptinMuutoksenSyy =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @alkuperainenReseptinMuutoksenSyy = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @alkuperainenReseptinMuutoksenSyy.push String.from_json(_item)
                 else
                   @alkuperainenReseptinMuutoksenSyy.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @alkuperainenReseptinMuutoksenSyy = _oa
            end
          end
        if !_o['uusimiskielto'].nil?
          _oa = _o['uusimiskielto']
            if(_oa.is_a? Hash)
              @uusimiskielto = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @uusimiskielto =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @uusimiskielto = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @uusimiskielto.push String.from_json(_item)
                 else
                   @uusimiskielto.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @uusimiskielto = _oa
            end
          end
        if !_o['uusimiskiellonSyy'].nil?
          _oa = _o['uusimiskiellonSyy']
            if(_oa.is_a? Hash)
              @uusimiskiellonSyy = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @uusimiskiellonSyy =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @uusimiskiellonSyy = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @uusimiskiellonSyy.push String.from_json(_item)
                 else
                   @uusimiskiellonSyy.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @uusimiskiellonSyy = _oa
            end
          end
        if !_o['uusimiskiellonPerustelu'].nil?
          _oa = _o['uusimiskiellonPerustelu']
            if(_oa.is_a? Hash)
              @uusimiskiellonPerustelu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @uusimiskiellonPerustelu =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @uusimiskiellonPerustelu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @uusimiskiellonPerustelu.push String.from_json(_item)
                 else
                   @uusimiskiellonPerustelu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @uusimiskiellonPerustelu = _oa
            end
          end
        if !_o['OID'].nil?
          _oa = _o['OID']
            if(_oa.is_a? Hash)
              @OID = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @OID =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @OID = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @OID.push String.from_json(_item)
                 else
                   @OID.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @OID = _oa
            end
          end
        if !_o['setOID'].nil?
          _oa = _o['setOID']
            if(_oa.is_a? Hash)
              @setOID = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @setOID =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @setOID = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @setOID.push String.from_json(_item)
                 else
                   @setOID.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @setOID = _oa
            end
          end
        if !_o['lukitusID'].nil?
          _oa = _o['lukitusID']
            if(_oa.is_a? Hash)
              @lukitusID = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lukitusID =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lukitusID = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lukitusID.push String.from_json(_item)
                 else
                   @lukitusID.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lukitusID = _oa
            end
          end
        if !_o['apteekkiviesti'].nil?
          _oa = _o['apteekkiviesti']
            if(_oa.is_a? Hash)
              @apteekkiviesti = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @apteekkiviesti =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @apteekkiviesti = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @apteekkiviesti.push String.from_json(_item)
                 else
                   @apteekkiviesti.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @apteekkiviesti = _oa
            end
          end
        if !_o['tunnistustapa'].nil?
          _oa = _o['tunnistustapa']
            if(_oa.is_a? Hash)
              @tunnistustapa = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tunnistustapa =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tunnistustapa = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tunnistustapa.push String.from_json(_item)
                 else
                   @tunnistustapa.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tunnistustapa = _oa
            end
          end
        if !_o['tunnistustapaSelite'].nil?
          _oa = _o['tunnistustapaSelite']
            if(_oa.is_a? Hash)
              @tunnistustapaSelite = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tunnistustapaSelite =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tunnistustapaSelite = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tunnistustapaSelite.push String.from_json(_item)
                 else
                   @tunnistustapaSelite.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tunnistustapaSelite = _oa
            end
          end
        if !_o['iterointi'].nil?
          _oa = _o['iterointi']
            if(_oa.is_a? Hash)
              @iterointi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @iterointi =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @iterointi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @iterointi.push Fixnum.from_json(_item)
                 else
                   @iterointi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @iterointi = _oa
            end
          end
        if !_o['iterointiVali'].nil?
          _oa = _o['iterointiVali']
            if(_oa.is_a? Hash)
              @iterointiVali = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @iterointiVali =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @iterointiVali = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @iterointiVali.push Fixnum.from_json(_item)
                 else
                   @iterointiVali.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @iterointiVali = _oa
            end
          end
        if !_o['perustelu'].nil?
          _oa = _o['perustelu']
            if(_oa.is_a? Hash)
              @perustelu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @perustelu =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @perustelu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @perustelu.push String.from_json(_item)
                 else
                   @perustelu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @perustelu = _oa
            end
          end
        if !_o['ulkomaanResepti'].nil?
          _oa = _o['ulkomaanResepti']
            if(_oa.is_a? Hash)
              @ulkomaanResepti = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ulkomaanResepti =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ulkomaanResepti = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ulkomaanResepti.push String.from_json(_item)
                 else
                   @ulkomaanResepti.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ulkomaanResepti = _oa
            end
          end
        if !_o['eresSpecVersion'].nil?
          _oa = _o['eresSpecVersion']
            if(_oa.is_a? Hash)
              @eresSpecVersion = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @eresSpecVersion =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @eresSpecVersion = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @eresSpecVersion.push String.from_json(_item)
                 else
                   @eresSpecVersion.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @eresSpecVersion = _oa
            end
          end
        if !_o['laakarinPalkkio'].nil?
          _oa = _o['laakarinPalkkio']
            if(_oa.is_a? Hash)
              @laakarinPalkkio = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laakarinPalkkio =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laakarinPalkkio = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laakarinPalkkio.push Float.from_json(_item)
                 else
                   @laakarinPalkkio.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laakarinPalkkio = _oa
            end
          end
        if !_o['uusiminen'].nil?
          _oa = _o['uusiminen']
            if(_oa.is_a? Hash)
              @uusiminen = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @uusiminen =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @uusiminen = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @uusiminen.push String.from_json(_item)
                 else
                   @uusiminen.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @uusiminen = _oa
            end
          end
        if !_o['uusiminenKoodi'].nil?
          _oa = _o['uusiminenKoodi']
            if(_oa.is_a? Hash)
              @uusiminenKoodi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @uusiminenKoodi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @uusiminenKoodi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @uusiminenKoodi.push String.from_json(_item)
                 else
                   @uusiminenKoodi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @uusiminenKoodi = _oa
            end
          end
        if !_o['lahetetty'].nil?
          _oa = _o['lahetetty']
            if(_oa.is_a? Hash)
              @lahetetty = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lahetetty =  Java::Sql::Date.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lahetetty = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lahetetty.push Java::Sql::Date.from_json(_item)
                 else
                   @lahetetty.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lahetetty = _oa
            end
          end
        if !_o['reseptiTeksti'].nil?
          _oa = _o['reseptiTeksti']
            if(_oa.is_a? Hash)
              @reseptiTeksti = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @reseptiTeksti =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @reseptiTeksti = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @reseptiTeksti.push String.from_json(_item)
                 else
                   @reseptiTeksti.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @reseptiTeksti = _oa
            end
          end
        if !_o['ereseptiKielto'].nil?
          _oa = _o['ereseptiKielto']
            if(_oa.is_a? Hash)
              @ereseptiKielto = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ereseptiKielto =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ereseptiKielto = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ereseptiKielto.push String.from_json(_item)
                 else
                   @ereseptiKielto.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ereseptiKielto = _oa
            end
          end
    end

    # constructs a ReseptiTiedot from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Medisos

module Dto

  # (no documentation provided)
  class AsiakkaanKayttovaratDto < Fi::Mediconsult::Medisos::Dto::MediSosDtoBase 

    # (no documentation provided)
    attr_accessor :transaktionumero
    # (no documentation provided)
    attr_accessor :omistaja
    # (no documentation provided)
    attr_accessor :omistajaInfo
    # (no documentation provided)
    attr_accessor :laatija
    # (no documentation provided)
    attr_accessor :laatijaInfo
    # (no documentation provided)
    attr_accessor :saldo
    # (no documentation provided)
    attr_accessor :tapahtuma
    # (no documentation provided)
    attr_accessor :selite
    # (no documentation provided)
    attr_accessor :tapahtumanAjankohta
    # (no documentation provided)
    attr_accessor :formId

    # the json hash for this AsiakkaanKayttovaratDto
    def to_jaxb_json_hash
      _h = super
      _h['transaktionumero'] = transaktionumero.to_jaxb_json_hash unless transaktionumero.nil?
      _h['omistaja'] = omistaja.to_jaxb_json_hash unless omistaja.nil?
      _h['omistajaInfo'] = omistajaInfo.to_jaxb_json_hash unless omistajaInfo.nil?
      _h['laatija'] = laatija.to_jaxb_json_hash unless laatija.nil?
      _h['laatijaInfo'] = laatijaInfo.to_jaxb_json_hash unless laatijaInfo.nil?
      _h['saldo'] = saldo.to_jaxb_json_hash unless saldo.nil?
      _h['tapahtuma'] = tapahtuma.to_jaxb_json_hash unless tapahtuma.nil?
      _h['selite'] = selite.to_jaxb_json_hash unless selite.nil?
      _h['tapahtumanAjankohta'] = tapahtumanAjankohta.to_jaxb_json_hash unless tapahtumanAjankohta.nil?
      _h['formId'] = formId.to_jaxb_json_hash unless formId.nil?
      return _h
    end

    #initializes this AsiakkaanKayttovaratDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['transaktionumero'].nil?
          _oa = _o['transaktionumero']
            if(_oa.is_a? Hash)
              @transaktionumero = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @transaktionumero =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @transaktionumero = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @transaktionumero.push Fixnum.from_json(_item)
                 else
                   @transaktionumero.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @transaktionumero = _oa
            end
          end
        if !_o['omistaja'].nil?
          _oa = _o['omistaja']
            if(_oa.is_a? Hash)
              @omistaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @omistaja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @omistaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @omistaja.push Fixnum.from_json(_item)
                 else
                   @omistaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @omistaja = _oa
            end
          end
        if !_o['omistajaInfo'].nil?
          _oa = _o['omistajaInfo']
            if(_oa.is_a? Hash)
              @omistajaInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @omistajaInfo =  Fi::Mediconsult::Core::Client::Dto::Omistaja::Patient.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @omistajaInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @omistajaInfo.push Fi::Mediconsult::Core::Client::Dto::Omistaja::Patient.from_json(_item)
                 else
                   @omistajaInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @omistajaInfo = _oa
            end
          end
        if !_o['laatija'].nil?
          _oa = _o['laatija']
            if(_oa.is_a? Hash)
              @laatija = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laatija =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laatija = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laatija.push Fixnum.from_json(_item)
                 else
                   @laatija.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laatija = _oa
            end
          end
        if !_o['laatijaInfo'].nil?
          _oa = _o['laatijaInfo']
            if(_oa.is_a? Hash)
              @laatijaInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laatijaInfo =  Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laatijaInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laatijaInfo.push Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_item)
                 else
                   @laatijaInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laatijaInfo = _oa
            end
          end
        if !_o['saldo'].nil?
          _oa = _o['saldo']
            if(_oa.is_a? Hash)
              @saldo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @saldo =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @saldo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @saldo.push Float.from_json(_item)
                 else
                   @saldo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @saldo = _oa
            end
          end
        if !_o['tapahtuma'].nil?
          _oa = _o['tapahtuma']
            if(_oa.is_a? Hash)
              @tapahtuma = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tapahtuma =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tapahtuma = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tapahtuma.push Float.from_json(_item)
                 else
                   @tapahtuma.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tapahtuma = _oa
            end
          end
        if !_o['selite'].nil?
          _oa = _o['selite']
            if(_oa.is_a? Hash)
              @selite = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @selite =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @selite = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @selite.push String.from_json(_item)
                 else
                   @selite.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @selite = _oa
            end
          end
        if !_o['tapahtumanAjankohta'].nil?
          _oa = _o['tapahtumanAjankohta']
            if(_oa.is_a? Hash)
              @tapahtumanAjankohta = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tapahtumanAjankohta =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tapahtumanAjankohta = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tapahtumanAjankohta.push Time.from_json(_item)
                 else
                   @tapahtumanAjankohta.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tapahtumanAjankohta = _oa
            end
          end
        if !_o['formId'].nil?
          _oa = _o['formId']
            if(_oa.is_a? Hash)
              @formId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @formId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @formId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @formId.push Fixnum.from_json(_item)
                 else
                   @formId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @formId = _oa
            end
          end
    end

    # constructs a AsiakkaanKayttovaratDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Medisos

  # (no documentation provided)
  class ExampleItemDto < Fi::Mediconsult::Mediplan::Dto::KuhaDtoBase 

    # (no documentation provided)
    attr_accessor :itemTeksti
    # (no documentation provided)
    attr_accessor :itemLuku

    # the json hash for this ExampleItemDto
    def to_jaxb_json_hash
      _h = super
      _h['itemTeksti'] = itemTeksti.to_jaxb_json_hash unless itemTeksti.nil?
      _h['itemLuku'] = itemLuku.to_jaxb_json_hash unless itemLuku.nil?
      return _h
    end

    #initializes this ExampleItemDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['itemTeksti'].nil?
          _oa = _o['itemTeksti']
            if(_oa.is_a? Hash)
              @itemTeksti = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @itemTeksti =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @itemTeksti = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @itemTeksti.push String.from_json(_item)
                 else
                   @itemTeksti.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @itemTeksti = _oa
            end
          end
        if !_o['itemLuku'].nil?
          _oa = _o['itemLuku']
            if(_oa.is_a? Hash)
              @itemLuku = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @itemLuku =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @itemLuku = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @itemLuku.push Fixnum.from_json(_item)
                 else
                   @itemLuku.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @itemLuku = _oa
            end
          end
    end

    # constructs a ExampleItemDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Kanta

module Suostumustenhallinta

  # (no documentation provided)
  class Origin

    # (no documentation provided)
    KANTA = "KANTA"

    # (no documentation provided)
    DATABASE = "DATABASE"
  end

end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Team

  # (no documentation provided)
  class TeamDto < Fi::Mediconsult::Core::Client::Dto::Team::TeamBaseDto 

    # (no documentation provided)
    attr_accessor :formId
    # (no documentation provided)
    attr_accessor :formName
    # (no documentation provided)
    attr_accessor :ownerId
    # (no documentation provided)
    attr_accessor :owner
    # (no documentation provided)
    attr_accessor :linkId
    # (no documentation provided)
    attr_accessor :linkedEntity
    # (no documentation provided)
    attr_accessor :members

    # the json hash for this TeamDto
    def to_jaxb_json_hash
      _h = super
      _h['formId'] = formId.to_jaxb_json_hash unless formId.nil?
      _h['formName'] = formName.to_jaxb_json_hash unless formName.nil?
      _h['ownerId'] = ownerId.to_jaxb_json_hash unless ownerId.nil?
      _h['owner'] = owner.to_jaxb_json_hash unless owner.nil?
      _h['linkId'] = linkId.to_jaxb_json_hash unless linkId.nil?
      _h['linkedEntity'] = linkedEntity.to_jaxb_json_hash unless linkedEntity.nil?
      if !members.nil?
        _ha = Array.new
        members.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['members'] = _ha
      end
      return _h
    end

    #initializes this TeamDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['formId'].nil?
          _oa = _o['formId']
            if(_oa.is_a? Hash)
              @formId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @formId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @formId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @formId.push Fixnum.from_json(_item)
                 else
                   @formId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @formId = _oa
            end
          end
        if !_o['formName'].nil?
          _oa = _o['formName']
            if(_oa.is_a? Hash)
              @formName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @formName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @formName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @formName.push String.from_json(_item)
                 else
                   @formName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @formName = _oa
            end
          end
        if !_o['ownerId'].nil?
          _oa = _o['ownerId']
            if(_oa.is_a? Hash)
              @ownerId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ownerId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ownerId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ownerId.push Fixnum.from_json(_item)
                 else
                   @ownerId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ownerId = _oa
            end
          end
        if !_o['owner'].nil?
          _oa = _o['owner']
            if(_oa.is_a? Hash)
              @owner = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @owner =  Fi::Mediconsult::Core::Client::Dto::Omistaja::GenericOmistaja.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @owner = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @owner.push Fi::Mediconsult::Core::Client::Dto::Omistaja::GenericOmistaja.from_json(_item)
                 else
                   @owner.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @owner = _oa
            end
          end
        if !_o['linkId'].nil?
          _oa = _o['linkId']
            if(_oa.is_a? Hash)
              @linkId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @linkId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @linkId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @linkId.push Bignum.from_json(_item)
                 else
                   @linkId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @linkId = _oa
            end
          end
        if !_o['linkedEntity'].nil?
          _oa = _o['linkedEntity']
            if(_oa.is_a? Hash)
              @linkedEntity = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @linkedEntity =  Object.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @linkedEntity = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @linkedEntity.push Object.from_json(_item)
                 else
                   @linkedEntity.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @linkedEntity = _oa
            end
          end
        if !_o['members'].nil?
          _oa = _o['members']
            if(_oa.is_a? Hash)
              @members = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @members =  Fi::Mediconsult::Core::Client::Dto::Team::TeamMemberDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @members = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @members.push Fi::Mediconsult::Core::Client::Dto::Team::TeamMemberDto.from_json(_item)
                 else
                   @members.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @members = _oa
            end
          end
    end

    # constructs a TeamDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Laakitys

  # (no documentation provided)
  class LaakeTiivistelma < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # Returns the id of the summary
    attr_accessor :tiivistelma
    # Returns the name of the medicine the summary is about
    attr_accessor :nimi
    # Returns the preconditions for the medicine
    # (määräys-/toimitusehto)
    attr_accessor :ehto
    # Returns the manufacturer
    attr_accessor :valmistaja
    # Returns the refundability
    attr_accessor :korvattavuus
    # Returns the code of the summary removal. &#39;E&#39; - not removed, &#39;K&#39; = removed
    attr_accessor :poistettu
    # Returns the actual DB-change time of the summary
    attr_accessor :muutosaika
    # Returns the organization in which the change has been made
    attr_accessor :muutospaikka
    # Returns a list of summary texts
    attr_accessor :tekstit

    # the json hash for this LaakeTiivistelma
    def to_jaxb_json_hash
      _h = super
      _h['tiivistelma'] = tiivistelma.to_jaxb_json_hash unless tiivistelma.nil?
      _h['nimi'] = nimi.to_jaxb_json_hash unless nimi.nil?
      _h['ehto'] = ehto.to_jaxb_json_hash unless ehto.nil?
      _h['valmistaja'] = valmistaja.to_jaxb_json_hash unless valmistaja.nil?
      _h['korvattavuus'] = korvattavuus.to_jaxb_json_hash unless korvattavuus.nil?
      _h['poistettu'] = poistettu.to_jaxb_json_hash unless poistettu.nil?
      _h['muutosaika'] = muutosaika.to_jaxb_json_hash unless muutosaika.nil?
      _h['muutospaikka'] = muutospaikka.to_jaxb_json_hash unless muutospaikka.nil?
      if !tekstit.nil?
        _ha = Array.new
        tekstit.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['tekstit'] = _ha
      end
      return _h
    end

    #initializes this LaakeTiivistelma with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['tiivistelma'].nil?
          _oa = _o['tiivistelma']
            if(_oa.is_a? Hash)
              @tiivistelma = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tiivistelma =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tiivistelma = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tiivistelma.push Fixnum.from_json(_item)
                 else
                   @tiivistelma.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tiivistelma = _oa
            end
          end
        if !_o['nimi'].nil?
          _oa = _o['nimi']
            if(_oa.is_a? Hash)
              @nimi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @nimi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @nimi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @nimi.push String.from_json(_item)
                 else
                   @nimi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @nimi = _oa
            end
          end
        if !_o['ehto'].nil?
          _oa = _o['ehto']
            if(_oa.is_a? Hash)
              @ehto = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ehto =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ehto = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ehto.push String.from_json(_item)
                 else
                   @ehto.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ehto = _oa
            end
          end
        if !_o['valmistaja'].nil?
          _oa = _o['valmistaja']
            if(_oa.is_a? Hash)
              @valmistaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @valmistaja =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @valmistaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @valmistaja.push String.from_json(_item)
                 else
                   @valmistaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @valmistaja = _oa
            end
          end
        if !_o['korvattavuus'].nil?
          _oa = _o['korvattavuus']
            if(_oa.is_a? Hash)
              @korvattavuus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @korvattavuus =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @korvattavuus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @korvattavuus.push String.from_json(_item)
                 else
                   @korvattavuus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @korvattavuus = _oa
            end
          end
        if !_o['poistettu'].nil?
          _oa = _o['poistettu']
            if(_oa.is_a? Hash)
              @poistettu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @poistettu =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @poistettu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @poistettu.push Fixnum.from_json(_item)
                 else
                   @poistettu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @poistettu = _oa
            end
          end
        if !_o['muutosaika'].nil?
          _oa = _o['muutosaika']
            if(_oa.is_a? Hash)
              @muutosaika = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @muutosaika =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @muutosaika = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @muutosaika.push Time.from_json(_item)
                 else
                   @muutosaika.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @muutosaika = _oa
            end
          end
        if !_o['muutospaikka'].nil?
          _oa = _o['muutospaikka']
            if(_oa.is_a? Hash)
              @muutospaikka = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @muutospaikka =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @muutospaikka = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @muutospaikka.push Fixnum.from_json(_item)
                 else
                   @muutospaikka.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @muutospaikka = _oa
            end
          end
        if !_o['tekstit'].nil?
          _oa = _o['tekstit']
            if(_oa.is_a? Hash)
              @tekstit = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tekstit =  Fi::Mediconsult::Core::Client::Dto::Laakitys::LaakeTiivistelmaTeksti.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tekstit = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tekstit.push Fi::Mediconsult::Core::Client::Dto::Laakitys::LaakeTiivistelmaTeksti.from_json(_item)
                 else
                   @tekstit.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tekstit = _oa
            end
          end
    end

    # constructs a LaakeTiivistelma from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Medisos

module Dto

  # (no documentation provided)
  class GroupMasterDto < Fi::Mediconsult::Medisos::Dto::DtoBase 

    # (no documentation provided)
    attr_accessor :name

    # the json hash for this GroupMasterDto
    def to_jaxb_json_hash
      _h = super
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      return _h
    end

    #initializes this GroupMasterDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
    end

    # constructs a GroupMasterDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Contentgroup

  # (no documentation provided)
  class ContentGroup<T extends Fi::Mediconsult::Mediplan::Dto::Contentgroup::ContentGroupTitle> < Fi::Mediconsult::Mediplan::Dto::KuhaDtoBase 

    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :removed
    # (no documentation provided)
    attr_accessor :order
    # (no documentation provided)
    attr_accessor :visibility
    # (no documentation provided)
    attr_accessor :type
    # (no documentation provided)
    attr_accessor :freeItems

    # the json hash for this ContentGroup<T extends Fi::Mediconsult::Mediplan::Dto::Contentgroup::ContentGroupTitle>
    def to_jaxb_json_hash
      _h = super
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['removed'] = removed.to_jaxb_json_hash unless removed.nil?
      _h['order'] = order.to_jaxb_json_hash unless order.nil?
      _h['visibility'] = visibility.to_jaxb_json_hash unless visibility.nil?
      _h['type'] = type.to_jaxb_json_hash unless type.nil?
      if !freeItems.nil?
        _ha = Array.new
        freeItems.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['freeItems'] = _ha
      end
      return _h
    end

    #initializes this ContentGroup<T extends Fi::Mediconsult::Mediplan::Dto::Contentgroup::ContentGroupTitle> with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['removed'].nil?
          _oa = _o['removed']
            if(_oa.is_a? Hash)
              @removed = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @removed =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @removed = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @removed.push Boolean.from_json(_item)
                 else
                   @removed.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @removed = _oa
            end
          end
        if !_o['order'].nil?
          _oa = _o['order']
            if(_oa.is_a? Hash)
              @order = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @order =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @order = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @order.push Fixnum.from_json(_item)
                 else
                   @order.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @order = _oa
            end
          end
        if !_o['visibility'].nil?
          _oa = _o['visibility']
            if(_oa.is_a? Hash)
              @visibility = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @visibility =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @visibility = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @visibility.push String.from_json(_item)
                 else
                   @visibility.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @visibility = _oa
            end
          end
        if !_o['type'].nil?
          _oa = _o['type']
            if(_oa.is_a? Hash)
              @type = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @type =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @type = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @type.push String.from_json(_item)
                 else
                   @type.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @type = _oa
            end
          end
        if !_o['freeItems'].nil?
          _oa = _o['freeItems']
            if(_oa.is_a? Hash)
              @freeItems = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @freeItems =  Fi::Mediconsult::Mediplan::Dto::Contentgroup::ContentGroupTitle.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @freeItems = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @freeItems.push Fi::Mediconsult::Mediplan::Dto::Contentgroup::ContentGroupTitle.from_json(_item)
                 else
                   @freeItems.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @freeItems = _oa
            end
          end
    end

    # constructs a ContentGroup<T extends Fi::Mediconsult::Mediplan::Dto::Contentgroup::ContentGroupTitle> from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Planner

  # (no documentation provided)
  class EventOptimizationTaskBaseDto < Fi::Mediconsult::Mediplan::Dto::KuhaDtoBase 

    # (no documentation provided)
    attr_accessor :employeesInvolved
    # hash map of the employees and their units of interest
    attr_accessor :employeesUnitsInHashMap
    # (no documentation provided)
    attr_accessor :employeeAddressType
    # (no documentation provided)
    attr_accessor :customEmployeeAddress
    # (no documentation provided)
    attr_accessor :optimRunTaskId
    # (no documentation provided)
    attr_accessor :terminationRules

    # the json hash for this EventOptimizationTaskBaseDto
    def to_jaxb_json_hash
      _h = super
      if !employeesInvolved.nil?
        _ha = Array.new
        employeesInvolved.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['employeesInvolved'] = _ha
      end
      _h['employeesUnitsInHashMap'] = employeesUnitsInHashMap.to_jaxb_json_hash unless employeesUnitsInHashMap.nil?
      _h['employeeAddressType'] = employeeAddressType.to_jaxb_json_hash unless employeeAddressType.nil?
      _h['customEmployeeAddress'] = customEmployeeAddress.to_jaxb_json_hash unless customEmployeeAddress.nil?
      _h['optimRunTaskId'] = optimRunTaskId.to_jaxb_json_hash unless optimRunTaskId.nil?
      _h['terminationRules'] = terminationRules.to_jaxb_json_hash unless terminationRules.nil?
      return _h
    end

    #initializes this EventOptimizationTaskBaseDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['employeesInvolved'].nil?
          _oa = _o['employeesInvolved']
            if(_oa.is_a? Hash)
              @employeesInvolved = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @employeesInvolved =  Fi::Mediconsult::Mediplan::Dto::Planner::EmployeeInfo.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @employeesInvolved = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @employeesInvolved.push Fi::Mediconsult::Mediplan::Dto::Planner::EmployeeInfo.from_json(_item)
                 else
                   @employeesInvolved.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @employeesInvolved = _oa
            end
          end
        if !_o['employeesUnitsInHashMap'].nil?
          _oa = _o['employeesUnitsInHashMap']
            if(_oa.is_a? Hash)
              @employeesUnitsInHashMap = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @employeesUnitsInHashMap =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @employeesUnitsInHashMap = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @employeesUnitsInHashMap.push Hash.from_json(_item)
                 else
                   @employeesUnitsInHashMap.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @employeesUnitsInHashMap = _oa
            end
          end
        if !_o['employeeAddressType'].nil?
          _oa = _o['employeeAddressType']
            if(_oa.is_a? Hash)
              @employeeAddressType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @employeeAddressType =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @employeeAddressType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @employeeAddressType.push String.from_json(_item)
                 else
                   @employeeAddressType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @employeeAddressType = _oa
            end
          end
        if !_o['customEmployeeAddress'].nil?
          _oa = _o['customEmployeeAddress']
            if(_oa.is_a? Hash)
              @customEmployeeAddress = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @customEmployeeAddress =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @customEmployeeAddress = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @customEmployeeAddress.push String.from_json(_item)
                 else
                   @customEmployeeAddress.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @customEmployeeAddress = _oa
            end
          end
        if !_o['optimRunTaskId'].nil?
          _oa = _o['optimRunTaskId']
            if(_oa.is_a? Hash)
              @optimRunTaskId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @optimRunTaskId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @optimRunTaskId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @optimRunTaskId.push Bignum.from_json(_item)
                 else
                   @optimRunTaskId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @optimRunTaskId = _oa
            end
          end
        if !_o['terminationRules'].nil?
          _oa = _o['terminationRules']
            if(_oa.is_a? Hash)
              @terminationRules = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @terminationRules =  Fi::Mediconsult::Mediplan::Dto::Planner::TerminationRules.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @terminationRules = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @terminationRules.push Fi::Mediconsult::Mediplan::Dto::Planner::TerminationRules.from_json(_item)
                 else
                   @terminationRules.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @terminationRules = _oa
            end
          end
    end

    # constructs a EventOptimizationTaskBaseDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Laakitys

  # (no documentation provided)
  class LaakitysLista < Fi::Mediconsult::Core::Client::Dto::BaseModel 

    # Returns a list of Laakitys objects
    attr_accessor :laakityslista
    # Returns the permissionDTO object.
    attr_accessor :permissionDTO

    # the json hash for this LaakitysLista
    def to_jaxb_json_hash
      _h = super
      if !laakityslista.nil?
        _ha = Array.new
        laakityslista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['laakityslista'] = _ha
      end
      _h['permissionDTO'] = permissionDTO.to_jaxb_json_hash unless permissionDTO.nil?
      return _h
    end

    #initializes this LaakitysLista with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['laakityslista'].nil?
          _oa = _o['laakityslista']
            if(_oa.is_a? Hash)
              @laakityslista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laakityslista =  Fi::Mediconsult::Core::Client::Dto::Laakitys::Laakitys.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laakityslista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laakityslista.push Fi::Mediconsult::Core::Client::Dto::Laakitys::Laakitys.from_json(_item)
                 else
                   @laakityslista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laakityslista = _oa
            end
          end
        if !_o['permissionDTO'].nil?
          _oa = _o['permissionDTO']
            if(_oa.is_a? Hash)
              @permissionDTO = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @permissionDTO =  Fi::Mediconsult::Core::Client::Dto::Permission.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @permissionDTO = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @permissionDTO.push Fi::Mediconsult::Core::Client::Dto::Permission.from_json(_item)
                 else
                   @permissionDTO.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @permissionDTO = _oa
            end
          end
    end

    # constructs a LaakitysLista from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Medisos

module Dto

  # (no documentation provided)
  class LomaketemplaattiDto < Fi::Mediconsult::Medisos::Dto::MediSosDtoBase 

    # (no documentation provided)
    attr_accessor :laatijanumero
    # (no documentation provided)
    attr_accessor :sosiatriLpohjaId
    # (no documentation provided)
    attr_accessor :medinetLpohjaId
    # (no documentation provided)
    attr_accessor :asiakirjanTyyppi
    # (no documentation provided)
    attr_accessor :palvelutehtava
    # (no documentation provided)
    attr_accessor :asiakirjaotsikko
    # (no documentation provided)
    attr_accessor :formId

    # the json hash for this LomaketemplaattiDto
    def to_jaxb_json_hash
      _h = super
      _h['laatijanumero'] = laatijanumero.to_jaxb_json_hash unless laatijanumero.nil?
      _h['sosiatriLpohjaId'] = sosiatriLpohjaId.to_jaxb_json_hash unless sosiatriLpohjaId.nil?
      _h['medinetLpohjaId'] = medinetLpohjaId.to_jaxb_json_hash unless medinetLpohjaId.nil?
      _h['asiakirjanTyyppi'] = asiakirjanTyyppi.to_jaxb_json_hash unless asiakirjanTyyppi.nil?
      _h['palvelutehtava'] = palvelutehtava.to_jaxb_json_hash unless palvelutehtava.nil?
      _h['asiakirjaotsikko'] = asiakirjaotsikko.to_jaxb_json_hash unless asiakirjaotsikko.nil?
      _h['formId'] = formId.to_jaxb_json_hash unless formId.nil?
      return _h
    end

    #initializes this LomaketemplaattiDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['laatijanumero'].nil?
          _oa = _o['laatijanumero']
            if(_oa.is_a? Hash)
              @laatijanumero = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laatijanumero =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laatijanumero = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laatijanumero.push Fixnum.from_json(_item)
                 else
                   @laatijanumero.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laatijanumero = _oa
            end
          end
        if !_o['sosiatriLpohjaId'].nil?
          _oa = _o['sosiatriLpohjaId']
            if(_oa.is_a? Hash)
              @sosiatriLpohjaId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @sosiatriLpohjaId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @sosiatriLpohjaId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @sosiatriLpohjaId.push Bignum.from_json(_item)
                 else
                   @sosiatriLpohjaId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @sosiatriLpohjaId = _oa
            end
          end
        if !_o['medinetLpohjaId'].nil?
          _oa = _o['medinetLpohjaId']
            if(_oa.is_a? Hash)
              @medinetLpohjaId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @medinetLpohjaId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @medinetLpohjaId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @medinetLpohjaId.push Bignum.from_json(_item)
                 else
                   @medinetLpohjaId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @medinetLpohjaId = _oa
            end
          end
        if !_o['asiakirjanTyyppi'].nil?
          _oa = _o['asiakirjanTyyppi']
            if(_oa.is_a? Hash)
              @asiakirjanTyyppi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakirjanTyyppi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakirjanTyyppi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakirjanTyyppi.push String.from_json(_item)
                 else
                   @asiakirjanTyyppi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakirjanTyyppi = _oa
            end
          end
        if !_o['palvelutehtava'].nil?
          _oa = _o['palvelutehtava']
            if(_oa.is_a? Hash)
              @palvelutehtava = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palvelutehtava =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palvelutehtava = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palvelutehtava.push Fixnum.from_json(_item)
                 else
                   @palvelutehtava.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palvelutehtava = _oa
            end
          end
        if !_o['asiakirjaotsikko'].nil?
          _oa = _o['asiakirjaotsikko']
            if(_oa.is_a? Hash)
              @asiakirjaotsikko = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakirjaotsikko =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakirjaotsikko = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakirjaotsikko.push String.from_json(_item)
                 else
                   @asiakirjaotsikko.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakirjaotsikko = _oa
            end
          end
        if !_o['formId'].nil?
          _oa = _o['formId']
            if(_oa.is_a? Hash)
              @formId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @formId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @formId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @formId.push Fixnum.from_json(_item)
                 else
                   @formId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @formId = _oa
            end
          end
    end

    # constructs a LomaketemplaattiDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Medisos

module Dto

  # (no documentation provided)
  class AsiaListaDto < Fi::Mediconsult::Medisos::Dto::MediSosDtoBase 

    # (no documentation provided)
    attr_accessor :asioidenKokonaisLkm
    # (no documentation provided)
    attr_accessor :pageSize
    # (no documentation provided)
    attr_accessor :pageIndex
    # (no documentation provided)
    attr_accessor :asiaIndexAlku
    # (no documentation provided)
    attr_accessor :asiaIndexLoppu
    # (no documentation provided)
    attr_accessor :asialista

    # the json hash for this AsiaListaDto
    def to_jaxb_json_hash
      _h = super
      _h['asioidenKokonaisLkm'] = asioidenKokonaisLkm.to_jaxb_json_hash unless asioidenKokonaisLkm.nil?
      _h['pageSize'] = pageSize.to_jaxb_json_hash unless pageSize.nil?
      _h['pageIndex'] = pageIndex.to_jaxb_json_hash unless pageIndex.nil?
      _h['asiaIndexAlku'] = asiaIndexAlku.to_jaxb_json_hash unless asiaIndexAlku.nil?
      _h['asiaIndexLoppu'] = asiaIndexLoppu.to_jaxb_json_hash unless asiaIndexLoppu.nil?
      if !asialista.nil?
        _ha = Array.new
        asialista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['asialista'] = _ha
      end
      return _h
    end

    #initializes this AsiaListaDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['asioidenKokonaisLkm'].nil?
          _oa = _o['asioidenKokonaisLkm']
            if(_oa.is_a? Hash)
              @asioidenKokonaisLkm = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asioidenKokonaisLkm =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asioidenKokonaisLkm = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asioidenKokonaisLkm.push Fixnum.from_json(_item)
                 else
                   @asioidenKokonaisLkm.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asioidenKokonaisLkm = _oa
            end
          end
        if !_o['pageSize'].nil?
          _oa = _o['pageSize']
            if(_oa.is_a? Hash)
              @pageSize = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @pageSize =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @pageSize = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @pageSize.push Fixnum.from_json(_item)
                 else
                   @pageSize.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @pageSize = _oa
            end
          end
        if !_o['pageIndex'].nil?
          _oa = _o['pageIndex']
            if(_oa.is_a? Hash)
              @pageIndex = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @pageIndex =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @pageIndex = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @pageIndex.push Fixnum.from_json(_item)
                 else
                   @pageIndex.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @pageIndex = _oa
            end
          end
        if !_o['asiaIndexAlku'].nil?
          _oa = _o['asiaIndexAlku']
            if(_oa.is_a? Hash)
              @asiaIndexAlku = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiaIndexAlku =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiaIndexAlku = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiaIndexAlku.push Fixnum.from_json(_item)
                 else
                   @asiaIndexAlku.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiaIndexAlku = _oa
            end
          end
        if !_o['asiaIndexLoppu'].nil?
          _oa = _o['asiaIndexLoppu']
            if(_oa.is_a? Hash)
              @asiaIndexLoppu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiaIndexLoppu =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiaIndexLoppu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiaIndexLoppu.push Fixnum.from_json(_item)
                 else
                   @asiaIndexLoppu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiaIndexLoppu = _oa
            end
          end
        if !_o['asialista'].nil?
          _oa = _o['asialista']
            if(_oa.is_a? Hash)
              @asialista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asialista =  Fi::Mediconsult::Medisos::Dto::AsiaDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asialista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asialista.push Fi::Mediconsult::Medisos::Dto::AsiaDto.from_json(_item)
                 else
                   @asialista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asialista = _oa
            end
          end
    end

    # constructs a AsiaListaDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Omistaja

  # (no documentation provided)
  class PatientStateEnum

    # (no documentation provided)
    ACTIVE = "ACTIVE"

    # (no documentation provided)
    PASSIVE = "PASSIVE"

    # (no documentation provided)
    REMOVED = "REMOVED"

    # (no documentation provided)
    INTEGRATION = "INTEGRATION"

    # (no documentation provided)
    REMOVEDANDHIDDEN = "REMOVEDANDHIDDEN"

    # (no documentation provided)
    ALIAS = "ALIAS"

    # (no documentation provided)
    COMBINED = "COMBINED"
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Medisos

module Dto

  # (no documentation provided)
  class AsiaviittausInputDto < Fi::Mediconsult::Medisos::Dto::MediSosDtoBase 

    # (no documentation provided)
    attr_accessor :viittaajaId
    # (no documentation provided)
    attr_accessor :viitattuIdList
    # (no documentation provided)
    attr_accessor :formId

    # the json hash for this AsiaviittausInputDto
    def to_jaxb_json_hash
      _h = super
      _h['viittaajaId'] = viittaajaId.to_jaxb_json_hash unless viittaajaId.nil?
      if !viitattuIdList.nil?
        _ha = Array.new
        viitattuIdList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['viitattuIdList'] = _ha
      end
      _h['formId'] = formId.to_jaxb_json_hash unless formId.nil?
      return _h
    end

    #initializes this AsiaviittausInputDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['viittaajaId'].nil?
          _oa = _o['viittaajaId']
            if(_oa.is_a? Hash)
              @viittaajaId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @viittaajaId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @viittaajaId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @viittaajaId.push Bignum.from_json(_item)
                 else
                   @viittaajaId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @viittaajaId = _oa
            end
          end
        if !_o['viitattuIdList'].nil?
          _oa = _o['viitattuIdList']
            if(_oa.is_a? Hash)
              @viitattuIdList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @viitattuIdList =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @viitattuIdList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @viitattuIdList.push Bignum.from_json(_item)
                 else
                   @viitattuIdList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @viitattuIdList = _oa
            end
          end
        if !_o['formId'].nil?
          _oa = _o['formId']
            if(_oa.is_a? Hash)
              @formId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @formId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @formId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @formId.push Fixnum.from_json(_item)
                 else
                   @formId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @formId = _oa
            end
          end
    end

    # constructs a AsiaviittausInputDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Medisos

module Dto

  # (no documentation provided)
  class GroupRoleDto < Fi::Mediconsult::Medisos::Dto::DtoBase 

    # (no documentation provided)
    attr_accessor :roleName
    # (no documentation provided)
    attr_accessor :fixed
    # (no documentation provided)
    attr_accessor :form

    # the json hash for this GroupRoleDto
    def to_jaxb_json_hash
      _h = super
      _h['roleName'] = roleName.to_jaxb_json_hash unless roleName.nil?
      _h['fixed'] = fixed.to_jaxb_json_hash unless fixed.nil?
      _h['form'] = form.to_jaxb_json_hash unless form.nil?
      return _h
    end

    #initializes this GroupRoleDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['roleName'].nil?
          _oa = _o['roleName']
            if(_oa.is_a? Hash)
              @roleName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @roleName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @roleName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @roleName.push String.from_json(_item)
                 else
                   @roleName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @roleName = _oa
            end
          end
        if !_o['fixed'].nil?
          _oa = _o['fixed']
            if(_oa.is_a? Hash)
              @fixed = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @fixed =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @fixed = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @fixed.push Boolean.from_json(_item)
                 else
                   @fixed.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @fixed = _oa
            end
          end
        if !_o['form'].nil?
          _oa = _o['form']
            if(_oa.is_a? Hash)
              @form = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @form =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @form = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @form.push Fixnum.from_json(_item)
                 else
                   @form.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @form = _oa
            end
          end
    end

    # constructs a GroupRoleDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Paatoksentuki

  # (no documentation provided)
  class ExperimentalDataSet < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # (no documentation provided)
    attr_accessor :dataSetName
    # (no documentation provided)
    attr_accessor :dataSetText

    # the json hash for this ExperimentalDataSet
    def to_jaxb_json_hash
      _h = super
      _h['dataSetName'] = dataSetName.to_jaxb_json_hash unless dataSetName.nil?
      _h['dataSetText'] = dataSetText.to_jaxb_json_hash unless dataSetText.nil?
      return _h
    end

    #initializes this ExperimentalDataSet with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['dataSetName'].nil?
          _oa = _o['dataSetName']
            if(_oa.is_a? Hash)
              @dataSetName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @dataSetName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @dataSetName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @dataSetName.push String.from_json(_item)
                 else
                   @dataSetName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @dataSetName = _oa
            end
          end
        if !_o['dataSetText'].nil?
          _oa = _o['dataSetText']
            if(_oa.is_a? Hash)
              @dataSetText = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @dataSetText =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @dataSetText = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @dataSetText.push String.from_json(_item)
                 else
                   @dataSetText.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @dataSetText = _oa
            end
          end
    end

    # constructs a ExperimentalDataSet from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class Component

    # (no documentation provided)
    ASIA = "ASIA"

    # (no documentation provided)
    ASIAKIRJAT = "ASIAKIRJAT"

    # (no documentation provided)
    ASIAKIRJATLIST = "ASIAKIRJATLIST"

    # (no documentation provided)
    ASIAKKUUDET = "ASIAKKUUDET"

    # (no documentation provided)
    AVAINASIAKAS = "AVAINASIAKAS"

    # (no documentation provided)
    BASIC_INFORMATION = "BASIC_INFORMATION"

    # (no documentation provided)
    CALENDAR = "CALENDAR"

    # (no documentation provided)
    CALENDAR_EVENT = "CALENDAR_EVENT"

    # (no documentation provided)
    CARE_ORDERS = "CARE_ORDERS"

    # (no documentation provided)
    CARE_RECORDS = "CARE_RECORDS"

    # (no documentation provided)
    DYNAMIC = "DYNAMIC"

    # (no documentation provided)
    EVENTS = "EVENTS"

    # (no documentation provided)
    EVENTTIMELINE = "EVENTTIMELINE"

    # (no documentation provided)
    HOITOTAHTO = "HOITOTAHTO"

    # (no documentation provided)
    IFRAME_MEDIKANTA = "IFRAME_MEDIKANTA"

    # (no documentation provided)
    IFRAME_MEDIRESEPTI = "IFRAME_MEDIRESEPTI"

    # (no documentation provided)
    LABORATORY_EXAMINATIONS = "LABORATORY_EXAMINATIONS"

    # (no documentation provided)
    LASKU = "LASKU"

    # (no documentation provided)
    LOMAKE_EDITORI = "LOMAKE_EDITORI"

    # (no documentation provided)
    MAKSU = "MAKSU"

    # (no documentation provided)
    MEASUREMENTS = "MEASUREMENTS"

    # (no documentation provided)
    MEDICAL_RECORDS_READ = "MEDICAL_RECORDS_READ"

    # (no documentation provided)
    MEDICAL_RECORDS_WRITE = "MEDICAL_RECORDS_WRITE"

    # (no documentation provided)
    MEDICATION = "MEDICATION"

    # (no documentation provided)
    MEDICATION_CONTROL = "MEDICATION_CONTROL"

    # (no documentation provided)
    PERINTA = "PERINTA"

    # (no documentation provided)
    RESEPTIKIELTO = "RESEPTIKIELTO"

    # (no documentation provided)
    RISK_INFORMATION = "RISK_INFORMATION"

    # (no documentation provided)
    SERVICE_DECISIONS = "SERVICE_DECISIONS"

    # (no documentation provided)
    SEURANTA = "SEURANTA"

    # (no documentation provided)
    SOSIAALIPALVELUT = "SOSIAALIPALVELUT"

    # (no documentation provided)
    SUMMARY_MSA_VIEW = "SUMMARY_MSA_VIEW"

    # (no documentation provided)
    SUMMARY_MSO_VIEW = "SUMMARY_MSO_VIEW"

    # (no documentation provided)
    SUOSTUMUKSENHALLINTA = "SUOSTUMUKSENHALLINTA"

    # (no documentation provided)
    UNIT_CUSTOMERS = "UNIT_CUSTOMERS"

    # (no documentation provided)
    WARD_LIST = "WARD_LIST"

    # (no documentation provided)
    WIDGETS = "WIDGETS"
  end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Status

  # (no documentation provided)
  class EventStatus

    # (no documentation provided)
    DRAFT = "DRAFT"

    # (no documentation provided)
    PLANNED = "PLANNED"

    # (no documentation provided)
    CONFIRMED = "CONFIRMED"

    # (no documentation provided)
    ONGOING = "ONGOING"

    # (no documentation provided)
    DONE = "DONE"

    # (no documentation provided)
    CANCELED = "CANCELED"

    # (no documentation provided)
    CANCELED_BY_PARTICIPANT = "CANCELED_BY_PARTICIPANT"

    # (no documentation provided)
    CANCELED_BY_PROVIDER = "CANCELED_BY_PROVIDER"

    # (no documentation provided)
    NOT_REALIZED = "NOT_REALIZED"

    # (no documentation provided)
    INTERRUPTED = "INTERRUPTED"
  end

end

end

end

end

module Fi

module Mediconsult

module Medisos

module Dto

  # (no documentation provided)
  class AsiaviittausDto < Fi::Mediconsult::Medisos::Dto::MediSosDtoBase 

    # (no documentation provided)
    attr_accessor :viittaajaId
    # (no documentation provided)
    attr_accessor :viitattuId

    # the json hash for this AsiaviittausDto
    def to_jaxb_json_hash
      _h = super
      _h['viittaajaId'] = viittaajaId.to_jaxb_json_hash unless viittaajaId.nil?
      _h['viitattuId'] = viitattuId.to_jaxb_json_hash unless viitattuId.nil?
      return _h
    end

    #initializes this AsiaviittausDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['viittaajaId'].nil?
          _oa = _o['viittaajaId']
            if(_oa.is_a? Hash)
              @viittaajaId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @viittaajaId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @viittaajaId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @viittaajaId.push Bignum.from_json(_item)
                 else
                   @viittaajaId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @viittaajaId = _oa
            end
          end
        if !_o['viitattuId'].nil?
          _oa = _o['viitattuId']
            if(_oa.is_a? Hash)
              @viitattuId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @viitattuId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @viitattuId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @viitattuId.push Bignum.from_json(_item)
                 else
                   @viitattuId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @viitattuId = _oa
            end
          end
    end

    # constructs a AsiaviittausDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Hoito

  # (no documentation provided)
  class Hoito < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # Returns the alkaa date
    attr_accessor :alkaa
    # Returns the loppuu date
    attr_accessor :loppuu
    # Returns the maaraaja id
    attr_accessor :maaraaja
    # Returns the tekija id
    attr_accessor :tekija
    # Returns the header (otsikko)
    attr_accessor :otsikko
    # Returns the constant string (vakio)
    attr_accessor :vakio
    # Returns the free string (vapaa)
    attr_accessor :vapaa
    # Returns the notifications (huomautuksia)
    attr_accessor :huomautuksia
    # Returns the times as a string
    attr_accessor :kellonajat
    # Returns the recorder (kirjaaja)
    attr_accessor :kirjaaja
    # Returns the ender (lopettaja)
    attr_accessor :lopettaja
    # Returns the time of ending (lopetettu)
    attr_accessor :lopetettu
    # 
    attr_accessor :kerta
    # Returns the time when Hoito is done
    attr_accessor :tehty
    # 
    attr_accessor :lomake
    # Returns the row number (rivi)
    attr_accessor :rivi
    # Returns the time of change
    attr_accessor :muutosaika
    # (no documentation provided)
    attr_accessor :maaraajaNimi
    # (no documentation provided)
    attr_accessor :kirjaajaNimi
    # (no documentation provided)
    attr_accessor :tekijaNimi
    # (no documentation provided)
    attr_accessor :lopettajaNimi
    # (no documentation provided)
    attr_accessor :lomakeNimi

    # the json hash for this Hoito
    def to_jaxb_json_hash
      _h = super
      _h['alkaa'] = alkaa.to_jaxb_json_hash unless alkaa.nil?
      _h['loppuu'] = loppuu.to_jaxb_json_hash unless loppuu.nil?
      _h['maaraaja'] = maaraaja.to_jaxb_json_hash unless maaraaja.nil?
      _h['tekija'] = tekija.to_jaxb_json_hash unless tekija.nil?
      _h['otsikko'] = otsikko.to_jaxb_json_hash unless otsikko.nil?
      _h['vakio'] = vakio.to_jaxb_json_hash unless vakio.nil?
      _h['vapaa'] = vapaa.to_jaxb_json_hash unless vapaa.nil?
      _h['huomautuksia'] = huomautuksia.to_jaxb_json_hash unless huomautuksia.nil?
      _h['kellonajat'] = kellonajat.to_jaxb_json_hash unless kellonajat.nil?
      _h['kirjaaja'] = kirjaaja.to_jaxb_json_hash unless kirjaaja.nil?
      _h['lopettaja'] = lopettaja.to_jaxb_json_hash unless lopettaja.nil?
      _h['lopetettu'] = lopetettu.to_jaxb_json_hash unless lopetettu.nil?
      _h['kerta'] = kerta.to_jaxb_json_hash unless kerta.nil?
      _h['tehty'] = tehty.to_jaxb_json_hash unless tehty.nil?
      _h['lomake'] = lomake.to_jaxb_json_hash unless lomake.nil?
      _h['rivi'] = rivi.to_jaxb_json_hash unless rivi.nil?
      _h['muutosaika'] = muutosaika.to_jaxb_json_hash unless muutosaika.nil?
      _h['maaraajaNimi'] = maaraajaNimi.to_jaxb_json_hash unless maaraajaNimi.nil?
      _h['kirjaajaNimi'] = kirjaajaNimi.to_jaxb_json_hash unless kirjaajaNimi.nil?
      _h['tekijaNimi'] = tekijaNimi.to_jaxb_json_hash unless tekijaNimi.nil?
      _h['lopettajaNimi'] = lopettajaNimi.to_jaxb_json_hash unless lopettajaNimi.nil?
      _h['lomakeNimi'] = lomakeNimi.to_jaxb_json_hash unless lomakeNimi.nil?
      return _h
    end

    #initializes this Hoito with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['alkaa'].nil?
          _oa = _o['alkaa']
            if(_oa.is_a? Hash)
              @alkaa = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @alkaa =  Java::Sql::Date.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @alkaa = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @alkaa.push Java::Sql::Date.from_json(_item)
                 else
                   @alkaa.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @alkaa = _oa
            end
          end
        if !_o['loppuu'].nil?
          _oa = _o['loppuu']
            if(_oa.is_a? Hash)
              @loppuu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @loppuu =  Java::Sql::Date.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @loppuu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @loppuu.push Java::Sql::Date.from_json(_item)
                 else
                   @loppuu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @loppuu = _oa
            end
          end
        if !_o['maaraaja'].nil?
          _oa = _o['maaraaja']
            if(_oa.is_a? Hash)
              @maaraaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @maaraaja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @maaraaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @maaraaja.push Fixnum.from_json(_item)
                 else
                   @maaraaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @maaraaja = _oa
            end
          end
        if !_o['tekija'].nil?
          _oa = _o['tekija']
            if(_oa.is_a? Hash)
              @tekija = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tekija =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tekija = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tekija.push Fixnum.from_json(_item)
                 else
                   @tekija.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tekija = _oa
            end
          end
        if !_o['otsikko'].nil?
          _oa = _o['otsikko']
            if(_oa.is_a? Hash)
              @otsikko = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @otsikko =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @otsikko = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @otsikko.push String.from_json(_item)
                 else
                   @otsikko.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @otsikko = _oa
            end
          end
        if !_o['vakio'].nil?
          _oa = _o['vakio']
            if(_oa.is_a? Hash)
              @vakio = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vakio =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vakio = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vakio.push String.from_json(_item)
                 else
                   @vakio.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vakio = _oa
            end
          end
        if !_o['vapaa'].nil?
          _oa = _o['vapaa']
            if(_oa.is_a? Hash)
              @vapaa = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vapaa =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vapaa = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vapaa.push String.from_json(_item)
                 else
                   @vapaa.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vapaa = _oa
            end
          end
        if !_o['huomautuksia'].nil?
          _oa = _o['huomautuksia']
            if(_oa.is_a? Hash)
              @huomautuksia = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @huomautuksia =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @huomautuksia = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @huomautuksia.push String.from_json(_item)
                 else
                   @huomautuksia.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @huomautuksia = _oa
            end
          end
        if !_o['kellonajat'].nil?
          _oa = _o['kellonajat']
            if(_oa.is_a? Hash)
              @kellonajat = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kellonajat =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kellonajat = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kellonajat.push String.from_json(_item)
                 else
                   @kellonajat.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kellonajat = _oa
            end
          end
        if !_o['kirjaaja'].nil?
          _oa = _o['kirjaaja']
            if(_oa.is_a? Hash)
              @kirjaaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kirjaaja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kirjaaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kirjaaja.push Fixnum.from_json(_item)
                 else
                   @kirjaaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kirjaaja = _oa
            end
          end
        if !_o['lopettaja'].nil?
          _oa = _o['lopettaja']
            if(_oa.is_a? Hash)
              @lopettaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lopettaja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lopettaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lopettaja.push Fixnum.from_json(_item)
                 else
                   @lopettaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lopettaja = _oa
            end
          end
        if !_o['lopetettu'].nil?
          _oa = _o['lopetettu']
            if(_oa.is_a? Hash)
              @lopetettu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lopetettu =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lopetettu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lopetettu.push Time.from_json(_item)
                 else
                   @lopetettu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lopetettu = _oa
            end
          end
        if !_o['kerta'].nil?
          _oa = _o['kerta']
            if(_oa.is_a? Hash)
              @kerta = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kerta =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kerta = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kerta.push Fixnum.from_json(_item)
                 else
                   @kerta.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kerta = _oa
            end
          end
        if !_o['tehty'].nil?
          _oa = _o['tehty']
            if(_oa.is_a? Hash)
              @tehty = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tehty =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tehty = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tehty.push Time.from_json(_item)
                 else
                   @tehty.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tehty = _oa
            end
          end
        if !_o['lomake'].nil?
          _oa = _o['lomake']
            if(_oa.is_a? Hash)
              @lomake = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lomake =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lomake = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lomake.push Fixnum.from_json(_item)
                 else
                   @lomake.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lomake = _oa
            end
          end
        if !_o['rivi'].nil?
          _oa = _o['rivi']
            if(_oa.is_a? Hash)
              @rivi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rivi =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rivi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rivi.push Fixnum.from_json(_item)
                 else
                   @rivi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rivi = _oa
            end
          end
        if !_o['muutosaika'].nil?
          _oa = _o['muutosaika']
            if(_oa.is_a? Hash)
              @muutosaika = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @muutosaika =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @muutosaika = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @muutosaika.push Time.from_json(_item)
                 else
                   @muutosaika.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @muutosaika = _oa
            end
          end
        if !_o['maaraajaNimi'].nil?
          _oa = _o['maaraajaNimi']
            if(_oa.is_a? Hash)
              @maaraajaNimi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @maaraajaNimi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @maaraajaNimi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @maaraajaNimi.push String.from_json(_item)
                 else
                   @maaraajaNimi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @maaraajaNimi = _oa
            end
          end
        if !_o['kirjaajaNimi'].nil?
          _oa = _o['kirjaajaNimi']
            if(_oa.is_a? Hash)
              @kirjaajaNimi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kirjaajaNimi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kirjaajaNimi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kirjaajaNimi.push String.from_json(_item)
                 else
                   @kirjaajaNimi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kirjaajaNimi = _oa
            end
          end
        if !_o['tekijaNimi'].nil?
          _oa = _o['tekijaNimi']
            if(_oa.is_a? Hash)
              @tekijaNimi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tekijaNimi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tekijaNimi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tekijaNimi.push String.from_json(_item)
                 else
                   @tekijaNimi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tekijaNimi = _oa
            end
          end
        if !_o['lopettajaNimi'].nil?
          _oa = _o['lopettajaNimi']
            if(_oa.is_a? Hash)
              @lopettajaNimi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lopettajaNimi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lopettajaNimi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lopettajaNimi.push String.from_json(_item)
                 else
                   @lopettajaNimi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lopettajaNimi = _oa
            end
          end
        if !_o['lomakeNimi'].nil?
          _oa = _o['lomakeNimi']
            if(_oa.is_a? Hash)
              @lomakeNimi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lomakeNimi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lomakeNimi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lomakeNimi.push String.from_json(_item)
                 else
                   @lomakeNimi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lomakeNimi = _oa
            end
          end
    end

    # constructs a Hoito from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Course

  # (no documentation provided)
  class TagsForPeriodDto < Fi::Mediconsult::Mediplan::Dto::KuhaDtoBase 

    # Name of the tag
    attr_accessor :name
    # true if removed
    attr_accessor :removed
    # id of the Tag-Period association
    attr_accessor :periodTagId
    # Id of the Tag
    attr_accessor :id
    # (no documentation provided)
    attr_accessor :tagId

    # the json hash for this TagsForPeriodDto
    def to_jaxb_json_hash
      _h = super
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['removed'] = removed.to_jaxb_json_hash unless removed.nil?
      _h['periodTagId'] = periodTagId.to_jaxb_json_hash unless periodTagId.nil?
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['tagId'] = tagId.to_jaxb_json_hash unless tagId.nil?
      return _h
    end

    #initializes this TagsForPeriodDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['removed'].nil?
          _oa = _o['removed']
            if(_oa.is_a? Hash)
              @removed = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @removed =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @removed = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @removed.push Boolean.from_json(_item)
                 else
                   @removed.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @removed = _oa
            end
          end
        if !_o['periodTagId'].nil?
          _oa = _o['periodTagId']
            if(_oa.is_a? Hash)
              @periodTagId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @periodTagId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @periodTagId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @periodTagId.push Bignum.from_json(_item)
                 else
                   @periodTagId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @periodTagId = _oa
            end
          end
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push Bignum.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
        if !_o['tagId'].nil?
          _oa = _o['tagId']
            if(_oa.is_a? Hash)
              @tagId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tagId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tagId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tagId.push Bignum.from_json(_item)
                 else
                   @tagId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tagId = _oa
            end
          end
    end

    # constructs a TagsForPeriodDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class LaakitysAnto < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # Returns the id of the medication giver
    attr_accessor :antaja
    # Returns the observetion comments related to the medication giving
    attr_accessor :huomautuksia
    # Returns the id of the actual person that fed this info to the DB/system
    attr_accessor :kirjaaja
    # Returns the laake VNR. VNR is a code that is used to identify the medication. @see http://www.laaketietokeskus.fi/vnr
    attr_accessor :laake
    # Returns the medication amount
    attr_accessor :maara
    # Returns the actual DB-change time of the medication giving
    attr_accessor :muutosAika
    # Returns the owner ie. patients mediatri id.
    attr_accessor :omistaja
    # Retuns the part number that is the id of the medication together with alku and omistaja
    attr_accessor :osa
    # Returns the code of the medication time removal. &#39;E&#39; - not removed, &#39;K&#39; = removed
    attr_accessor :poistettu
    # Returns the planned time for medication. Tells which time the medication should be given
    attr_accessor :suunniteltuAika
    # Returns the actual time of medication. Mapped from PK id ALKU
    attr_accessor :toteutunutAika
    # Returns the actual end time of medication. a.k.a. LOPPU
    attr_accessor :toteutunutAikaLoppu
    # Returns the type of LaakitysAnto object, 1 = planned and given, 2 = planned but not yet given, 3 = extra
    attr_accessor :tyyppi
    # Returns the used unit. ml, l, etc.
    attr_accessor :yksikko
    # Returns the name of the actual person that fed this info to the DB/system
    attr_accessor :kirjaajaName
    # Returns the name of the medication giver
    attr_accessor :antajaName
    # Returns the base amount that is given if swiped. Also the lower border of the amount.
    attr_accessor :annettavaMaara
    # Returns the base unit that is described by laakityshistoria.
    attr_accessor :annettavaYksikko
    # Returns the uuper border of the amount.
    attr_accessor :annettavaMaksimi
    # Original time of medication. mapped from PK id ALKU. This PK is modified so to find the modifiable row the old row must be also given.
    attr_accessor :toteutunutAikaOriginal
    # (no documentation provided)
    attr_accessor :kello

    # the json hash for this LaakitysAnto
    def to_jaxb_json_hash
      _h = super
      _h['antaja'] = antaja.to_jaxb_json_hash unless antaja.nil?
      _h['huomautuksia'] = huomautuksia.to_jaxb_json_hash unless huomautuksia.nil?
      _h['kirjaaja'] = kirjaaja.to_jaxb_json_hash unless kirjaaja.nil?
      _h['laake'] = laake.to_jaxb_json_hash unless laake.nil?
      _h['maara'] = maara.to_jaxb_json_hash unless maara.nil?
      _h['muutosAika'] = muutosAika.to_jaxb_json_hash unless muutosAika.nil?
      _h['omistaja'] = omistaja.to_jaxb_json_hash unless omistaja.nil?
      _h['osa'] = osa.to_jaxb_json_hash unless osa.nil?
      _h['poistettu'] = poistettu.to_jaxb_json_hash unless poistettu.nil?
      _h['suunniteltuAika'] = suunniteltuAika.to_jaxb_json_hash unless suunniteltuAika.nil?
      _h['toteutunutAika'] = toteutunutAika.to_jaxb_json_hash unless toteutunutAika.nil?
      _h['toteutunutAikaLoppu'] = toteutunutAikaLoppu.to_jaxb_json_hash unless toteutunutAikaLoppu.nil?
      _h['tyyppi'] = tyyppi.to_jaxb_json_hash unless tyyppi.nil?
      _h['yksikko'] = yksikko.to_jaxb_json_hash unless yksikko.nil?
      _h['kirjaajaName'] = kirjaajaName.to_jaxb_json_hash unless kirjaajaName.nil?
      _h['antajaName'] = antajaName.to_jaxb_json_hash unless antajaName.nil?
      _h['annettavaMaara'] = annettavaMaara.to_jaxb_json_hash unless annettavaMaara.nil?
      _h['annettavaYksikko'] = annettavaYksikko.to_jaxb_json_hash unless annettavaYksikko.nil?
      _h['annettavaMaksimi'] = annettavaMaksimi.to_jaxb_json_hash unless annettavaMaksimi.nil?
      _h['toteutunutAikaOriginal'] = toteutunutAikaOriginal.to_jaxb_json_hash unless toteutunutAikaOriginal.nil?
      _h['kello'] = kello.to_jaxb_json_hash unless kello.nil?
      return _h
    end

    #initializes this LaakitysAnto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['antaja'].nil?
          _oa = _o['antaja']
            if(_oa.is_a? Hash)
              @antaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @antaja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @antaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @antaja.push Fixnum.from_json(_item)
                 else
                   @antaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @antaja = _oa
            end
          end
        if !_o['huomautuksia'].nil?
          _oa = _o['huomautuksia']
            if(_oa.is_a? Hash)
              @huomautuksia = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @huomautuksia =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @huomautuksia = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @huomautuksia.push String.from_json(_item)
                 else
                   @huomautuksia.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @huomautuksia = _oa
            end
          end
        if !_o['kirjaaja'].nil?
          _oa = _o['kirjaaja']
            if(_oa.is_a? Hash)
              @kirjaaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kirjaaja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kirjaaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kirjaaja.push Fixnum.from_json(_item)
                 else
                   @kirjaaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kirjaaja = _oa
            end
          end
        if !_o['laake'].nil?
          _oa = _o['laake']
            if(_oa.is_a? Hash)
              @laake = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laake =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laake = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laake.push String.from_json(_item)
                 else
                   @laake.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laake = _oa
            end
          end
        if !_o['maara'].nil?
          _oa = _o['maara']
            if(_oa.is_a? Hash)
              @maara = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @maara =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @maara = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @maara.push Float.from_json(_item)
                 else
                   @maara.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @maara = _oa
            end
          end
        if !_o['muutosAika'].nil?
          _oa = _o['muutosAika']
            if(_oa.is_a? Hash)
              @muutosAika = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @muutosAika =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @muutosAika = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @muutosAika.push Time.from_json(_item)
                 else
                   @muutosAika.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @muutosAika = _oa
            end
          end
        if !_o['omistaja'].nil?
          _oa = _o['omistaja']
            if(_oa.is_a? Hash)
              @omistaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @omistaja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @omistaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @omistaja.push Fixnum.from_json(_item)
                 else
                   @omistaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @omistaja = _oa
            end
          end
        if !_o['osa'].nil?
          _oa = _o['osa']
            if(_oa.is_a? Hash)
              @osa = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @osa =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @osa = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @osa.push Fixnum.from_json(_item)
                 else
                   @osa.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @osa = _oa
            end
          end
        if !_o['poistettu'].nil?
          _oa = _o['poistettu']
            if(_oa.is_a? Hash)
              @poistettu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @poistettu =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @poistettu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @poistettu.push Fixnum.from_json(_item)
                 else
                   @poistettu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @poistettu = _oa
            end
          end
        if !_o['suunniteltuAika'].nil?
          _oa = _o['suunniteltuAika']
            if(_oa.is_a? Hash)
              @suunniteltuAika = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @suunniteltuAika =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @suunniteltuAika = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @suunniteltuAika.push Time.from_json(_item)
                 else
                   @suunniteltuAika.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @suunniteltuAika = _oa
            end
          end
        if !_o['toteutunutAika'].nil?
          _oa = _o['toteutunutAika']
            if(_oa.is_a? Hash)
              @toteutunutAika = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @toteutunutAika =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @toteutunutAika = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @toteutunutAika.push Time.from_json(_item)
                 else
                   @toteutunutAika.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @toteutunutAika = _oa
            end
          end
        if !_o['toteutunutAikaLoppu'].nil?
          _oa = _o['toteutunutAikaLoppu']
            if(_oa.is_a? Hash)
              @toteutunutAikaLoppu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @toteutunutAikaLoppu =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @toteutunutAikaLoppu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @toteutunutAikaLoppu.push Time.from_json(_item)
                 else
                   @toteutunutAikaLoppu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @toteutunutAikaLoppu = _oa
            end
          end
        if !_o['tyyppi'].nil?
          _oa = _o['tyyppi']
            if(_oa.is_a? Hash)
              @tyyppi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tyyppi =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tyyppi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tyyppi.push Fixnum.from_json(_item)
                 else
                   @tyyppi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tyyppi = _oa
            end
          end
        if !_o['yksikko'].nil?
          _oa = _o['yksikko']
            if(_oa.is_a? Hash)
              @yksikko = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @yksikko =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @yksikko = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @yksikko.push String.from_json(_item)
                 else
                   @yksikko.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @yksikko = _oa
            end
          end
        if !_o['kirjaajaName'].nil?
          _oa = _o['kirjaajaName']
            if(_oa.is_a? Hash)
              @kirjaajaName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kirjaajaName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kirjaajaName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kirjaajaName.push String.from_json(_item)
                 else
                   @kirjaajaName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kirjaajaName = _oa
            end
          end
        if !_o['antajaName'].nil?
          _oa = _o['antajaName']
            if(_oa.is_a? Hash)
              @antajaName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @antajaName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @antajaName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @antajaName.push String.from_json(_item)
                 else
                   @antajaName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @antajaName = _oa
            end
          end
        if !_o['annettavaMaara'].nil?
          _oa = _o['annettavaMaara']
            if(_oa.is_a? Hash)
              @annettavaMaara = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @annettavaMaara =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @annettavaMaara = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @annettavaMaara.push Float.from_json(_item)
                 else
                   @annettavaMaara.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @annettavaMaara = _oa
            end
          end
        if !_o['annettavaYksikko'].nil?
          _oa = _o['annettavaYksikko']
            if(_oa.is_a? Hash)
              @annettavaYksikko = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @annettavaYksikko =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @annettavaYksikko = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @annettavaYksikko.push String.from_json(_item)
                 else
                   @annettavaYksikko.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @annettavaYksikko = _oa
            end
          end
        if !_o['annettavaMaksimi'].nil?
          _oa = _o['annettavaMaksimi']
            if(_oa.is_a? Hash)
              @annettavaMaksimi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @annettavaMaksimi =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @annettavaMaksimi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @annettavaMaksimi.push Float.from_json(_item)
                 else
                   @annettavaMaksimi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @annettavaMaksimi = _oa
            end
          end
        if !_o['toteutunutAikaOriginal'].nil?
          _oa = _o['toteutunutAikaOriginal']
            if(_oa.is_a? Hash)
              @toteutunutAikaOriginal = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @toteutunutAikaOriginal =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @toteutunutAikaOriginal = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @toteutunutAikaOriginal.push Time.from_json(_item)
                 else
                   @toteutunutAikaOriginal.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @toteutunutAikaOriginal = _oa
            end
          end
        if !_o['kello'].nil?
          _oa = _o['kello']
            if(_oa.is_a? Hash)
              @kello = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kello =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kello = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kello.push Time.from_json(_item)
                 else
                   @kello.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kello = _oa
            end
          end
    end

    # constructs a LaakitysAnto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Event

  # (no documentation provided)
  class EventDto < Fi::Mediconsult::Mediplan::Dto::KuhaDtoBase 

    # the startTime
    attr_accessor :startTime
    # the durationInMinutes
    attr_accessor :durationInMinutes
    # the recurrenceCode
    attr_accessor :recurrenceCode
    # the recurrenceEndDate
    attr_accessor :recurrenceEndDate
    # the name
    attr_accessor :name
    # the abbreviation
    attr_accessor :abbreviation
    # the character
    attr_accessor :character
    # the eventModel
    attr_accessor :eventModelId
    # (no documentation provided)
    attr_accessor :eventModelOutdated
    # the calendarContext
    attr_accessor :calendarContext
    # the excludedDays
    attr_accessor :excludedDays
    # (no documentation provided)
    attr_accessor :reportingGroup
    # the eventModel
    attr_accessor :eventModel
    # the unitBasicInfoTitles
    attr_accessor :unitBasicInfoTitles

    # the json hash for this EventDto
    def to_jaxb_json_hash
      _h = super
      _h['startTime'] = startTime.to_jaxb_json_hash unless startTime.nil?
      _h['durationInMinutes'] = durationInMinutes.to_jaxb_json_hash unless durationInMinutes.nil?
      _h['recurrenceCode'] = recurrenceCode.to_jaxb_json_hash unless recurrenceCode.nil?
      _h['recurrenceEndDate'] = recurrenceEndDate.to_jaxb_json_hash unless recurrenceEndDate.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['abbreviation'] = abbreviation.to_jaxb_json_hash unless abbreviation.nil?
      _h['character'] = character.to_jaxb_json_hash unless character.nil?
      _h['eventModelId'] = eventModelId.to_jaxb_json_hash unless eventModelId.nil?
      _h['eventModelOutdated'] = eventModelOutdated.to_jaxb_json_hash unless eventModelOutdated.nil?
      _h['calendarContext'] = calendarContext.to_jaxb_json_hash unless calendarContext.nil?
      if !excludedDays.nil?
        _ha = Array.new
        excludedDays.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['excludedDays'] = _ha
      end
      _h['reportingGroup'] = reportingGroup.to_jaxb_json_hash unless reportingGroup.nil?
      _h['eventModel'] = eventModel.to_jaxb_json_hash unless eventModel.nil?
      if !unitBasicInfoTitles.nil?
        _ha = Array.new
        unitBasicInfoTitles.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['unitBasicInfoTitles'] = _ha
      end
      return _h
    end

    #initializes this EventDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['startTime'].nil?
          _oa = _o['startTime']
            if(_oa.is_a? Hash)
              @startTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @startTime =  java.time::OffsetDateTime.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @startTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @startTime.push java.time::OffsetDateTime.from_json(_item)
                 else
                   @startTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @startTime = _oa
            end
          end
        if !_o['durationInMinutes'].nil?
          _oa = _o['durationInMinutes']
            if(_oa.is_a? Hash)
              @durationInMinutes = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @durationInMinutes =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @durationInMinutes = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @durationInMinutes.push Fixnum.from_json(_item)
                 else
                   @durationInMinutes.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @durationInMinutes = _oa
            end
          end
        if !_o['recurrenceCode'].nil?
          _oa = _o['recurrenceCode']
            if(_oa.is_a? Hash)
              @recurrenceCode = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @recurrenceCode =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @recurrenceCode = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @recurrenceCode.push String.from_json(_item)
                 else
                   @recurrenceCode.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @recurrenceCode = _oa
            end
          end
        if !_o['recurrenceEndDate'].nil?
          _oa = _o['recurrenceEndDate']
            if(_oa.is_a? Hash)
              @recurrenceEndDate = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @recurrenceEndDate =  java.time::LocalDate.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @recurrenceEndDate = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @recurrenceEndDate.push java.time::LocalDate.from_json(_item)
                 else
                   @recurrenceEndDate.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @recurrenceEndDate = _oa
            end
          end
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['abbreviation'].nil?
          _oa = _o['abbreviation']
            if(_oa.is_a? Hash)
              @abbreviation = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @abbreviation =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @abbreviation = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @abbreviation.push String.from_json(_item)
                 else
                   @abbreviation.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @abbreviation = _oa
            end
          end
        if !_o['character'].nil?
          _oa = _o['character']
            if(_oa.is_a? Hash)
              @character = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @character =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @character = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @character.push String.from_json(_item)
                 else
                   @character.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @character = _oa
            end
          end
        if !_o['eventModelId'].nil?
          _oa = _o['eventModelId']
            if(_oa.is_a? Hash)
              @eventModelId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @eventModelId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @eventModelId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @eventModelId.push Bignum.from_json(_item)
                 else
                   @eventModelId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @eventModelId = _oa
            end
          end
        if !_o['eventModelOutdated'].nil?
          _oa = _o['eventModelOutdated']
            if(_oa.is_a? Hash)
              @eventModelOutdated = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @eventModelOutdated =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @eventModelOutdated = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @eventModelOutdated.push Boolean.from_json(_item)
                 else
                   @eventModelOutdated.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @eventModelOutdated = _oa
            end
          end
        if !_o['calendarContext'].nil?
          _oa = _o['calendarContext']
            if(_oa.is_a? Hash)
              @calendarContext = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @calendarContext =  Fi::Mediconsult::Mediplan::Dto::CalendarContextDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @calendarContext = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @calendarContext.push Fi::Mediconsult::Mediplan::Dto::CalendarContextDto.from_json(_item)
                 else
                   @calendarContext.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @calendarContext = _oa
            end
          end
        if !_o['excludedDays'].nil?
          _oa = _o['excludedDays']
            if(_oa.is_a? Hash)
              @excludedDays = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @excludedDays =  java.time::LocalDate.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @excludedDays = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @excludedDays.push java.time::LocalDate.from_json(_item)
                 else
                   @excludedDays.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @excludedDays = _oa
            end
          end
        if !_o['reportingGroup'].nil?
          _oa = _o['reportingGroup']
            if(_oa.is_a? Hash)
              @reportingGroup = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @reportingGroup =  Fi::Mediconsult::Mediplan::Dto::Setup::ReportingGroupDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @reportingGroup = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @reportingGroup.push Fi::Mediconsult::Mediplan::Dto::Setup::ReportingGroupDto.from_json(_item)
                 else
                   @reportingGroup.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @reportingGroup = _oa
            end
          end
        if !_o['eventModel'].nil?
          _oa = _o['eventModel']
            if(_oa.is_a? Hash)
              @eventModel = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @eventModel =  Fi::Mediconsult::Mediplan::Dto::Eventmodel::EventModelDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @eventModel = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @eventModel.push Fi::Mediconsult::Mediplan::Dto::Eventmodel::EventModelDto.from_json(_item)
                 else
                   @eventModel.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @eventModel = _oa
            end
          end
        if !_o['unitBasicInfoTitles'].nil?
          _oa = _o['unitBasicInfoTitles']
            if(_oa.is_a? Hash)
              @unitBasicInfoTitles = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @unitBasicInfoTitles =  Fi::Mediconsult::Core::Client::Dto::Title::TitleSettings.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @unitBasicInfoTitles = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @unitBasicInfoTitles.push Fi::Mediconsult::Core::Client::Dto::Title::TitleSettings.from_json(_item)
                 else
                   @unitBasicInfoTitles.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @unitBasicInfoTitles = _oa
            end
          end
    end

    # constructs a EventDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Status

  # (no documentation provided)
  class CourseStatus

    # (no documentation provided)
    DRAFT = "DRAFT"

    # (no documentation provided)
    PLANNED = "PLANNED"

    # (no documentation provided)
    CONFIRMED = "CONFIRMED"

    # (no documentation provided)
    CANCELED = "CANCELED"

    # (no documentation provided)
    ONGOING = "ONGOING"

    # (no documentation provided)
    DONE = "DONE"
  end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Kanta

  # (no documentation provided)
  class OrganDonationWillStatus

    # (no documentation provided)
    EI_ELINLUOVUTUS = "EI_ELINLUOVUTUS"

    # (no documentation provided)
    KYLLA_ELINLUOVUTUS = "KYLLA_ELINLUOVUTUS"

    # (no documentation provided)
    NO_WILL = "NO_WILL"

    # (no documentation provided)
    ERROR = "ERROR"
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Event

  # (no documentation provided)
  class EventSkillDto < Fi::Mediconsult::Mediplan::Dto::KuhaDtoBase 

    # (no documentation provided)
    attr_accessor :role
    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :eventSkillId
    # (no documentation provided)
    attr_accessor :changeable
    # (no documentation provided)
    attr_accessor :eventModelSkillId

    # the json hash for this EventSkillDto
    def to_jaxb_json_hash
      _h = super
      _h['role'] = role.to_jaxb_json_hash unless role.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['eventSkillId'] = eventSkillId.to_jaxb_json_hash unless eventSkillId.nil?
      _h['changeable'] = changeable.to_jaxb_json_hash unless changeable.nil?
      _h['eventModelSkillId'] = eventModelSkillId.to_jaxb_json_hash unless eventModelSkillId.nil?
      return _h
    end

    #initializes this EventSkillDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['role'].nil?
          _oa = _o['role']
            if(_oa.is_a? Hash)
              @role = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @role =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @role = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @role.push String.from_json(_item)
                 else
                   @role.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @role = _oa
            end
          end
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['eventSkillId'].nil?
          _oa = _o['eventSkillId']
            if(_oa.is_a? Hash)
              @eventSkillId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @eventSkillId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @eventSkillId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @eventSkillId.push Bignum.from_json(_item)
                 else
                   @eventSkillId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @eventSkillId = _oa
            end
          end
        if !_o['changeable'].nil?
          _oa = _o['changeable']
            if(_oa.is_a? Hash)
              @changeable = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @changeable =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @changeable = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @changeable.push Boolean.from_json(_item)
                 else
                   @changeable.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @changeable = _oa
            end
          end
        if !_o['eventModelSkillId'].nil?
          _oa = _o['eventModelSkillId']
            if(_oa.is_a? Hash)
              @eventModelSkillId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @eventModelSkillId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @eventModelSkillId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @eventModelSkillId.push Bignum.from_json(_item)
                 else
                   @eventModelSkillId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @eventModelSkillId = _oa
            end
          end
    end

    # constructs a EventSkillDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Course

  # (no documentation provided)
  class PeriodCancellationDto < Fi::Mediconsult::Mediplan::Dto::KuhaDtoBase 

    # (no documentation provided)
    attr_accessor :cancellationStartTime
    # (no documentation provided)
    attr_accessor :periodId
    # (no documentation provided)
    attr_accessor :cancellationReason

    # the json hash for this PeriodCancellationDto
    def to_jaxb_json_hash
      _h = super
      _h['cancellationStartTime'] = cancellationStartTime.to_jaxb_json_hash unless cancellationStartTime.nil?
      _h['periodId'] = periodId.to_jaxb_json_hash unless periodId.nil?
      _h['cancellationReason'] = cancellationReason.to_jaxb_json_hash unless cancellationReason.nil?
      return _h
    end

    #initializes this PeriodCancellationDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['cancellationStartTime'].nil?
          _oa = _o['cancellationStartTime']
            if(_oa.is_a? Hash)
              @cancellationStartTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @cancellationStartTime =  java.time::OffsetDateTime.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @cancellationStartTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @cancellationStartTime.push java.time::OffsetDateTime.from_json(_item)
                 else
                   @cancellationStartTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @cancellationStartTime = _oa
            end
          end
        if !_o['periodId'].nil?
          _oa = _o['periodId']
            if(_oa.is_a? Hash)
              @periodId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @periodId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @periodId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @periodId.push Bignum.from_json(_item)
                 else
                   @periodId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @periodId = _oa
            end
          end
        if !_o['cancellationReason'].nil?
          _oa = _o['cancellationReason']
            if(_oa.is_a? Hash)
              @cancellationReason = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @cancellationReason =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @cancellationReason = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @cancellationReason.push String.from_json(_item)
                 else
                   @cancellationReason.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @cancellationReason = _oa
            end
          end
    end

    # constructs a PeriodCancellationDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Rights

  # (no documentation provided)
  class ACLPerm

    # (no documentation provided)
    VIEW = "VIEW"

    # (no documentation provided)
    ADD = "ADD"

    # (no documentation provided)
    CHANGE = "CHANGE"

    # (no documentation provided)
    REMOVE = "REMOVE"
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Worker

  # (no documentation provided)
  class SkillDto < Fi::Mediconsult::Mediplan::Dto::KuhaDtoBase 

    # the name
    attr_accessor :name
    # the abbr
    attr_accessor :abbr
    # (no documentation provided)
    attr_accessor :removed

    # the json hash for this SkillDto
    def to_jaxb_json_hash
      _h = super
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['abbr'] = abbr.to_jaxb_json_hash unless abbr.nil?
      _h['removed'] = removed.to_jaxb_json_hash unless removed.nil?
      return _h
    end

    #initializes this SkillDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['abbr'].nil?
          _oa = _o['abbr']
            if(_oa.is_a? Hash)
              @abbr = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @abbr =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @abbr = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @abbr.push String.from_json(_item)
                 else
                   @abbr.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @abbr = _oa
            end
          end
        if !_o['removed'].nil?
          _oa = _o['removed']
            if(_oa.is_a? Hash)
              @removed = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @removed =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @removed = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @removed.push Boolean.from_json(_item)
                 else
                   @removed.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @removed = _oa
            end
          end
    end

    # constructs a SkillDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Laakitys

  # (no documentation provided)
  class Laake < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # (no documentation provided)
    attr_accessor :koodi
    # (no documentation provided)
    attr_accessor :nimi
    # (no documentation provided)
    attr_accessor :valmistaja
    # (no documentation provided)
    attr_accessor :ehto
    # (no documentation provided)
    attr_accessor :varoituksia
    # (no documentation provided)
    attr_accessor :erityispiirre
    # (no documentation provided)
    attr_accessor :erityisluvallinen
    # (no documentation provided)
    attr_accessor :laakemuoto
    # (no documentation provided)
    attr_accessor :vahvuus
    # (no documentation provided)
    attr_accessor :vahvuusarvo
    # (no documentation provided)
    attr_accessor :vahvuusyksikko
    # (no documentation provided)
    attr_accessor :pakkaus
    # (no documentation provided)
    attr_accessor :pakkauskerroin
    # (no documentation provided)
    attr_accessor :pakkausarvo
    # (no documentation provided)
    attr_accessor :pakkausyksikko
    # (no documentation provided)
    attr_accessor :pakkaustyyppi
    # (no documentation provided)
    attr_accessor :laite
    # (no documentation provided)
    attr_accessor :hinta
    # (no documentation provided)
    attr_accessor :reseptiteksti
    # (no documentation provided)
    attr_accessor :korvattavuus
    # (no documentation provided)
    attr_accessor :substituutioryhma
    # (no documentation provided)
    attr_accessor :alkupera
    # (no documentation provided)
    attr_accessor :tila
    # (no documentation provided)
    attr_accessor :halytys
    # (no documentation provided)
    attr_accessor :erityislupaVanhenee
    # (no documentation provided)
    attr_accessor :vero
    # (no documentation provided)
    attr_accessor :peruslaakevalikoima
    # (no documentation provided)
    attr_accessor :kelpoisuusaika
    # (no documentation provided)
    attr_accessor :sailytys
    # (no documentation provided)
    attr_accessor :velvoitevarasto
    # (no documentation provided)
    attr_accessor :varoitusraja
    # (no documentation provided)
    attr_accessor :kappalevarasto
    # (no documentation provided)
    attr_accessor :tukkuhinta
    # (no documentation provided)
    attr_accessor :tarjoushinta
    # (no documentation provided)
    attr_accessor :sopimustoimittaja
    # (no documentation provided)
    attr_accessor :huomautuksia
    # (no documentation provided)
    attr_accessor :suoritelinkki
    # (no documentation provided)
    attr_accessor :kustannuslinkki
    # (no documentation provided)
    attr_accessor :poistettu
    # (no documentation provided)
    attr_accessor :muutosaika
    # (no documentation provided)
    attr_accessor :muutospaikka
    # (no documentation provided)
    attr_accessor :tilasto1
    # (no documentation provided)
    attr_accessor :tilasto2
    # (no documentation provided)
    attr_accessor :tilasto3
    # (no documentation provided)
    attr_accessor :laaketietokantaversio
    # (no documentation provided)
    attr_accessor :koodityyppi
    # (no documentation provided)
    attr_accessor :tukkunumero
    # (no documentation provided)
    attr_accessor :laji
    # (no documentation provided)
    attr_accessor :myyntiluvanHaltija
    # (no documentation provided)
    attr_accessor :myyntilupanumero
    # (no documentation provided)
    attr_accessor :rinnakkaisvalmiste
    # (no documentation provided)
    attr_accessor :laakemuototunnus
    # (no documentation provided)
    attr_accessor :substituutiokoodi
    # (no documentation provided)
    attr_accessor :laakevaihto
    # (no documentation provided)
    attr_accessor :viitehinta
    # (no documentation provided)
    attr_accessor :hintaputki
    # (no documentation provided)
    attr_accessor :reseptivalmiste
    # (no documentation provided)
    attr_accessor :maaraamisehto
    # (no documentation provided)
    attr_accessor :huume
    # (no documentation provided)
    attr_accessor :liikennevaara
    # (no documentation provided)
    attr_accessor :lapsille
    # (no documentation provided)
    attr_accessor :annosjakelu
    # (no documentation provided)
    attr_accessor :jakouurre
    # (no documentation provided)
    attr_accessor :hintamuutos
    # (no documentation provided)
    attr_accessor :suorakorvauskoodi
    # (no documentation provided)
    attr_accessor :pkv
    # (no documentation provided)
    attr_accessor :valmistusohje
    # (no documentation provided)
    attr_accessor :markkinoija
    # (no documentation provided)
    attr_accessor :veriplasmavalmiste
    # (no documentation provided)
    attr_accessor :biologinenLaake
    # (no documentation provided)
    attr_accessor :lisaseurannassa
    # (no documentation provided)
    attr_accessor :lisatiedot
    # (no documentation provided)
    attr_accessor :atc
    # (no documentation provided)
    attr_accessor :annostusSoveltuvuus
    # (no documentation provided)
    attr_accessor :yhteisvaikutus
    # (no documentation provided)
    attr_accessor :vastaAihe
    # (no documentation provided)
    attr_accessor :terapiaryhma
    # (no documentation provided)
    attr_accessor :koostumus
    # (no documentation provided)
    attr_accessor :tiivistelma
    # (no documentation provided)
    attr_accessor :seloste
    # (no documentation provided)
    attr_accessor :laakeaineet
    # (no documentation provided)
    attr_accessor :kayttoaiheet
    # (no documentation provided)
    attr_accessor :antoreitit

    # the json hash for this Laake
    def to_jaxb_json_hash
      _h = super
      _h['koodi'] = koodi.to_jaxb_json_hash unless koodi.nil?
      _h['nimi'] = nimi.to_jaxb_json_hash unless nimi.nil?
      _h['valmistaja'] = valmistaja.to_jaxb_json_hash unless valmistaja.nil?
      _h['ehto'] = ehto.to_jaxb_json_hash unless ehto.nil?
      _h['varoituksia'] = varoituksia.to_jaxb_json_hash unless varoituksia.nil?
      _h['erityispiirre'] = erityispiirre.to_jaxb_json_hash unless erityispiirre.nil?
      _h['erityisluvallinen'] = erityisluvallinen.to_jaxb_json_hash unless erityisluvallinen.nil?
      _h['laakemuoto'] = laakemuoto.to_jaxb_json_hash unless laakemuoto.nil?
      _h['vahvuus'] = vahvuus.to_jaxb_json_hash unless vahvuus.nil?
      _h['vahvuusarvo'] = vahvuusarvo.to_jaxb_json_hash unless vahvuusarvo.nil?
      _h['vahvuusyksikko'] = vahvuusyksikko.to_jaxb_json_hash unless vahvuusyksikko.nil?
      _h['pakkaus'] = pakkaus.to_jaxb_json_hash unless pakkaus.nil?
      _h['pakkauskerroin'] = pakkauskerroin.to_jaxb_json_hash unless pakkauskerroin.nil?
      _h['pakkausarvo'] = pakkausarvo.to_jaxb_json_hash unless pakkausarvo.nil?
      _h['pakkausyksikko'] = pakkausyksikko.to_jaxb_json_hash unless pakkausyksikko.nil?
      _h['pakkaustyyppi'] = pakkaustyyppi.to_jaxb_json_hash unless pakkaustyyppi.nil?
      _h['laite'] = laite.to_jaxb_json_hash unless laite.nil?
      _h['hinta'] = hinta.to_jaxb_json_hash unless hinta.nil?
      _h['reseptiteksti'] = reseptiteksti.to_jaxb_json_hash unless reseptiteksti.nil?
      _h['korvattavuus'] = korvattavuus.to_jaxb_json_hash unless korvattavuus.nil?
      _h['substituutioryhma'] = substituutioryhma.to_jaxb_json_hash unless substituutioryhma.nil?
      _h['alkupera'] = alkupera.to_jaxb_json_hash unless alkupera.nil?
      _h['tila'] = tila.to_jaxb_json_hash unless tila.nil?
      _h['halytys'] = halytys.to_jaxb_json_hash unless halytys.nil?
      _h['erityislupaVanhenee'] = erityislupaVanhenee.to_jaxb_json_hash unless erityislupaVanhenee.nil?
      _h['vero'] = vero.to_jaxb_json_hash unless vero.nil?
      _h['peruslaakevalikoima'] = peruslaakevalikoima.to_jaxb_json_hash unless peruslaakevalikoima.nil?
      _h['kelpoisuusaika'] = kelpoisuusaika.to_jaxb_json_hash unless kelpoisuusaika.nil?
      _h['sailytys'] = sailytys.to_jaxb_json_hash unless sailytys.nil?
      _h['velvoitevarasto'] = velvoitevarasto.to_jaxb_json_hash unless velvoitevarasto.nil?
      _h['varoitusraja'] = varoitusraja.to_jaxb_json_hash unless varoitusraja.nil?
      _h['kappalevarasto'] = kappalevarasto.to_jaxb_json_hash unless kappalevarasto.nil?
      _h['tukkuhinta'] = tukkuhinta.to_jaxb_json_hash unless tukkuhinta.nil?
      _h['tarjoushinta'] = tarjoushinta.to_jaxb_json_hash unless tarjoushinta.nil?
      _h['sopimustoimittaja'] = sopimustoimittaja.to_jaxb_json_hash unless sopimustoimittaja.nil?
      _h['huomautuksia'] = huomautuksia.to_jaxb_json_hash unless huomautuksia.nil?
      _h['suoritelinkki'] = suoritelinkki.to_jaxb_json_hash unless suoritelinkki.nil?
      _h['kustannuslinkki'] = kustannuslinkki.to_jaxb_json_hash unless kustannuslinkki.nil?
      _h['poistettu'] = poistettu.to_jaxb_json_hash unless poistettu.nil?
      _h['muutosaika'] = muutosaika.to_jaxb_json_hash unless muutosaika.nil?
      _h['muutospaikka'] = muutospaikka.to_jaxb_json_hash unless muutospaikka.nil?
      _h['tilasto1'] = tilasto1.to_jaxb_json_hash unless tilasto1.nil?
      _h['tilasto2'] = tilasto2.to_jaxb_json_hash unless tilasto2.nil?
      _h['tilasto3'] = tilasto3.to_jaxb_json_hash unless tilasto3.nil?
      _h['laaketietokantaversio'] = laaketietokantaversio.to_jaxb_json_hash unless laaketietokantaversio.nil?
      _h['koodityyppi'] = koodityyppi.to_jaxb_json_hash unless koodityyppi.nil?
      _h['tukkunumero'] = tukkunumero.to_jaxb_json_hash unless tukkunumero.nil?
      _h['laji'] = laji.to_jaxb_json_hash unless laji.nil?
      _h['myyntiluvanHaltija'] = myyntiluvanHaltija.to_jaxb_json_hash unless myyntiluvanHaltija.nil?
      _h['myyntilupanumero'] = myyntilupanumero.to_jaxb_json_hash unless myyntilupanumero.nil?
      _h['rinnakkaisvalmiste'] = rinnakkaisvalmiste.to_jaxb_json_hash unless rinnakkaisvalmiste.nil?
      _h['laakemuototunnus'] = laakemuototunnus.to_jaxb_json_hash unless laakemuototunnus.nil?
      _h['substituutiokoodi'] = substituutiokoodi.to_jaxb_json_hash unless substituutiokoodi.nil?
      _h['laakevaihto'] = laakevaihto.to_jaxb_json_hash unless laakevaihto.nil?
      _h['viitehinta'] = viitehinta.to_jaxb_json_hash unless viitehinta.nil?
      _h['hintaputki'] = hintaputki.to_jaxb_json_hash unless hintaputki.nil?
      _h['reseptivalmiste'] = reseptivalmiste.to_jaxb_json_hash unless reseptivalmiste.nil?
      _h['maaraamisehto'] = maaraamisehto.to_jaxb_json_hash unless maaraamisehto.nil?
      _h['huume'] = huume.to_jaxb_json_hash unless huume.nil?
      _h['liikennevaara'] = liikennevaara.to_jaxb_json_hash unless liikennevaara.nil?
      _h['lapsille'] = lapsille.to_jaxb_json_hash unless lapsille.nil?
      _h['annosjakelu'] = annosjakelu.to_jaxb_json_hash unless annosjakelu.nil?
      _h['jakouurre'] = jakouurre.to_jaxb_json_hash unless jakouurre.nil?
      _h['hintamuutos'] = hintamuutos.to_jaxb_json_hash unless hintamuutos.nil?
      _h['suorakorvauskoodi'] = suorakorvauskoodi.to_jaxb_json_hash unless suorakorvauskoodi.nil?
      _h['pkv'] = pkv.to_jaxb_json_hash unless pkv.nil?
      _h['valmistusohje'] = valmistusohje.to_jaxb_json_hash unless valmistusohje.nil?
      _h['markkinoija'] = markkinoija.to_jaxb_json_hash unless markkinoija.nil?
      _h['veriplasmavalmiste'] = veriplasmavalmiste.to_jaxb_json_hash unless veriplasmavalmiste.nil?
      _h['biologinenLaake'] = biologinenLaake.to_jaxb_json_hash unless biologinenLaake.nil?
      _h['lisaseurannassa'] = lisaseurannassa.to_jaxb_json_hash unless lisaseurannassa.nil?
      _h['lisatiedot'] = lisatiedot.to_jaxb_json_hash unless lisatiedot.nil?
      if !atc.nil?
        _ha = Array.new
        atc.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['atc'] = _ha
      end
      if !annostusSoveltuvuus.nil?
        _ha = Array.new
        annostusSoveltuvuus.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['annostusSoveltuvuus'] = _ha
      end
      if !yhteisvaikutus.nil?
        _ha = Array.new
        yhteisvaikutus.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['yhteisvaikutus'] = _ha
      end
      if !vastaAihe.nil?
        _ha = Array.new
        vastaAihe.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['vastaAihe'] = _ha
      end
      if !terapiaryhma.nil?
        _ha = Array.new
        terapiaryhma.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['terapiaryhma'] = _ha
      end
      if !koostumus.nil?
        _ha = Array.new
        koostumus.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['koostumus'] = _ha
      end
      if !tiivistelma.nil?
        _ha = Array.new
        tiivistelma.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['tiivistelma'] = _ha
      end
      if !seloste.nil?
        _ha = Array.new
        seloste.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['seloste'] = _ha
      end
      if !laakeaineet.nil?
        _ha = Array.new
        laakeaineet.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['laakeaineet'] = _ha
      end
      if !kayttoaiheet.nil?
        _ha = Array.new
        kayttoaiheet.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['kayttoaiheet'] = _ha
      end
      if !antoreitit.nil?
        _ha = Array.new
        antoreitit.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['antoreitit'] = _ha
      end
      return _h
    end

    #initializes this Laake with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['koodi'].nil?
          _oa = _o['koodi']
            if(_oa.is_a? Hash)
              @koodi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @koodi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @koodi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @koodi.push String.from_json(_item)
                 else
                   @koodi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @koodi = _oa
            end
          end
        if !_o['nimi'].nil?
          _oa = _o['nimi']
            if(_oa.is_a? Hash)
              @nimi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @nimi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @nimi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @nimi.push String.from_json(_item)
                 else
                   @nimi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @nimi = _oa
            end
          end
        if !_o['valmistaja'].nil?
          _oa = _o['valmistaja']
            if(_oa.is_a? Hash)
              @valmistaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @valmistaja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @valmistaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @valmistaja.push Fixnum.from_json(_item)
                 else
                   @valmistaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @valmistaja = _oa
            end
          end
        if !_o['ehto'].nil?
          _oa = _o['ehto']
            if(_oa.is_a? Hash)
              @ehto = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ehto =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ehto = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ehto.push String.from_json(_item)
                 else
                   @ehto.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ehto = _oa
            end
          end
        if !_o['varoituksia'].nil?
          _oa = _o['varoituksia']
            if(_oa.is_a? Hash)
              @varoituksia = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @varoituksia =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @varoituksia = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @varoituksia.push String.from_json(_item)
                 else
                   @varoituksia.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @varoituksia = _oa
            end
          end
        if !_o['erityispiirre'].nil?
          _oa = _o['erityispiirre']
            if(_oa.is_a? Hash)
              @erityispiirre = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @erityispiirre =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @erityispiirre = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @erityispiirre.push String.from_json(_item)
                 else
                   @erityispiirre.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @erityispiirre = _oa
            end
          end
        if !_o['erityisluvallinen'].nil?
          _oa = _o['erityisluvallinen']
            if(_oa.is_a? Hash)
              @erityisluvallinen = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @erityisluvallinen =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @erityisluvallinen = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @erityisluvallinen.push Fixnum.from_json(_item)
                 else
                   @erityisluvallinen.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @erityisluvallinen = _oa
            end
          end
        if !_o['laakemuoto'].nil?
          _oa = _o['laakemuoto']
            if(_oa.is_a? Hash)
              @laakemuoto = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laakemuoto =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laakemuoto = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laakemuoto.push String.from_json(_item)
                 else
                   @laakemuoto.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laakemuoto = _oa
            end
          end
        if !_o['vahvuus'].nil?
          _oa = _o['vahvuus']
            if(_oa.is_a? Hash)
              @vahvuus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vahvuus =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vahvuus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vahvuus.push String.from_json(_item)
                 else
                   @vahvuus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vahvuus = _oa
            end
          end
        if !_o['vahvuusarvo'].nil?
          _oa = _o['vahvuusarvo']
            if(_oa.is_a? Hash)
              @vahvuusarvo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vahvuusarvo =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vahvuusarvo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vahvuusarvo.push Float.from_json(_item)
                 else
                   @vahvuusarvo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vahvuusarvo = _oa
            end
          end
        if !_o['vahvuusyksikko'].nil?
          _oa = _o['vahvuusyksikko']
            if(_oa.is_a? Hash)
              @vahvuusyksikko = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vahvuusyksikko =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vahvuusyksikko = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vahvuusyksikko.push String.from_json(_item)
                 else
                   @vahvuusyksikko.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vahvuusyksikko = _oa
            end
          end
        if !_o['pakkaus'].nil?
          _oa = _o['pakkaus']
            if(_oa.is_a? Hash)
              @pakkaus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @pakkaus =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @pakkaus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @pakkaus.push String.from_json(_item)
                 else
                   @pakkaus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @pakkaus = _oa
            end
          end
        if !_o['pakkauskerroin'].nil?
          _oa = _o['pakkauskerroin']
            if(_oa.is_a? Hash)
              @pakkauskerroin = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @pakkauskerroin =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @pakkauskerroin = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @pakkauskerroin.push Float.from_json(_item)
                 else
                   @pakkauskerroin.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @pakkauskerroin = _oa
            end
          end
        if !_o['pakkausarvo'].nil?
          _oa = _o['pakkausarvo']
            if(_oa.is_a? Hash)
              @pakkausarvo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @pakkausarvo =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @pakkausarvo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @pakkausarvo.push Float.from_json(_item)
                 else
                   @pakkausarvo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @pakkausarvo = _oa
            end
          end
        if !_o['pakkausyksikko'].nil?
          _oa = _o['pakkausyksikko']
            if(_oa.is_a? Hash)
              @pakkausyksikko = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @pakkausyksikko =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @pakkausyksikko = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @pakkausyksikko.push String.from_json(_item)
                 else
                   @pakkausyksikko.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @pakkausyksikko = _oa
            end
          end
        if !_o['pakkaustyyppi'].nil?
          _oa = _o['pakkaustyyppi']
            if(_oa.is_a? Hash)
              @pakkaustyyppi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @pakkaustyyppi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @pakkaustyyppi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @pakkaustyyppi.push String.from_json(_item)
                 else
                   @pakkaustyyppi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @pakkaustyyppi = _oa
            end
          end
        if !_o['laite'].nil?
          _oa = _o['laite']
            if(_oa.is_a? Hash)
              @laite = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laite =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laite = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laite.push String.from_json(_item)
                 else
                   @laite.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laite = _oa
            end
          end
        if !_o['hinta'].nil?
          _oa = _o['hinta']
            if(_oa.is_a? Hash)
              @hinta = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @hinta =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @hinta = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @hinta.push Float.from_json(_item)
                 else
                   @hinta.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @hinta = _oa
            end
          end
        if !_o['reseptiteksti'].nil?
          _oa = _o['reseptiteksti']
            if(_oa.is_a? Hash)
              @reseptiteksti = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @reseptiteksti =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @reseptiteksti = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @reseptiteksti.push String.from_json(_item)
                 else
                   @reseptiteksti.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @reseptiteksti = _oa
            end
          end
        if !_o['korvattavuus'].nil?
          _oa = _o['korvattavuus']
            if(_oa.is_a? Hash)
              @korvattavuus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @korvattavuus =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @korvattavuus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @korvattavuus.push String.from_json(_item)
                 else
                   @korvattavuus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @korvattavuus = _oa
            end
          end
        if !_o['substituutioryhma'].nil?
          _oa = _o['substituutioryhma']
            if(_oa.is_a? Hash)
              @substituutioryhma = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @substituutioryhma =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @substituutioryhma = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @substituutioryhma.push String.from_json(_item)
                 else
                   @substituutioryhma.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @substituutioryhma = _oa
            end
          end
        if !_o['alkupera'].nil?
          _oa = _o['alkupera']
            if(_oa.is_a? Hash)
              @alkupera = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @alkupera =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @alkupera = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @alkupera.push Fixnum.from_json(_item)
                 else
                   @alkupera.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @alkupera = _oa
            end
          end
        if !_o['tila'].nil?
          _oa = _o['tila']
            if(_oa.is_a? Hash)
              @tila = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tila =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tila = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tila.push Fixnum.from_json(_item)
                 else
                   @tila.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tila = _oa
            end
          end
        if !_o['halytys'].nil?
          _oa = _o['halytys']
            if(_oa.is_a? Hash)
              @halytys = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @halytys =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @halytys = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @halytys.push String.from_json(_item)
                 else
                   @halytys.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @halytys = _oa
            end
          end
        if !_o['erityislupaVanhenee'].nil?
          _oa = _o['erityislupaVanhenee']
            if(_oa.is_a? Hash)
              @erityislupaVanhenee = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @erityislupaVanhenee =  java.time::LocalDate.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @erityislupaVanhenee = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @erityislupaVanhenee.push java.time::LocalDate.from_json(_item)
                 else
                   @erityislupaVanhenee.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @erityislupaVanhenee = _oa
            end
          end
        if !_o['vero'].nil?
          _oa = _o['vero']
            if(_oa.is_a? Hash)
              @vero = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vero =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vero = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vero.push String.from_json(_item)
                 else
                   @vero.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vero = _oa
            end
          end
        if !_o['peruslaakevalikoima'].nil?
          _oa = _o['peruslaakevalikoima']
            if(_oa.is_a? Hash)
              @peruslaakevalikoima = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @peruslaakevalikoima =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @peruslaakevalikoima = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @peruslaakevalikoima.push Fixnum.from_json(_item)
                 else
                   @peruslaakevalikoima.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @peruslaakevalikoima = _oa
            end
          end
        if !_o['kelpoisuusaika'].nil?
          _oa = _o['kelpoisuusaika']
            if(_oa.is_a? Hash)
              @kelpoisuusaika = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kelpoisuusaika =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kelpoisuusaika = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kelpoisuusaika.push String.from_json(_item)
                 else
                   @kelpoisuusaika.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kelpoisuusaika = _oa
            end
          end
        if !_o['sailytys'].nil?
          _oa = _o['sailytys']
            if(_oa.is_a? Hash)
              @sailytys = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @sailytys =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @sailytys = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @sailytys.push String.from_json(_item)
                 else
                   @sailytys.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @sailytys = _oa
            end
          end
        if !_o['velvoitevarasto'].nil?
          _oa = _o['velvoitevarasto']
            if(_oa.is_a? Hash)
              @velvoitevarasto = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @velvoitevarasto =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @velvoitevarasto = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @velvoitevarasto.push Fixnum.from_json(_item)
                 else
                   @velvoitevarasto.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @velvoitevarasto = _oa
            end
          end
        if !_o['varoitusraja'].nil?
          _oa = _o['varoitusraja']
            if(_oa.is_a? Hash)
              @varoitusraja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @varoitusraja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @varoitusraja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @varoitusraja.push Fixnum.from_json(_item)
                 else
                   @varoitusraja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @varoitusraja = _oa
            end
          end
        if !_o['kappalevarasto'].nil?
          _oa = _o['kappalevarasto']
            if(_oa.is_a? Hash)
              @kappalevarasto = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kappalevarasto =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kappalevarasto = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kappalevarasto.push Fixnum.from_json(_item)
                 else
                   @kappalevarasto.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kappalevarasto = _oa
            end
          end
        if !_o['tukkuhinta'].nil?
          _oa = _o['tukkuhinta']
            if(_oa.is_a? Hash)
              @tukkuhinta = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tukkuhinta =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tukkuhinta = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tukkuhinta.push Float.from_json(_item)
                 else
                   @tukkuhinta.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tukkuhinta = _oa
            end
          end
        if !_o['tarjoushinta'].nil?
          _oa = _o['tarjoushinta']
            if(_oa.is_a? Hash)
              @tarjoushinta = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tarjoushinta =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tarjoushinta = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tarjoushinta.push Float.from_json(_item)
                 else
                   @tarjoushinta.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tarjoushinta = _oa
            end
          end
        if !_o['sopimustoimittaja'].nil?
          _oa = _o['sopimustoimittaja']
            if(_oa.is_a? Hash)
              @sopimustoimittaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @sopimustoimittaja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @sopimustoimittaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @sopimustoimittaja.push Fixnum.from_json(_item)
                 else
                   @sopimustoimittaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @sopimustoimittaja = _oa
            end
          end
        if !_o['huomautuksia'].nil?
          _oa = _o['huomautuksia']
            if(_oa.is_a? Hash)
              @huomautuksia = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @huomautuksia =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @huomautuksia = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @huomautuksia.push String.from_json(_item)
                 else
                   @huomautuksia.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @huomautuksia = _oa
            end
          end
        if !_o['suoritelinkki'].nil?
          _oa = _o['suoritelinkki']
            if(_oa.is_a? Hash)
              @suoritelinkki = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @suoritelinkki =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @suoritelinkki = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @suoritelinkki.push Fixnum.from_json(_item)
                 else
                   @suoritelinkki.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @suoritelinkki = _oa
            end
          end
        if !_o['kustannuslinkki'].nil?
          _oa = _o['kustannuslinkki']
            if(_oa.is_a? Hash)
              @kustannuslinkki = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kustannuslinkki =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kustannuslinkki = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kustannuslinkki.push Fixnum.from_json(_item)
                 else
                   @kustannuslinkki.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kustannuslinkki = _oa
            end
          end
        if !_o['poistettu'].nil?
          _oa = _o['poistettu']
            if(_oa.is_a? Hash)
              @poistettu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @poistettu =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @poistettu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @poistettu.push Fixnum.from_json(_item)
                 else
                   @poistettu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @poistettu = _oa
            end
          end
        if !_o['muutosaika'].nil?
          _oa = _o['muutosaika']
            if(_oa.is_a? Hash)
              @muutosaika = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @muutosaika =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @muutosaika = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @muutosaika.push Time.from_json(_item)
                 else
                   @muutosaika.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @muutosaika = _oa
            end
          end
        if !_o['muutospaikka'].nil?
          _oa = _o['muutospaikka']
            if(_oa.is_a? Hash)
              @muutospaikka = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @muutospaikka =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @muutospaikka = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @muutospaikka.push Fixnum.from_json(_item)
                 else
                   @muutospaikka.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @muutospaikka = _oa
            end
          end
        if !_o['tilasto1'].nil?
          _oa = _o['tilasto1']
            if(_oa.is_a? Hash)
              @tilasto1 = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tilasto1 =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tilasto1 = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tilasto1.push String.from_json(_item)
                 else
                   @tilasto1.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tilasto1 = _oa
            end
          end
        if !_o['tilasto2'].nil?
          _oa = _o['tilasto2']
            if(_oa.is_a? Hash)
              @tilasto2 = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tilasto2 =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tilasto2 = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tilasto2.push String.from_json(_item)
                 else
                   @tilasto2.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tilasto2 = _oa
            end
          end
        if !_o['tilasto3'].nil?
          _oa = _o['tilasto3']
            if(_oa.is_a? Hash)
              @tilasto3 = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tilasto3 =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tilasto3 = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tilasto3.push String.from_json(_item)
                 else
                   @tilasto3.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tilasto3 = _oa
            end
          end
        if !_o['laaketietokantaversio'].nil?
          _oa = _o['laaketietokantaversio']
            if(_oa.is_a? Hash)
              @laaketietokantaversio = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laaketietokantaversio =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laaketietokantaversio = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laaketietokantaversio.push String.from_json(_item)
                 else
                   @laaketietokantaversio.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laaketietokantaversio = _oa
            end
          end
        if !_o['koodityyppi'].nil?
          _oa = _o['koodityyppi']
            if(_oa.is_a? Hash)
              @koodityyppi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @koodityyppi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @koodityyppi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @koodityyppi.push String.from_json(_item)
                 else
                   @koodityyppi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @koodityyppi = _oa
            end
          end
        if !_o['tukkunumero'].nil?
          _oa = _o['tukkunumero']
            if(_oa.is_a? Hash)
              @tukkunumero = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tukkunumero =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tukkunumero = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tukkunumero.push String.from_json(_item)
                 else
                   @tukkunumero.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tukkunumero = _oa
            end
          end
        if !_o['laji'].nil?
          _oa = _o['laji']
            if(_oa.is_a? Hash)
              @laji = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laji =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laji = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laji.push String.from_json(_item)
                 else
                   @laji.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laji = _oa
            end
          end
        if !_o['myyntiluvanHaltija'].nil?
          _oa = _o['myyntiluvanHaltija']
            if(_oa.is_a? Hash)
              @myyntiluvanHaltija = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @myyntiluvanHaltija =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @myyntiluvanHaltija = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @myyntiluvanHaltija.push String.from_json(_item)
                 else
                   @myyntiluvanHaltija.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @myyntiluvanHaltija = _oa
            end
          end
        if !_o['myyntilupanumero'].nil?
          _oa = _o['myyntilupanumero']
            if(_oa.is_a? Hash)
              @myyntilupanumero = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @myyntilupanumero =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @myyntilupanumero = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @myyntilupanumero.push String.from_json(_item)
                 else
                   @myyntilupanumero.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @myyntilupanumero = _oa
            end
          end
        if !_o['rinnakkaisvalmiste'].nil?
          _oa = _o['rinnakkaisvalmiste']
            if(_oa.is_a? Hash)
              @rinnakkaisvalmiste = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rinnakkaisvalmiste =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rinnakkaisvalmiste = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rinnakkaisvalmiste.push Fixnum.from_json(_item)
                 else
                   @rinnakkaisvalmiste.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rinnakkaisvalmiste = _oa
            end
          end
        if !_o['laakemuototunnus'].nil?
          _oa = _o['laakemuototunnus']
            if(_oa.is_a? Hash)
              @laakemuototunnus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laakemuototunnus =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laakemuototunnus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laakemuototunnus.push String.from_json(_item)
                 else
                   @laakemuototunnus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laakemuototunnus = _oa
            end
          end
        if !_o['substituutiokoodi'].nil?
          _oa = _o['substituutiokoodi']
            if(_oa.is_a? Hash)
              @substituutiokoodi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @substituutiokoodi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @substituutiokoodi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @substituutiokoodi.push String.from_json(_item)
                 else
                   @substituutiokoodi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @substituutiokoodi = _oa
            end
          end
        if !_o['laakevaihto'].nil?
          _oa = _o['laakevaihto']
            if(_oa.is_a? Hash)
              @laakevaihto = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laakevaihto =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laakevaihto = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laakevaihto.push Fixnum.from_json(_item)
                 else
                   @laakevaihto.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laakevaihto = _oa
            end
          end
        if !_o['viitehinta'].nil?
          _oa = _o['viitehinta']
            if(_oa.is_a? Hash)
              @viitehinta = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @viitehinta =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @viitehinta = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @viitehinta.push Float.from_json(_item)
                 else
                   @viitehinta.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @viitehinta = _oa
            end
          end
        if !_o['hintaputki'].nil?
          _oa = _o['hintaputki']
            if(_oa.is_a? Hash)
              @hintaputki = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @hintaputki =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @hintaputki = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @hintaputki.push Float.from_json(_item)
                 else
                   @hintaputki.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @hintaputki = _oa
            end
          end
        if !_o['reseptivalmiste'].nil?
          _oa = _o['reseptivalmiste']
            if(_oa.is_a? Hash)
              @reseptivalmiste = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @reseptivalmiste =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @reseptivalmiste = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @reseptivalmiste.push Fixnum.from_json(_item)
                 else
                   @reseptivalmiste.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @reseptivalmiste = _oa
            end
          end
        if !_o['maaraamisehto'].nil?
          _oa = _o['maaraamisehto']
            if(_oa.is_a? Hash)
              @maaraamisehto = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @maaraamisehto =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @maaraamisehto = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @maaraamisehto.push String.from_json(_item)
                 else
                   @maaraamisehto.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @maaraamisehto = _oa
            end
          end
        if !_o['huume'].nil?
          _oa = _o['huume']
            if(_oa.is_a? Hash)
              @huume = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @huume =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @huume = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @huume.push Fixnum.from_json(_item)
                 else
                   @huume.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @huume = _oa
            end
          end
        if !_o['liikennevaara'].nil?
          _oa = _o['liikennevaara']
            if(_oa.is_a? Hash)
              @liikennevaara = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @liikennevaara =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @liikennevaara = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @liikennevaara.push Fixnum.from_json(_item)
                 else
                   @liikennevaara.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @liikennevaara = _oa
            end
          end
        if !_o['lapsille'].nil?
          _oa = _o['lapsille']
            if(_oa.is_a? Hash)
              @lapsille = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lapsille =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lapsille = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lapsille.push Fixnum.from_json(_item)
                 else
                   @lapsille.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lapsille = _oa
            end
          end
        if !_o['annosjakelu'].nil?
          _oa = _o['annosjakelu']
            if(_oa.is_a? Hash)
              @annosjakelu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @annosjakelu =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @annosjakelu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @annosjakelu.push Fixnum.from_json(_item)
                 else
                   @annosjakelu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @annosjakelu = _oa
            end
          end
        if !_o['jakouurre'].nil?
          _oa = _o['jakouurre']
            if(_oa.is_a? Hash)
              @jakouurre = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @jakouurre =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @jakouurre = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @jakouurre.push Fixnum.from_json(_item)
                 else
                   @jakouurre.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @jakouurre = _oa
            end
          end
        if !_o['hintamuutos'].nil?
          _oa = _o['hintamuutos']
            if(_oa.is_a? Hash)
              @hintamuutos = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @hintamuutos =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @hintamuutos = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @hintamuutos.push String.from_json(_item)
                 else
                   @hintamuutos.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @hintamuutos = _oa
            end
          end
        if !_o['suorakorvauskoodi'].nil?
          _oa = _o['suorakorvauskoodi']
            if(_oa.is_a? Hash)
              @suorakorvauskoodi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @suorakorvauskoodi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @suorakorvauskoodi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @suorakorvauskoodi.push String.from_json(_item)
                 else
                   @suorakorvauskoodi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @suorakorvauskoodi = _oa
            end
          end
        if !_o['pkv'].nil?
          _oa = _o['pkv']
            if(_oa.is_a? Hash)
              @pkv = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @pkv =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @pkv = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @pkv.push String.from_json(_item)
                 else
                   @pkv.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @pkv = _oa
            end
          end
        if !_o['valmistusohje'].nil?
          _oa = _o['valmistusohje']
            if(_oa.is_a? Hash)
              @valmistusohje = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @valmistusohje =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @valmistusohje = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @valmistusohje.push String.from_json(_item)
                 else
                   @valmistusohje.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @valmistusohje = _oa
            end
          end
        if !_o['markkinoija'].nil?
          _oa = _o['markkinoija']
            if(_oa.is_a? Hash)
              @markkinoija = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @markkinoija =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @markkinoija = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @markkinoija.push String.from_json(_item)
                 else
                   @markkinoija.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @markkinoija = _oa
            end
          end
        if !_o['veriplasmavalmiste'].nil?
          _oa = _o['veriplasmavalmiste']
            if(_oa.is_a? Hash)
              @veriplasmavalmiste = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @veriplasmavalmiste =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @veriplasmavalmiste = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @veriplasmavalmiste.push Fixnum.from_json(_item)
                 else
                   @veriplasmavalmiste.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @veriplasmavalmiste = _oa
            end
          end
        if !_o['biologinenLaake'].nil?
          _oa = _o['biologinenLaake']
            if(_oa.is_a? Hash)
              @biologinenLaake = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @biologinenLaake =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @biologinenLaake = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @biologinenLaake.push Fixnum.from_json(_item)
                 else
                   @biologinenLaake.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @biologinenLaake = _oa
            end
          end
        if !_o['lisaseurannassa'].nil?
          _oa = _o['lisaseurannassa']
            if(_oa.is_a? Hash)
              @lisaseurannassa = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lisaseurannassa =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lisaseurannassa = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lisaseurannassa.push Fixnum.from_json(_item)
                 else
                   @lisaseurannassa.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lisaseurannassa = _oa
            end
          end
        if !_o['lisatiedot'].nil?
          _oa = _o['lisatiedot']
            if(_oa.is_a? Hash)
              @lisatiedot = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lisatiedot =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lisatiedot = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lisatiedot.push String.from_json(_item)
                 else
                   @lisatiedot.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lisatiedot = _oa
            end
          end
        if !_o['atc'].nil?
          _oa = _o['atc']
            if(_oa.is_a? Hash)
              @atc = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @atc =  Fi::Mediconsult::Core::Client::Dto::Laakitys::LaakeAtc.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @atc = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @atc.push Fi::Mediconsult::Core::Client::Dto::Laakitys::LaakeAtc.from_json(_item)
                 else
                   @atc.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @atc = _oa
            end
          end
        if !_o['annostusSoveltuvuus'].nil?
          _oa = _o['annostusSoveltuvuus']
            if(_oa.is_a? Hash)
              @annostusSoveltuvuus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @annostusSoveltuvuus =  Fi::Mediconsult::Core::Client::Dto::Laakitys::LaakeAnnostusSoveltuvuus.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @annostusSoveltuvuus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @annostusSoveltuvuus.push Fi::Mediconsult::Core::Client::Dto::Laakitys::LaakeAnnostusSoveltuvuus.from_json(_item)
                 else
                   @annostusSoveltuvuus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @annostusSoveltuvuus = _oa
            end
          end
        if !_o['yhteisvaikutus'].nil?
          _oa = _o['yhteisvaikutus']
            if(_oa.is_a? Hash)
              @yhteisvaikutus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @yhteisvaikutus =  Fi::Mediconsult::Core::Client::Dto::Laakitys::LaakeYhteisvaikutus.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @yhteisvaikutus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @yhteisvaikutus.push Fi::Mediconsult::Core::Client::Dto::Laakitys::LaakeYhteisvaikutus.from_json(_item)
                 else
                   @yhteisvaikutus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @yhteisvaikutus = _oa
            end
          end
        if !_o['vastaAihe'].nil?
          _oa = _o['vastaAihe']
            if(_oa.is_a? Hash)
              @vastaAihe = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vastaAihe =  Fi::Mediconsult::Core::Client::Dto::Laakitys::LaakeVastaAihe.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vastaAihe = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vastaAihe.push Fi::Mediconsult::Core::Client::Dto::Laakitys::LaakeVastaAihe.from_json(_item)
                 else
                   @vastaAihe.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vastaAihe = _oa
            end
          end
        if !_o['terapiaryhma'].nil?
          _oa = _o['terapiaryhma']
            if(_oa.is_a? Hash)
              @terapiaryhma = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @terapiaryhma =  Fi::Mediconsult::Core::Client::Dto::Laakitys::LaakeTerapiaryhma.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @terapiaryhma = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @terapiaryhma.push Fi::Mediconsult::Core::Client::Dto::Laakitys::LaakeTerapiaryhma.from_json(_item)
                 else
                   @terapiaryhma.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @terapiaryhma = _oa
            end
          end
        if !_o['koostumus'].nil?
          _oa = _o['koostumus']
            if(_oa.is_a? Hash)
              @koostumus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @koostumus =  Fi::Mediconsult::Core::Client::Dto::Laakitys::LaakeKoostumus.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @koostumus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @koostumus.push Fi::Mediconsult::Core::Client::Dto::Laakitys::LaakeKoostumus.from_json(_item)
                 else
                   @koostumus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @koostumus = _oa
            end
          end
        if !_o['tiivistelma'].nil?
          _oa = _o['tiivistelma']
            if(_oa.is_a? Hash)
              @tiivistelma = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tiivistelma =  Fi::Mediconsult::Core::Client::Dto::Laakitys::LaakeTiivistelma.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tiivistelma = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tiivistelma.push Fi::Mediconsult::Core::Client::Dto::Laakitys::LaakeTiivistelma.from_json(_item)
                 else
                   @tiivistelma.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tiivistelma = _oa
            end
          end
        if !_o['seloste'].nil?
          _oa = _o['seloste']
            if(_oa.is_a? Hash)
              @seloste = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @seloste =  Fi::Mediconsult::Core::Client::Dto::Laakitys::LaakeSeloste.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @seloste = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @seloste.push Fi::Mediconsult::Core::Client::Dto::Laakitys::LaakeSeloste.from_json(_item)
                 else
                   @seloste.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @seloste = _oa
            end
          end
        if !_o['laakeaineet'].nil?
          _oa = _o['laakeaineet']
            if(_oa.is_a? Hash)
              @laakeaineet = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laakeaineet =  Fi::Mediconsult::Core::Client::Dto::Laakitys::LaakeAine.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laakeaineet = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laakeaineet.push Fi::Mediconsult::Core::Client::Dto::Laakitys::LaakeAine.from_json(_item)
                 else
                   @laakeaineet.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laakeaineet = _oa
            end
          end
        if !_o['kayttoaiheet'].nil?
          _oa = _o['kayttoaiheet']
            if(_oa.is_a? Hash)
              @kayttoaiheet = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kayttoaiheet =  Fi::Mediconsult::Core::Client::Dto::KayttoaiheView.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kayttoaiheet = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kayttoaiheet.push Fi::Mediconsult::Core::Client::Dto::KayttoaiheView.from_json(_item)
                 else
                   @kayttoaiheet.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kayttoaiheet = _oa
            end
          end
        if !_o['antoreitit'].nil?
          _oa = _o['antoreitit']
            if(_oa.is_a? Hash)
              @antoreitit = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @antoreitit =  Fi::Mediconsult::Core::Client::Dto::Laakitys::Antoreitti.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @antoreitit = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @antoreitit.push Fi::Mediconsult::Core::Client::Dto::Laakitys::Antoreitti.from_json(_item)
                 else
                   @antoreitit.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @antoreitit = _oa
            end
          end
    end

    # constructs a Laake from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Medisos

module Dto

  # (no documentation provided)
  class PhraseDto < Fi::Mediconsult::Medisos::Dto::MediSosDtoBase 

    # (no documentation provided)
    attr_accessor :phrase
    # (no documentation provided)
    attr_accessor :userId
    # (no documentation provided)
    attr_accessor :unitId
    # (no documentation provided)
    attr_accessor :formId

    # the json hash for this PhraseDto
    def to_jaxb_json_hash
      _h = super
      _h['phrase'] = phrase.to_jaxb_json_hash unless phrase.nil?
      _h['userId'] = userId.to_jaxb_json_hash unless userId.nil?
      _h['unitId'] = unitId.to_jaxb_json_hash unless unitId.nil?
      _h['formId'] = formId.to_jaxb_json_hash unless formId.nil?
      return _h
    end

    #initializes this PhraseDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['phrase'].nil?
          _oa = _o['phrase']
            if(_oa.is_a? Hash)
              @phrase = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @phrase =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @phrase = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @phrase.push String.from_json(_item)
                 else
                   @phrase.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @phrase = _oa
            end
          end
        if !_o['userId'].nil?
          _oa = _o['userId']
            if(_oa.is_a? Hash)
              @userId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @userId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @userId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @userId.push Fixnum.from_json(_item)
                 else
                   @userId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @userId = _oa
            end
          end
        if !_o['unitId'].nil?
          _oa = _o['unitId']
            if(_oa.is_a? Hash)
              @unitId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @unitId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @unitId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @unitId.push Fixnum.from_json(_item)
                 else
                   @unitId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @unitId = _oa
            end
          end
        if !_o['formId'].nil?
          _oa = _o['formId']
            if(_oa.is_a? Hash)
              @formId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @formId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @formId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @formId.push Fixnum.from_json(_item)
                 else
                   @formId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @formId = _oa
            end
          end
    end

    # constructs a PhraseDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Paatoksentuki

  # (no documentation provided)
  class Interaction < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # (no documentation provided)
    attr_accessor :interactionText
    # (no documentation provided)
    attr_accessor :interactionLevel
    # (no documentation provided)
    attr_accessor :drug1
    # (no documentation provided)
    attr_accessor :drug2
    # (no documentation provided)
    attr_accessor :interactionLink

    # the json hash for this Interaction
    def to_jaxb_json_hash
      _h = super
      _h['interactionText'] = interactionText.to_jaxb_json_hash unless interactionText.nil?
      _h['interactionLevel'] = interactionLevel.to_jaxb_json_hash unless interactionLevel.nil?
      _h['drug1'] = drug1.to_jaxb_json_hash unless drug1.nil?
      _h['drug2'] = drug2.to_jaxb_json_hash unless drug2.nil?
      _h['interactionLink'] = interactionLink.to_jaxb_json_hash unless interactionLink.nil?
      return _h
    end

    #initializes this Interaction with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['interactionText'].nil?
          _oa = _o['interactionText']
            if(_oa.is_a? Hash)
              @interactionText = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @interactionText =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @interactionText = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @interactionText.push String.from_json(_item)
                 else
                   @interactionText.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @interactionText = _oa
            end
          end
        if !_o['interactionLevel'].nil?
          _oa = _o['interactionLevel']
            if(_oa.is_a? Hash)
              @interactionLevel = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @interactionLevel =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @interactionLevel = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @interactionLevel.push String.from_json(_item)
                 else
                   @interactionLevel.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @interactionLevel = _oa
            end
          end
        if !_o['drug1'].nil?
          _oa = _o['drug1']
            if(_oa.is_a? Hash)
              @drug1 = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @drug1 =  Fi::Mediconsult::Core::Client::Dto::Paatoksentuki::Drug.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @drug1 = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @drug1.push Fi::Mediconsult::Core::Client::Dto::Paatoksentuki::Drug.from_json(_item)
                 else
                   @drug1.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @drug1 = _oa
            end
          end
        if !_o['drug2'].nil?
          _oa = _o['drug2']
            if(_oa.is_a? Hash)
              @drug2 = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @drug2 =  Fi::Mediconsult::Core::Client::Dto::Paatoksentuki::Drug.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @drug2 = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @drug2.push Fi::Mediconsult::Core::Client::Dto::Paatoksentuki::Drug.from_json(_item)
                 else
                   @drug2.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @drug2 = _oa
            end
          end
        if !_o['interactionLink'].nil?
          _oa = _o['interactionLink']
            if(_oa.is_a? Hash)
              @interactionLink = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @interactionLink =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @interactionLink = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @interactionLink.push String.from_json(_item)
                 else
                   @interactionLink.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @interactionLink = _oa
            end
          end
    end

    # constructs a Interaction from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Medisos

  # (no documentation provided)
  class ExampleDto < Fi::Mediconsult::Mediplan::Dto::KuhaDtoBase 

    # (no documentation provided)
    attr_accessor :teksti
    # (no documentation provided)
    attr_accessor :luku
    # (no documentation provided)
    attr_accessor :items

    # the json hash for this ExampleDto
    def to_jaxb_json_hash
      _h = super
      _h['teksti'] = teksti.to_jaxb_json_hash unless teksti.nil?
      _h['luku'] = luku.to_jaxb_json_hash unless luku.nil?
      if !items.nil?
        _ha = Array.new
        items.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['items'] = _ha
      end
      return _h
    end

    #initializes this ExampleDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['teksti'].nil?
          _oa = _o['teksti']
            if(_oa.is_a? Hash)
              @teksti = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @teksti =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @teksti = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @teksti.push String.from_json(_item)
                 else
                   @teksti.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @teksti = _oa
            end
          end
        if !_o['luku'].nil?
          _oa = _o['luku']
            if(_oa.is_a? Hash)
              @luku = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @luku =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @luku = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @luku.push Fixnum.from_json(_item)
                 else
                   @luku.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @luku = _oa
            end
          end
        if !_o['items'].nil?
          _oa = _o['items']
            if(_oa.is_a? Hash)
              @items = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @items =  Fi::Mediconsult::Medisos::ExampleItemDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @items = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @items.push Fi::Mediconsult::Medisos::ExampleItemDto.from_json(_item)
                 else
                   @items.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @items = _oa
            end
          end
    end

    # constructs a ExampleDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Event

  # (no documentation provided)
  class PrimaryNurseStatus

    # (no documentation provided)
    NOT_REQUIRED = "NOT_REQUIRED"

    # (no documentation provided)
    NOT_ASSIGNED = "NOT_ASSIGNED"

    # (no documentation provided)
    ASSIGNED = "ASSIGNED"
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Omistaja

  # (no documentation provided)
  class Gender

    # (no documentation provided)
    WOMAN = "WOMAN"

    # (no documentation provided)
    MAN = "MAN"

    # (no documentation provided)
    OTHER = "OTHER"

    # (no documentation provided)
    UNKNOWN = "UNKNOWN"
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Paatoksentuki

  # (no documentation provided)
  class DrugsAndRenalFunctions < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # (no documentation provided)
    attr_accessor :gfr
    # (no documentation provided)
    attr_accessor :drugsAndRenalFunctions

    # the json hash for this DrugsAndRenalFunctions
    def to_jaxb_json_hash
      _h = super
      _h['gfr'] = gfr.to_jaxb_json_hash unless gfr.nil?
      if !drugsAndRenalFunctions.nil?
        _ha = Array.new
        drugsAndRenalFunctions.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['drugsAndRenalFunctions'] = _ha
      end
      return _h
    end

    #initializes this DrugsAndRenalFunctions with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['gfr'].nil?
          _oa = _o['gfr']
            if(_oa.is_a? Hash)
              @gfr = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @gfr =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @gfr = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @gfr.push Fixnum.from_json(_item)
                 else
                   @gfr.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @gfr = _oa
            end
          end
        if !_o['drugsAndRenalFunctions'].nil?
          _oa = _o['drugsAndRenalFunctions']
            if(_oa.is_a? Hash)
              @drugsAndRenalFunctions = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @drugsAndRenalFunctions =  Fi::Mediconsult::Core::Client::Dto::Paatoksentuki::DrugsAndRenalFunction.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @drugsAndRenalFunctions = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @drugsAndRenalFunctions.push Fi::Mediconsult::Core::Client::Dto::Paatoksentuki::DrugsAndRenalFunction.from_json(_item)
                 else
                   @drugsAndRenalFunctions.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @drugsAndRenalFunctions = _oa
            end
          end
    end

    # constructs a DrugsAndRenalFunctions from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class RiskSourceType

    # (no documentation provided)
    CARE_ORAGANISATION = "CARE_ORAGANISATION"

    # (no documentation provided)
    OTHER_ORAGANISATION = "OTHER_ORAGANISATION"

    # (no documentation provided)
    OFFICIAL = "OFFICIAL"

    # (no documentation provided)
    PATIENT = "PATIENT"

    # (no documentation provided)
    PATIENT_DELEGATE = "PATIENT_DELEGATE"

    # (no documentation provided)
    MOTHER = "MOTHER"

    # (no documentation provided)
    FATHER = "FATHER"

    # (no documentation provided)
    OTHER = "OTHER"
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Laakitys

  # (no documentation provided)
  class Yhteisvaikutus < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # (no documentation provided)
    attr_accessor :laake1
    # (no documentation provided)
    attr_accessor :laake2
    # (no documentation provided)
    attr_accessor :interaktio

    # the json hash for this Yhteisvaikutus
    def to_jaxb_json_hash
      _h = super
      _h['laake1'] = laake1.to_jaxb_json_hash unless laake1.nil?
      _h['laake2'] = laake2.to_jaxb_json_hash unless laake2.nil?
      _h['interaktio'] = interaktio.to_jaxb_json_hash unless interaktio.nil?
      return _h
    end

    #initializes this Yhteisvaikutus with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['laake1'].nil?
          _oa = _o['laake1']
            if(_oa.is_a? Hash)
              @laake1 = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laake1 =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laake1 = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laake1.push String.from_json(_item)
                 else
                   @laake1.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laake1 = _oa
            end
          end
        if !_o['laake2'].nil?
          _oa = _o['laake2']
            if(_oa.is_a? Hash)
              @laake2 = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laake2 =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laake2 = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laake2.push String.from_json(_item)
                 else
                   @laake2.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laake2 = _oa
            end
          end
        if !_o['interaktio'].nil?
          _oa = _o['interaktio']
            if(_oa.is_a? Hash)
              @interaktio = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @interaktio =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @interaktio = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @interaktio.push String.from_json(_item)
                 else
                   @interaktio.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @interaktio = _oa
            end
          end
    end

    # constructs a Yhteisvaikutus from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Laakitys

  # (no documentation provided)
  class LaakeAnnostusSoveltuvuus < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # Returns the vnr code of the medicine
    attr_accessor :laake
    # Returns the origin of the dosage
    # -&#39;O&#39; if current organization
    # -&#39;A&#39; or &#39;M&#39; otherwise
    attr_accessor :alkupera
    # 
    attr_accessor :annostus

    # the json hash for this LaakeAnnostusSoveltuvuus
    def to_jaxb_json_hash
      _h = super
      _h['laake'] = laake.to_jaxb_json_hash unless laake.nil?
      _h['alkupera'] = alkupera.to_jaxb_json_hash unless alkupera.nil?
      _h['annostus'] = annostus.to_jaxb_json_hash unless annostus.nil?
      return _h
    end

    #initializes this LaakeAnnostusSoveltuvuus with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['laake'].nil?
          _oa = _o['laake']
            if(_oa.is_a? Hash)
              @laake = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laake =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laake = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laake.push String.from_json(_item)
                 else
                   @laake.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laake = _oa
            end
          end
        if !_o['alkupera'].nil?
          _oa = _o['alkupera']
            if(_oa.is_a? Hash)
              @alkupera = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @alkupera =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @alkupera = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @alkupera.push Fixnum.from_json(_item)
                 else
                   @alkupera.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @alkupera = _oa
            end
          end
        if !_o['annostus'].nil?
          _oa = _o['annostus']
            if(_oa.is_a? Hash)
              @annostus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @annostus =  Fi::Mediconsult::Core::Client::Dto::Laakitys::LaakeAnnostus.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @annostus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @annostus.push Fi::Mediconsult::Core::Client::Dto::Laakitys::LaakeAnnostus.from_json(_item)
                 else
                   @annostus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @annostus = _oa
            end
          end
    end

    # constructs a LaakeAnnostusSoveltuvuus from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Paatoksentuki

  # (no documentation provided)
  class Reminder < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # (no documentation provided)
    attr_accessor :scriptID
    # (no documentation provided)
    attr_accessor :reminderID
    # (no documentation provided)
    attr_accessor :reminderShort
    # (no documentation provided)
    attr_accessor :reminderLong
    # (no documentation provided)
    attr_accessor :reminderNurse
    # (no documentation provided)
    attr_accessor :reminderPatient
    # (no documentation provided)
    attr_accessor :reminderLevel
    # (no documentation provided)
    attr_accessor :reminderType

    # the json hash for this Reminder
    def to_jaxb_json_hash
      _h = super
      _h['scriptID'] = scriptID.to_jaxb_json_hash unless scriptID.nil?
      _h['reminderID'] = reminderID.to_jaxb_json_hash unless reminderID.nil?
      _h['reminderShort'] = reminderShort.to_jaxb_json_hash unless reminderShort.nil?
      _h['reminderLong'] = reminderLong.to_jaxb_json_hash unless reminderLong.nil?
      _h['reminderNurse'] = reminderNurse.to_jaxb_json_hash unless reminderNurse.nil?
      _h['reminderPatient'] = reminderPatient.to_jaxb_json_hash unless reminderPatient.nil?
      _h['reminderLevel'] = reminderLevel.to_jaxb_json_hash unless reminderLevel.nil?
      _h['reminderType'] = reminderType.to_jaxb_json_hash unless reminderType.nil?
      return _h
    end

    #initializes this Reminder with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['scriptID'].nil?
          _oa = _o['scriptID']
            if(_oa.is_a? Hash)
              @scriptID = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @scriptID =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @scriptID = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @scriptID.push String.from_json(_item)
                 else
                   @scriptID.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @scriptID = _oa
            end
          end
        if !_o['reminderID'].nil?
          _oa = _o['reminderID']
            if(_oa.is_a? Hash)
              @reminderID = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @reminderID =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @reminderID = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @reminderID.push Bignum.from_json(_item)
                 else
                   @reminderID.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @reminderID = _oa
            end
          end
        if !_o['reminderShort'].nil?
          _oa = _o['reminderShort']
            if(_oa.is_a? Hash)
              @reminderShort = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @reminderShort =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @reminderShort = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @reminderShort.push String.from_json(_item)
                 else
                   @reminderShort.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @reminderShort = _oa
            end
          end
        if !_o['reminderLong'].nil?
          _oa = _o['reminderLong']
            if(_oa.is_a? Hash)
              @reminderLong = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @reminderLong =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @reminderLong = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @reminderLong.push String.from_json(_item)
                 else
                   @reminderLong.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @reminderLong = _oa
            end
          end
        if !_o['reminderNurse'].nil?
          _oa = _o['reminderNurse']
            if(_oa.is_a? Hash)
              @reminderNurse = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @reminderNurse =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @reminderNurse = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @reminderNurse.push String.from_json(_item)
                 else
                   @reminderNurse.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @reminderNurse = _oa
            end
          end
        if !_o['reminderPatient'].nil?
          _oa = _o['reminderPatient']
            if(_oa.is_a? Hash)
              @reminderPatient = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @reminderPatient =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @reminderPatient = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @reminderPatient.push String.from_json(_item)
                 else
                   @reminderPatient.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @reminderPatient = _oa
            end
          end
        if !_o['reminderLevel'].nil?
          _oa = _o['reminderLevel']
            if(_oa.is_a? Hash)
              @reminderLevel = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @reminderLevel =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @reminderLevel = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @reminderLevel.push Fixnum.from_json(_item)
                 else
                   @reminderLevel.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @reminderLevel = _oa
            end
          end
        if !_o['reminderType'].nil?
          _oa = _o['reminderType']
            if(_oa.is_a? Hash)
              @reminderType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @reminderType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @reminderType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @reminderType.push Fixnum.from_json(_item)
                 else
                   @reminderType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @reminderType = _oa
            end
          end
    end

    # constructs a Reminder from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class ExtendFormInfo < Fi::Mediconsult::Core::Client::Dto::FormInfo 

    # (no documentation provided)
    attr_accessor :lomakeId
    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :hoitosuhdevaatimus
    # (no documentation provided)
    attr_accessor :vastuuyksikko
    # (no documentation provided)
    attr_accessor :pohjavari

    # the json hash for this ExtendFormInfo
    def to_jaxb_json_hash
      _h = super
      _h['lomakeId'] = lomakeId.to_jaxb_json_hash unless lomakeId.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['hoitosuhdevaatimus'] = hoitosuhdevaatimus.to_jaxb_json_hash unless hoitosuhdevaatimus.nil?
      _h['vastuuyksikko'] = vastuuyksikko.to_jaxb_json_hash unless vastuuyksikko.nil?
      _h['pohjavari'] = pohjavari.to_jaxb_json_hash unless pohjavari.nil?
      return _h
    end

    #initializes this ExtendFormInfo with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['lomakeId'].nil?
          _oa = _o['lomakeId']
            if(_oa.is_a? Hash)
              @lomakeId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lomakeId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lomakeId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lomakeId.push Fixnum.from_json(_item)
                 else
                   @lomakeId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lomakeId = _oa
            end
          end
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['hoitosuhdevaatimus'].nil?
          _oa = _o['hoitosuhdevaatimus']
            if(_oa.is_a? Hash)
              @hoitosuhdevaatimus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @hoitosuhdevaatimus =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @hoitosuhdevaatimus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @hoitosuhdevaatimus.push Boolean.from_json(_item)
                 else
                   @hoitosuhdevaatimus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @hoitosuhdevaatimus = _oa
            end
          end
        if !_o['vastuuyksikko'].nil?
          _oa = _o['vastuuyksikko']
            if(_oa.is_a? Hash)
              @vastuuyksikko = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vastuuyksikko =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vastuuyksikko = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vastuuyksikko.push Fixnum.from_json(_item)
                 else
                   @vastuuyksikko.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vastuuyksikko = _oa
            end
          end
        if !_o['pohjavari'].nil?
          _oa = _o['pohjavari']
            if(_oa.is_a? Hash)
              @pohjavari = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @pohjavari =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @pohjavari = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @pohjavari.push Fixnum.from_json(_item)
                 else
                   @pohjavari.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @pohjavari = _oa
            end
          end
    end

    # constructs a ExtendFormInfo from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class OsastolistaTilannekoodi < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # (no documentation provided)
    attr_accessor :koodi
    # (no documentation provided)
    attr_accessor :variRGB
    # (no documentation provided)
    attr_accessor :selitys
    # (no documentation provided)
    attr_accessor :vihje

    # the json hash for this OsastolistaTilannekoodi
    def to_jaxb_json_hash
      _h = super
      _h['koodi'] = koodi.to_jaxb_json_hash unless koodi.nil?
      _h['variRGB'] = variRGB.to_jaxb_json_hash unless variRGB.nil?
      _h['selitys'] = selitys.to_jaxb_json_hash unless selitys.nil?
      _h['vihje'] = vihje.to_jaxb_json_hash unless vihje.nil?
      return _h
    end

    #initializes this OsastolistaTilannekoodi with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['koodi'].nil?
          _oa = _o['koodi']
            if(_oa.is_a? Hash)
              @koodi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @koodi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @koodi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @koodi.push String.from_json(_item)
                 else
                   @koodi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @koodi = _oa
            end
          end
        if !_o['variRGB'].nil?
          _oa = _o['variRGB']
            if(_oa.is_a? Hash)
              @variRGB = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @variRGB =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @variRGB = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @variRGB.push String.from_json(_item)
                 else
                   @variRGB.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @variRGB = _oa
            end
          end
        if !_o['selitys'].nil?
          _oa = _o['selitys']
            if(_oa.is_a? Hash)
              @selitys = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @selitys =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @selitys = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @selitys.push String.from_json(_item)
                 else
                   @selitys.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @selitys = _oa
            end
          end
        if !_o['vihje'].nil?
          _oa = _o['vihje']
            if(_oa.is_a? Hash)
              @vihje = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vihje =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vihje = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vihje.push String.from_json(_item)
                 else
                   @vihje.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vihje = _oa
            end
          end
    end

    # constructs a OsastolistaTilannekoodi from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Laakitys

  # (no documentation provided)
  class Antoreitti < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # (no documentation provided)
    attr_accessor :koodi
    # (no documentation provided)
    attr_accessor :lyhenne

    # the json hash for this Antoreitti
    def to_jaxb_json_hash
      _h = super
      _h['koodi'] = koodi.to_jaxb_json_hash unless koodi.nil?
      _h['lyhenne'] = lyhenne.to_jaxb_json_hash unless lyhenne.nil?
      return _h
    end

    #initializes this Antoreitti with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['koodi'].nil?
          _oa = _o['koodi']
            if(_oa.is_a? Hash)
              @koodi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @koodi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @koodi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @koodi.push String.from_json(_item)
                 else
                   @koodi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @koodi = _oa
            end
          end
        if !_o['lyhenne'].nil?
          _oa = _o['lyhenne']
            if(_oa.is_a? Hash)
              @lyhenne = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lyhenne =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lyhenne = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lyhenne.push String.from_json(_item)
                 else
                   @lyhenne.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lyhenne = _oa
            end
          end
    end

    # constructs a Antoreitti from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Laakitys

  # (no documentation provided)
  class LaakitysTauko < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # Returns the starting time of the medication break
    attr_accessor :alkaa
    # Returns the ending time of the medication break
    attr_accessor :loppuu
    # Returns the notes about the medication break
    attr_accessor :huomautuksia
    # Returns the id of an user who started the medication break
    attr_accessor :aloittaja
    # Returns the id of an user who ended the medication break
    attr_accessor :lopettaja
    # Returns the code of the medication break removal. &#39;E&#39; - not removed, &#39;K&#39; = removed
    attr_accessor :poistettu
    # Returns the actual DB-change time of the medication break
    attr_accessor :muutosaika
    # Returns the organization in which the change has been made
    attr_accessor :muutospaikka
    # (no documentation provided)
    attr_accessor :alkaaNew

    # the json hash for this LaakitysTauko
    def to_jaxb_json_hash
      _h = super
      _h['alkaa'] = alkaa.to_jaxb_json_hash unless alkaa.nil?
      _h['loppuu'] = loppuu.to_jaxb_json_hash unless loppuu.nil?
      _h['huomautuksia'] = huomautuksia.to_jaxb_json_hash unless huomautuksia.nil?
      _h['aloittaja'] = aloittaja.to_jaxb_json_hash unless aloittaja.nil?
      _h['lopettaja'] = lopettaja.to_jaxb_json_hash unless lopettaja.nil?
      _h['poistettu'] = poistettu.to_jaxb_json_hash unless poistettu.nil?
      _h['muutosaika'] = muutosaika.to_jaxb_json_hash unless muutosaika.nil?
      _h['muutospaikka'] = muutospaikka.to_jaxb_json_hash unless muutospaikka.nil?
      _h['alkaaNew'] = alkaaNew.to_jaxb_json_hash unless alkaaNew.nil?
      return _h
    end

    #initializes this LaakitysTauko with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['alkaa'].nil?
          _oa = _o['alkaa']
            if(_oa.is_a? Hash)
              @alkaa = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @alkaa =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @alkaa = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @alkaa.push Time.from_json(_item)
                 else
                   @alkaa.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @alkaa = _oa
            end
          end
        if !_o['loppuu'].nil?
          _oa = _o['loppuu']
            if(_oa.is_a? Hash)
              @loppuu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @loppuu =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @loppuu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @loppuu.push Time.from_json(_item)
                 else
                   @loppuu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @loppuu = _oa
            end
          end
        if !_o['huomautuksia'].nil?
          _oa = _o['huomautuksia']
            if(_oa.is_a? Hash)
              @huomautuksia = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @huomautuksia =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @huomautuksia = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @huomautuksia.push String.from_json(_item)
                 else
                   @huomautuksia.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @huomautuksia = _oa
            end
          end
        if !_o['aloittaja'].nil?
          _oa = _o['aloittaja']
            if(_oa.is_a? Hash)
              @aloittaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @aloittaja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @aloittaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @aloittaja.push Fixnum.from_json(_item)
                 else
                   @aloittaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @aloittaja = _oa
            end
          end
        if !_o['lopettaja'].nil?
          _oa = _o['lopettaja']
            if(_oa.is_a? Hash)
              @lopettaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lopettaja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lopettaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lopettaja.push Fixnum.from_json(_item)
                 else
                   @lopettaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lopettaja = _oa
            end
          end
        if !_o['poistettu'].nil?
          _oa = _o['poistettu']
            if(_oa.is_a? Hash)
              @poistettu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @poistettu =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @poistettu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @poistettu.push Fixnum.from_json(_item)
                 else
                   @poistettu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @poistettu = _oa
            end
          end
        if !_o['muutosaika'].nil?
          _oa = _o['muutosaika']
            if(_oa.is_a? Hash)
              @muutosaika = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @muutosaika =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @muutosaika = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @muutosaika.push Time.from_json(_item)
                 else
                   @muutosaika.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @muutosaika = _oa
            end
          end
        if !_o['muutospaikka'].nil?
          _oa = _o['muutospaikka']
            if(_oa.is_a? Hash)
              @muutospaikka = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @muutospaikka =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @muutospaikka = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @muutospaikka.push Fixnum.from_json(_item)
                 else
                   @muutospaikka.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @muutospaikka = _oa
            end
          end
        if !_o['alkaaNew'].nil?
          _oa = _o['alkaaNew']
            if(_oa.is_a? Hash)
              @alkaaNew = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @alkaaNew =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @alkaaNew = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @alkaaNew.push Time.from_json(_item)
                 else
                   @alkaaNew.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @alkaaNew = _oa
            end
          end
    end

    # constructs a LaakitysTauko from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Title

module Config

  # (no documentation provided)
  class RiskTitleConfig < Fi::Mediconsult::Core::Client::Dto::Title::Config::ClientTitleConfig 

    # (no documentation provided)
    attr_accessor :riskCancelations
    # (no documentation provided)
    attr_accessor :riskSources
    # (no documentation provided)
    attr_accessor :riskTypeCodexUrl
    # (no documentation provided)
    attr_accessor :riskTypeCodexVersion
    # (no documentation provided)
    attr_accessor :riskTypeCodex
    # (no documentation provided)
    attr_accessor :riskLevel
    # (no documentation provided)
    attr_accessor :riskPermanency
    # (no documentation provided)
    attr_accessor :riskCertainty

    # the json hash for this RiskTitleConfig
    def to_jaxb_json_hash
      _h = super
      _h['riskCancelations'] = riskCancelations.to_jaxb_json_hash unless riskCancelations.nil?
      _h['riskSources'] = riskSources.to_jaxb_json_hash unless riskSources.nil?
      _h['riskTypeCodexUrl'] = riskTypeCodexUrl.to_jaxb_json_hash unless riskTypeCodexUrl.nil?
      _h['riskTypeCodexVersion'] = riskTypeCodexVersion.to_jaxb_json_hash unless riskTypeCodexVersion.nil?
      _h['riskTypeCodex'] = riskTypeCodex.to_jaxb_json_hash unless riskTypeCodex.nil?
      _h['riskLevel'] = riskLevel.to_jaxb_json_hash unless riskLevel.nil?
      _h['riskPermanency'] = riskPermanency.to_jaxb_json_hash unless riskPermanency.nil?
      _h['riskCertainty'] = riskCertainty.to_jaxb_json_hash unless riskCertainty.nil?
      return _h
    end

    #initializes this RiskTitleConfig with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['riskCancelations'].nil?
          _oa = _o['riskCancelations']
            if(_oa.is_a? Hash)
              @riskCancelations = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @riskCancelations =  com.fasterxml.jackson.databind::JsonNode.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @riskCancelations = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @riskCancelations.push com.fasterxml.jackson.databind::JsonNode.from_json(_item)
                 else
                   @riskCancelations.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @riskCancelations = _oa
            end
          end
        if !_o['riskSources'].nil?
          _oa = _o['riskSources']
            if(_oa.is_a? Hash)
              @riskSources = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @riskSources =  com.fasterxml.jackson.databind::JsonNode.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @riskSources = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @riskSources.push com.fasterxml.jackson.databind::JsonNode.from_json(_item)
                 else
                   @riskSources.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @riskSources = _oa
            end
          end
        if !_o['riskTypeCodexUrl'].nil?
          _oa = _o['riskTypeCodexUrl']
            if(_oa.is_a? Hash)
              @riskTypeCodexUrl = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @riskTypeCodexUrl =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @riskTypeCodexUrl = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @riskTypeCodexUrl.push String.from_json(_item)
                 else
                   @riskTypeCodexUrl.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @riskTypeCodexUrl = _oa
            end
          end
        if !_o['riskTypeCodexVersion'].nil?
          _oa = _o['riskTypeCodexVersion']
            if(_oa.is_a? Hash)
              @riskTypeCodexVersion = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @riskTypeCodexVersion =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @riskTypeCodexVersion = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @riskTypeCodexVersion.push String.from_json(_item)
                 else
                   @riskTypeCodexVersion.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @riskTypeCodexVersion = _oa
            end
          end
        if !_o['riskTypeCodex'].nil?
          _oa = _o['riskTypeCodex']
            if(_oa.is_a? Hash)
              @riskTypeCodex = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @riskTypeCodex =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @riskTypeCodex = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @riskTypeCodex.push String.from_json(_item)
                 else
                   @riskTypeCodex.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @riskTypeCodex = _oa
            end
          end
        if !_o['riskLevel'].nil?
          _oa = _o['riskLevel']
            if(_oa.is_a? Hash)
              @riskLevel = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @riskLevel =  com.fasterxml.jackson.databind::JsonNode.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @riskLevel = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @riskLevel.push com.fasterxml.jackson.databind::JsonNode.from_json(_item)
                 else
                   @riskLevel.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @riskLevel = _oa
            end
          end
        if !_o['riskPermanency'].nil?
          _oa = _o['riskPermanency']
            if(_oa.is_a? Hash)
              @riskPermanency = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @riskPermanency =  com.fasterxml.jackson.databind.node::ArrayNode.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @riskPermanency = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @riskPermanency.push com.fasterxml.jackson.databind.node::ArrayNode.from_json(_item)
                 else
                   @riskPermanency.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @riskPermanency = _oa
            end
          end
        if !_o['riskCertainty'].nil?
          _oa = _o['riskCertainty']
            if(_oa.is_a? Hash)
              @riskCertainty = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @riskCertainty =  com.fasterxml.jackson.databind.node::ArrayNode.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @riskCertainty = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @riskCertainty.push com.fasterxml.jackson.databind.node::ArrayNode.from_json(_item)
                 else
                   @riskCertainty.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @riskCertainty = _oa
            end
          end
    end

    # constructs a RiskTitleConfig from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Fi

module Mediconsult

module Medisos

module Dto

  # (no documentation provided)
  class OsastonKassaDto < Fi::Mediconsult::Medisos::Dto::MediSosDtoBase 

    # (no documentation provided)
    attr_accessor :transaktionumero
    # (no documentation provided)
    attr_accessor :omistaja
    # (no documentation provided)
    attr_accessor :omistajaInfo
    # (no documentation provided)
    attr_accessor :laatija
    # (no documentation provided)
    attr_accessor :laatijaInfo
    # (no documentation provided)
    attr_accessor :saldo
    # (no documentation provided)
    attr_accessor :tapahtuma
    # (no documentation provided)
    attr_accessor :selite
    # (no documentation provided)
    attr_accessor :tapahtumanAjankohta
    # (no documentation provided)
    attr_accessor :formId

    # the json hash for this OsastonKassaDto
    def to_jaxb_json_hash
      _h = super
      _h['transaktionumero'] = transaktionumero.to_jaxb_json_hash unless transaktionumero.nil?
      _h['omistaja'] = omistaja.to_jaxb_json_hash unless omistaja.nil?
      _h['omistajaInfo'] = omistajaInfo.to_jaxb_json_hash unless omistajaInfo.nil?
      _h['laatija'] = laatija.to_jaxb_json_hash unless laatija.nil?
      _h['laatijaInfo'] = laatijaInfo.to_jaxb_json_hash unless laatijaInfo.nil?
      _h['saldo'] = saldo.to_jaxb_json_hash unless saldo.nil?
      _h['tapahtuma'] = tapahtuma.to_jaxb_json_hash unless tapahtuma.nil?
      _h['selite'] = selite.to_jaxb_json_hash unless selite.nil?
      _h['tapahtumanAjankohta'] = tapahtumanAjankohta.to_jaxb_json_hash unless tapahtumanAjankohta.nil?
      _h['formId'] = formId.to_jaxb_json_hash unless formId.nil?
      return _h
    end

    #initializes this OsastonKassaDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['transaktionumero'].nil?
          _oa = _o['transaktionumero']
            if(_oa.is_a? Hash)
              @transaktionumero = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @transaktionumero =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @transaktionumero = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @transaktionumero.push Fixnum.from_json(_item)
                 else
                   @transaktionumero.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @transaktionumero = _oa
            end
          end
        if !_o['omistaja'].nil?
          _oa = _o['omistaja']
            if(_oa.is_a? Hash)
              @omistaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @omistaja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @omistaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @omistaja.push Fixnum.from_json(_item)
                 else
                   @omistaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @omistaja = _oa
            end
          end
        if !_o['omistajaInfo'].nil?
          _oa = _o['omistajaInfo']
            if(_oa.is_a? Hash)
              @omistajaInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @omistajaInfo =  Fi::Mediconsult::Core::Client::Dto::Omistaja::Patient.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @omistajaInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @omistajaInfo.push Fi::Mediconsult::Core::Client::Dto::Omistaja::Patient.from_json(_item)
                 else
                   @omistajaInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @omistajaInfo = _oa
            end
          end
        if !_o['laatija'].nil?
          _oa = _o['laatija']
            if(_oa.is_a? Hash)
              @laatija = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laatija =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laatija = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laatija.push Fixnum.from_json(_item)
                 else
                   @laatija.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laatija = _oa
            end
          end
        if !_o['laatijaInfo'].nil?
          _oa = _o['laatijaInfo']
            if(_oa.is_a? Hash)
              @laatijaInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laatijaInfo =  Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laatijaInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laatijaInfo.push Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_item)
                 else
                   @laatijaInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laatijaInfo = _oa
            end
          end
        if !_o['saldo'].nil?
          _oa = _o['saldo']
            if(_oa.is_a? Hash)
              @saldo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @saldo =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @saldo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @saldo.push Float.from_json(_item)
                 else
                   @saldo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @saldo = _oa
            end
          end
        if !_o['tapahtuma'].nil?
          _oa = _o['tapahtuma']
            if(_oa.is_a? Hash)
              @tapahtuma = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tapahtuma =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tapahtuma = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tapahtuma.push Float.from_json(_item)
                 else
                   @tapahtuma.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tapahtuma = _oa
            end
          end
        if !_o['selite'].nil?
          _oa = _o['selite']
            if(_oa.is_a? Hash)
              @selite = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @selite =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @selite = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @selite.push String.from_json(_item)
                 else
                   @selite.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @selite = _oa
            end
          end
        if !_o['tapahtumanAjankohta'].nil?
          _oa = _o['tapahtumanAjankohta']
            if(_oa.is_a? Hash)
              @tapahtumanAjankohta = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tapahtumanAjankohta =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tapahtumanAjankohta = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tapahtumanAjankohta.push Time.from_json(_item)
                 else
                   @tapahtumanAjankohta.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tapahtumanAjankohta = _oa
            end
          end
        if !_o['formId'].nil?
          _oa = _o['formId']
            if(_oa.is_a? Hash)
              @formId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @formId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @formId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @formId.push Fixnum.from_json(_item)
                 else
                   @formId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @formId = _oa
            end
          end
    end

    # constructs a OsastonKassaDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Medisos

module Dto

  # (no documentation provided)
  class DocumentInformationDto < Fi::Mediconsult::Medisos::Dto::MediSosDtoBase 

    # (no documentation provided)
    attr_accessor :documentNimi
    # (no documentation provided)
    attr_accessor :laatija
    # (no documentation provided)
    attr_accessor :laatijaInfo
    # (no documentation provided)
    attr_accessor :documentId
    # (no documentation provided)
    attr_accessor :documentTila
    # (no documentation provided)
    attr_accessor :documentTyyppi
    # (no documentation provided)
    attr_accessor :toimiala
    # (no documentation provided)
    attr_accessor :palveluyksikko
    # (no documentation provided)
    attr_accessor :palveluyksikkoNimi

    # the json hash for this DocumentInformationDto
    def to_jaxb_json_hash
      _h = super
      _h['documentNimi'] = documentNimi.to_jaxb_json_hash unless documentNimi.nil?
      _h['laatija'] = laatija.to_jaxb_json_hash unless laatija.nil?
      _h['laatijaInfo'] = laatijaInfo.to_jaxb_json_hash unless laatijaInfo.nil?
      _h['documentId'] = documentId.to_jaxb_json_hash unless documentId.nil?
      _h['documentTila'] = documentTila.to_jaxb_json_hash unless documentTila.nil?
      _h['documentTyyppi'] = documentTyyppi.to_jaxb_json_hash unless documentTyyppi.nil?
      _h['toimiala'] = toimiala.to_jaxb_json_hash unless toimiala.nil?
      _h['palveluyksikko'] = palveluyksikko.to_jaxb_json_hash unless palveluyksikko.nil?
      _h['palveluyksikkoNimi'] = palveluyksikkoNimi.to_jaxb_json_hash unless palveluyksikkoNimi.nil?
      return _h
    end

    #initializes this DocumentInformationDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['documentNimi'].nil?
          _oa = _o['documentNimi']
            if(_oa.is_a? Hash)
              @documentNimi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @documentNimi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @documentNimi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @documentNimi.push String.from_json(_item)
                 else
                   @documentNimi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @documentNimi = _oa
            end
          end
        if !_o['laatija'].nil?
          _oa = _o['laatija']
            if(_oa.is_a? Hash)
              @laatija = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laatija =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laatija = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laatija.push Fixnum.from_json(_item)
                 else
                   @laatija.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laatija = _oa
            end
          end
        if !_o['laatijaInfo'].nil?
          _oa = _o['laatijaInfo']
            if(_oa.is_a? Hash)
              @laatijaInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laatijaInfo =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laatijaInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laatijaInfo.push String.from_json(_item)
                 else
                   @laatijaInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laatijaInfo = _oa
            end
          end
        if !_o['documentId'].nil?
          _oa = _o['documentId']
            if(_oa.is_a? Hash)
              @documentId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @documentId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @documentId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @documentId.push Bignum.from_json(_item)
                 else
                   @documentId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @documentId = _oa
            end
          end
        if !_o['documentTila'].nil?
          _oa = _o['documentTila']
            if(_oa.is_a? Hash)
              @documentTila = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @documentTila =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @documentTila = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @documentTila.push String.from_json(_item)
                 else
                   @documentTila.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @documentTila = _oa
            end
          end
        if !_o['documentTyyppi'].nil?
          _oa = _o['documentTyyppi']
            if(_oa.is_a? Hash)
              @documentTyyppi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @documentTyyppi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @documentTyyppi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @documentTyyppi.push String.from_json(_item)
                 else
                   @documentTyyppi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @documentTyyppi = _oa
            end
          end
        if !_o['toimiala'].nil?
          _oa = _o['toimiala']
            if(_oa.is_a? Hash)
              @toimiala = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @toimiala =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @toimiala = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @toimiala.push String.from_json(_item)
                 else
                   @toimiala.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @toimiala = _oa
            end
          end
        if !_o['palveluyksikko'].nil?
          _oa = _o['palveluyksikko']
            if(_oa.is_a? Hash)
              @palveluyksikko = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palveluyksikko =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palveluyksikko = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palveluyksikko.push Fixnum.from_json(_item)
                 else
                   @palveluyksikko.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palveluyksikko = _oa
            end
          end
        if !_o['palveluyksikkoNimi'].nil?
          _oa = _o['palveluyksikkoNimi']
            if(_oa.is_a? Hash)
              @palveluyksikkoNimi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palveluyksikkoNimi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palveluyksikkoNimi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palveluyksikkoNimi.push String.from_json(_item)
                 else
                   @palveluyksikkoNimi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palveluyksikkoNimi = _oa
            end
          end
    end

    # constructs a DocumentInformationDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Course

  # (no documentation provided)
  class CourseEventWorkerCopyOption

    # (no documentation provided)
    ALL_WORKERS_COPIED = "ALL_WORKERS_COPIED"

    # (no documentation provided)
    ONLY_WORKERS_IN_NAMED_GROUP_COPIED = "ONLY_WORKERS_IN_NAMED_GROUP_COPIED"

    # (no documentation provided)
    NO_WORKERS_COPIED = "NO_WORKERS_COPIED"
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Paatoksentuki

  # (no documentation provided)
  class System < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # (no documentation provided)
    attr_accessor :queryID
    # (no documentation provided)
    attr_accessor :elapsedTime
    # (no documentation provided)
    attr_accessor :debugMessages
    # (no documentation provided)
    attr_accessor :failStatus
    # (no documentation provided)
    attr_accessor :exceptions

    # the json hash for this System
    def to_jaxb_json_hash
      _h = super
      _h['queryID'] = queryID.to_jaxb_json_hash unless queryID.nil?
      _h['elapsedTime'] = elapsedTime.to_jaxb_json_hash unless elapsedTime.nil?
      if !debugMessages.nil?
        _ha = Array.new
        debugMessages.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['debugMessages'] = _ha
      end
      _h['failStatus'] = failStatus.to_jaxb_json_hash unless failStatus.nil?
      if !exceptions.nil?
        _ha = Array.new
        exceptions.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['exceptions'] = _ha
      end
      return _h
    end

    #initializes this System with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['queryID'].nil?
          _oa = _o['queryID']
            if(_oa.is_a? Hash)
              @queryID = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @queryID =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @queryID = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @queryID.push String.from_json(_item)
                 else
                   @queryID.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @queryID = _oa
            end
          end
        if !_o['elapsedTime'].nil?
          _oa = _o['elapsedTime']
            if(_oa.is_a? Hash)
              @elapsedTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @elapsedTime =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @elapsedTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @elapsedTime.push String.from_json(_item)
                 else
                   @elapsedTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @elapsedTime = _oa
            end
          end
        if !_o['debugMessages'].nil?
          _oa = _o['debugMessages']
            if(_oa.is_a? Hash)
              @debugMessages = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @debugMessages =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @debugMessages = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @debugMessages.push String.from_json(_item)
                 else
                   @debugMessages.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @debugMessages = _oa
            end
          end
        if !_o['failStatus'].nil?
          _oa = _o['failStatus']
            if(_oa.is_a? Hash)
              @failStatus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @failStatus =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @failStatus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @failStatus.push String.from_json(_item)
                 else
                   @failStatus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @failStatus = _oa
            end
          end
        if !_o['exceptions'].nil?
          _oa = _o['exceptions']
            if(_oa.is_a? Hash)
              @exceptions = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @exceptions =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @exceptions = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @exceptions.push String.from_json(_item)
                 else
                   @exceptions.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @exceptions = _oa
            end
          end
    end

    # constructs a System from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Palvelupaatos

  # (no documentation provided)
  class Palvelukeskeytys < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # (no documentation provided)
    attr_accessor :alkaa
    # (no documentation provided)
    attr_accessor :paatos
    # (no documentation provided)
    attr_accessor :syy
    # (no documentation provided)
    attr_accessor :loppuu
    # (no documentation provided)
    attr_accessor :alkuaika
    # (no documentation provided)
    attr_accessor :loppuaika
    # (no documentation provided)
    attr_accessor :alusta
    # (no documentation provided)
    attr_accessor :laskutetaan
    # (no documentation provided)
    attr_accessor :huomautuksia
    # (no documentation provided)
    attr_accessor :muutosaika
    # (no documentation provided)
    attr_accessor :poistettu

    # the json hash for this Palvelukeskeytys
    def to_jaxb_json_hash
      _h = super
      _h['alkaa'] = alkaa.to_jaxb_json_hash unless alkaa.nil?
      _h['paatos'] = paatos.to_jaxb_json_hash unless paatos.nil?
      _h['syy'] = syy.to_jaxb_json_hash unless syy.nil?
      _h['loppuu'] = loppuu.to_jaxb_json_hash unless loppuu.nil?
      _h['alkuaika'] = alkuaika.to_jaxb_json_hash unless alkuaika.nil?
      _h['loppuaika'] = loppuaika.to_jaxb_json_hash unless loppuaika.nil?
      _h['alusta'] = alusta.to_jaxb_json_hash unless alusta.nil?
      _h['laskutetaan'] = laskutetaan.to_jaxb_json_hash unless laskutetaan.nil?
      _h['huomautuksia'] = huomautuksia.to_jaxb_json_hash unless huomautuksia.nil?
      _h['muutosaika'] = muutosaika.to_jaxb_json_hash unless muutosaika.nil?
      _h['poistettu'] = poistettu.to_jaxb_json_hash unless poistettu.nil?
      return _h
    end

    #initializes this Palvelukeskeytys with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['alkaa'].nil?
          _oa = _o['alkaa']
            if(_oa.is_a? Hash)
              @alkaa = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @alkaa =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @alkaa = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @alkaa.push Bignum.from_json(_item)
                 else
                   @alkaa.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @alkaa = _oa
            end
          end
        if !_o['paatos'].nil?
          _oa = _o['paatos']
            if(_oa.is_a? Hash)
              @paatos = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @paatos =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @paatos = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @paatos.push Fixnum.from_json(_item)
                 else
                   @paatos.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @paatos = _oa
            end
          end
        if !_o['syy'].nil?
          _oa = _o['syy']
            if(_oa.is_a? Hash)
              @syy = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @syy =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @syy = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @syy.push String.from_json(_item)
                 else
                   @syy.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @syy = _oa
            end
          end
        if !_o['loppuu'].nil?
          _oa = _o['loppuu']
            if(_oa.is_a? Hash)
              @loppuu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @loppuu =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @loppuu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @loppuu.push Bignum.from_json(_item)
                 else
                   @loppuu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @loppuu = _oa
            end
          end
        if !_o['alkuaika'].nil?
          _oa = _o['alkuaika']
            if(_oa.is_a? Hash)
              @alkuaika = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @alkuaika =  java.time::LocalTime.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @alkuaika = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @alkuaika.push java.time::LocalTime.from_json(_item)
                 else
                   @alkuaika.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @alkuaika = _oa
            end
          end
        if !_o['loppuaika'].nil?
          _oa = _o['loppuaika']
            if(_oa.is_a? Hash)
              @loppuaika = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @loppuaika =  java.time::LocalTime.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @loppuaika = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @loppuaika.push java.time::LocalTime.from_json(_item)
                 else
                   @loppuaika.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @loppuaika = _oa
            end
          end
        if !_o['alusta'].nil?
          _oa = _o['alusta']
            if(_oa.is_a? Hash)
              @alusta = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @alusta =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @alusta = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @alusta.push Boolean.from_json(_item)
                 else
                   @alusta.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @alusta = _oa
            end
          end
        if !_o['laskutetaan'].nil?
          _oa = _o['laskutetaan']
            if(_oa.is_a? Hash)
              @laskutetaan = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laskutetaan =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laskutetaan = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laskutetaan.push Fixnum.from_json(_item)
                 else
                   @laskutetaan.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laskutetaan = _oa
            end
          end
        if !_o['huomautuksia'].nil?
          _oa = _o['huomautuksia']
            if(_oa.is_a? Hash)
              @huomautuksia = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @huomautuksia =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @huomautuksia = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @huomautuksia.push String.from_json(_item)
                 else
                   @huomautuksia.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @huomautuksia = _oa
            end
          end
        if !_o['muutosaika'].nil?
          _oa = _o['muutosaika']
            if(_oa.is_a? Hash)
              @muutosaika = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @muutosaika =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @muutosaika = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @muutosaika.push Time.from_json(_item)
                 else
                   @muutosaika.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @muutosaika = _oa
            end
          end
        if !_o['poistettu'].nil?
          _oa = _o['poistettu']
            if(_oa.is_a? Hash)
              @poistettu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @poistettu =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @poistettu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @poistettu.push Boolean.from_json(_item)
                 else
                   @poistettu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @poistettu = _oa
            end
          end
    end

    # constructs a Palvelukeskeytys from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Palvelupaatos

  # (no documentation provided)
  class Tila

    # (no documentation provided)
    KESKEN = "KESKEN"

    # (no documentation provided)
    VALMIS = "VALMIS"

    # (no documentation provided)
    MITATOITY = "MITATOITY"
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Medisos

module Dto

  # (no documentation provided)
  class OmatyontekijaDto < Fi::Mediconsult::Medisos::Dto::MediSosDtoBase 

    # (no documentation provided)
    attr_accessor :soshuollonAsiakkuusId
    # (no documentation provided)
    attr_accessor :muuttajanumero
    # (no documentation provided)
    attr_accessor :ammattihenkilonumero
    # (no documentation provided)
    attr_accessor :ammattihenkiloInfoList
    # (no documentation provided)
    attr_accessor :formId

    # the json hash for this OmatyontekijaDto
    def to_jaxb_json_hash
      _h = super
      _h['soshuollonAsiakkuusId'] = soshuollonAsiakkuusId.to_jaxb_json_hash unless soshuollonAsiakkuusId.nil?
      _h['muuttajanumero'] = muuttajanumero.to_jaxb_json_hash unless muuttajanumero.nil?
      if !ammattihenkilonumero.nil?
        _ha = Array.new
        ammattihenkilonumero.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['ammattihenkilonumero'] = _ha
      end
      if !ammattihenkiloInfoList.nil?
        _ha = Array.new
        ammattihenkiloInfoList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['ammattihenkiloInfoList'] = _ha
      end
      _h['formId'] = formId.to_jaxb_json_hash unless formId.nil?
      return _h
    end

    #initializes this OmatyontekijaDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['soshuollonAsiakkuusId'].nil?
          _oa = _o['soshuollonAsiakkuusId']
            if(_oa.is_a? Hash)
              @soshuollonAsiakkuusId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @soshuollonAsiakkuusId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @soshuollonAsiakkuusId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @soshuollonAsiakkuusId.push Bignum.from_json(_item)
                 else
                   @soshuollonAsiakkuusId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @soshuollonAsiakkuusId = _oa
            end
          end
        if !_o['muuttajanumero'].nil?
          _oa = _o['muuttajanumero']
            if(_oa.is_a? Hash)
              @muuttajanumero = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @muuttajanumero =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @muuttajanumero = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @muuttajanumero.push Fixnum.from_json(_item)
                 else
                   @muuttajanumero.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @muuttajanumero = _oa
            end
          end
        if !_o['ammattihenkilonumero'].nil?
          _oa = _o['ammattihenkilonumero']
            if(_oa.is_a? Hash)
              @ammattihenkilonumero = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ammattihenkilonumero =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ammattihenkilonumero = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ammattihenkilonumero.push Fixnum.from_json(_item)
                 else
                   @ammattihenkilonumero.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ammattihenkilonumero = _oa
            end
          end
        if !_o['ammattihenkiloInfoList'].nil?
          _oa = _o['ammattihenkiloInfoList']
            if(_oa.is_a? Hash)
              @ammattihenkiloInfoList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ammattihenkiloInfoList =  Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ammattihenkiloInfoList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ammattihenkiloInfoList.push Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_item)
                 else
                   @ammattihenkiloInfoList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ammattihenkiloInfoList = _oa
            end
          end
        if !_o['formId'].nil?
          _oa = _o['formId']
            if(_oa.is_a? Hash)
              @formId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @formId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @formId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @formId.push Fixnum.from_json(_item)
                 else
                   @formId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @formId = _oa
            end
          end
    end

    # constructs a OmatyontekijaDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Planner

  # (no documentation provided)
  class TransitionType

    # (no documentation provided)
    UNDEFINED = "UNDEFINED"

    # (no documentation provided)
    CAR = "CAR"

    # (no documentation provided)
    BICYCLE = "BICYCLE"

    # (no documentation provided)
    AFOOT = "AFOOT"
  end

end

end

end

end

end

module Java

module Sql

  # (no documentation provided)
  class Time < Time 

    # (no documentation provided)
    attr_accessor :month
    # (no documentation provided)
    attr_accessor :year
    # (no documentation provided)
    attr_accessor :date
    # (no documentation provided)
    attr_accessor :day

    # the json hash for this Time
    def to_jaxb_json_hash
      _h = super
      _h['month'] = month.to_jaxb_json_hash unless month.nil?
      _h['year'] = year.to_jaxb_json_hash unless year.nil?
      _h['date'] = date.to_jaxb_json_hash unless date.nil?
      _h['day'] = day.to_jaxb_json_hash unless day.nil?
      return _h
    end

    #initializes this Time with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['month'].nil?
          _oa = _o['month']
            if(_oa.is_a? Hash)
              @month = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @month =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @month = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @month.push Fixnum.from_json(_item)
                 else
                   @month.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @month = _oa
            end
          end
        if !_o['year'].nil?
          _oa = _o['year']
            if(_oa.is_a? Hash)
              @year = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @year =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @year = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @year.push Fixnum.from_json(_item)
                 else
                   @year.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @year = _oa
            end
          end
        if !_o['date'].nil?
          _oa = _o['date']
            if(_oa.is_a? Hash)
              @date = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @date =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @date = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @date.push Fixnum.from_json(_item)
                 else
                   @date.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @date = _oa
            end
          end
        if !_o['day'].nil?
          _oa = _o['day']
            if(_oa.is_a? Hash)
              @day = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @day =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @day = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @day.push Fixnum.from_json(_item)
                 else
                   @day.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @day = _oa
            end
          end
    end

    # constructs a Time from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Title

  # (no documentation provided)
  class TitleSettings < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :type
    # String presentation of the value
    attr_accessor :presentation
    # (no documentation provided)
    attr_accessor :comments
    # instance of TitleBaseData
    attr_accessor :data
    # (no documentation provided)
    attr_accessor :linkedTitles
    # (no documentation provided)
    attr_accessor :row

    # the json hash for this TitleSettings
    def to_jaxb_json_hash
      _h = super
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['type'] = type.to_jaxb_json_hash unless type.nil?
      _h['presentation'] = presentation.to_jaxb_json_hash unless presentation.nil?
      if !comments.nil?
        _ha = Array.new
        comments.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['comments'] = _ha
      end
      _h['data'] = data.to_jaxb_json_hash unless data.nil?
      if !linkedTitles.nil?
        _ha = Array.new
        linkedTitles.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['linkedTitles'] = _ha
      end
      _h['row'] = row.to_jaxb_json_hash unless row.nil?
      return _h
    end

    #initializes this TitleSettings with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['type'].nil?
          _oa = _o['type']
            if(_oa.is_a? Hash)
              @type = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @type =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @type = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @type.push Fixnum.from_json(_item)
                 else
                   @type.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @type = _oa
            end
          end
        if !_o['presentation'].nil?
          _oa = _o['presentation']
            if(_oa.is_a? Hash)
              @presentation = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @presentation =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @presentation = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @presentation.push String.from_json(_item)
                 else
                   @presentation.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @presentation = _oa
            end
          end
        if !_o['comments'].nil?
          _oa = _o['comments']
            if(_oa.is_a? Hash)
              @comments = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @comments =  Fi::Mediconsult::Core::Client::Dto::Title::Data::TitleComment.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @comments = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @comments.push Fi::Mediconsult::Core::Client::Dto::Title::Data::TitleComment.from_json(_item)
                 else
                   @comments.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @comments = _oa
            end
          end
        if !_o['data'].nil?
          _oa = _o['data']
            if(_oa.is_a? Hash)
              @data = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @data =  Fi::Mediconsult::Core::Client::Dto::Title::Data::TitleData.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @data = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @data.push Fi::Mediconsult::Core::Client::Dto::Title::Data::TitleData.from_json(_item)
                 else
                   @data.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @data = _oa
            end
          end
        if !_o['linkedTitles'].nil?
          _oa = _o['linkedTitles']
            if(_oa.is_a? Hash)
              @linkedTitles = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @linkedTitles =  Fi::Mediconsult::Core::Client::Dto::Title::TitleSettings.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @linkedTitles = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @linkedTitles.push Fi::Mediconsult::Core::Client::Dto::Title::TitleSettings.from_json(_item)
                 else
                   @linkedTitles.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @linkedTitles = _oa
            end
          end
        if !_o['row'].nil?
          _oa = _o['row']
            if(_oa.is_a? Hash)
              @row = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @row =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @row = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @row.push Fixnum.from_json(_item)
                 else
                   @row.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @row = _oa
            end
          end
    end

    # constructs a TitleSettings from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Medisos

module Dto

  # (no documentation provided)
  class SosiaalihuollonAsiakkuusDto < Fi::Mediconsult::Medisos::Dto::MediSosDtoBase 

    # (no documentation provided)
    attr_accessor :versionumero
    # (no documentation provided)
    attr_accessor :asiakasnumero
    # (no documentation provided)
    attr_accessor :alkamisaika
    # (no documentation provided)
    attr_accessor :alkamispaiva
    # (no documentation provided)
    attr_accessor :paattymisaika
    # (no documentation provided)
    attr_accessor :paattymispaiva
    # (no documentation provided)
    attr_accessor :ammattihenkilonumeroList
    # (no documentation provided)
    attr_accessor :ammattihenkiloList
    # (no documentation provided)
    attr_accessor :kantaJSON
    # (no documentation provided)
    attr_accessor :ryhmaasiakkuus
    # (no documentation provided)
    attr_accessor :palveluyksikkoAsiakkuudet
    # (no documentation provided)
    attr_accessor :palvelutehtavanAsiakkuudet
    # (no documentation provided)
    attr_accessor :asiakas
    # (no documentation provided)
    attr_accessor :suostumusTieto
    # (no documentation provided)
    attr_accessor :laatijanumero
    # (no documentation provided)
    attr_accessor :laatijaInfo
    # (no documentation provided)
    attr_accessor :muuttajanumero
    # (no documentation provided)
    attr_accessor :muuttajaInfo
    # (no documentation provided)
    attr_accessor :formId

    # the json hash for this SosiaalihuollonAsiakkuusDto
    def to_jaxb_json_hash
      _h = super
      _h['versionumero'] = versionumero.to_jaxb_json_hash unless versionumero.nil?
      _h['asiakasnumero'] = asiakasnumero.to_jaxb_json_hash unless asiakasnumero.nil?
      _h['alkamisaika'] = alkamisaika.to_jaxb_json_hash unless alkamisaika.nil?
      _h['alkamispaiva'] = alkamispaiva.to_jaxb_json_hash unless alkamispaiva.nil?
      _h['paattymisaika'] = paattymisaika.to_jaxb_json_hash unless paattymisaika.nil?
      _h['paattymispaiva'] = paattymispaiva.to_jaxb_json_hash unless paattymispaiva.nil?
      if !ammattihenkilonumeroList.nil?
        _ha = Array.new
        ammattihenkilonumeroList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['ammattihenkilonumeroList'] = _ha
      end
      if !ammattihenkiloList.nil?
        _ha = Array.new
        ammattihenkiloList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['ammattihenkiloList'] = _ha
      end
      _h['kantaJSON'] = kantaJSON.to_jaxb_json_hash unless kantaJSON.nil?
      _h['ryhmaasiakkuus'] = ryhmaasiakkuus.to_jaxb_json_hash unless ryhmaasiakkuus.nil?
      if !palveluyksikkoAsiakkuudet.nil?
        _ha = Array.new
        palveluyksikkoAsiakkuudet.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['palveluyksikkoAsiakkuudet'] = _ha
      end
      if !palvelutehtavanAsiakkuudet.nil?
        _ha = Array.new
        palvelutehtavanAsiakkuudet.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['palvelutehtavanAsiakkuudet'] = _ha
      end
      _h['asiakas'] = asiakas.to_jaxb_json_hash unless asiakas.nil?
      _h['suostumusTieto'] = suostumusTieto.to_jaxb_json_hash unless suostumusTieto.nil?
      _h['laatijanumero'] = laatijanumero.to_jaxb_json_hash unless laatijanumero.nil?
      _h['laatijaInfo'] = laatijaInfo.to_jaxb_json_hash unless laatijaInfo.nil?
      _h['muuttajanumero'] = muuttajanumero.to_jaxb_json_hash unless muuttajanumero.nil?
      _h['muuttajaInfo'] = muuttajaInfo.to_jaxb_json_hash unless muuttajaInfo.nil?
      _h['formId'] = formId.to_jaxb_json_hash unless formId.nil?
      return _h
    end

    #initializes this SosiaalihuollonAsiakkuusDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['versionumero'].nil?
          _oa = _o['versionumero']
            if(_oa.is_a? Hash)
              @versionumero = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @versionumero =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @versionumero = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @versionumero.push Fixnum.from_json(_item)
                 else
                   @versionumero.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @versionumero = _oa
            end
          end
        if !_o['asiakasnumero'].nil?
          _oa = _o['asiakasnumero']
            if(_oa.is_a? Hash)
              @asiakasnumero = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakasnumero =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakasnumero = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakasnumero.push Fixnum.from_json(_item)
                 else
                   @asiakasnumero.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakasnumero = _oa
            end
          end
        if !_o['alkamisaika'].nil?
          _oa = _o['alkamisaika']
            if(_oa.is_a? Hash)
              @alkamisaika = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @alkamisaika =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @alkamisaika = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @alkamisaika.push Time.from_json(_item)
                 else
                   @alkamisaika.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @alkamisaika = _oa
            end
          end
        if !_o['alkamispaiva'].nil?
          _oa = _o['alkamispaiva']
            if(_oa.is_a? Hash)
              @alkamispaiva = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @alkamispaiva =  java.time::LocalDate.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @alkamispaiva = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @alkamispaiva.push java.time::LocalDate.from_json(_item)
                 else
                   @alkamispaiva.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @alkamispaiva = _oa
            end
          end
        if !_o['paattymisaika'].nil?
          _oa = _o['paattymisaika']
            if(_oa.is_a? Hash)
              @paattymisaika = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @paattymisaika =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @paattymisaika = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @paattymisaika.push Time.from_json(_item)
                 else
                   @paattymisaika.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @paattymisaika = _oa
            end
          end
        if !_o['paattymispaiva'].nil?
          _oa = _o['paattymispaiva']
            if(_oa.is_a? Hash)
              @paattymispaiva = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @paattymispaiva =  java.time::LocalDate.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @paattymispaiva = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @paattymispaiva.push java.time::LocalDate.from_json(_item)
                 else
                   @paattymispaiva.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @paattymispaiva = _oa
            end
          end
        if !_o['ammattihenkilonumeroList'].nil?
          _oa = _o['ammattihenkilonumeroList']
            if(_oa.is_a? Hash)
              @ammattihenkilonumeroList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ammattihenkilonumeroList =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ammattihenkilonumeroList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ammattihenkilonumeroList.push Fixnum.from_json(_item)
                 else
                   @ammattihenkilonumeroList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ammattihenkilonumeroList = _oa
            end
          end
        if !_o['ammattihenkiloList'].nil?
          _oa = _o['ammattihenkiloList']
            if(_oa.is_a? Hash)
              @ammattihenkiloList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ammattihenkiloList =  Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ammattihenkiloList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ammattihenkiloList.push Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_item)
                 else
                   @ammattihenkiloList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ammattihenkiloList = _oa
            end
          end
        if !_o['kantaJSON'].nil?
          _oa = _o['kantaJSON']
            if(_oa.is_a? Hash)
              @kantaJSON = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kantaJSON =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kantaJSON = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kantaJSON.push String.from_json(_item)
                 else
                   @kantaJSON.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kantaJSON = _oa
            end
          end
        if !_o['ryhmaasiakkuus'].nil?
          _oa = _o['ryhmaasiakkuus']
            if(_oa.is_a? Hash)
              @ryhmaasiakkuus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ryhmaasiakkuus =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ryhmaasiakkuus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ryhmaasiakkuus.push Boolean.from_json(_item)
                 else
                   @ryhmaasiakkuus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ryhmaasiakkuus = _oa
            end
          end
        if !_o['palveluyksikkoAsiakkuudet'].nil?
          _oa = _o['palveluyksikkoAsiakkuudet']
            if(_oa.is_a? Hash)
              @palveluyksikkoAsiakkuudet = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palveluyksikkoAsiakkuudet =  Fi::Mediconsult::Medisos::Dto::PalveluyksikkoAsiakkuusDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palveluyksikkoAsiakkuudet = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palveluyksikkoAsiakkuudet.push Fi::Mediconsult::Medisos::Dto::PalveluyksikkoAsiakkuusDto.from_json(_item)
                 else
                   @palveluyksikkoAsiakkuudet.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palveluyksikkoAsiakkuudet = _oa
            end
          end
        if !_o['palvelutehtavanAsiakkuudet'].nil?
          _oa = _o['palvelutehtavanAsiakkuudet']
            if(_oa.is_a? Hash)
              @palvelutehtavanAsiakkuudet = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palvelutehtavanAsiakkuudet =  Fi::Mediconsult::Medisos::Dto::PalvelutehtavanAsiakkuusDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palvelutehtavanAsiakkuudet = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palvelutehtavanAsiakkuudet.push Fi::Mediconsult::Medisos::Dto::PalvelutehtavanAsiakkuusDto.from_json(_item)
                 else
                   @palvelutehtavanAsiakkuudet.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palvelutehtavanAsiakkuudet = _oa
            end
          end
        if !_o['asiakas'].nil?
          _oa = _o['asiakas']
            if(_oa.is_a? Hash)
              @asiakas = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakas =  Fi::Mediconsult::Core::Client::Dto::Omistaja::Patient.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakas = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakas.push Fi::Mediconsult::Core::Client::Dto::Omistaja::Patient.from_json(_item)
                 else
                   @asiakas.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakas = _oa
            end
          end
        if !_o['suostumusTieto'].nil?
          _oa = _o['suostumusTieto']
            if(_oa.is_a? Hash)
              @suostumusTieto = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @suostumusTieto =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @suostumusTieto = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @suostumusTieto.push Boolean.from_json(_item)
                 else
                   @suostumusTieto.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @suostumusTieto = _oa
            end
          end
        if !_o['laatijanumero'].nil?
          _oa = _o['laatijanumero']
            if(_oa.is_a? Hash)
              @laatijanumero = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laatijanumero =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laatijanumero = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laatijanumero.push Fixnum.from_json(_item)
                 else
                   @laatijanumero.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laatijanumero = _oa
            end
          end
        if !_o['laatijaInfo'].nil?
          _oa = _o['laatijaInfo']
            if(_oa.is_a? Hash)
              @laatijaInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laatijaInfo =  Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laatijaInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laatijaInfo.push Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_item)
                 else
                   @laatijaInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laatijaInfo = _oa
            end
          end
        if !_o['muuttajanumero'].nil?
          _oa = _o['muuttajanumero']
            if(_oa.is_a? Hash)
              @muuttajanumero = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @muuttajanumero =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @muuttajanumero = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @muuttajanumero.push Fixnum.from_json(_item)
                 else
                   @muuttajanumero.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @muuttajanumero = _oa
            end
          end
        if !_o['muuttajaInfo'].nil?
          _oa = _o['muuttajaInfo']
            if(_oa.is_a? Hash)
              @muuttajaInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @muuttajaInfo =  Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @muuttajaInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @muuttajaInfo.push Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_item)
                 else
                   @muuttajaInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @muuttajaInfo = _oa
            end
          end
        if !_o['formId'].nil?
          _oa = _o['formId']
            if(_oa.is_a? Hash)
              @formId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @formId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @formId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @formId.push Fixnum.from_json(_item)
                 else
                   @formId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @formId = _oa
            end
          end
    end

    # constructs a SosiaalihuollonAsiakkuusDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Kanta

  # (no documentation provided)
  class LivingWillHistory < Fi::Mediconsult::Core::Client::Dto::Kanta::KantaDTO 

    # (no documentation provided)
    attr_accessor :livingWills

    # the json hash for this LivingWillHistory
    def to_jaxb_json_hash
      _h = super
      if !livingWills.nil?
        _ha = Array.new
        livingWills.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['livingWills'] = _ha
      end
      return _h
    end

    #initializes this LivingWillHistory with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['livingWills'].nil?
          _oa = _o['livingWills']
            if(_oa.is_a? Hash)
              @livingWills = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @livingWills =  Fi::Mediconsult::Core::Client::Dto::Kanta::LivingWill.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @livingWills = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @livingWills.push Fi::Mediconsult::Core::Client::Dto::Kanta::LivingWill.from_json(_item)
                 else
                   @livingWills.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @livingWills = _oa
            end
          end
    end

    # constructs a LivingWillHistory from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Paatoksentuki

  # (no documentation provided)
  class PtukiResponse < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # (no documentation provided)
    attr_accessor :reminders
    # (no documentation provided)
    attr_accessor :experimentalDataSets
    # (no documentation provided)
    attr_accessor :interactions
    # (no documentation provided)
    attr_accessor :contraindications
    # (no documentation provided)
    attr_accessor :drugsAndRenalFunctions
    # (no documentation provided)
    attr_accessor :drugsAndPregnancyOrLactations
    # (no documentation provided)
    attr_accessor :drugsToAvoid
    # (no documentation provided)
    attr_accessor :indications
    # (no documentation provided)
    attr_accessor :guidelineLinks
    # (no documentation provided)
    attr_accessor :relevantBreakPoints
    # (no documentation provided)
    attr_accessor :system

    # the json hash for this PtukiResponse
    def to_jaxb_json_hash
      _h = super
      if !reminders.nil?
        _ha = Array.new
        reminders.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['reminders'] = _ha
      end
      if !experimentalDataSets.nil?
        _ha = Array.new
        experimentalDataSets.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['experimentalDataSets'] = _ha
      end
      if !interactions.nil?
        _ha = Array.new
        interactions.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['interactions'] = _ha
      end
      if !contraindications.nil?
        _ha = Array.new
        contraindications.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['contraindications'] = _ha
      end
      _h['drugsAndRenalFunctions'] = drugsAndRenalFunctions.to_jaxb_json_hash unless drugsAndRenalFunctions.nil?
      if !drugsAndPregnancyOrLactations.nil?
        _ha = Array.new
        drugsAndPregnancyOrLactations.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['drugsAndPregnancyOrLactations'] = _ha
      end
      if !drugsToAvoid.nil?
        _ha = Array.new
        drugsToAvoid.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['drugsToAvoid'] = _ha
      end
      if !indications.nil?
        _ha = Array.new
        indications.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['indications'] = _ha
      end
      if !guidelineLinks.nil?
        _ha = Array.new
        guidelineLinks.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['guidelineLinks'] = _ha
      end
      if !relevantBreakPoints.nil?
        _ha = Array.new
        relevantBreakPoints.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['relevantBreakPoints'] = _ha
      end
      _h['system'] = system.to_jaxb_json_hash unless system.nil?
      return _h
    end

    #initializes this PtukiResponse with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['reminders'].nil?
          _oa = _o['reminders']
            if(_oa.is_a? Hash)
              @reminders = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @reminders =  Fi::Mediconsult::Core::Client::Dto::Paatoksentuki::Reminder.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @reminders = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @reminders.push Fi::Mediconsult::Core::Client::Dto::Paatoksentuki::Reminder.from_json(_item)
                 else
                   @reminders.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @reminders = _oa
            end
          end
        if !_o['experimentalDataSets'].nil?
          _oa = _o['experimentalDataSets']
            if(_oa.is_a? Hash)
              @experimentalDataSets = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @experimentalDataSets =  Fi::Mediconsult::Core::Client::Dto::Paatoksentuki::ExperimentalDataSet.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @experimentalDataSets = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @experimentalDataSets.push Fi::Mediconsult::Core::Client::Dto::Paatoksentuki::ExperimentalDataSet.from_json(_item)
                 else
                   @experimentalDataSets.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @experimentalDataSets = _oa
            end
          end
        if !_o['interactions'].nil?
          _oa = _o['interactions']
            if(_oa.is_a? Hash)
              @interactions = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @interactions =  Fi::Mediconsult::Core::Client::Dto::Paatoksentuki::Interaction.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @interactions = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @interactions.push Fi::Mediconsult::Core::Client::Dto::Paatoksentuki::Interaction.from_json(_item)
                 else
                   @interactions.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @interactions = _oa
            end
          end
        if !_o['contraindications'].nil?
          _oa = _o['contraindications']
            if(_oa.is_a? Hash)
              @contraindications = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @contraindications =  Fi::Mediconsult::Core::Client::Dto::Paatoksentuki::Contraindication.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @contraindications = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @contraindications.push Fi::Mediconsult::Core::Client::Dto::Paatoksentuki::Contraindication.from_json(_item)
                 else
                   @contraindications.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @contraindications = _oa
            end
          end
        if !_o['drugsAndRenalFunctions'].nil?
          _oa = _o['drugsAndRenalFunctions']
            if(_oa.is_a? Hash)
              @drugsAndRenalFunctions = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @drugsAndRenalFunctions =  Fi::Mediconsult::Core::Client::Dto::Paatoksentuki::DrugsAndRenalFunctions.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @drugsAndRenalFunctions = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @drugsAndRenalFunctions.push Fi::Mediconsult::Core::Client::Dto::Paatoksentuki::DrugsAndRenalFunctions.from_json(_item)
                 else
                   @drugsAndRenalFunctions.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @drugsAndRenalFunctions = _oa
            end
          end
        if !_o['drugsAndPregnancyOrLactations'].nil?
          _oa = _o['drugsAndPregnancyOrLactations']
            if(_oa.is_a? Hash)
              @drugsAndPregnancyOrLactations = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @drugsAndPregnancyOrLactations =  Fi::Mediconsult::Core::Client::Dto::Paatoksentuki::DrugsAndPregnancyOrLactation.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @drugsAndPregnancyOrLactations = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @drugsAndPregnancyOrLactations.push Fi::Mediconsult::Core::Client::Dto::Paatoksentuki::DrugsAndPregnancyOrLactation.from_json(_item)
                 else
                   @drugsAndPregnancyOrLactations.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @drugsAndPregnancyOrLactations = _oa
            end
          end
        if !_o['drugsToAvoid'].nil?
          _oa = _o['drugsToAvoid']
            if(_oa.is_a? Hash)
              @drugsToAvoid = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @drugsToAvoid =  Fi::Mediconsult::Core::Client::Dto::Paatoksentuki::Drug.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @drugsToAvoid = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @drugsToAvoid.push Fi::Mediconsult::Core::Client::Dto::Paatoksentuki::Drug.from_json(_item)
                 else
                   @drugsToAvoid.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @drugsToAvoid = _oa
            end
          end
        if !_o['indications'].nil?
          _oa = _o['indications']
            if(_oa.is_a? Hash)
              @indications = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @indications =  Fi::Mediconsult::Core::Client::Dto::Paatoksentuki::Indication.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @indications = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @indications.push Fi::Mediconsult::Core::Client::Dto::Paatoksentuki::Indication.from_json(_item)
                 else
                   @indications.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @indications = _oa
            end
          end
        if !_o['guidelineLinks'].nil?
          _oa = _o['guidelineLinks']
            if(_oa.is_a? Hash)
              @guidelineLinks = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @guidelineLinks =  Fi::Mediconsult::Core::Client::Dto::Paatoksentuki::GuidelineLink.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @guidelineLinks = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @guidelineLinks.push Fi::Mediconsult::Core::Client::Dto::Paatoksentuki::GuidelineLink.from_json(_item)
                 else
                   @guidelineLinks.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @guidelineLinks = _oa
            end
          end
        if !_o['relevantBreakPoints'].nil?
          _oa = _o['relevantBreakPoints']
            if(_oa.is_a? Hash)
              @relevantBreakPoints = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @relevantBreakPoints =  Fi::Mediconsult::Core::Client::Dto::Paatoksentuki::RelevantBreakPoint.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @relevantBreakPoints = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @relevantBreakPoints.push Fi::Mediconsult::Core::Client::Dto::Paatoksentuki::RelevantBreakPoint.from_json(_item)
                 else
                   @relevantBreakPoints.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @relevantBreakPoints = _oa
            end
          end
        if !_o['system'].nil?
          _oa = _o['system']
            if(_oa.is_a? Hash)
              @system = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @system =  Fi::Mediconsult::Core::Client::Dto::Paatoksentuki::System.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @system = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @system.push Fi::Mediconsult::Core::Client::Dto::Paatoksentuki::System.from_json(_item)
                 else
                   @system.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @system = _oa
            end
          end
    end

    # constructs a PtukiResponse from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Paatoksentuki

  # (no documentation provided)
  class Diagnosis < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # (no documentation provided)
    attr_accessor :diagnosisCode
    # (no documentation provided)
    attr_accessor :diagnosisName

    # the json hash for this Diagnosis
    def to_jaxb_json_hash
      _h = super
      _h['diagnosisCode'] = diagnosisCode.to_jaxb_json_hash unless diagnosisCode.nil?
      _h['diagnosisName'] = diagnosisName.to_jaxb_json_hash unless diagnosisName.nil?
      return _h
    end

    #initializes this Diagnosis with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['diagnosisCode'].nil?
          _oa = _o['diagnosisCode']
            if(_oa.is_a? Hash)
              @diagnosisCode = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @diagnosisCode =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @diagnosisCode = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @diagnosisCode.push String.from_json(_item)
                 else
                   @diagnosisCode.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @diagnosisCode = _oa
            end
          end
        if !_o['diagnosisName'].nil?
          _oa = _o['diagnosisName']
            if(_oa.is_a? Hash)
              @diagnosisName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @diagnosisName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @diagnosisName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @diagnosisName.push String.from_json(_item)
                 else
                   @diagnosisName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @diagnosisName = _oa
            end
          end
    end

    # constructs a Diagnosis from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Medisos

module Enums

  # (no documentation provided)
  class AsiaTila

    # (no documentation provided)
    AVOIN = "AVOIN"

    # (no documentation provided)
    SULJETTU = "SULJETTU"

    # (no documentation provided)
    AVATTU_UUDELLEEN = "AVATTU_UUDELLEEN"

    # (no documentation provided)
    MITATOITY = "MITATOITY"

    # (no documentation provided)
    LUKITTU = "LUKITTU"

    # (no documentation provided)
    EI_ASIAKKUUTTA = "EI_ASIAKKUUTTA"
  end

end

end

end

end

module Fi

module Mediconsult

module Medisos

module Enums

  # (no documentation provided)
  class SosiatriGrouping

    # (no documentation provided)
    BY_NIMI = "BY_NIMI"

    # (no documentation provided)
    BY_AVAUSAIKA = "BY_AVAUSAIKA"

    # (no documentation provided)
    BY_PAATTYMISAIKA = "BY_PAATTYMISAIKA"

    # (no documentation provided)
    BY_TILA = "BY_TILA"

    # (no documentation provided)
    BY_YHTEENKUULUVUUS = "BY_YHTEENKUULUVUUS"

    # (no documentation provided)
    BY_LAATIJANIMI = "BY_LAATIJANIMI"

    # (no documentation provided)
    BY_LAATIJANUMERO = "BY_LAATIJANUMERO"

    # (no documentation provided)
    BY_MUUTTAJANIMI = "BY_MUUTTAJANIMI"

    # (no documentation provided)
    BY_MUUTTAJANUMERO = "BY_MUUTTAJANUMERO"

    # (no documentation provided)
    BY_PALVELUYKSIKKO = "BY_PALVELUYKSIKKO"

    # (no documentation provided)
    BY_ID = "BY_ID"

    # (no documentation provided)
    BY_TYYPPI = "BY_TYYPPI"

    # (no documentation provided)
    BY_MUOKKAUSAIKA = "BY_MUOKKAUSAIKA"

    # (no documentation provided)
    BY_LAATIMISAIKA = "BY_LAATIMISAIKA"

    # (no documentation provided)
    BY_PALVELUTEHTAVA = "BY_PALVELUTEHTAVA"

    # (no documentation provided)
    BY_SOSIAALIPALVELU = "BY_SOSIAALIPALVELU"

    # (no documentation provided)
    BY_PROSESSINVAIHE = "BY_PROSESSINVAIHE"

    # (no documentation provided)
    BY_PAATOKSENTEKIJA = "BY_PAATOKSENTEKIJA"

    # (no documentation provided)
    BY_ASIAKAS = "BY_ASIAKAS"

    # (no documentation provided)
    BY_OMATYONTEKIJA = "BY_OMATYONTEKIJA"

    # (no documentation provided)
    BY_ASIAKKUUSTYYPPI = "BY_ASIAKKUUSTYYPPI"

    # (no documentation provided)
    BY_VASTUUTYONTEKIJA = "BY_VASTUUTYONTEKIJA"

    # (no documentation provided)
    BY_LAHITYONTEKIJA = "BY_LAHITYONTEKIJA"
  end

end

end

end

end

module Fi

module Mediconsult

module Medisos

module Dto

  # (no documentation provided)
  class LiiteasiakirjaDto < Fi::Mediconsult::Medisos::Dto::MediSosDtoBase 

    # (no documentation provided)
    attr_accessor :asiakirjaId
    # (no documentation provided)
    attr_accessor :versionumero
    # (no documentation provided)
    attr_accessor :oidTunnus
    # (no documentation provided)
    attr_accessor :tiedostonNimi
    # (no documentation provided)
    attr_accessor :laatija
    # (no documentation provided)
    attr_accessor :laatijaInfo
    # (no documentation provided)
    attr_accessor :muuttaja
    # (no documentation provided)
    attr_accessor :muuttajaInfo
    # (no documentation provided)
    attr_accessor :asiaNimi
    # (no documentation provided)
    attr_accessor :tyyppi
    # (no documentation provided)
    attr_accessor :koko
    # (no documentation provided)
    attr_accessor :liitetiedosto
    # (no documentation provided)
    attr_accessor :metadataJson
    # (no documentation provided)
    attr_accessor :asiaIdLista
    # (no documentation provided)
    attr_accessor :liiteasiakirjaviittaalista
    # (no documentation provided)
    attr_accessor :formId

    # the json hash for this LiiteasiakirjaDto
    def to_jaxb_json_hash
      _h = super
      _h['asiakirjaId'] = asiakirjaId.to_jaxb_json_hash unless asiakirjaId.nil?
      _h['versionumero'] = versionumero.to_jaxb_json_hash unless versionumero.nil?
      _h['oidTunnus'] = oidTunnus.to_jaxb_json_hash unless oidTunnus.nil?
      _h['tiedostonNimi'] = tiedostonNimi.to_jaxb_json_hash unless tiedostonNimi.nil?
      _h['laatija'] = laatija.to_jaxb_json_hash unless laatija.nil?
      _h['laatijaInfo'] = laatijaInfo.to_jaxb_json_hash unless laatijaInfo.nil?
      _h['muuttaja'] = muuttaja.to_jaxb_json_hash unless muuttaja.nil?
      _h['muuttajaInfo'] = muuttajaInfo.to_jaxb_json_hash unless muuttajaInfo.nil?
      _h['asiaNimi'] = asiaNimi.to_jaxb_json_hash unless asiaNimi.nil?
      _h['tyyppi'] = tyyppi.to_jaxb_json_hash unless tyyppi.nil?
      _h['koko'] = koko.to_jaxb_json_hash unless koko.nil?
      if !liitetiedosto.nil?
        _ha = Array.new
        liitetiedosto.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['liitetiedosto'] = _ha
      end
      _h['metadataJson'] = metadataJson.to_jaxb_json_hash unless metadataJson.nil?
      if !asiaIdLista.nil?
        _ha = Array.new
        asiaIdLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['asiaIdLista'] = _ha
      end
      if !liiteasiakirjaviittaalista.nil?
        _ha = Array.new
        liiteasiakirjaviittaalista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['liiteasiakirjaviittaalista'] = _ha
      end
      _h['formId'] = formId.to_jaxb_json_hash unless formId.nil?
      return _h
    end

    #initializes this LiiteasiakirjaDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['asiakirjaId'].nil?
          _oa = _o['asiakirjaId']
            if(_oa.is_a? Hash)
              @asiakirjaId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakirjaId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakirjaId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakirjaId.push Bignum.from_json(_item)
                 else
                   @asiakirjaId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakirjaId = _oa
            end
          end
        if !_o['versionumero'].nil?
          _oa = _o['versionumero']
            if(_oa.is_a? Hash)
              @versionumero = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @versionumero =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @versionumero = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @versionumero.push Fixnum.from_json(_item)
                 else
                   @versionumero.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @versionumero = _oa
            end
          end
        if !_o['oidTunnus'].nil?
          _oa = _o['oidTunnus']
            if(_oa.is_a? Hash)
              @oidTunnus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @oidTunnus =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @oidTunnus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @oidTunnus.push String.from_json(_item)
                 else
                   @oidTunnus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @oidTunnus = _oa
            end
          end
        if !_o['tiedostonNimi'].nil?
          _oa = _o['tiedostonNimi']
            if(_oa.is_a? Hash)
              @tiedostonNimi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tiedostonNimi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tiedostonNimi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tiedostonNimi.push String.from_json(_item)
                 else
                   @tiedostonNimi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tiedostonNimi = _oa
            end
          end
        if !_o['laatija'].nil?
          _oa = _o['laatija']
            if(_oa.is_a? Hash)
              @laatija = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laatija =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laatija = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laatija.push Fixnum.from_json(_item)
                 else
                   @laatija.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laatija = _oa
            end
          end
        if !_o['laatijaInfo'].nil?
          _oa = _o['laatijaInfo']
            if(_oa.is_a? Hash)
              @laatijaInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laatijaInfo =  Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laatijaInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laatijaInfo.push Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_item)
                 else
                   @laatijaInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laatijaInfo = _oa
            end
          end
        if !_o['muuttaja'].nil?
          _oa = _o['muuttaja']
            if(_oa.is_a? Hash)
              @muuttaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @muuttaja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @muuttaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @muuttaja.push Fixnum.from_json(_item)
                 else
                   @muuttaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @muuttaja = _oa
            end
          end
        if !_o['muuttajaInfo'].nil?
          _oa = _o['muuttajaInfo']
            if(_oa.is_a? Hash)
              @muuttajaInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @muuttajaInfo =  Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @muuttajaInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @muuttajaInfo.push Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_item)
                 else
                   @muuttajaInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @muuttajaInfo = _oa
            end
          end
        if !_o['asiaNimi'].nil?
          _oa = _o['asiaNimi']
            if(_oa.is_a? Hash)
              @asiaNimi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiaNimi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiaNimi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiaNimi.push String.from_json(_item)
                 else
                   @asiaNimi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiaNimi = _oa
            end
          end
        if !_o['tyyppi'].nil?
          _oa = _o['tyyppi']
            if(_oa.is_a? Hash)
              @tyyppi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tyyppi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tyyppi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tyyppi.push String.from_json(_item)
                 else
                   @tyyppi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tyyppi = _oa
            end
          end
        if !_o['koko'].nil?
          _oa = _o['koko']
            if(_oa.is_a? Hash)
              @koko = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @koko =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @koko = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @koko.push Fixnum.from_json(_item)
                 else
                   @koko.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @koko = _oa
            end
          end
        if !_o['liitetiedosto'].nil?
          _oa = _o['liitetiedosto']
            if(_oa.is_a? Hash)
              @liitetiedosto = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @liitetiedosto =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @liitetiedosto = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @liitetiedosto.push Fixnum.from_json(_item)
                 else
                   @liitetiedosto.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @liitetiedosto = _oa
            end
          end
        if !_o['metadataJson'].nil?
          _oa = _o['metadataJson']
            if(_oa.is_a? Hash)
              @metadataJson = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @metadataJson =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @metadataJson = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @metadataJson.push String.from_json(_item)
                 else
                   @metadataJson.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @metadataJson = _oa
            end
          end
        if !_o['asiaIdLista'].nil?
          _oa = _o['asiaIdLista']
            if(_oa.is_a? Hash)
              @asiaIdLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiaIdLista =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiaIdLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiaIdLista.push Bignum.from_json(_item)
                 else
                   @asiaIdLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiaIdLista = _oa
            end
          end
        if !_o['liiteasiakirjaviittaalista'].nil?
          _oa = _o['liiteasiakirjaviittaalista']
            if(_oa.is_a? Hash)
              @liiteasiakirjaviittaalista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @liiteasiakirjaviittaalista =  Fi::Mediconsult::Medisos::Dto::AsiakirjaviittausDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @liiteasiakirjaviittaalista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @liiteasiakirjaviittaalista.push Fi::Mediconsult::Medisos::Dto::AsiakirjaviittausDto.from_json(_item)
                 else
                   @liiteasiakirjaviittaalista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @liiteasiakirjaviittaalista = _oa
            end
          end
        if !_o['formId'].nil?
          _oa = _o['formId']
            if(_oa.is_a? Hash)
              @formId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @formId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @formId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @formId.push Fixnum.from_json(_item)
                 else
                   @formId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @formId = _oa
            end
          end
    end

    # constructs a LiiteasiakirjaDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Medisos

module Dto

  # (no documentation provided)
  class AsiakirjaviittausInputDto < Fi::Mediconsult::Medisos::Dto::MediSosDtoBase 

    # (no documentation provided)
    attr_accessor :asiakirjaId
    # (no documentation provided)
    attr_accessor :viittausIdList
    # (no documentation provided)
    attr_accessor :formId

    # the json hash for this AsiakirjaviittausInputDto
    def to_jaxb_json_hash
      _h = super
      _h['asiakirjaId'] = asiakirjaId.to_jaxb_json_hash unless asiakirjaId.nil?
      if !viittausIdList.nil?
        _ha = Array.new
        viittausIdList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['viittausIdList'] = _ha
      end
      _h['formId'] = formId.to_jaxb_json_hash unless formId.nil?
      return _h
    end

    #initializes this AsiakirjaviittausInputDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['asiakirjaId'].nil?
          _oa = _o['asiakirjaId']
            if(_oa.is_a? Hash)
              @asiakirjaId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakirjaId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakirjaId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakirjaId.push Bignum.from_json(_item)
                 else
                   @asiakirjaId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakirjaId = _oa
            end
          end
        if !_o['viittausIdList'].nil?
          _oa = _o['viittausIdList']
            if(_oa.is_a? Hash)
              @viittausIdList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @viittausIdList =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @viittausIdList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @viittausIdList.push Bignum.from_json(_item)
                 else
                   @viittausIdList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @viittausIdList = _oa
            end
          end
        if !_o['formId'].nil?
          _oa = _o['formId']
            if(_oa.is_a? Hash)
              @formId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @formId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @formId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @formId.push Fixnum.from_json(_item)
                 else
                   @formId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @formId = _oa
            end
          end
    end

    # constructs a AsiakirjaviittausInputDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Medisos

module Dto

  # (no documentation provided)
  class AsiaSummaryDto < Fi::Mediconsult::Medisos::Dto::MediSosDtoBase 

    # (no documentation provided)
    attr_accessor :asiaIdLista
    # (no documentation provided)
    attr_accessor :asiaNimiLista
    # (no documentation provided)
    attr_accessor :laatijanumeroLista
    # (no documentation provided)
    attr_accessor :laatijanimiLista
    # (no documentation provided)
    attr_accessor :asiaTilaLista
    # (no documentation provided)
    attr_accessor :avausAikaLista
    # (no documentation provided)
    attr_accessor :palvelutehtavaNimiLista
    # (no documentation provided)
    attr_accessor :palveluyksikkonumeroLista
    # (no documentation provided)
    attr_accessor :palveluyksikkoNimiLista
    # (no documentation provided)
    attr_accessor :palveluyksikkoRooliLista
    # (no documentation provided)
    attr_accessor :avoimetAsiaNimiLista

    # the json hash for this AsiaSummaryDto
    def to_jaxb_json_hash
      _h = super
      if !asiaIdLista.nil?
        _ha = Array.new
        asiaIdLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['asiaIdLista'] = _ha
      end
      if !asiaNimiLista.nil?
        _ha = Array.new
        asiaNimiLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['asiaNimiLista'] = _ha
      end
      if !laatijanumeroLista.nil?
        _ha = Array.new
        laatijanumeroLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['laatijanumeroLista'] = _ha
      end
      if !laatijanimiLista.nil?
        _ha = Array.new
        laatijanimiLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['laatijanimiLista'] = _ha
      end
      if !asiaTilaLista.nil?
        _ha = Array.new
        asiaTilaLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['asiaTilaLista'] = _ha
      end
      if !avausAikaLista.nil?
        _ha = Array.new
        avausAikaLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['avausAikaLista'] = _ha
      end
      if !palvelutehtavaNimiLista.nil?
        _ha = Array.new
        palvelutehtavaNimiLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['palvelutehtavaNimiLista'] = _ha
      end
      if !palveluyksikkonumeroLista.nil?
        _ha = Array.new
        palveluyksikkonumeroLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['palveluyksikkonumeroLista'] = _ha
      end
      if !palveluyksikkoNimiLista.nil?
        _ha = Array.new
        palveluyksikkoNimiLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['palveluyksikkoNimiLista'] = _ha
      end
      if !palveluyksikkoRooliLista.nil?
        _ha = Array.new
        palveluyksikkoRooliLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['palveluyksikkoRooliLista'] = _ha
      end
      if !avoimetAsiaNimiLista.nil?
        _ha = Array.new
        avoimetAsiaNimiLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['avoimetAsiaNimiLista'] = _ha
      end
      return _h
    end

    #initializes this AsiaSummaryDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['asiaIdLista'].nil?
          _oa = _o['asiaIdLista']
            if(_oa.is_a? Hash)
              @asiaIdLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiaIdLista =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiaIdLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiaIdLista.push Bignum.from_json(_item)
                 else
                   @asiaIdLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiaIdLista = _oa
            end
          end
        if !_o['asiaNimiLista'].nil?
          _oa = _o['asiaNimiLista']
            if(_oa.is_a? Hash)
              @asiaNimiLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiaNimiLista =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiaNimiLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiaNimiLista.push String.from_json(_item)
                 else
                   @asiaNimiLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiaNimiLista = _oa
            end
          end
        if !_o['laatijanumeroLista'].nil?
          _oa = _o['laatijanumeroLista']
            if(_oa.is_a? Hash)
              @laatijanumeroLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laatijanumeroLista =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laatijanumeroLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laatijanumeroLista.push Fixnum.from_json(_item)
                 else
                   @laatijanumeroLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laatijanumeroLista = _oa
            end
          end
        if !_o['laatijanimiLista'].nil?
          _oa = _o['laatijanimiLista']
            if(_oa.is_a? Hash)
              @laatijanimiLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laatijanimiLista =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laatijanimiLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laatijanimiLista.push String.from_json(_item)
                 else
                   @laatijanimiLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laatijanimiLista = _oa
            end
          end
        if !_o['asiaTilaLista'].nil?
          _oa = _o['asiaTilaLista']
            if(_oa.is_a? Hash)
              @asiaTilaLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiaTilaLista =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiaTilaLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiaTilaLista.push String.from_json(_item)
                 else
                   @asiaTilaLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiaTilaLista = _oa
            end
          end
        if !_o['avausAikaLista'].nil?
          _oa = _o['avausAikaLista']
            if(_oa.is_a? Hash)
              @avausAikaLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @avausAikaLista =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @avausAikaLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @avausAikaLista.push Time.from_json(_item)
                 else
                   @avausAikaLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @avausAikaLista = _oa
            end
          end
        if !_o['palvelutehtavaNimiLista'].nil?
          _oa = _o['palvelutehtavaNimiLista']
            if(_oa.is_a? Hash)
              @palvelutehtavaNimiLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palvelutehtavaNimiLista =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palvelutehtavaNimiLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palvelutehtavaNimiLista.push String.from_json(_item)
                 else
                   @palvelutehtavaNimiLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palvelutehtavaNimiLista = _oa
            end
          end
        if !_o['palveluyksikkonumeroLista'].nil?
          _oa = _o['palveluyksikkonumeroLista']
            if(_oa.is_a? Hash)
              @palveluyksikkonumeroLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palveluyksikkonumeroLista =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palveluyksikkonumeroLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palveluyksikkonumeroLista.push Fixnum.from_json(_item)
                 else
                   @palveluyksikkonumeroLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palveluyksikkonumeroLista = _oa
            end
          end
        if !_o['palveluyksikkoNimiLista'].nil?
          _oa = _o['palveluyksikkoNimiLista']
            if(_oa.is_a? Hash)
              @palveluyksikkoNimiLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palveluyksikkoNimiLista =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palveluyksikkoNimiLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palveluyksikkoNimiLista.push String.from_json(_item)
                 else
                   @palveluyksikkoNimiLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palveluyksikkoNimiLista = _oa
            end
          end
        if !_o['palveluyksikkoRooliLista'].nil?
          _oa = _o['palveluyksikkoRooliLista']
            if(_oa.is_a? Hash)
              @palveluyksikkoRooliLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palveluyksikkoRooliLista =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palveluyksikkoRooliLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palveluyksikkoRooliLista.push String.from_json(_item)
                 else
                   @palveluyksikkoRooliLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palveluyksikkoRooliLista = _oa
            end
          end
        if !_o['avoimetAsiaNimiLista'].nil?
          _oa = _o['avoimetAsiaNimiLista']
            if(_oa.is_a? Hash)
              @avoimetAsiaNimiLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @avoimetAsiaNimiLista =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @avoimetAsiaNimiLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @avoimetAsiaNimiLista.push String.from_json(_item)
                 else
                   @avoimetAsiaNimiLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @avoimetAsiaNimiLista = _oa
            end
          end
    end

    # constructs a AsiaSummaryDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Palvelupaatos

  # (no documentation provided)
  class Laatu

    # (no documentation provided)
    KIELTEINEN = "KIELTEINEN"

    # (no documentation provided)
    OSITTAIN_KIELTEINEN = "OSITTAIN_KIELTEINEN"

    # (no documentation provided)
    MYONTEINEN = "MYONTEINEN"
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class PuutteellinenStatus

    # (no documentation provided)
    UNDEFINED = "UNDEFINED"

    # (no documentation provided)
    PUUTTEELLINEN = "PUUTTEELLINEN"

    # (no documentation provided)
    OK = "OK"
  end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Enums

  # (no documentation provided)
  class BasicInfoCategory

    # (no documentation provided)
    YKSIKKO = "YKSIKKO"

    # (no documentation provided)
    TYONTEKIJA = "TYONTEKIJA"

    # (no documentation provided)
    ASIAKAS = "ASIAKAS"
  end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class Tutkimuspyynto < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # Returns the name of the Tutkimus
    attr_accessor :tutkimus
    # Returns a list of Tutkimus details under the same tutkimus name
    attr_accessor :tutkimuspyyntoTiedotList
    # Returns the category of the tutkimus. Category could be
    # &quot;tilattu&quot;, &quot;kuittaamaton&quot; or &quot;tulos&quot;
    attr_accessor :kategoria
    # (no documentation provided)
    attr_accessor :latestTime

    # the json hash for this Tutkimuspyynto
    def to_jaxb_json_hash
      _h = super
      _h['tutkimus'] = tutkimus.to_jaxb_json_hash unless tutkimus.nil?
      if !tutkimuspyyntoTiedotList.nil?
        _ha = Array.new
        tutkimuspyyntoTiedotList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['tutkimuspyyntoTiedotList'] = _ha
      end
      _h['kategoria'] = kategoria.to_jaxb_json_hash unless kategoria.nil?
      _h['latestTime'] = latestTime.to_jaxb_json_hash unless latestTime.nil?
      return _h
    end

    #initializes this Tutkimuspyynto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['tutkimus'].nil?
          _oa = _o['tutkimus']
            if(_oa.is_a? Hash)
              @tutkimus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tutkimus =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tutkimus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tutkimus.push String.from_json(_item)
                 else
                   @tutkimus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tutkimus = _oa
            end
          end
        if !_o['tutkimuspyyntoTiedotList'].nil?
          _oa = _o['tutkimuspyyntoTiedotList']
            if(_oa.is_a? Hash)
              @tutkimuspyyntoTiedotList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tutkimuspyyntoTiedotList =  Fi::Mediconsult::Core::Client::Dto::TutkimuspyyntoTiedot.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tutkimuspyyntoTiedotList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tutkimuspyyntoTiedotList.push Fi::Mediconsult::Core::Client::Dto::TutkimuspyyntoTiedot.from_json(_item)
                 else
                   @tutkimuspyyntoTiedotList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tutkimuspyyntoTiedotList = _oa
            end
          end
        if !_o['kategoria'].nil?
          _oa = _o['kategoria']
            if(_oa.is_a? Hash)
              @kategoria = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kategoria =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kategoria = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kategoria.push String.from_json(_item)
                 else
                   @kategoria.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kategoria = _oa
            end
          end
        if !_o['latestTime'].nil?
          _oa = _o['latestTime']
            if(_oa.is_a? Hash)
              @latestTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @latestTime =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @latestTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @latestTime.push Time.from_json(_item)
                 else
                   @latestTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @latestTime = _oa
            end
          end
    end

    # constructs a Tutkimuspyynto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Medisos

module Dto

  # (no documentation provided)
  class GroupDto < Fi::Mediconsult::Medisos::Dto::DtoBase 

    # (no documentation provided)
    attr_accessor :form
    # (no documentation provided)
    attr_accessor :master
    # (no documentation provided)
    attr_accessor :memberList

    # the json hash for this GroupDto
    def to_jaxb_json_hash
      _h = super
      _h['form'] = form.to_jaxb_json_hash unless form.nil?
      _h['master'] = master.to_jaxb_json_hash unless master.nil?
      if !memberList.nil?
        _ha = Array.new
        memberList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['memberList'] = _ha
      end
      return _h
    end

    #initializes this GroupDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['form'].nil?
          _oa = _o['form']
            if(_oa.is_a? Hash)
              @form = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @form =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @form = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @form.push Fixnum.from_json(_item)
                 else
                   @form.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @form = _oa
            end
          end
        if !_o['master'].nil?
          _oa = _o['master']
            if(_oa.is_a? Hash)
              @master = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @master =  Fi::Mediconsult::Medisos::Dto::GroupMasterDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @master = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @master.push Fi::Mediconsult::Medisos::Dto::GroupMasterDto.from_json(_item)
                 else
                   @master.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @master = _oa
            end
          end
        if !_o['memberList'].nil?
          _oa = _o['memberList']
            if(_oa.is_a? Hash)
              @memberList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @memberList =  Fi::Mediconsult::Medisos::Dto::GroupMemberDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @memberList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @memberList.push Fi::Mediconsult::Medisos::Dto::GroupMemberDto.from_json(_item)
                 else
                   @memberList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @memberList = _oa
            end
          end
    end

    # constructs a GroupDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Worker

  # (no documentation provided)
  class TimeRuleDto < Fi::Mediconsult::Mediplan::Dto::KuhaDtoBase 

    # the start
    attr_accessor :start
    # the duration
    attr_accessor :durationInMinutes
    # the recurrenceEnd, null if not given or if the rule has no recurrence
    attr_accessor :recurrenceEnd
    # the recurrenceCode or null if there is no recurrence
    attr_accessor :recurrenceCode
    # the calendarContext
    attr_accessor :calendarContext
    # the calendarEventIds
    attr_accessor :calendarEventIds
    # the eventModelId
    attr_accessor :eventModelId

    # the json hash for this TimeRuleDto
    def to_jaxb_json_hash
      _h = super
      _h['start'] = start.to_jaxb_json_hash unless start.nil?
      _h['durationInMinutes'] = durationInMinutes.to_jaxb_json_hash unless durationInMinutes.nil?
      _h['recurrenceEnd'] = recurrenceEnd.to_jaxb_json_hash unless recurrenceEnd.nil?
      _h['recurrenceCode'] = recurrenceCode.to_jaxb_json_hash unless recurrenceCode.nil?
      _h['calendarContext'] = calendarContext.to_jaxb_json_hash unless calendarContext.nil?
      if !calendarEventIds.nil?
        _ha = Array.new
        calendarEventIds.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['calendarEventIds'] = _ha
      end
      _h['eventModelId'] = eventModelId.to_jaxb_json_hash unless eventModelId.nil?
      return _h
    end

    #initializes this TimeRuleDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['start'].nil?
          _oa = _o['start']
            if(_oa.is_a? Hash)
              @start = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @start =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @start = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @start.push Time.from_json(_item)
                 else
                   @start.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @start = _oa
            end
          end
        if !_o['durationInMinutes'].nil?
          _oa = _o['durationInMinutes']
            if(_oa.is_a? Hash)
              @durationInMinutes = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @durationInMinutes =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @durationInMinutes = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @durationInMinutes.push Fixnum.from_json(_item)
                 else
                   @durationInMinutes.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @durationInMinutes = _oa
            end
          end
        if !_o['recurrenceEnd'].nil?
          _oa = _o['recurrenceEnd']
            if(_oa.is_a? Hash)
              @recurrenceEnd = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @recurrenceEnd =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @recurrenceEnd = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @recurrenceEnd.push Time.from_json(_item)
                 else
                   @recurrenceEnd.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @recurrenceEnd = _oa
            end
          end
        if !_o['recurrenceCode'].nil?
          _oa = _o['recurrenceCode']
            if(_oa.is_a? Hash)
              @recurrenceCode = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @recurrenceCode =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @recurrenceCode = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @recurrenceCode.push String.from_json(_item)
                 else
                   @recurrenceCode.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @recurrenceCode = _oa
            end
          end
        if !_o['calendarContext'].nil?
          _oa = _o['calendarContext']
            if(_oa.is_a? Hash)
              @calendarContext = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @calendarContext =  Fi::Mediconsult::Mediplan::Dto::CalendarContextDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @calendarContext = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @calendarContext.push Fi::Mediconsult::Mediplan::Dto::CalendarContextDto.from_json(_item)
                 else
                   @calendarContext.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @calendarContext = _oa
            end
          end
        if !_o['calendarEventIds'].nil?
          _oa = _o['calendarEventIds']
            if(_oa.is_a? Hash)
              @calendarEventIds = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @calendarEventIds =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @calendarEventIds = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @calendarEventIds.push Bignum.from_json(_item)
                 else
                   @calendarEventIds.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @calendarEventIds = _oa
            end
          end
        if !_o['eventModelId'].nil?
          _oa = _o['eventModelId']
            if(_oa.is_a? Hash)
              @eventModelId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @eventModelId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @eventModelId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @eventModelId.push Bignum.from_json(_item)
                 else
                   @eventModelId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @eventModelId = _oa
            end
          end
    end

    # constructs a TimeRuleDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Medisos

module Dto

  # (no documentation provided)
  class PalvelutehtavanAsiakkuusDto < Fi::Mediconsult::Medisos::Dto::MediSosDtoBase 

    # (no documentation provided)
    attr_accessor :laatijanumero
    # (no documentation provided)
    attr_accessor :laatija
    # (no documentation provided)
    attr_accessor :asiakkuudenTila
    # (no documentation provided)
    attr_accessor :asiakasnumero
    # (no documentation provided)
    attr_accessor :asiakas
    # (no documentation provided)
    attr_accessor :palvelutehtava
    # (no documentation provided)
    attr_accessor :alkamisaika
    # (no documentation provided)
    attr_accessor :alkamispaiva
    # (no documentation provided)
    attr_accessor :paattymisaika
    # (no documentation provided)
    attr_accessor :paattymispaiva
    # (no documentation provided)
    attr_accessor :ammattihenkilonumero
    # (no documentation provided)
    attr_accessor :ammattihenkilo
    # (no documentation provided)
    attr_accessor :versionumero
    # (no documentation provided)
    attr_accessor :asiat
    # (no documentation provided)
    attr_accessor :palveluyksikkoAsiakkuudet
    # (no documentation provided)
    attr_accessor :suostumusTieto
    # (no documentation provided)
    attr_accessor :muuttajanumero
    # (no documentation provided)
    attr_accessor :muuttaja
    # (no documentation provided)
    attr_accessor :formId

    # the json hash for this PalvelutehtavanAsiakkuusDto
    def to_jaxb_json_hash
      _h = super
      _h['laatijanumero'] = laatijanumero.to_jaxb_json_hash unless laatijanumero.nil?
      _h['laatija'] = laatija.to_jaxb_json_hash unless laatija.nil?
      _h['asiakkuudenTila'] = asiakkuudenTila.to_jaxb_json_hash unless asiakkuudenTila.nil?
      _h['asiakasnumero'] = asiakasnumero.to_jaxb_json_hash unless asiakasnumero.nil?
      _h['asiakas'] = asiakas.to_jaxb_json_hash unless asiakas.nil?
      _h['palvelutehtava'] = palvelutehtava.to_jaxb_json_hash unless palvelutehtava.nil?
      _h['alkamisaika'] = alkamisaika.to_jaxb_json_hash unless alkamisaika.nil?
      _h['alkamispaiva'] = alkamispaiva.to_jaxb_json_hash unless alkamispaiva.nil?
      _h['paattymisaika'] = paattymisaika.to_jaxb_json_hash unless paattymisaika.nil?
      _h['paattymispaiva'] = paattymispaiva.to_jaxb_json_hash unless paattymispaiva.nil?
      _h['ammattihenkilonumero'] = ammattihenkilonumero.to_jaxb_json_hash unless ammattihenkilonumero.nil?
      _h['ammattihenkilo'] = ammattihenkilo.to_jaxb_json_hash unless ammattihenkilo.nil?
      _h['versionumero'] = versionumero.to_jaxb_json_hash unless versionumero.nil?
      if !asiat.nil?
        _ha = Array.new
        asiat.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['asiat'] = _ha
      end
      if !palveluyksikkoAsiakkuudet.nil?
        _ha = Array.new
        palveluyksikkoAsiakkuudet.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['palveluyksikkoAsiakkuudet'] = _ha
      end
      _h['suostumusTieto'] = suostumusTieto.to_jaxb_json_hash unless suostumusTieto.nil?
      _h['muuttajanumero'] = muuttajanumero.to_jaxb_json_hash unless muuttajanumero.nil?
      _h['muuttaja'] = muuttaja.to_jaxb_json_hash unless muuttaja.nil?
      _h['formId'] = formId.to_jaxb_json_hash unless formId.nil?
      return _h
    end

    #initializes this PalvelutehtavanAsiakkuusDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['laatijanumero'].nil?
          _oa = _o['laatijanumero']
            if(_oa.is_a? Hash)
              @laatijanumero = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laatijanumero =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laatijanumero = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laatijanumero.push Fixnum.from_json(_item)
                 else
                   @laatijanumero.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laatijanumero = _oa
            end
          end
        if !_o['laatija'].nil?
          _oa = _o['laatija']
            if(_oa.is_a? Hash)
              @laatija = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laatija =  Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laatija = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laatija.push Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_item)
                 else
                   @laatija.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laatija = _oa
            end
          end
        if !_o['asiakkuudenTila'].nil?
          _oa = _o['asiakkuudenTila']
            if(_oa.is_a? Hash)
              @asiakkuudenTila = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakkuudenTila =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakkuudenTila = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakkuudenTila.push Boolean.from_json(_item)
                 else
                   @asiakkuudenTila.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakkuudenTila = _oa
            end
          end
        if !_o['asiakasnumero'].nil?
          _oa = _o['asiakasnumero']
            if(_oa.is_a? Hash)
              @asiakasnumero = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakasnumero =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakasnumero = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakasnumero.push Fixnum.from_json(_item)
                 else
                   @asiakasnumero.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakasnumero = _oa
            end
          end
        if !_o['asiakas'].nil?
          _oa = _o['asiakas']
            if(_oa.is_a? Hash)
              @asiakas = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakas =  Fi::Mediconsult::Core::Client::Dto::Omistaja::Patient.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakas = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakas.push Fi::Mediconsult::Core::Client::Dto::Omistaja::Patient.from_json(_item)
                 else
                   @asiakas.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakas = _oa
            end
          end
        if !_o['palvelutehtava'].nil?
          _oa = _o['palvelutehtava']
            if(_oa.is_a? Hash)
              @palvelutehtava = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palvelutehtava =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palvelutehtava = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palvelutehtava.push Fixnum.from_json(_item)
                 else
                   @palvelutehtava.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palvelutehtava = _oa
            end
          end
        if !_o['alkamisaika'].nil?
          _oa = _o['alkamisaika']
            if(_oa.is_a? Hash)
              @alkamisaika = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @alkamisaika =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @alkamisaika = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @alkamisaika.push Time.from_json(_item)
                 else
                   @alkamisaika.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @alkamisaika = _oa
            end
          end
        if !_o['alkamispaiva'].nil?
          _oa = _o['alkamispaiva']
            if(_oa.is_a? Hash)
              @alkamispaiva = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @alkamispaiva =  java.time::LocalDate.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @alkamispaiva = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @alkamispaiva.push java.time::LocalDate.from_json(_item)
                 else
                   @alkamispaiva.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @alkamispaiva = _oa
            end
          end
        if !_o['paattymisaika'].nil?
          _oa = _o['paattymisaika']
            if(_oa.is_a? Hash)
              @paattymisaika = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @paattymisaika =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @paattymisaika = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @paattymisaika.push Time.from_json(_item)
                 else
                   @paattymisaika.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @paattymisaika = _oa
            end
          end
        if !_o['paattymispaiva'].nil?
          _oa = _o['paattymispaiva']
            if(_oa.is_a? Hash)
              @paattymispaiva = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @paattymispaiva =  java.time::LocalDate.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @paattymispaiva = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @paattymispaiva.push java.time::LocalDate.from_json(_item)
                 else
                   @paattymispaiva.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @paattymispaiva = _oa
            end
          end
        if !_o['ammattihenkilonumero'].nil?
          _oa = _o['ammattihenkilonumero']
            if(_oa.is_a? Hash)
              @ammattihenkilonumero = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ammattihenkilonumero =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ammattihenkilonumero = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ammattihenkilonumero.push Fixnum.from_json(_item)
                 else
                   @ammattihenkilonumero.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ammattihenkilonumero = _oa
            end
          end
        if !_o['ammattihenkilo'].nil?
          _oa = _o['ammattihenkilo']
            if(_oa.is_a? Hash)
              @ammattihenkilo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ammattihenkilo =  Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ammattihenkilo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ammattihenkilo.push Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_item)
                 else
                   @ammattihenkilo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ammattihenkilo = _oa
            end
          end
        if !_o['versionumero'].nil?
          _oa = _o['versionumero']
            if(_oa.is_a? Hash)
              @versionumero = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @versionumero =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @versionumero = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @versionumero.push Fixnum.from_json(_item)
                 else
                   @versionumero.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @versionumero = _oa
            end
          end
        if !_o['asiat'].nil?
          _oa = _o['asiat']
            if(_oa.is_a? Hash)
              @asiat = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiat =  Fi::Mediconsult::Medisos::Dto::AsiaDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiat = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiat.push Fi::Mediconsult::Medisos::Dto::AsiaDto.from_json(_item)
                 else
                   @asiat.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiat = _oa
            end
          end
        if !_o['palveluyksikkoAsiakkuudet'].nil?
          _oa = _o['palveluyksikkoAsiakkuudet']
            if(_oa.is_a? Hash)
              @palveluyksikkoAsiakkuudet = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palveluyksikkoAsiakkuudet =  Fi::Mediconsult::Medisos::Dto::PalveluyksikkoAsiakkuusDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palveluyksikkoAsiakkuudet = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palveluyksikkoAsiakkuudet.push Fi::Mediconsult::Medisos::Dto::PalveluyksikkoAsiakkuusDto.from_json(_item)
                 else
                   @palveluyksikkoAsiakkuudet.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palveluyksikkoAsiakkuudet = _oa
            end
          end
        if !_o['suostumusTieto'].nil?
          _oa = _o['suostumusTieto']
            if(_oa.is_a? Hash)
              @suostumusTieto = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @suostumusTieto =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @suostumusTieto = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @suostumusTieto.push Boolean.from_json(_item)
                 else
                   @suostumusTieto.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @suostumusTieto = _oa
            end
          end
        if !_o['muuttajanumero'].nil?
          _oa = _o['muuttajanumero']
            if(_oa.is_a? Hash)
              @muuttajanumero = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @muuttajanumero =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @muuttajanumero = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @muuttajanumero.push Fixnum.from_json(_item)
                 else
                   @muuttajanumero.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @muuttajanumero = _oa
            end
          end
        if !_o['muuttaja'].nil?
          _oa = _o['muuttaja']
            if(_oa.is_a? Hash)
              @muuttaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @muuttaja =  Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @muuttaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @muuttaja.push Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_item)
                 else
                   @muuttaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @muuttaja = _oa
            end
          end
        if !_o['formId'].nil?
          _oa = _o['formId']
            if(_oa.is_a? Hash)
              @formId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @formId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @formId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @formId.push Fixnum.from_json(_item)
                 else
                   @formId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @formId = _oa
            end
          end
    end

    # constructs a PalvelutehtavanAsiakkuusDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Laakitys

  # (no documentation provided)
  class LaakitysKayttoaihe < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # Returns the row number, which arranges the LaakitysKayttoaihe entities in order of importance
    attr_accessor :rivi
    # Returns the unique id of Kayttoaihe
    attr_accessor :numero
    # Returns the name of the Kayttoaihe in plain languate
    attr_accessor :selite
    # Returns the name of the Kayttoaihe which is printed to the prescription
    attr_accessor :reseptiteksti
    # Returns the origin of the Kayttoaihe
    # -&quot;O&quot; if added by organization itself
    # -&quot;A&quot; or &quot;M&quot; otherwise
    attr_accessor :alkupera
    # Returns the type of the Kayttoaihe
    # -&quot;C&quot; if Kayttoaihe
    # -&quot;G&quot; if group
    # -&quot;D&quot; if deleted
    attr_accessor :tyyppi
    # Returns the code of the kayttoaihe removal. &#39;E&#39; - not removed, &#39;K&#39; = removed
    attr_accessor :poistettu
    # Returns the actual DB-change time of the Kayttoaihe
    attr_accessor :muutosaika
    # Returns the organization in which the change has been made
    attr_accessor :muutospaikka

    # the json hash for this LaakitysKayttoaihe
    def to_jaxb_json_hash
      _h = super
      _h['rivi'] = rivi.to_jaxb_json_hash unless rivi.nil?
      _h['numero'] = numero.to_jaxb_json_hash unless numero.nil?
      _h['selite'] = selite.to_jaxb_json_hash unless selite.nil?
      _h['reseptiteksti'] = reseptiteksti.to_jaxb_json_hash unless reseptiteksti.nil?
      _h['alkupera'] = alkupera.to_jaxb_json_hash unless alkupera.nil?
      _h['tyyppi'] = tyyppi.to_jaxb_json_hash unless tyyppi.nil?
      _h['poistettu'] = poistettu.to_jaxb_json_hash unless poistettu.nil?
      _h['muutosaika'] = muutosaika.to_jaxb_json_hash unless muutosaika.nil?
      _h['muutospaikka'] = muutospaikka.to_jaxb_json_hash unless muutospaikka.nil?
      return _h
    end

    #initializes this LaakitysKayttoaihe with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['rivi'].nil?
          _oa = _o['rivi']
            if(_oa.is_a? Hash)
              @rivi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rivi =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rivi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rivi.push Fixnum.from_json(_item)
                 else
                   @rivi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rivi = _oa
            end
          end
        if !_o['numero'].nil?
          _oa = _o['numero']
            if(_oa.is_a? Hash)
              @numero = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @numero =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @numero = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @numero.push Fixnum.from_json(_item)
                 else
                   @numero.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @numero = _oa
            end
          end
        if !_o['selite'].nil?
          _oa = _o['selite']
            if(_oa.is_a? Hash)
              @selite = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @selite =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @selite = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @selite.push String.from_json(_item)
                 else
                   @selite.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @selite = _oa
            end
          end
        if !_o['reseptiteksti'].nil?
          _oa = _o['reseptiteksti']
            if(_oa.is_a? Hash)
              @reseptiteksti = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @reseptiteksti =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @reseptiteksti = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @reseptiteksti.push String.from_json(_item)
                 else
                   @reseptiteksti.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @reseptiteksti = _oa
            end
          end
        if !_o['alkupera'].nil?
          _oa = _o['alkupera']
            if(_oa.is_a? Hash)
              @alkupera = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @alkupera =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @alkupera = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @alkupera.push Fixnum.from_json(_item)
                 else
                   @alkupera.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @alkupera = _oa
            end
          end
        if !_o['tyyppi'].nil?
          _oa = _o['tyyppi']
            if(_oa.is_a? Hash)
              @tyyppi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tyyppi =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tyyppi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tyyppi.push Fixnum.from_json(_item)
                 else
                   @tyyppi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tyyppi = _oa
            end
          end
        if !_o['poistettu'].nil?
          _oa = _o['poistettu']
            if(_oa.is_a? Hash)
              @poistettu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @poistettu =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @poistettu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @poistettu.push Fixnum.from_json(_item)
                 else
                   @poistettu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @poistettu = _oa
            end
          end
        if !_o['muutosaika'].nil?
          _oa = _o['muutosaika']
            if(_oa.is_a? Hash)
              @muutosaika = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @muutosaika =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @muutosaika = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @muutosaika.push Time.from_json(_item)
                 else
                   @muutosaika.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @muutosaika = _oa
            end
          end
        if !_o['muutospaikka'].nil?
          _oa = _o['muutospaikka']
            if(_oa.is_a? Hash)
              @muutospaikka = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @muutospaikka =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @muutospaikka = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @muutospaikka.push Fixnum.from_json(_item)
                 else
                   @muutospaikka.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @muutospaikka = _oa
            end
          end
    end

    # constructs a LaakitysKayttoaihe from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Event

  # (no documentation provided)
  class EventWorkerDto < Fi::Mediconsult::Mediplan::Dto::Event::EventParticipantDto 

    # the skillid
    attr_accessor :skillid
    # (no documentation provided)
    attr_accessor :skillName
    # (no documentation provided)
    attr_accessor :role
    # the workingHoursConflict
    attr_accessor :workingHoursConflict
    # (no documentation provided)
    attr_accessor :primaryNurse

    # the json hash for this EventWorkerDto
    def to_jaxb_json_hash
      _h = super
      _h['skillid'] = skillid.to_jaxb_json_hash unless skillid.nil?
      _h['skillName'] = skillName.to_jaxb_json_hash unless skillName.nil?
      _h['role'] = role.to_jaxb_json_hash unless role.nil?
      _h['workingHoursConflict'] = workingHoursConflict.to_jaxb_json_hash unless workingHoursConflict.nil?
      _h['primaryNurse'] = primaryNurse.to_jaxb_json_hash unless primaryNurse.nil?
      return _h
    end

    #initializes this EventWorkerDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['skillid'].nil?
          _oa = _o['skillid']
            if(_oa.is_a? Hash)
              @skillid = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @skillid =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @skillid = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @skillid.push Bignum.from_json(_item)
                 else
                   @skillid.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @skillid = _oa
            end
          end
        if !_o['skillName'].nil?
          _oa = _o['skillName']
            if(_oa.is_a? Hash)
              @skillName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @skillName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @skillName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @skillName.push String.from_json(_item)
                 else
                   @skillName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @skillName = _oa
            end
          end
        if !_o['role'].nil?
          _oa = _o['role']
            if(_oa.is_a? Hash)
              @role = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @role =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @role = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @role.push String.from_json(_item)
                 else
                   @role.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @role = _oa
            end
          end
        if !_o['workingHoursConflict'].nil?
          _oa = _o['workingHoursConflict']
            if(_oa.is_a? Hash)
              @workingHoursConflict = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @workingHoursConflict =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @workingHoursConflict = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @workingHoursConflict.push Boolean.from_json(_item)
                 else
                   @workingHoursConflict.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @workingHoursConflict = _oa
            end
          end
        if !_o['primaryNurse'].nil?
          _oa = _o['primaryNurse']
            if(_oa.is_a? Hash)
              @primaryNurse = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @primaryNurse =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @primaryNurse = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @primaryNurse.push Boolean.from_json(_item)
                 else
                   @primaryNurse.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @primaryNurse = _oa
            end
          end
    end

    # constructs a EventWorkerDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class RiskCertainty

    # (no documentation provided)
    SUSPICION = "SUSPICION"

    # (no documentation provided)
    CERTAIN = "CERTAIN"

    # (no documentation provided)
    FIXED = "FIXED"

    # (no documentation provided)
    LIKELY = "LIKELY"
  end

end

end

end

end

end

module Fi

module Mediconsult

module Medisos

module Dto

  # (no documentation provided)
  class AsiakirjaTietoDto < Fi::Mediconsult::Medisos::Dto::MediSosDtoBase 

    # (no documentation provided)
    attr_accessor :asiakirjanNimi
    # (no documentation provided)
    attr_accessor :asiakirjaId
    # (no documentation provided)
    attr_accessor :laatija
    # (no documentation provided)
    attr_accessor :asiakirjanTila
    # (no documentation provided)
    attr_accessor :asiakirjanTyyppi
    # (no documentation provided)
    attr_accessor :palvelutehtava
    # (no documentation provided)
    attr_accessor :sosiaalipalveluList
    # (no documentation provided)
    attr_accessor :prosessinvaiheLista
    # (no documentation provided)
    attr_accessor :asiakirjaviittaaLista
    # (no documentation provided)
    attr_accessor :asiakirjaanviitataanLiiteasiakirjallaLista
    # (no documentation provided)
    attr_accessor :asiakirjaanviitataanLista
    # (no documentation provided)
    attr_accessor :laatijaInfo
    # (no documentation provided)
    attr_accessor :palveluyksikko
    # (no documentation provided)
    attr_accessor :paatoksentekija
    # (no documentation provided)
    attr_accessor :palvelunjarjestaja
    # (no documentation provided)
    attr_accessor :palveluntuottaja
    # (no documentation provided)
    attr_accessor :palveluntoteuttaja
    # (no documentation provided)
    attr_accessor :valmistelija
    # (no documentation provided)
    attr_accessor :ratkaisu
    # (no documentation provided)
    attr_accessor :rajoitusKuvaus

    # the json hash for this AsiakirjaTietoDto
    def to_jaxb_json_hash
      _h = super
      _h['asiakirjanNimi'] = asiakirjanNimi.to_jaxb_json_hash unless asiakirjanNimi.nil?
      _h['asiakirjaId'] = asiakirjaId.to_jaxb_json_hash unless asiakirjaId.nil?
      _h['laatija'] = laatija.to_jaxb_json_hash unless laatija.nil?
      _h['asiakirjanTila'] = asiakirjanTila.to_jaxb_json_hash unless asiakirjanTila.nil?
      _h['asiakirjanTyyppi'] = asiakirjanTyyppi.to_jaxb_json_hash unless asiakirjanTyyppi.nil?
      _h['palvelutehtava'] = palvelutehtava.to_jaxb_json_hash unless palvelutehtava.nil?
      if !sosiaalipalveluList.nil?
        _ha = Array.new
        sosiaalipalveluList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['sosiaalipalveluList'] = _ha
      end
      if !prosessinvaiheLista.nil?
        _ha = Array.new
        prosessinvaiheLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['prosessinvaiheLista'] = _ha
      end
      if !asiakirjaviittaaLista.nil?
        _ha = Array.new
        asiakirjaviittaaLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['asiakirjaviittaaLista'] = _ha
      end
      if !asiakirjaanviitataanLiiteasiakirjallaLista.nil?
        _ha = Array.new
        asiakirjaanviitataanLiiteasiakirjallaLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['asiakirjaanviitataanLiiteasiakirjallaLista'] = _ha
      end
      if !asiakirjaanviitataanLista.nil?
        _ha = Array.new
        asiakirjaanviitataanLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['asiakirjaanviitataanLista'] = _ha
      end
      _h['laatijaInfo'] = laatijaInfo.to_jaxb_json_hash unless laatijaInfo.nil?
      _h['palveluyksikko'] = palveluyksikko.to_jaxb_json_hash unless palveluyksikko.nil?
      _h['paatoksentekija'] = paatoksentekija.to_jaxb_json_hash unless paatoksentekija.nil?
      _h['palvelunjarjestaja'] = palvelunjarjestaja.to_jaxb_json_hash unless palvelunjarjestaja.nil?
      _h['palveluntuottaja'] = palveluntuottaja.to_jaxb_json_hash unless palveluntuottaja.nil?
      _h['palveluntoteuttaja'] = palveluntoteuttaja.to_jaxb_json_hash unless palveluntoteuttaja.nil?
      _h['valmistelija'] = valmistelija.to_jaxb_json_hash unless valmistelija.nil?
      _h['ratkaisu'] = ratkaisu.to_jaxb_json_hash unless ratkaisu.nil?
      _h['rajoitusKuvaus'] = rajoitusKuvaus.to_jaxb_json_hash unless rajoitusKuvaus.nil?
      return _h
    end

    #initializes this AsiakirjaTietoDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['asiakirjanNimi'].nil?
          _oa = _o['asiakirjanNimi']
            if(_oa.is_a? Hash)
              @asiakirjanNimi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakirjanNimi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakirjanNimi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakirjanNimi.push String.from_json(_item)
                 else
                   @asiakirjanNimi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakirjanNimi = _oa
            end
          end
        if !_o['asiakirjaId'].nil?
          _oa = _o['asiakirjaId']
            if(_oa.is_a? Hash)
              @asiakirjaId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakirjaId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakirjaId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakirjaId.push Bignum.from_json(_item)
                 else
                   @asiakirjaId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakirjaId = _oa
            end
          end
        if !_o['laatija'].nil?
          _oa = _o['laatija']
            if(_oa.is_a? Hash)
              @laatija = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laatija =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laatija = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laatija.push Fixnum.from_json(_item)
                 else
                   @laatija.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laatija = _oa
            end
          end
        if !_o['asiakirjanTila'].nil?
          _oa = _o['asiakirjanTila']
            if(_oa.is_a? Hash)
              @asiakirjanTila = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakirjanTila =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakirjanTila = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakirjanTila.push String.from_json(_item)
                 else
                   @asiakirjanTila.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakirjanTila = _oa
            end
          end
        if !_o['asiakirjanTyyppi'].nil?
          _oa = _o['asiakirjanTyyppi']
            if(_oa.is_a? Hash)
              @asiakirjanTyyppi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakirjanTyyppi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakirjanTyyppi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakirjanTyyppi.push String.from_json(_item)
                 else
                   @asiakirjanTyyppi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakirjanTyyppi = _oa
            end
          end
        if !_o['palvelutehtava'].nil?
          _oa = _o['palvelutehtava']
            if(_oa.is_a? Hash)
              @palvelutehtava = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palvelutehtava =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palvelutehtava = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palvelutehtava.push String.from_json(_item)
                 else
                   @palvelutehtava.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palvelutehtava = _oa
            end
          end
        if !_o['sosiaalipalveluList'].nil?
          _oa = _o['sosiaalipalveluList']
            if(_oa.is_a? Hash)
              @sosiaalipalveluList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @sosiaalipalveluList =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @sosiaalipalveluList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @sosiaalipalveluList.push String.from_json(_item)
                 else
                   @sosiaalipalveluList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @sosiaalipalveluList = _oa
            end
          end
        if !_o['prosessinvaiheLista'].nil?
          _oa = _o['prosessinvaiheLista']
            if(_oa.is_a? Hash)
              @prosessinvaiheLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @prosessinvaiheLista =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @prosessinvaiheLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @prosessinvaiheLista.push String.from_json(_item)
                 else
                   @prosessinvaiheLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @prosessinvaiheLista = _oa
            end
          end
        if !_o['asiakirjaviittaaLista'].nil?
          _oa = _o['asiakirjaviittaaLista']
            if(_oa.is_a? Hash)
              @asiakirjaviittaaLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakirjaviittaaLista =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakirjaviittaaLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakirjaviittaaLista.push Bignum.from_json(_item)
                 else
                   @asiakirjaviittaaLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakirjaviittaaLista = _oa
            end
          end
        if !_o['asiakirjaanviitataanLiiteasiakirjallaLista'].nil?
          _oa = _o['asiakirjaanviitataanLiiteasiakirjallaLista']
            if(_oa.is_a? Hash)
              @asiakirjaanviitataanLiiteasiakirjallaLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakirjaanviitataanLiiteasiakirjallaLista =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakirjaanviitataanLiiteasiakirjallaLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakirjaanviitataanLiiteasiakirjallaLista.push Bignum.from_json(_item)
                 else
                   @asiakirjaanviitataanLiiteasiakirjallaLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakirjaanviitataanLiiteasiakirjallaLista = _oa
            end
          end
        if !_o['asiakirjaanviitataanLista'].nil?
          _oa = _o['asiakirjaanviitataanLista']
            if(_oa.is_a? Hash)
              @asiakirjaanviitataanLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakirjaanviitataanLista =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakirjaanviitataanLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakirjaanviitataanLista.push Bignum.from_json(_item)
                 else
                   @asiakirjaanviitataanLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakirjaanviitataanLista = _oa
            end
          end
        if !_o['laatijaInfo'].nil?
          _oa = _o['laatijaInfo']
            if(_oa.is_a? Hash)
              @laatijaInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laatijaInfo =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laatijaInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laatijaInfo.push String.from_json(_item)
                 else
                   @laatijaInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laatijaInfo = _oa
            end
          end
        if !_o['palveluyksikko'].nil?
          _oa = _o['palveluyksikko']
            if(_oa.is_a? Hash)
              @palveluyksikko = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palveluyksikko =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palveluyksikko = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palveluyksikko.push String.from_json(_item)
                 else
                   @palveluyksikko.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palveluyksikko = _oa
            end
          end
        if !_o['paatoksentekija'].nil?
          _oa = _o['paatoksentekija']
            if(_oa.is_a? Hash)
              @paatoksentekija = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @paatoksentekija =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @paatoksentekija = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @paatoksentekija.push String.from_json(_item)
                 else
                   @paatoksentekija.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @paatoksentekija = _oa
            end
          end
        if !_o['palvelunjarjestaja'].nil?
          _oa = _o['palvelunjarjestaja']
            if(_oa.is_a? Hash)
              @palvelunjarjestaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palvelunjarjestaja =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palvelunjarjestaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palvelunjarjestaja.push String.from_json(_item)
                 else
                   @palvelunjarjestaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palvelunjarjestaja = _oa
            end
          end
        if !_o['palveluntuottaja'].nil?
          _oa = _o['palveluntuottaja']
            if(_oa.is_a? Hash)
              @palveluntuottaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palveluntuottaja =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palveluntuottaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palveluntuottaja.push String.from_json(_item)
                 else
                   @palveluntuottaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palveluntuottaja = _oa
            end
          end
        if !_o['palveluntoteuttaja'].nil?
          _oa = _o['palveluntoteuttaja']
            if(_oa.is_a? Hash)
              @palveluntoteuttaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palveluntoteuttaja =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palveluntoteuttaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palveluntoteuttaja.push String.from_json(_item)
                 else
                   @palveluntoteuttaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palveluntoteuttaja = _oa
            end
          end
        if !_o['valmistelija'].nil?
          _oa = _o['valmistelija']
            if(_oa.is_a? Hash)
              @valmistelija = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @valmistelija =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @valmistelija = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @valmistelija.push String.from_json(_item)
                 else
                   @valmistelija.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @valmistelija = _oa
            end
          end
        if !_o['ratkaisu'].nil?
          _oa = _o['ratkaisu']
            if(_oa.is_a? Hash)
              @ratkaisu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ratkaisu =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ratkaisu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ratkaisu.push String.from_json(_item)
                 else
                   @ratkaisu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ratkaisu = _oa
            end
          end
        if !_o['rajoitusKuvaus'].nil?
          _oa = _o['rajoitusKuvaus']
            if(_oa.is_a? Hash)
              @rajoitusKuvaus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rajoitusKuvaus =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rajoitusKuvaus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rajoitusKuvaus.push String.from_json(_item)
                 else
                   @rajoitusKuvaus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rajoitusKuvaus = _oa
            end
          end
    end

    # constructs a AsiakirjaTietoDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Medisos

module Dto

  # (no documentation provided)
  class LaskuDto < Fi::Mediconsult::Medisos::Dto::MediSosDtoBase 

    # (no documentation provided)
    attr_accessor :suoritusperuste
    # (no documentation provided)
    attr_accessor :suoriteryhma
    # (no documentation provided)
    attr_accessor :yksikko
    # (no documentation provided)
    attr_accessor :yksikkoInfo
    # (no documentation provided)
    attr_accessor :sirrettyPaivamaara
    # (no documentation provided)
    attr_accessor :suorite
    # (no documentation provided)
    attr_accessor :omistaja
    # (no documentation provided)
    attr_accessor :omistajaInfo
    # (no documentation provided)
    attr_accessor :laatija
    # (no documentation provided)
    attr_accessor :laatijaInfo
    # (no documentation provided)
    attr_accessor :muuttaja
    # (no documentation provided)
    attr_accessor :muuttajaInfo
    # (no documentation provided)
    attr_accessor :suoritehinta
    # (no documentation provided)
    attr_accessor :maksukirjauslinkki
    # (no documentation provided)
    attr_accessor :kerroin
    # (no documentation provided)
    attr_accessor :kerroin2
    # (no documentation provided)
    attr_accessor :siirretty
    # (no documentation provided)
    attr_accessor :laskutuskohde
    # (no documentation provided)
    attr_accessor :laskutetaan
    # (no documentation provided)
    attr_accessor :laskunnumero
    # (no documentation provided)
    attr_accessor :laskunTila
    # (no documentation provided)
    attr_accessor :suoritteeksiSiirto
    # (no documentation provided)
    attr_accessor :vapaateksti
    # (no documentation provided)
    attr_accessor :formId

    # the json hash for this LaskuDto
    def to_jaxb_json_hash
      _h = super
      _h['suoritusperuste'] = suoritusperuste.to_jaxb_json_hash unless suoritusperuste.nil?
      _h['suoriteryhma'] = suoriteryhma.to_jaxb_json_hash unless suoriteryhma.nil?
      _h['yksikko'] = yksikko.to_jaxb_json_hash unless yksikko.nil?
      _h['yksikkoInfo'] = yksikkoInfo.to_jaxb_json_hash unless yksikkoInfo.nil?
      _h['sirrettyPaivamaara'] = sirrettyPaivamaara.to_jaxb_json_hash unless sirrettyPaivamaara.nil?
      _h['suorite'] = suorite.to_jaxb_json_hash unless suorite.nil?
      _h['omistaja'] = omistaja.to_jaxb_json_hash unless omistaja.nil?
      _h['omistajaInfo'] = omistajaInfo.to_jaxb_json_hash unless omistajaInfo.nil?
      _h['laatija'] = laatija.to_jaxb_json_hash unless laatija.nil?
      _h['laatijaInfo'] = laatijaInfo.to_jaxb_json_hash unless laatijaInfo.nil?
      _h['muuttaja'] = muuttaja.to_jaxb_json_hash unless muuttaja.nil?
      _h['muuttajaInfo'] = muuttajaInfo.to_jaxb_json_hash unless muuttajaInfo.nil?
      _h['suoritehinta'] = suoritehinta.to_jaxb_json_hash unless suoritehinta.nil?
      _h['maksukirjauslinkki'] = maksukirjauslinkki.to_jaxb_json_hash unless maksukirjauslinkki.nil?
      _h['kerroin'] = kerroin.to_jaxb_json_hash unless kerroin.nil?
      _h['kerroin2'] = kerroin2.to_jaxb_json_hash unless kerroin2.nil?
      _h['siirretty'] = siirretty.to_jaxb_json_hash unless siirretty.nil?
      _h['laskutuskohde'] = laskutuskohde.to_jaxb_json_hash unless laskutuskohde.nil?
      _h['laskutetaan'] = laskutetaan.to_jaxb_json_hash unless laskutetaan.nil?
      _h['laskunnumero'] = laskunnumero.to_jaxb_json_hash unless laskunnumero.nil?
      _h['laskunTila'] = laskunTila.to_jaxb_json_hash unless laskunTila.nil?
      _h['suoritteeksiSiirto'] = suoritteeksiSiirto.to_jaxb_json_hash unless suoritteeksiSiirto.nil?
      _h['vapaateksti'] = vapaateksti.to_jaxb_json_hash unless vapaateksti.nil?
      _h['formId'] = formId.to_jaxb_json_hash unless formId.nil?
      return _h
    end

    #initializes this LaskuDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['suoritusperuste'].nil?
          _oa = _o['suoritusperuste']
            if(_oa.is_a? Hash)
              @suoritusperuste = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @suoritusperuste =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @suoritusperuste = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @suoritusperuste.push Bignum.from_json(_item)
                 else
                   @suoritusperuste.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @suoritusperuste = _oa
            end
          end
        if !_o['suoriteryhma'].nil?
          _oa = _o['suoriteryhma']
            if(_oa.is_a? Hash)
              @suoriteryhma = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @suoriteryhma =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @suoriteryhma = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @suoriteryhma.push String.from_json(_item)
                 else
                   @suoriteryhma.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @suoriteryhma = _oa
            end
          end
        if !_o['yksikko'].nil?
          _oa = _o['yksikko']
            if(_oa.is_a? Hash)
              @yksikko = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @yksikko =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @yksikko = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @yksikko.push Fixnum.from_json(_item)
                 else
                   @yksikko.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @yksikko = _oa
            end
          end
        if !_o['yksikkoInfo'].nil?
          _oa = _o['yksikkoInfo']
            if(_oa.is_a? Hash)
              @yksikkoInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @yksikkoInfo =  Fi::Mediconsult::Core::Client::Dto::Omistaja::Unit.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @yksikkoInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @yksikkoInfo.push Fi::Mediconsult::Core::Client::Dto::Omistaja::Unit.from_json(_item)
                 else
                   @yksikkoInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @yksikkoInfo = _oa
            end
          end
        if !_o['sirrettyPaivamaara'].nil?
          _oa = _o['sirrettyPaivamaara']
            if(_oa.is_a? Hash)
              @sirrettyPaivamaara = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @sirrettyPaivamaara =  Java::Security::Timestamp.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @sirrettyPaivamaara = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @sirrettyPaivamaara.push Java::Security::Timestamp.from_json(_item)
                 else
                   @sirrettyPaivamaara.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @sirrettyPaivamaara = _oa
            end
          end
        if !_o['suorite'].nil?
          _oa = _o['suorite']
            if(_oa.is_a? Hash)
              @suorite = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @suorite =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @suorite = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @suorite.push String.from_json(_item)
                 else
                   @suorite.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @suorite = _oa
            end
          end
        if !_o['omistaja'].nil?
          _oa = _o['omistaja']
            if(_oa.is_a? Hash)
              @omistaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @omistaja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @omistaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @omistaja.push Fixnum.from_json(_item)
                 else
                   @omistaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @omistaja = _oa
            end
          end
        if !_o['omistajaInfo'].nil?
          _oa = _o['omistajaInfo']
            if(_oa.is_a? Hash)
              @omistajaInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @omistajaInfo =  Fi::Mediconsult::Core::Client::Dto::Omistaja::Patient.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @omistajaInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @omistajaInfo.push Fi::Mediconsult::Core::Client::Dto::Omistaja::Patient.from_json(_item)
                 else
                   @omistajaInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @omistajaInfo = _oa
            end
          end
        if !_o['laatija'].nil?
          _oa = _o['laatija']
            if(_oa.is_a? Hash)
              @laatija = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laatija =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laatija = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laatija.push Fixnum.from_json(_item)
                 else
                   @laatija.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laatija = _oa
            end
          end
        if !_o['laatijaInfo'].nil?
          _oa = _o['laatijaInfo']
            if(_oa.is_a? Hash)
              @laatijaInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laatijaInfo =  Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laatijaInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laatijaInfo.push Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_item)
                 else
                   @laatijaInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laatijaInfo = _oa
            end
          end
        if !_o['muuttaja'].nil?
          _oa = _o['muuttaja']
            if(_oa.is_a? Hash)
              @muuttaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @muuttaja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @muuttaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @muuttaja.push Fixnum.from_json(_item)
                 else
                   @muuttaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @muuttaja = _oa
            end
          end
        if !_o['muuttajaInfo'].nil?
          _oa = _o['muuttajaInfo']
            if(_oa.is_a? Hash)
              @muuttajaInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @muuttajaInfo =  Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @muuttajaInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @muuttajaInfo.push Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_item)
                 else
                   @muuttajaInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @muuttajaInfo = _oa
            end
          end
        if !_o['suoritehinta'].nil?
          _oa = _o['suoritehinta']
            if(_oa.is_a? Hash)
              @suoritehinta = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @suoritehinta =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @suoritehinta = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @suoritehinta.push Float.from_json(_item)
                 else
                   @suoritehinta.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @suoritehinta = _oa
            end
          end
        if !_o['maksukirjauslinkki'].nil?
          _oa = _o['maksukirjauslinkki']
            if(_oa.is_a? Hash)
              @maksukirjauslinkki = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @maksukirjauslinkki =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @maksukirjauslinkki = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @maksukirjauslinkki.push Fixnum.from_json(_item)
                 else
                   @maksukirjauslinkki.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @maksukirjauslinkki = _oa
            end
          end
        if !_o['kerroin'].nil?
          _oa = _o['kerroin']
            if(_oa.is_a? Hash)
              @kerroin = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kerroin =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kerroin = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kerroin.push Float.from_json(_item)
                 else
                   @kerroin.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kerroin = _oa
            end
          end
        if !_o['kerroin2'].nil?
          _oa = _o['kerroin2']
            if(_oa.is_a? Hash)
              @kerroin2 = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kerroin2 =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kerroin2 = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kerroin2.push Float.from_json(_item)
                 else
                   @kerroin2.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kerroin2 = _oa
            end
          end
        if !_o['siirretty'].nil?
          _oa = _o['siirretty']
            if(_oa.is_a? Hash)
              @siirretty = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @siirretty =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @siirretty = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @siirretty.push Boolean.from_json(_item)
                 else
                   @siirretty.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @siirretty = _oa
            end
          end
        if !_o['laskutuskohde'].nil?
          _oa = _o['laskutuskohde']
            if(_oa.is_a? Hash)
              @laskutuskohde = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laskutuskohde =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laskutuskohde = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laskutuskohde.push Fixnum.from_json(_item)
                 else
                   @laskutuskohde.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laskutuskohde = _oa
            end
          end
        if !_o['laskutetaan'].nil?
          _oa = _o['laskutetaan']
            if(_oa.is_a? Hash)
              @laskutetaan = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laskutetaan =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laskutetaan = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laskutetaan.push Fixnum.from_json(_item)
                 else
                   @laskutetaan.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laskutetaan = _oa
            end
          end
        if !_o['laskunnumero'].nil?
          _oa = _o['laskunnumero']
            if(_oa.is_a? Hash)
              @laskunnumero = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laskunnumero =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laskunnumero = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laskunnumero.push Fixnum.from_json(_item)
                 else
                   @laskunnumero.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laskunnumero = _oa
            end
          end
        if !_o['laskunTila'].nil?
          _oa = _o['laskunTila']
            if(_oa.is_a? Hash)
              @laskunTila = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laskunTila =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laskunTila = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laskunTila.push Fixnum.from_json(_item)
                 else
                   @laskunTila.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laskunTila = _oa
            end
          end
        if !_o['suoritteeksiSiirto'].nil?
          _oa = _o['suoritteeksiSiirto']
            if(_oa.is_a? Hash)
              @suoritteeksiSiirto = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @suoritteeksiSiirto =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @suoritteeksiSiirto = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @suoritteeksiSiirto.push Fixnum.from_json(_item)
                 else
                   @suoritteeksiSiirto.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @suoritteeksiSiirto = _oa
            end
          end
        if !_o['vapaateksti'].nil?
          _oa = _o['vapaateksti']
            if(_oa.is_a? Hash)
              @vapaateksti = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vapaateksti =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vapaateksti = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vapaateksti.push String.from_json(_item)
                 else
                   @vapaateksti.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vapaateksti = _oa
            end
          end
        if !_o['formId'].nil?
          _oa = _o['formId']
            if(_oa.is_a? Hash)
              @formId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @formId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @formId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @formId.push Fixnum.from_json(_item)
                 else
                   @formId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @formId = _oa
            end
          end
    end

    # constructs a LaskuDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Title

module Config

  # (no documentation provided)
  class MeasurementType

    # (no documentation provided)
    Undefined = "Undefined"

    # (no documentation provided)
    Kokonaisluku = "Kokonaisluku"

    # (no documentation provided)
    Numeromuotoinen = "Numeromuotoinen"

    # (no documentation provided)
    Teksti = "Teksti"
  end

end

end

end

end

end

end

end

module Fi

module Mediconsult

module Medisos

module Dto

  # (no documentation provided)
  class AsiaKyselyDto < Fi::Mediconsult::Medisos::Dto::MediSosDtoBase 

    # (no documentation provided)
    attr_accessor :asiakasnumero
    # (no documentation provided)
    attr_accessor :pageSize
    # (no documentation provided)
    attr_accessor :pageIndex
    # (no documentation provided)
    attr_accessor :vapaasanaHakuList
    # (no documentation provided)
    attr_accessor :asiaNimiList
    # (no documentation provided)
    attr_accessor :asiaTilaList
    # (no documentation provided)
    attr_accessor :avausaikaList
    # (no documentation provided)
    attr_accessor :laatijanumeroList
    # (no documentation provided)
    attr_accessor :laatijaNimiList
    # (no documentation provided)
    attr_accessor :palvelutehtavaList
    # (no documentation provided)
    attr_accessor :yksikkonumeroList
    # (no documentation provided)
    attr_accessor :yksikonNimiList
    # (no documentation provided)
    attr_accessor :yksikonRooliList
    # (no documentation provided)
    attr_accessor :grouping
    # (no documentation provided)
    attr_accessor :includeViittaukset
    # (no documentation provided)
    attr_accessor :formId

    # the json hash for this AsiaKyselyDto
    def to_jaxb_json_hash
      _h = super
      _h['asiakasnumero'] = asiakasnumero.to_jaxb_json_hash unless asiakasnumero.nil?
      _h['pageSize'] = pageSize.to_jaxb_json_hash unless pageSize.nil?
      _h['pageIndex'] = pageIndex.to_jaxb_json_hash unless pageIndex.nil?
      if !vapaasanaHakuList.nil?
        _ha = Array.new
        vapaasanaHakuList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['vapaasanaHakuList'] = _ha
      end
      if !asiaNimiList.nil?
        _ha = Array.new
        asiaNimiList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['asiaNimiList'] = _ha
      end
      if !asiaTilaList.nil?
        _ha = Array.new
        asiaTilaList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['asiaTilaList'] = _ha
      end
      if !avausaikaList.nil?
        _ha = Array.new
        avausaikaList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['avausaikaList'] = _ha
      end
      if !laatijanumeroList.nil?
        _ha = Array.new
        laatijanumeroList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['laatijanumeroList'] = _ha
      end
      if !laatijaNimiList.nil?
        _ha = Array.new
        laatijaNimiList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['laatijaNimiList'] = _ha
      end
      if !palvelutehtavaList.nil?
        _ha = Array.new
        palvelutehtavaList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['palvelutehtavaList'] = _ha
      end
      if !yksikkonumeroList.nil?
        _ha = Array.new
        yksikkonumeroList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['yksikkonumeroList'] = _ha
      end
      if !yksikonNimiList.nil?
        _ha = Array.new
        yksikonNimiList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['yksikonNimiList'] = _ha
      end
      if !yksikonRooliList.nil?
        _ha = Array.new
        yksikonRooliList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['yksikonRooliList'] = _ha
      end
      _h['grouping'] = grouping.to_jaxb_json_hash unless grouping.nil?
      _h['includeViittaukset'] = includeViittaukset.to_jaxb_json_hash unless includeViittaukset.nil?
      _h['formId'] = formId.to_jaxb_json_hash unless formId.nil?
      return _h
    end

    #initializes this AsiaKyselyDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['asiakasnumero'].nil?
          _oa = _o['asiakasnumero']
            if(_oa.is_a? Hash)
              @asiakasnumero = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakasnumero =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakasnumero = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakasnumero.push Fixnum.from_json(_item)
                 else
                   @asiakasnumero.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakasnumero = _oa
            end
          end
        if !_o['pageSize'].nil?
          _oa = _o['pageSize']
            if(_oa.is_a? Hash)
              @pageSize = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @pageSize =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @pageSize = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @pageSize.push Fixnum.from_json(_item)
                 else
                   @pageSize.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @pageSize = _oa
            end
          end
        if !_o['pageIndex'].nil?
          _oa = _o['pageIndex']
            if(_oa.is_a? Hash)
              @pageIndex = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @pageIndex =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @pageIndex = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @pageIndex.push Fixnum.from_json(_item)
                 else
                   @pageIndex.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @pageIndex = _oa
            end
          end
        if !_o['vapaasanaHakuList'].nil?
          _oa = _o['vapaasanaHakuList']
            if(_oa.is_a? Hash)
              @vapaasanaHakuList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vapaasanaHakuList =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vapaasanaHakuList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vapaasanaHakuList.push String.from_json(_item)
                 else
                   @vapaasanaHakuList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vapaasanaHakuList = _oa
            end
          end
        if !_o['asiaNimiList'].nil?
          _oa = _o['asiaNimiList']
            if(_oa.is_a? Hash)
              @asiaNimiList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiaNimiList =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiaNimiList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiaNimiList.push String.from_json(_item)
                 else
                   @asiaNimiList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiaNimiList = _oa
            end
          end
        if !_o['asiaTilaList'].nil?
          _oa = _o['asiaTilaList']
            if(_oa.is_a? Hash)
              @asiaTilaList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiaTilaList =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiaTilaList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiaTilaList.push String.from_json(_item)
                 else
                   @asiaTilaList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiaTilaList = _oa
            end
          end
        if !_o['avausaikaList'].nil?
          _oa = _o['avausaikaList']
            if(_oa.is_a? Hash)
              @avausaikaList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @avausaikaList =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @avausaikaList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @avausaikaList.push Time.from_json(_item)
                 else
                   @avausaikaList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @avausaikaList = _oa
            end
          end
        if !_o['laatijanumeroList'].nil?
          _oa = _o['laatijanumeroList']
            if(_oa.is_a? Hash)
              @laatijanumeroList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laatijanumeroList =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laatijanumeroList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laatijanumeroList.push Fixnum.from_json(_item)
                 else
                   @laatijanumeroList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laatijanumeroList = _oa
            end
          end
        if !_o['laatijaNimiList'].nil?
          _oa = _o['laatijaNimiList']
            if(_oa.is_a? Hash)
              @laatijaNimiList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laatijaNimiList =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laatijaNimiList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laatijaNimiList.push String.from_json(_item)
                 else
                   @laatijaNimiList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laatijaNimiList = _oa
            end
          end
        if !_o['palvelutehtavaList'].nil?
          _oa = _o['palvelutehtavaList']
            if(_oa.is_a? Hash)
              @palvelutehtavaList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palvelutehtavaList =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palvelutehtavaList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palvelutehtavaList.push Fixnum.from_json(_item)
                 else
                   @palvelutehtavaList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palvelutehtavaList = _oa
            end
          end
        if !_o['yksikkonumeroList'].nil?
          _oa = _o['yksikkonumeroList']
            if(_oa.is_a? Hash)
              @yksikkonumeroList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @yksikkonumeroList =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @yksikkonumeroList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @yksikkonumeroList.push Fixnum.from_json(_item)
                 else
                   @yksikkonumeroList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @yksikkonumeroList = _oa
            end
          end
        if !_o['yksikonNimiList'].nil?
          _oa = _o['yksikonNimiList']
            if(_oa.is_a? Hash)
              @yksikonNimiList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @yksikonNimiList =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @yksikonNimiList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @yksikonNimiList.push String.from_json(_item)
                 else
                   @yksikonNimiList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @yksikonNimiList = _oa
            end
          end
        if !_o['yksikonRooliList'].nil?
          _oa = _o['yksikonRooliList']
            if(_oa.is_a? Hash)
              @yksikonRooliList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @yksikonRooliList =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @yksikonRooliList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @yksikonRooliList.push String.from_json(_item)
                 else
                   @yksikonRooliList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @yksikonRooliList = _oa
            end
          end
        if !_o['grouping'].nil?
          _oa = _o['grouping']
            if(_oa.is_a? Hash)
              @grouping = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @grouping =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @grouping = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @grouping.push String.from_json(_item)
                 else
                   @grouping.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @grouping = _oa
            end
          end
        if !_o['includeViittaukset'].nil?
          _oa = _o['includeViittaukset']
            if(_oa.is_a? Hash)
              @includeViittaukset = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @includeViittaukset =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @includeViittaukset = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @includeViittaukset.push Boolean.from_json(_item)
                 else
                   @includeViittaukset.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @includeViittaukset = _oa
            end
          end
        if !_o['formId'].nil?
          _oa = _o['formId']
            if(_oa.is_a? Hash)
              @formId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @formId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @formId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @formId.push Fixnum.from_json(_item)
                 else
                   @formId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @formId = _oa
            end
          end
    end

    # constructs a AsiaKyselyDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Laakitys

  # (no documentation provided)
  class LaakitysKuittaus < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # Returns the role of the user who has made an acknowledgement
    # -&quot;H&quot; if user is a nurse
    attr_accessor :rooli
    # Returns the time of the acknowledgement
    attr_accessor :kuitattu
    # Returns the user who made the acknowledgement
    attr_accessor :kuittaaja

    # the json hash for this LaakitysKuittaus
    def to_jaxb_json_hash
      _h = super
      _h['rooli'] = rooli.to_jaxb_json_hash unless rooli.nil?
      _h['kuitattu'] = kuitattu.to_jaxb_json_hash unless kuitattu.nil?
      _h['kuittaaja'] = kuittaaja.to_jaxb_json_hash unless kuittaaja.nil?
      return _h
    end

    #initializes this LaakitysKuittaus with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['rooli'].nil?
          _oa = _o['rooli']
            if(_oa.is_a? Hash)
              @rooli = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rooli =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rooli = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rooli.push Fixnum.from_json(_item)
                 else
                   @rooli.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rooli = _oa
            end
          end
        if !_o['kuitattu'].nil?
          _oa = _o['kuitattu']
            if(_oa.is_a? Hash)
              @kuitattu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kuitattu =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kuitattu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kuitattu.push Time.from_json(_item)
                 else
                   @kuitattu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kuitattu = _oa
            end
          end
        if !_o['kuittaaja'].nil?
          _oa = _o['kuittaaja']
            if(_oa.is_a? Hash)
              @kuittaaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kuittaaja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kuittaaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kuittaaja.push Fixnum.from_json(_item)
                 else
                   @kuittaaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kuittaaja = _oa
            end
          end
    end

    # constructs a LaakitysKuittaus from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Course

  # (no documentation provided)
  class NamedGroupMemberDto < Fi::Mediconsult::Mediplan::Dto::KuhaDtoBase 

    # (no documentation provided)
    attr_accessor :skill
    # (no documentation provided)
    attr_accessor :role
    # (no documentation provided)
    attr_accessor :removed
    # (no documentation provided)
    attr_accessor :workerId
    # the worker
    attr_accessor :worker

    # the json hash for this NamedGroupMemberDto
    def to_jaxb_json_hash
      _h = super
      _h['skill'] = skill.to_jaxb_json_hash unless skill.nil?
      _h['role'] = role.to_jaxb_json_hash unless role.nil?
      _h['removed'] = removed.to_jaxb_json_hash unless removed.nil?
      _h['workerId'] = workerId.to_jaxb_json_hash unless workerId.nil?
      _h['worker'] = worker.to_jaxb_json_hash unless worker.nil?
      return _h
    end

    #initializes this NamedGroupMemberDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['skill'].nil?
          _oa = _o['skill']
            if(_oa.is_a? Hash)
              @skill = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @skill =  Fi::Mediconsult::Mediplan::Dto::IdNamePair.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @skill = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @skill.push Fi::Mediconsult::Mediplan::Dto::IdNamePair.from_json(_item)
                 else
                   @skill.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @skill = _oa
            end
          end
        if !_o['role'].nil?
          _oa = _o['role']
            if(_oa.is_a? Hash)
              @role = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @role =  Fi::Mediconsult::Mediplan::Dto::IdNamePair.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @role = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @role.push Fi::Mediconsult::Mediplan::Dto::IdNamePair.from_json(_item)
                 else
                   @role.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @role = _oa
            end
          end
        if !_o['removed'].nil?
          _oa = _o['removed']
            if(_oa.is_a? Hash)
              @removed = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @removed =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @removed = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @removed.push Boolean.from_json(_item)
                 else
                   @removed.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @removed = _oa
            end
          end
        if !_o['workerId'].nil?
          _oa = _o['workerId']
            if(_oa.is_a? Hash)
              @workerId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @workerId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @workerId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @workerId.push Fixnum.from_json(_item)
                 else
                   @workerId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @workerId = _oa
            end
          end
        if !_o['worker'].nil?
          _oa = _o['worker']
            if(_oa.is_a? Hash)
              @worker = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @worker =  Fi::Mediconsult::Mediplan::Dto::Employee.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @worker = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @worker.push Fi::Mediconsult::Mediplan::Dto::Employee.from_json(_item)
                 else
                   @worker.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @worker = _oa
            end
          end
    end

    # constructs a NamedGroupMemberDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Enums

  # (no documentation provided)
  class ContentGroupVisibility

    # (no documentation provided)
    VISIBLE = "VISIBLE"

    # (no documentation provided)
    COLLAPSED = "COLLAPSED"

    # (no documentation provided)
    EXCLUDED = "EXCLUDED"
  end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Kanta

  # (no documentation provided)
  class LomakepalveluItem < Fi::Mediconsult::Core::Client::Dto::Kanta::KantaDTO 

    # (no documentation provided)
    attr_accessor :lomakeKentat
    # (no documentation provided)
    attr_accessor :invalidate
    # (no documentation provided)
    attr_accessor :documentInfo
    # (no documentation provided)
    attr_accessor :lomakeCDA
    # (no documentation provided)
    attr_accessor :kirjaaja
    # (no documentation provided)
    attr_accessor :lomakeFetchReason
    # (no documentation provided)
    attr_accessor :allekirjoitusCDA
    # (no documentation provided)
    attr_accessor :lomakeData
    # (no documentation provided)
    attr_accessor :id
    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :registerType
    # (no documentation provided)
    attr_accessor :deliver
    # (no documentation provided)
    attr_accessor :effectiveTime
    # (no documentation provided)
    attr_accessor :fetchNakyma
    # (no documentation provided)
    attr_accessor :allekirjoitusVarmenne

    # the json hash for this LomakepalveluItem
    def to_jaxb_json_hash
      _h = super
      _h['lomakeKentat'] = lomakeKentat.to_jaxb_json_hash unless lomakeKentat.nil?
      _h['invalidate'] = invalidate.to_jaxb_json_hash unless invalidate.nil?
      _h['documentInfo'] = documentInfo.to_jaxb_json_hash unless documentInfo.nil?
      _h['lomakeCDA'] = lomakeCDA.to_jaxb_json_hash unless lomakeCDA.nil?
      _h['kirjaaja'] = kirjaaja.to_jaxb_json_hash unless kirjaaja.nil?
      _h['lomakeFetchReason'] = lomakeFetchReason.to_jaxb_json_hash unless lomakeFetchReason.nil?
      _h['allekirjoitusCDA'] = allekirjoitusCDA.to_jaxb_json_hash unless allekirjoitusCDA.nil?
      _h['lomakeData'] = lomakeData.to_jaxb_json_hash unless lomakeData.nil?
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['registerType'] = registerType.to_jaxb_json_hash unless registerType.nil?
      _h['deliver'] = deliver.to_jaxb_json_hash unless deliver.nil?
      _h['effectiveTime'] = effectiveTime.to_jaxb_json_hash unless effectiveTime.nil?
      _h['fetchNakyma'] = fetchNakyma.to_jaxb_json_hash unless fetchNakyma.nil?
      _h['allekirjoitusVarmenne'] = allekirjoitusVarmenne.to_jaxb_json_hash unless allekirjoitusVarmenne.nil?
      return _h
    end

    #initializes this LomakepalveluItem with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['lomakeKentat'].nil?
          _oa = _o['lomakeKentat']
            if(_oa.is_a? Hash)
              @lomakeKentat = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lomakeKentat =  Fi::Mediconsult::Core::Client::Dto::Kanta::LomakeTietokentta.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lomakeKentat = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lomakeKentat.push Fi::Mediconsult::Core::Client::Dto::Kanta::LomakeTietokentta.from_json(_item)
                 else
                   @lomakeKentat.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lomakeKentat = _oa
            end
          end
        if !_o['invalidate'].nil?
          _oa = _o['invalidate']
            if(_oa.is_a? Hash)
              @invalidate = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @invalidate =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @invalidate = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @invalidate.push Boolean.from_json(_item)
                 else
                   @invalidate.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @invalidate = _oa
            end
          end
        if !_o['documentInfo'].nil?
          _oa = _o['documentInfo']
            if(_oa.is_a? Hash)
              @documentInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @documentInfo =  Fi::Mediconsult::Core::Client::Dto::Kanta::DocumentInfo.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @documentInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @documentInfo.push Fi::Mediconsult::Core::Client::Dto::Kanta::DocumentInfo.from_json(_item)
                 else
                   @documentInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @documentInfo = _oa
            end
          end
        if !_o['lomakeCDA'].nil?
          _oa = _o['lomakeCDA']
            if(_oa.is_a? Hash)
              @lomakeCDA = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lomakeCDA =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lomakeCDA = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lomakeCDA.push String.from_json(_item)
                 else
                   @lomakeCDA.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lomakeCDA = _oa
            end
          end
        if !_o['kirjaaja'].nil?
          _oa = _o['kirjaaja']
            if(_oa.is_a? Hash)
              @kirjaaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kirjaaja =  Fi::Mediconsult::Core::Client::Dto::Kanta::AmmattilaisenTiedot.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kirjaaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kirjaaja.push Fi::Mediconsult::Core::Client::Dto::Kanta::AmmattilaisenTiedot.from_json(_item)
                 else
                   @kirjaaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kirjaaja = _oa
            end
          end
        if !_o['lomakeFetchReason'].nil?
          _oa = _o['lomakeFetchReason']
            if(_oa.is_a? Hash)
              @lomakeFetchReason = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lomakeFetchReason =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lomakeFetchReason = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lomakeFetchReason.push String.from_json(_item)
                 else
                   @lomakeFetchReason.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lomakeFetchReason = _oa
            end
          end
        if !_o['allekirjoitusCDA'].nil?
          _oa = _o['allekirjoitusCDA']
            if(_oa.is_a? Hash)
              @allekirjoitusCDA = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @allekirjoitusCDA =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @allekirjoitusCDA = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @allekirjoitusCDA.push String.from_json(_item)
                 else
                   @allekirjoitusCDA.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @allekirjoitusCDA = _oa
            end
          end
        if !_o['lomakeData'].nil?
          _oa = _o['lomakeData']
            if(_oa.is_a? Hash)
              @lomakeData = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lomakeData =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lomakeData = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lomakeData.push String.from_json(_item)
                 else
                   @lomakeData.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lomakeData = _oa
            end
          end
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push String.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['registerType'].nil?
          _oa = _o['registerType']
            if(_oa.is_a? Hash)
              @registerType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @registerType =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @registerType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @registerType.push String.from_json(_item)
                 else
                   @registerType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @registerType = _oa
            end
          end
        if !_o['deliver'].nil?
          _oa = _o['deliver']
            if(_oa.is_a? Hash)
              @deliver = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @deliver =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @deliver = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @deliver.push Boolean.from_json(_item)
                 else
                   @deliver.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @deliver = _oa
            end
          end
        if !_o['effectiveTime'].nil?
          _oa = _o['effectiveTime']
            if(_oa.is_a? Hash)
              @effectiveTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @effectiveTime =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @effectiveTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @effectiveTime.push String.from_json(_item)
                 else
                   @effectiveTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @effectiveTime = _oa
            end
          end
        if !_o['fetchNakyma'].nil?
          _oa = _o['fetchNakyma']
            if(_oa.is_a? Hash)
              @fetchNakyma = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @fetchNakyma =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @fetchNakyma = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @fetchNakyma.push String.from_json(_item)
                 else
                   @fetchNakyma.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @fetchNakyma = _oa
            end
          end
        if !_o['allekirjoitusVarmenne'].nil?
          _oa = _o['allekirjoitusVarmenne']
            if(_oa.is_a? Hash)
              @allekirjoitusVarmenne = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @allekirjoitusVarmenne =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @allekirjoitusVarmenne = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @allekirjoitusVarmenne.push String.from_json(_item)
                 else
                   @allekirjoitusVarmenne.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @allekirjoitusVarmenne = _oa
            end
          end
    end

    # constructs a LomakepalveluItem from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Medisos

module Dto

  # (no documentation provided)
  class DocumentTemplateDto < Fi::Mediconsult::Medisos::Dto::MediSosDtoBase 

    # (no documentation provided)
    attr_accessor :laatijanumero
    # (no documentation provided)
    attr_accessor :muuttajanumero
    # (no documentation provided)
    attr_accessor :version
    # (no documentation provided)
    attr_accessor :locked
    # (no documentation provided)
    attr_accessor :lockerID
    # (no documentation provided)
    attr_accessor :lockerInfo
    # (no documentation provided)
    attr_accessor :lockedUntilTime
    # (no documentation provided)
    attr_accessor :unit
    # (no documentation provided)
    attr_accessor :unitInfo
    # (no documentation provided)
    attr_accessor :user
    # (no documentation provided)
    attr_accessor :userInfo
    # (no documentation provided)
    attr_accessor :sector
    # (no documentation provided)
    attr_accessor :templateType
    # (no documentation provided)
    attr_accessor :templateName
    # (no documentation provided)
    attr_accessor :koodistodata
    # (no documentation provided)
    attr_accessor :alpacaPostrender
    # (no documentation provided)
    attr_accessor :alpacaOptions
    # (no documentation provided)
    attr_accessor :alpacaSchema
    # (no documentation provided)
    attr_accessor :alpacaView
    # (no documentation provided)
    attr_accessor :alpacaData
    # (no documentation provided)
    attr_accessor :jsonData
    # (no documentation provided)
    attr_accessor :serviceArea
    # (no documentation provided)
    attr_accessor :sosiaalipalveluList
    # (no documentation provided)
    attr_accessor :palveluprosessiList
    # (no documentation provided)
    attr_accessor :laatijaInfo
    # (no documentation provided)
    attr_accessor :muuttajaInfo
    # (no documentation provided)
    attr_accessor :templaatinTila
    # (no documentation provided)
    attr_accessor :kanta
    # (no documentation provided)
    attr_accessor :asiakirjaFormId
    # (no documentation provided)
    attr_accessor :templateTHLStructureVersion

    # the json hash for this DocumentTemplateDto
    def to_jaxb_json_hash
      _h = super
      _h['laatijanumero'] = laatijanumero.to_jaxb_json_hash unless laatijanumero.nil?
      _h['muuttajanumero'] = muuttajanumero.to_jaxb_json_hash unless muuttajanumero.nil?
      _h['version'] = version.to_jaxb_json_hash unless version.nil?
      _h['locked'] = locked.to_jaxb_json_hash unless locked.nil?
      _h['lockerID'] = lockerID.to_jaxb_json_hash unless lockerID.nil?
      _h['lockerInfo'] = lockerInfo.to_jaxb_json_hash unless lockerInfo.nil?
      _h['lockedUntilTime'] = lockedUntilTime.to_jaxb_json_hash unless lockedUntilTime.nil?
      _h['unit'] = unit.to_jaxb_json_hash unless unit.nil?
      _h['unitInfo'] = unitInfo.to_jaxb_json_hash unless unitInfo.nil?
      _h['user'] = user.to_jaxb_json_hash unless user.nil?
      _h['userInfo'] = userInfo.to_jaxb_json_hash unless userInfo.nil?
      _h['sector'] = sector.to_jaxb_json_hash unless sector.nil?
      _h['templateType'] = templateType.to_jaxb_json_hash unless templateType.nil?
      _h['templateName'] = templateName.to_jaxb_json_hash unless templateName.nil?
      _h['koodistodata'] = koodistodata.to_jaxb_json_hash unless koodistodata.nil?
      _h['alpacaPostrender'] = alpacaPostrender.to_jaxb_json_hash unless alpacaPostrender.nil?
      _h['alpacaOptions'] = alpacaOptions.to_jaxb_json_hash unless alpacaOptions.nil?
      _h['alpacaSchema'] = alpacaSchema.to_jaxb_json_hash unless alpacaSchema.nil?
      _h['alpacaView'] = alpacaView.to_jaxb_json_hash unless alpacaView.nil?
      _h['alpacaData'] = alpacaData.to_jaxb_json_hash unless alpacaData.nil?
      _h['jsonData'] = jsonData.to_jaxb_json_hash unless jsonData.nil?
      _h['serviceArea'] = serviceArea.to_jaxb_json_hash unless serviceArea.nil?
      if !sosiaalipalveluList.nil?
        _ha = Array.new
        sosiaalipalveluList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['sosiaalipalveluList'] = _ha
      end
      if !palveluprosessiList.nil?
        _ha = Array.new
        palveluprosessiList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['palveluprosessiList'] = _ha
      end
      _h['laatijaInfo'] = laatijaInfo.to_jaxb_json_hash unless laatijaInfo.nil?
      _h['muuttajaInfo'] = muuttajaInfo.to_jaxb_json_hash unless muuttajaInfo.nil?
      _h['templaatinTila'] = templaatinTila.to_jaxb_json_hash unless templaatinTila.nil?
      _h['kanta'] = kanta.to_jaxb_json_hash unless kanta.nil?
      _h['asiakirjaFormId'] = asiakirjaFormId.to_jaxb_json_hash unless asiakirjaFormId.nil?
      _h['templateTHLStructureVersion'] = templateTHLStructureVersion.to_jaxb_json_hash unless templateTHLStructureVersion.nil?
      return _h
    end

    #initializes this DocumentTemplateDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['laatijanumero'].nil?
          _oa = _o['laatijanumero']
            if(_oa.is_a? Hash)
              @laatijanumero = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laatijanumero =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laatijanumero = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laatijanumero.push Fixnum.from_json(_item)
                 else
                   @laatijanumero.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laatijanumero = _oa
            end
          end
        if !_o['muuttajanumero'].nil?
          _oa = _o['muuttajanumero']
            if(_oa.is_a? Hash)
              @muuttajanumero = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @muuttajanumero =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @muuttajanumero = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @muuttajanumero.push Fixnum.from_json(_item)
                 else
                   @muuttajanumero.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @muuttajanumero = _oa
            end
          end
        if !_o['version'].nil?
          _oa = _o['version']
            if(_oa.is_a? Hash)
              @version = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @version =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @version = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @version.push Fixnum.from_json(_item)
                 else
                   @version.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @version = _oa
            end
          end
        if !_o['locked'].nil?
          _oa = _o['locked']
            if(_oa.is_a? Hash)
              @locked = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @locked =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @locked = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @locked.push Boolean.from_json(_item)
                 else
                   @locked.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @locked = _oa
            end
          end
        if !_o['lockerID'].nil?
          _oa = _o['lockerID']
            if(_oa.is_a? Hash)
              @lockerID = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lockerID =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lockerID = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lockerID.push Fixnum.from_json(_item)
                 else
                   @lockerID.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lockerID = _oa
            end
          end
        if !_o['lockerInfo'].nil?
          _oa = _o['lockerInfo']
            if(_oa.is_a? Hash)
              @lockerInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lockerInfo =  Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lockerInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lockerInfo.push Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_item)
                 else
                   @lockerInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lockerInfo = _oa
            end
          end
        if !_o['lockedUntilTime'].nil?
          _oa = _o['lockedUntilTime']
            if(_oa.is_a? Hash)
              @lockedUntilTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lockedUntilTime =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lockedUntilTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lockedUntilTime.push Time.from_json(_item)
                 else
                   @lockedUntilTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lockedUntilTime = _oa
            end
          end
        if !_o['unit'].nil?
          _oa = _o['unit']
            if(_oa.is_a? Hash)
              @unit = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @unit =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @unit = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @unit.push Fixnum.from_json(_item)
                 else
                   @unit.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @unit = _oa
            end
          end
        if !_o['unitInfo'].nil?
          _oa = _o['unitInfo']
            if(_oa.is_a? Hash)
              @unitInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @unitInfo =  Fi::Mediconsult::Core::Client::Dto::Omistaja::Unit.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @unitInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @unitInfo.push Fi::Mediconsult::Core::Client::Dto::Omistaja::Unit.from_json(_item)
                 else
                   @unitInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @unitInfo = _oa
            end
          end
        if !_o['user'].nil?
          _oa = _o['user']
            if(_oa.is_a? Hash)
              @user = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @user =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @user = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @user.push Fixnum.from_json(_item)
                 else
                   @user.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @user = _oa
            end
          end
        if !_o['userInfo'].nil?
          _oa = _o['userInfo']
            if(_oa.is_a? Hash)
              @userInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @userInfo =  Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @userInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @userInfo.push Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_item)
                 else
                   @userInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @userInfo = _oa
            end
          end
        if !_o['sector'].nil?
          _oa = _o['sector']
            if(_oa.is_a? Hash)
              @sector = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @sector =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @sector = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @sector.push String.from_json(_item)
                 else
                   @sector.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @sector = _oa
            end
          end
        if !_o['templateType'].nil?
          _oa = _o['templateType']
            if(_oa.is_a? Hash)
              @templateType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @templateType =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @templateType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @templateType.push String.from_json(_item)
                 else
                   @templateType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @templateType = _oa
            end
          end
        if !_o['templateName'].nil?
          _oa = _o['templateName']
            if(_oa.is_a? Hash)
              @templateName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @templateName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @templateName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @templateName.push String.from_json(_item)
                 else
                   @templateName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @templateName = _oa
            end
          end
        if !_o['koodistodata'].nil?
          _oa = _o['koodistodata']
            if(_oa.is_a? Hash)
              @koodistodata = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @koodistodata =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @koodistodata = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @koodistodata.push String.from_json(_item)
                 else
                   @koodistodata.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @koodistodata = _oa
            end
          end
        if !_o['alpacaPostrender'].nil?
          _oa = _o['alpacaPostrender']
            if(_oa.is_a? Hash)
              @alpacaPostrender = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @alpacaPostrender =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @alpacaPostrender = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @alpacaPostrender.push String.from_json(_item)
                 else
                   @alpacaPostrender.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @alpacaPostrender = _oa
            end
          end
        if !_o['alpacaOptions'].nil?
          _oa = _o['alpacaOptions']
            if(_oa.is_a? Hash)
              @alpacaOptions = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @alpacaOptions =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @alpacaOptions = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @alpacaOptions.push String.from_json(_item)
                 else
                   @alpacaOptions.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @alpacaOptions = _oa
            end
          end
        if !_o['alpacaSchema'].nil?
          _oa = _o['alpacaSchema']
            if(_oa.is_a? Hash)
              @alpacaSchema = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @alpacaSchema =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @alpacaSchema = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @alpacaSchema.push String.from_json(_item)
                 else
                   @alpacaSchema.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @alpacaSchema = _oa
            end
          end
        if !_o['alpacaView'].nil?
          _oa = _o['alpacaView']
            if(_oa.is_a? Hash)
              @alpacaView = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @alpacaView =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @alpacaView = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @alpacaView.push String.from_json(_item)
                 else
                   @alpacaView.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @alpacaView = _oa
            end
          end
        if !_o['alpacaData'].nil?
          _oa = _o['alpacaData']
            if(_oa.is_a? Hash)
              @alpacaData = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @alpacaData =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @alpacaData = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @alpacaData.push String.from_json(_item)
                 else
                   @alpacaData.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @alpacaData = _oa
            end
          end
        if !_o['jsonData'].nil?
          _oa = _o['jsonData']
            if(_oa.is_a? Hash)
              @jsonData = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @jsonData =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @jsonData = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @jsonData.push String.from_json(_item)
                 else
                   @jsonData.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @jsonData = _oa
            end
          end
        if !_o['serviceArea'].nil?
          _oa = _o['serviceArea']
            if(_oa.is_a? Hash)
              @serviceArea = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @serviceArea =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @serviceArea = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @serviceArea.push String.from_json(_item)
                 else
                   @serviceArea.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @serviceArea = _oa
            end
          end
        if !_o['sosiaalipalveluList'].nil?
          _oa = _o['sosiaalipalveluList']
            if(_oa.is_a? Hash)
              @sosiaalipalveluList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @sosiaalipalveluList =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @sosiaalipalveluList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @sosiaalipalveluList.push String.from_json(_item)
                 else
                   @sosiaalipalveluList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @sosiaalipalveluList = _oa
            end
          end
        if !_o['palveluprosessiList'].nil?
          _oa = _o['palveluprosessiList']
            if(_oa.is_a? Hash)
              @palveluprosessiList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palveluprosessiList =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palveluprosessiList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palveluprosessiList.push String.from_json(_item)
                 else
                   @palveluprosessiList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palveluprosessiList = _oa
            end
          end
        if !_o['laatijaInfo'].nil?
          _oa = _o['laatijaInfo']
            if(_oa.is_a? Hash)
              @laatijaInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laatijaInfo =  Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laatijaInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laatijaInfo.push Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_item)
                 else
                   @laatijaInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laatijaInfo = _oa
            end
          end
        if !_o['muuttajaInfo'].nil?
          _oa = _o['muuttajaInfo']
            if(_oa.is_a? Hash)
              @muuttajaInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @muuttajaInfo =  Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @muuttajaInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @muuttajaInfo.push Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_item)
                 else
                   @muuttajaInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @muuttajaInfo = _oa
            end
          end
        if !_o['templaatinTila'].nil?
          _oa = _o['templaatinTila']
            if(_oa.is_a? Hash)
              @templaatinTila = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @templaatinTila =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @templaatinTila = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @templaatinTila.push String.from_json(_item)
                 else
                   @templaatinTila.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @templaatinTila = _oa
            end
          end
        if !_o['kanta'].nil?
          _oa = _o['kanta']
            if(_oa.is_a? Hash)
              @kanta = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kanta =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kanta = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kanta.push Boolean.from_json(_item)
                 else
                   @kanta.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kanta = _oa
            end
          end
        if !_o['asiakirjaFormId'].nil?
          _oa = _o['asiakirjaFormId']
            if(_oa.is_a? Hash)
              @asiakirjaFormId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakirjaFormId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakirjaFormId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakirjaFormId.push Fixnum.from_json(_item)
                 else
                   @asiakirjaFormId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakirjaFormId = _oa
            end
          end
        if !_o['templateTHLStructureVersion'].nil?
          _oa = _o['templateTHLStructureVersion']
            if(_oa.is_a? Hash)
              @templateTHLStructureVersion = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @templateTHLStructureVersion =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @templateTHLStructureVersion = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @templateTHLStructureVersion.push String.from_json(_item)
                 else
                   @templateTHLStructureVersion.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @templateTHLStructureVersion = _oa
            end
          end
    end

    # constructs a DocumentTemplateDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Title

module Data

  # (no documentation provided)
  class RiskData < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # (no documentation provided)
    attr_accessor :endDate
    # (no documentation provided)
    attr_accessor :type
    # (no documentation provided)
    attr_accessor :additionalCodexVersion
    # (no documentation provided)
    attr_accessor :endReason
    # (no documentation provided)
    attr_accessor :riskCertainty
    # (no documentation provided)
    attr_accessor :medicalgroupName
    # (no documentation provided)
    attr_accessor :startAuthor
    # (no documentation provided)
    attr_accessor :endReasonLabel
    # (no documentation provided)
    attr_accessor :riskLevel
    # (no documentation provided)
    attr_accessor :additionalInformation
    # (no documentation provided)
    attr_accessor :sourceType
    # (no documentation provided)
    attr_accessor :endAuthor
    # (no documentation provided)
    attr_accessor :medicalgroup
    # (no documentation provided)
    attr_accessor :riskLevelLabel
    # (no documentation provided)
    attr_accessor :startUnit
    # (no documentation provided)
    attr_accessor :source
    # (no documentation provided)
    attr_accessor :delayedPermanently
    # (no documentation provided)
    attr_accessor :delayed
    # (no documentation provided)
    attr_accessor :endReasonText
    # (no documentation provided)
    attr_accessor :text
    # (no documentation provided)
    attr_accessor :additionalCodex
    # (no documentation provided)
    attr_accessor :code
    # (no documentation provided)
    attr_accessor :sourceId
    # (no documentation provided)
    attr_accessor :startDate
    # (no documentation provided)
    attr_accessor :careInfo
    # (no documentation provided)
    attr_accessor :description
    # (no documentation provided)
    attr_accessor :riskPermanencyLabel
    # (no documentation provided)
    attr_accessor :riskPermanency
    # (no documentation provided)
    attr_accessor :url
    # (no documentation provided)
    attr_accessor :codex
    # (no documentation provided)
    attr_accessor :endUnit
    # (no documentation provided)
    attr_accessor :additionalCode
    # (no documentation provided)
    attr_accessor :codexVersion

    # the json hash for this RiskData
    def to_jaxb_json_hash
      _h = super
      _h['endDate'] = endDate.to_jaxb_json_hash unless endDate.nil?
      _h['type'] = type.to_jaxb_json_hash unless type.nil?
      _h['additionalCodexVersion'] = additionalCodexVersion.to_jaxb_json_hash unless additionalCodexVersion.nil?
      _h['endReason'] = endReason.to_jaxb_json_hash unless endReason.nil?
      _h['riskCertainty'] = riskCertainty.to_jaxb_json_hash unless riskCertainty.nil?
      _h['medicalgroupName'] = medicalgroupName.to_jaxb_json_hash unless medicalgroupName.nil?
      _h['startAuthor'] = startAuthor.to_jaxb_json_hash unless startAuthor.nil?
      _h['endReasonLabel'] = endReasonLabel.to_jaxb_json_hash unless endReasonLabel.nil?
      _h['riskLevel'] = riskLevel.to_jaxb_json_hash unless riskLevel.nil?
      _h['additionalInformation'] = additionalInformation.to_jaxb_json_hash unless additionalInformation.nil?
      _h['sourceType'] = sourceType.to_jaxb_json_hash unless sourceType.nil?
      _h['endAuthor'] = endAuthor.to_jaxb_json_hash unless endAuthor.nil?
      _h['medicalgroup'] = medicalgroup.to_jaxb_json_hash unless medicalgroup.nil?
      _h['riskLevelLabel'] = riskLevelLabel.to_jaxb_json_hash unless riskLevelLabel.nil?
      _h['startUnit'] = startUnit.to_jaxb_json_hash unless startUnit.nil?
      _h['source'] = source.to_jaxb_json_hash unless source.nil?
      _h['delayedPermanently'] = delayedPermanently.to_jaxb_json_hash unless delayedPermanently.nil?
      _h['delayed'] = delayed.to_jaxb_json_hash unless delayed.nil?
      _h['endReasonText'] = endReasonText.to_jaxb_json_hash unless endReasonText.nil?
      _h['text'] = text.to_jaxb_json_hash unless text.nil?
      _h['additionalCodex'] = additionalCodex.to_jaxb_json_hash unless additionalCodex.nil?
      _h['code'] = code.to_jaxb_json_hash unless code.nil?
      _h['sourceId'] = sourceId.to_jaxb_json_hash unless sourceId.nil?
      _h['startDate'] = startDate.to_jaxb_json_hash unless startDate.nil?
      _h['careInfo'] = careInfo.to_jaxb_json_hash unless careInfo.nil?
      _h['description'] = description.to_jaxb_json_hash unless description.nil?
      _h['riskPermanencyLabel'] = riskPermanencyLabel.to_jaxb_json_hash unless riskPermanencyLabel.nil?
      _h['riskPermanency'] = riskPermanency.to_jaxb_json_hash unless riskPermanency.nil?
      _h['url'] = url.to_jaxb_json_hash unless url.nil?
      _h['codex'] = codex.to_jaxb_json_hash unless codex.nil?
      _h['endUnit'] = endUnit.to_jaxb_json_hash unless endUnit.nil?
      _h['additionalCode'] = additionalCode.to_jaxb_json_hash unless additionalCode.nil?
      _h['codexVersion'] = codexVersion.to_jaxb_json_hash unless codexVersion.nil?
      return _h
    end

    #initializes this RiskData with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['endDate'].nil?
          _oa = _o['endDate']
            if(_oa.is_a? Hash)
              @endDate = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @endDate =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @endDate = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @endDate.push Time.from_json(_item)
                 else
                   @endDate.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @endDate = _oa
            end
          end
        if !_o['type'].nil?
          _oa = _o['type']
            if(_oa.is_a? Hash)
              @type = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @type =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @type = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @type.push String.from_json(_item)
                 else
                   @type.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @type = _oa
            end
          end
        if !_o['additionalCodexVersion'].nil?
          _oa = _o['additionalCodexVersion']
            if(_oa.is_a? Hash)
              @additionalCodexVersion = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @additionalCodexVersion =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @additionalCodexVersion = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @additionalCodexVersion.push String.from_json(_item)
                 else
                   @additionalCodexVersion.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @additionalCodexVersion = _oa
            end
          end
        if !_o['endReason'].nil?
          _oa = _o['endReason']
            if(_oa.is_a? Hash)
              @endReason = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @endReason =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @endReason = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @endReason.push String.from_json(_item)
                 else
                   @endReason.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @endReason = _oa
            end
          end
        if !_o['riskCertainty'].nil?
          _oa = _o['riskCertainty']
            if(_oa.is_a? Hash)
              @riskCertainty = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @riskCertainty =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @riskCertainty = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @riskCertainty.push String.from_json(_item)
                 else
                   @riskCertainty.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @riskCertainty = _oa
            end
          end
        if !_o['medicalgroupName'].nil?
          _oa = _o['medicalgroupName']
            if(_oa.is_a? Hash)
              @medicalgroupName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @medicalgroupName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @medicalgroupName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @medicalgroupName.push String.from_json(_item)
                 else
                   @medicalgroupName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @medicalgroupName = _oa
            end
          end
        if !_o['startAuthor'].nil?
          _oa = _o['startAuthor']
            if(_oa.is_a? Hash)
              @startAuthor = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @startAuthor =  Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @startAuthor = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @startAuthor.push Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_item)
                 else
                   @startAuthor.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @startAuthor = _oa
            end
          end
        if !_o['endReasonLabel'].nil?
          _oa = _o['endReasonLabel']
            if(_oa.is_a? Hash)
              @endReasonLabel = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @endReasonLabel =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @endReasonLabel = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @endReasonLabel.push String.from_json(_item)
                 else
                   @endReasonLabel.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @endReasonLabel = _oa
            end
          end
        if !_o['riskLevel'].nil?
          _oa = _o['riskLevel']
            if(_oa.is_a? Hash)
              @riskLevel = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @riskLevel =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @riskLevel = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @riskLevel.push String.from_json(_item)
                 else
                   @riskLevel.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @riskLevel = _oa
            end
          end
        if !_o['additionalInformation'].nil?
          _oa = _o['additionalInformation']
            if(_oa.is_a? Hash)
              @additionalInformation = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @additionalInformation =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @additionalInformation = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @additionalInformation.push String.from_json(_item)
                 else
                   @additionalInformation.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @additionalInformation = _oa
            end
          end
        if !_o['sourceType'].nil?
          _oa = _o['sourceType']
            if(_oa.is_a? Hash)
              @sourceType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @sourceType =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @sourceType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @sourceType.push String.from_json(_item)
                 else
                   @sourceType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @sourceType = _oa
            end
          end
        if !_o['endAuthor'].nil?
          _oa = _o['endAuthor']
            if(_oa.is_a? Hash)
              @endAuthor = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @endAuthor =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @endAuthor = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @endAuthor.push Fixnum.from_json(_item)
                 else
                   @endAuthor.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @endAuthor = _oa
            end
          end
        if !_o['medicalgroup'].nil?
          _oa = _o['medicalgroup']
            if(_oa.is_a? Hash)
              @medicalgroup = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @medicalgroup =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @medicalgroup = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @medicalgroup.push String.from_json(_item)
                 else
                   @medicalgroup.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @medicalgroup = _oa
            end
          end
        if !_o['riskLevelLabel'].nil?
          _oa = _o['riskLevelLabel']
            if(_oa.is_a? Hash)
              @riskLevelLabel = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @riskLevelLabel =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @riskLevelLabel = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @riskLevelLabel.push String.from_json(_item)
                 else
                   @riskLevelLabel.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @riskLevelLabel = _oa
            end
          end
        if !_o['startUnit'].nil?
          _oa = _o['startUnit']
            if(_oa.is_a? Hash)
              @startUnit = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @startUnit =  Fi::Mediconsult::Core::Client::Dto::Omistaja::Unit.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @startUnit = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @startUnit.push Fi::Mediconsult::Core::Client::Dto::Omistaja::Unit.from_json(_item)
                 else
                   @startUnit.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @startUnit = _oa
            end
          end
        if !_o['source'].nil?
          _oa = _o['source']
            if(_oa.is_a? Hash)
              @source = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @source =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @source = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @source.push String.from_json(_item)
                 else
                   @source.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @source = _oa
            end
          end
        if !_o['delayedPermanently'].nil?
          _oa = _o['delayedPermanently']
            if(_oa.is_a? Hash)
              @delayedPermanently = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @delayedPermanently =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @delayedPermanently = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @delayedPermanently.push Boolean.from_json(_item)
                 else
                   @delayedPermanently.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @delayedPermanently = _oa
            end
          end
        if !_o['delayed'].nil?
          _oa = _o['delayed']
            if(_oa.is_a? Hash)
              @delayed = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @delayed =  java.time::LocalDate.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @delayed = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @delayed.push java.time::LocalDate.from_json(_item)
                 else
                   @delayed.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @delayed = _oa
            end
          end
        if !_o['endReasonText'].nil?
          _oa = _o['endReasonText']
            if(_oa.is_a? Hash)
              @endReasonText = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @endReasonText =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @endReasonText = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @endReasonText.push String.from_json(_item)
                 else
                   @endReasonText.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @endReasonText = _oa
            end
          end
        if !_o['text'].nil?
          _oa = _o['text']
            if(_oa.is_a? Hash)
              @text = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @text =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @text = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @text.push String.from_json(_item)
                 else
                   @text.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @text = _oa
            end
          end
        if !_o['additionalCodex'].nil?
          _oa = _o['additionalCodex']
            if(_oa.is_a? Hash)
              @additionalCodex = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @additionalCodex =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @additionalCodex = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @additionalCodex.push String.from_json(_item)
                 else
                   @additionalCodex.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @additionalCodex = _oa
            end
          end
        if !_o['code'].nil?
          _oa = _o['code']
            if(_oa.is_a? Hash)
              @code = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @code =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @code = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @code.push String.from_json(_item)
                 else
                   @code.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @code = _oa
            end
          end
        if !_o['sourceId'].nil?
          _oa = _o['sourceId']
            if(_oa.is_a? Hash)
              @sourceId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @sourceId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @sourceId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @sourceId.push Fixnum.from_json(_item)
                 else
                   @sourceId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @sourceId = _oa
            end
          end
        if !_o['startDate'].nil?
          _oa = _o['startDate']
            if(_oa.is_a? Hash)
              @startDate = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @startDate =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @startDate = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @startDate.push Time.from_json(_item)
                 else
                   @startDate.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @startDate = _oa
            end
          end
        if !_o['careInfo'].nil?
          _oa = _o['careInfo']
            if(_oa.is_a? Hash)
              @careInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @careInfo =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @careInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @careInfo.push String.from_json(_item)
                 else
                   @careInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @careInfo = _oa
            end
          end
        if !_o['description'].nil?
          _oa = _o['description']
            if(_oa.is_a? Hash)
              @description = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @description =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @description = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @description.push String.from_json(_item)
                 else
                   @description.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @description = _oa
            end
          end
        if !_o['riskPermanencyLabel'].nil?
          _oa = _o['riskPermanencyLabel']
            if(_oa.is_a? Hash)
              @riskPermanencyLabel = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @riskPermanencyLabel =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @riskPermanencyLabel = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @riskPermanencyLabel.push String.from_json(_item)
                 else
                   @riskPermanencyLabel.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @riskPermanencyLabel = _oa
            end
          end
        if !_o['riskPermanency'].nil?
          _oa = _o['riskPermanency']
            if(_oa.is_a? Hash)
              @riskPermanency = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @riskPermanency =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @riskPermanency = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @riskPermanency.push String.from_json(_item)
                 else
                   @riskPermanency.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @riskPermanency = _oa
            end
          end
        if !_o['url'].nil?
          _oa = _o['url']
            if(_oa.is_a? Hash)
              @url = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @url =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @url = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @url.push String.from_json(_item)
                 else
                   @url.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @url = _oa
            end
          end
        if !_o['codex'].nil?
          _oa = _o['codex']
            if(_oa.is_a? Hash)
              @codex = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @codex =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @codex = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @codex.push String.from_json(_item)
                 else
                   @codex.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @codex = _oa
            end
          end
        if !_o['endUnit'].nil?
          _oa = _o['endUnit']
            if(_oa.is_a? Hash)
              @endUnit = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @endUnit =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @endUnit = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @endUnit.push Fixnum.from_json(_item)
                 else
                   @endUnit.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @endUnit = _oa
            end
          end
        if !_o['additionalCode'].nil?
          _oa = _o['additionalCode']
            if(_oa.is_a? Hash)
              @additionalCode = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @additionalCode =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @additionalCode = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @additionalCode.push String.from_json(_item)
                 else
                   @additionalCode.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @additionalCode = _oa
            end
          end
        if !_o['codexVersion'].nil?
          _oa = _o['codexVersion']
            if(_oa.is_a? Hash)
              @codexVersion = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @codexVersion =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @codexVersion = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @codexVersion.push String.from_json(_item)
                 else
                   @codexVersion.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @codexVersion = _oa
            end
          end
    end

    # constructs a RiskData from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

  # (no documentation provided)
  class KuhaDtoNameBase < Fi::Mediconsult::Mediplan::Dto::KuhaDtoBase 

    # (no documentation provided)
    attr_accessor :name
    # abbreviation
    attr_accessor :abbr
    # (no documentation provided)
    attr_accessor :description

    # the json hash for this KuhaDtoNameBase
    def to_jaxb_json_hash
      _h = super
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['abbr'] = abbr.to_jaxb_json_hash unless abbr.nil?
      _h['description'] = description.to_jaxb_json_hash unless description.nil?
      return _h
    end

    #initializes this KuhaDtoNameBase with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['abbr'].nil?
          _oa = _o['abbr']
            if(_oa.is_a? Hash)
              @abbr = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @abbr =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @abbr = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @abbr.push String.from_json(_item)
                 else
                   @abbr.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @abbr = _oa
            end
          end
        if !_o['description'].nil?
          _oa = _o['description']
            if(_oa.is_a? Hash)
              @description = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @description =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @description = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @description.push String.from_json(_item)
                 else
                   @description.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @description = _oa
            end
          end
    end

    # constructs a KuhaDtoNameBase from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Medisos

module Dto

  # (no documentation provided)
  class ViittausOutputDto < Fi::Mediconsult::Medisos::Dto::MediSosDtoBase 

    # (no documentation provided)
    attr_accessor :viittausList
    # (no documentation provided)
    attr_accessor :dublicateViittausList
    # (no documentation provided)
    attr_accessor :blockedViittaajaList
    # (no documentation provided)
    attr_accessor :blockedViitattuList

    # the json hash for this ViittausOutputDto
    def to_jaxb_json_hash
      _h = super
      if !viittausList.nil?
        _ha = Array.new
        viittausList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['viittausList'] = _ha
      end
      if !dublicateViittausList.nil?
        _ha = Array.new
        dublicateViittausList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['dublicateViittausList'] = _ha
      end
      if !blockedViittaajaList.nil?
        _ha = Array.new
        blockedViittaajaList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['blockedViittaajaList'] = _ha
      end
      if !blockedViitattuList.nil?
        _ha = Array.new
        blockedViitattuList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['blockedViitattuList'] = _ha
      end
      return _h
    end

    #initializes this ViittausOutputDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['viittausList'].nil?
          _oa = _o['viittausList']
            if(_oa.is_a? Hash)
              @viittausList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @viittausList =  Fi::Mediconsult::Medisos::Dto::ViittausDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @viittausList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @viittausList.push Fi::Mediconsult::Medisos::Dto::ViittausDto.from_json(_item)
                 else
                   @viittausList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @viittausList = _oa
            end
          end
        if !_o['dublicateViittausList'].nil?
          _oa = _o['dublicateViittausList']
            if(_oa.is_a? Hash)
              @dublicateViittausList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @dublicateViittausList =  Fi::Mediconsult::Medisos::Dto::ViittausDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @dublicateViittausList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @dublicateViittausList.push Fi::Mediconsult::Medisos::Dto::ViittausDto.from_json(_item)
                 else
                   @dublicateViittausList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @dublicateViittausList = _oa
            end
          end
        if !_o['blockedViittaajaList'].nil?
          _oa = _o['blockedViittaajaList']
            if(_oa.is_a? Hash)
              @blockedViittaajaList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @blockedViittaajaList =  Fi::Mediconsult::Medisos::Dto::BlockedInfoDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @blockedViittaajaList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @blockedViittaajaList.push Fi::Mediconsult::Medisos::Dto::BlockedInfoDto.from_json(_item)
                 else
                   @blockedViittaajaList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @blockedViittaajaList = _oa
            end
          end
        if !_o['blockedViitattuList'].nil?
          _oa = _o['blockedViitattuList']
            if(_oa.is_a? Hash)
              @blockedViitattuList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @blockedViitattuList =  Fi::Mediconsult::Medisos::Dto::BlockedInfoDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @blockedViitattuList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @blockedViitattuList.push Fi::Mediconsult::Medisos::Dto::BlockedInfoDto.from_json(_item)
                 else
                   @blockedViitattuList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @blockedViitattuList = _oa
            end
          end
    end

    # constructs a ViittausOutputDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Omistaja

  # (no documentation provided)
  class UnitList < Fi::Mediconsult::Core::Client::Dto::Omistaja::OmistajaList 

    # (no documentation provided)
    attr_accessor :units

    # the json hash for this UnitList
    def to_jaxb_json_hash
      _h = super
      if !units.nil?
        _ha = Array.new
        units.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['units'] = _ha
      end
      return _h
    end

    #initializes this UnitList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['units'].nil?
          _oa = _o['units']
            if(_oa.is_a? Hash)
              @units = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @units =  Fi::Mediconsult::Core::Client::Dto::Omistaja::Unit.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @units = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @units.push Fi::Mediconsult::Core::Client::Dto::Omistaja::Unit.from_json(_item)
                 else
                   @units.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @units = _oa
            end
          end
    end

    # constructs a UnitList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Medisos

module Dto

  # (no documentation provided)
  class PalvelutehtavanAsiakkuusListaDto < Fi::Mediconsult::Medisos::Dto::MediSosDtoBase 

    # (no documentation provided)
    attr_accessor :kokonaisLkm
    # (no documentation provided)
    attr_accessor :pageSize
    # (no documentation provided)
    attr_accessor :pageIndex
    # (no documentation provided)
    attr_accessor :indexAlku
    # (no documentation provided)
    attr_accessor :indexLoppu
    # (no documentation provided)
    attr_accessor :palvelutehtavanAsiakkuusDtoLista

    # the json hash for this PalvelutehtavanAsiakkuusListaDto
    def to_jaxb_json_hash
      _h = super
      _h['kokonaisLkm'] = kokonaisLkm.to_jaxb_json_hash unless kokonaisLkm.nil?
      _h['pageSize'] = pageSize.to_jaxb_json_hash unless pageSize.nil?
      _h['pageIndex'] = pageIndex.to_jaxb_json_hash unless pageIndex.nil?
      _h['indexAlku'] = indexAlku.to_jaxb_json_hash unless indexAlku.nil?
      _h['indexLoppu'] = indexLoppu.to_jaxb_json_hash unless indexLoppu.nil?
      if !palvelutehtavanAsiakkuusDtoLista.nil?
        _ha = Array.new
        palvelutehtavanAsiakkuusDtoLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['palvelutehtavanAsiakkuusDtoLista'] = _ha
      end
      return _h
    end

    #initializes this PalvelutehtavanAsiakkuusListaDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['kokonaisLkm'].nil?
          _oa = _o['kokonaisLkm']
            if(_oa.is_a? Hash)
              @kokonaisLkm = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kokonaisLkm =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kokonaisLkm = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kokonaisLkm.push Fixnum.from_json(_item)
                 else
                   @kokonaisLkm.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kokonaisLkm = _oa
            end
          end
        if !_o['pageSize'].nil?
          _oa = _o['pageSize']
            if(_oa.is_a? Hash)
              @pageSize = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @pageSize =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @pageSize = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @pageSize.push Fixnum.from_json(_item)
                 else
                   @pageSize.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @pageSize = _oa
            end
          end
        if !_o['pageIndex'].nil?
          _oa = _o['pageIndex']
            if(_oa.is_a? Hash)
              @pageIndex = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @pageIndex =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @pageIndex = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @pageIndex.push Fixnum.from_json(_item)
                 else
                   @pageIndex.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @pageIndex = _oa
            end
          end
        if !_o['indexAlku'].nil?
          _oa = _o['indexAlku']
            if(_oa.is_a? Hash)
              @indexAlku = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @indexAlku =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @indexAlku = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @indexAlku.push Fixnum.from_json(_item)
                 else
                   @indexAlku.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @indexAlku = _oa
            end
          end
        if !_o['indexLoppu'].nil?
          _oa = _o['indexLoppu']
            if(_oa.is_a? Hash)
              @indexLoppu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @indexLoppu =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @indexLoppu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @indexLoppu.push Fixnum.from_json(_item)
                 else
                   @indexLoppu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @indexLoppu = _oa
            end
          end
        if !_o['palvelutehtavanAsiakkuusDtoLista'].nil?
          _oa = _o['palvelutehtavanAsiakkuusDtoLista']
            if(_oa.is_a? Hash)
              @palvelutehtavanAsiakkuusDtoLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palvelutehtavanAsiakkuusDtoLista =  Fi::Mediconsult::Medisos::Dto::PalvelutehtavanAsiakkuusDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palvelutehtavanAsiakkuusDtoLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palvelutehtavanAsiakkuusDtoLista.push Fi::Mediconsult::Medisos::Dto::PalvelutehtavanAsiakkuusDto.from_json(_item)
                 else
                   @palvelutehtavanAsiakkuusDtoLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palvelutehtavanAsiakkuusDtoLista = _oa
            end
          end
    end

    # constructs a PalvelutehtavanAsiakkuusListaDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Medisos

module Dto

  # (no documentation provided)
  class LukkoDto < Fi::Mediconsult::Medisos::Dto::MediSosDtoBase 

    # (no documentation provided)
    attr_accessor :kohdeId
    # (no documentation provided)
    attr_accessor :lukitsija
    # (no documentation provided)
    attr_accessor :formId

    # the json hash for this LukkoDto
    def to_jaxb_json_hash
      _h = super
      _h['kohdeId'] = kohdeId.to_jaxb_json_hash unless kohdeId.nil?
      _h['lukitsija'] = lukitsija.to_jaxb_json_hash unless lukitsija.nil?
      _h['formId'] = formId.to_jaxb_json_hash unless formId.nil?
      return _h
    end

    #initializes this LukkoDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['kohdeId'].nil?
          _oa = _o['kohdeId']
            if(_oa.is_a? Hash)
              @kohdeId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kohdeId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kohdeId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kohdeId.push Bignum.from_json(_item)
                 else
                   @kohdeId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kohdeId = _oa
            end
          end
        if !_o['lukitsija'].nil?
          _oa = _o['lukitsija']
            if(_oa.is_a? Hash)
              @lukitsija = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lukitsija =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lukitsija = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lukitsija.push Fixnum.from_json(_item)
                 else
                   @lukitsija.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lukitsija = _oa
            end
          end
        if !_o['formId'].nil?
          _oa = _o['formId']
            if(_oa.is_a? Hash)
              @formId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @formId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @formId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @formId.push Fixnum.from_json(_item)
                 else
                   @formId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @formId = _oa
            end
          end
    end

    # constructs a LukkoDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Medisos

module Dto

  # (no documentation provided)
  class SosiaalihuollonAsiakkuusListaDto < Fi::Mediconsult::Medisos::Dto::MediSosDtoBase 

    # (no documentation provided)
    attr_accessor :sosiaalihuollonAsiakkuusKokonaisLkm
    # (no documentation provided)
    attr_accessor :pageSize
    # (no documentation provided)
    attr_accessor :pageIndex
    # (no documentation provided)
    attr_accessor :sosiaalihuollonAsiakkuusIndexAlku
    # (no documentation provided)
    attr_accessor :sosiaalihuollonAsiakkuusIndexLoppu
    # (no documentation provided)
    attr_accessor :sosiaalihuollonAsiakkuusDtoLista

    # the json hash for this SosiaalihuollonAsiakkuusListaDto
    def to_jaxb_json_hash
      _h = super
      _h['sosiaalihuollonAsiakkuusKokonaisLkm'] = sosiaalihuollonAsiakkuusKokonaisLkm.to_jaxb_json_hash unless sosiaalihuollonAsiakkuusKokonaisLkm.nil?
      _h['pageSize'] = pageSize.to_jaxb_json_hash unless pageSize.nil?
      _h['pageIndex'] = pageIndex.to_jaxb_json_hash unless pageIndex.nil?
      _h['sosiaalihuollonAsiakkuusIndexAlku'] = sosiaalihuollonAsiakkuusIndexAlku.to_jaxb_json_hash unless sosiaalihuollonAsiakkuusIndexAlku.nil?
      _h['sosiaalihuollonAsiakkuusIndexLoppu'] = sosiaalihuollonAsiakkuusIndexLoppu.to_jaxb_json_hash unless sosiaalihuollonAsiakkuusIndexLoppu.nil?
      if !sosiaalihuollonAsiakkuusDtoLista.nil?
        _ha = Array.new
        sosiaalihuollonAsiakkuusDtoLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['sosiaalihuollonAsiakkuusDtoLista'] = _ha
      end
      return _h
    end

    #initializes this SosiaalihuollonAsiakkuusListaDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['sosiaalihuollonAsiakkuusKokonaisLkm'].nil?
          _oa = _o['sosiaalihuollonAsiakkuusKokonaisLkm']
            if(_oa.is_a? Hash)
              @sosiaalihuollonAsiakkuusKokonaisLkm = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @sosiaalihuollonAsiakkuusKokonaisLkm =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @sosiaalihuollonAsiakkuusKokonaisLkm = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @sosiaalihuollonAsiakkuusKokonaisLkm.push Fixnum.from_json(_item)
                 else
                   @sosiaalihuollonAsiakkuusKokonaisLkm.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @sosiaalihuollonAsiakkuusKokonaisLkm = _oa
            end
          end
        if !_o['pageSize'].nil?
          _oa = _o['pageSize']
            if(_oa.is_a? Hash)
              @pageSize = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @pageSize =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @pageSize = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @pageSize.push Fixnum.from_json(_item)
                 else
                   @pageSize.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @pageSize = _oa
            end
          end
        if !_o['pageIndex'].nil?
          _oa = _o['pageIndex']
            if(_oa.is_a? Hash)
              @pageIndex = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @pageIndex =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @pageIndex = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @pageIndex.push Fixnum.from_json(_item)
                 else
                   @pageIndex.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @pageIndex = _oa
            end
          end
        if !_o['sosiaalihuollonAsiakkuusIndexAlku'].nil?
          _oa = _o['sosiaalihuollonAsiakkuusIndexAlku']
            if(_oa.is_a? Hash)
              @sosiaalihuollonAsiakkuusIndexAlku = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @sosiaalihuollonAsiakkuusIndexAlku =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @sosiaalihuollonAsiakkuusIndexAlku = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @sosiaalihuollonAsiakkuusIndexAlku.push Fixnum.from_json(_item)
                 else
                   @sosiaalihuollonAsiakkuusIndexAlku.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @sosiaalihuollonAsiakkuusIndexAlku = _oa
            end
          end
        if !_o['sosiaalihuollonAsiakkuusIndexLoppu'].nil?
          _oa = _o['sosiaalihuollonAsiakkuusIndexLoppu']
            if(_oa.is_a? Hash)
              @sosiaalihuollonAsiakkuusIndexLoppu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @sosiaalihuollonAsiakkuusIndexLoppu =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @sosiaalihuollonAsiakkuusIndexLoppu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @sosiaalihuollonAsiakkuusIndexLoppu.push Fixnum.from_json(_item)
                 else
                   @sosiaalihuollonAsiakkuusIndexLoppu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @sosiaalihuollonAsiakkuusIndexLoppu = _oa
            end
          end
        if !_o['sosiaalihuollonAsiakkuusDtoLista'].nil?
          _oa = _o['sosiaalihuollonAsiakkuusDtoLista']
            if(_oa.is_a? Hash)
              @sosiaalihuollonAsiakkuusDtoLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @sosiaalihuollonAsiakkuusDtoLista =  Fi::Mediconsult::Medisos::Dto::SosiaalihuollonAsiakkuusDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @sosiaalihuollonAsiakkuusDtoLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @sosiaalihuollonAsiakkuusDtoLista.push Fi::Mediconsult::Medisos::Dto::SosiaalihuollonAsiakkuusDto.from_json(_item)
                 else
                   @sosiaalihuollonAsiakkuusDtoLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @sosiaalihuollonAsiakkuusDtoLista = _oa
            end
          end
    end

    # constructs a SosiaalihuollonAsiakkuusListaDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Medisos

module Dto

  # (no documentation provided)
  class TemplaattiFavourDto < Fi::Mediconsult::Medisos::Dto::MediSosDtoBase 

    # (no documentation provided)
    attr_accessor :templaattiId
    # (no documentation provided)
    attr_accessor :templaattiNimi

    # the json hash for this TemplaattiFavourDto
    def to_jaxb_json_hash
      _h = super
      _h['templaattiId'] = templaattiId.to_jaxb_json_hash unless templaattiId.nil?
      _h['templaattiNimi'] = templaattiNimi.to_jaxb_json_hash unless templaattiNimi.nil?
      return _h
    end

    #initializes this TemplaattiFavourDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['templaattiId'].nil?
          _oa = _o['templaattiId']
            if(_oa.is_a? Hash)
              @templaattiId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @templaattiId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @templaattiId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @templaattiId.push Bignum.from_json(_item)
                 else
                   @templaattiId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @templaattiId = _oa
            end
          end
        if !_o['templaattiNimi'].nil?
          _oa = _o['templaattiNimi']
            if(_oa.is_a? Hash)
              @templaattiNimi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @templaattiNimi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @templaattiNimi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @templaattiNimi.push String.from_json(_item)
                 else
                   @templaattiNimi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @templaattiNimi = _oa
            end
          end
    end

    # constructs a TemplaattiFavourDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class Riskitieto < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # part number
    attr_accessor :osa
    # degree of the riski, could be either &quot;Kriittinen&quot; or &quot;Hoidossa huomioitava&quot;
    attr_accessor :aste
    # type of the riski, value could be something like: &quot;Allegia&quot;, &quot;Eristystarve&quot;, &quot;Immuunipuutostilat&quot;, &quot;Keinoelimet&quot; and so on
    attr_accessor :tyyppi
    # code, for example ICD-10 code
    attr_accessor :koodi
    # explanation
    attr_accessor :selite
    # koodisto
    attr_accessor :koodisto
    # version
    attr_accessor :versio
    # additional code
    attr_accessor :lisakoodi
    # additional explanation
    attr_accessor :lisaselite
    # additional koodisto
    attr_accessor :lisakoodisto
    # additional version info
    attr_accessor :lisaversio
    # description of the riski
    attr_accessor :kuvaus
    # notifications
    attr_accessor :huomiointi
    # permanence, &quot;Alustava&quot;, &quot;Määräaikainen&quot;, &quot;Pysyväisluonteinen&quot;
    attr_accessor :pysyvyys
    # certainty, &quot;Epäilty&quot;, &quot;Korjattu&quot;, &quot;Todennäköinen tai varma&quot;, &quot;Varma&quot;
    attr_accessor :varmuusaste
    # severity, &quot;Lievä&quot;, &quot;Keskivaikea&quot;, &quot;Vakava&quot;
    attr_accessor :vakavuus
    # link to some other health record
    attr_accessor :lomakelinkki
    # link to some other health record
    attr_accessor :osalinkki
    # type of the origin of the riski
    attr_accessor :lahdetyyppi
    # origin of the riski
    attr_accessor :lahde
    # start date
    attr_accessor :alkaa
    # user who has created this riski
    attr_accessor :aloittaja
    # unit in which the riski is created
    attr_accessor :aloitusyksikko
    # unit in which the riski is marked as ended
    attr_accessor :lopetusyksikko
    # end date
    attr_accessor :loppuu
    # user who has ended the riski
    attr_accessor :lopettaja
    # is the riski deleted, &quot;K&quot;, &quot;E&quot;
    attr_accessor :poistettu
    # change date
    attr_accessor :muutosaika
    # place of change
    attr_accessor :muutospaikka
    # reason for ending the riski
    attr_accessor :paattymissyy
    # additional information about ending the riski
    attr_accessor :paattymistarkenne
    # delay
    attr_accessor :viivastys
    # estimate for duration
    attr_accessor :kestoarvio
    # oid
    attr_accessor :oid
    # creator
    attr_accessor :kirjaaja
    # older version of the riski
    attr_accessor :vanha
    # unit in which the riski has been created in
    attr_accessor :kirjausyksikko
    # form
    attr_accessor :lomake
    # (no documentation provided)
    attr_accessor :tyyppiString
    # (no documentation provided)
    attr_accessor :kirjaajaNimi
    # (no documentation provided)
    attr_accessor :aloitusyksikkoNimi
    # (no documentation provided)
    attr_accessor :aloittajaNimi
    # (no documentation provided)
    attr_accessor :kirjausyksikkoNimi

    # the json hash for this Riskitieto
    def to_jaxb_json_hash
      _h = super
      _h['osa'] = osa.to_jaxb_json_hash unless osa.nil?
      _h['aste'] = aste.to_jaxb_json_hash unless aste.nil?
      _h['tyyppi'] = tyyppi.to_jaxb_json_hash unless tyyppi.nil?
      _h['koodi'] = koodi.to_jaxb_json_hash unless koodi.nil?
      _h['selite'] = selite.to_jaxb_json_hash unless selite.nil?
      _h['koodisto'] = koodisto.to_jaxb_json_hash unless koodisto.nil?
      _h['versio'] = versio.to_jaxb_json_hash unless versio.nil?
      _h['lisakoodi'] = lisakoodi.to_jaxb_json_hash unless lisakoodi.nil?
      _h['lisaselite'] = lisaselite.to_jaxb_json_hash unless lisaselite.nil?
      _h['lisakoodisto'] = lisakoodisto.to_jaxb_json_hash unless lisakoodisto.nil?
      _h['lisaversio'] = lisaversio.to_jaxb_json_hash unless lisaversio.nil?
      _h['kuvaus'] = kuvaus.to_jaxb_json_hash unless kuvaus.nil?
      _h['huomiointi'] = huomiointi.to_jaxb_json_hash unless huomiointi.nil?
      _h['pysyvyys'] = pysyvyys.to_jaxb_json_hash unless pysyvyys.nil?
      _h['varmuusaste'] = varmuusaste.to_jaxb_json_hash unless varmuusaste.nil?
      _h['vakavuus'] = vakavuus.to_jaxb_json_hash unless vakavuus.nil?
      _h['lomakelinkki'] = lomakelinkki.to_jaxb_json_hash unless lomakelinkki.nil?
      _h['osalinkki'] = osalinkki.to_jaxb_json_hash unless osalinkki.nil?
      _h['lahdetyyppi'] = lahdetyyppi.to_jaxb_json_hash unless lahdetyyppi.nil?
      _h['lahde'] = lahde.to_jaxb_json_hash unless lahde.nil?
      _h['alkaa'] = alkaa.to_jaxb_json_hash unless alkaa.nil?
      _h['aloittaja'] = aloittaja.to_jaxb_json_hash unless aloittaja.nil?
      _h['aloitusyksikko'] = aloitusyksikko.to_jaxb_json_hash unless aloitusyksikko.nil?
      _h['lopetusyksikko'] = lopetusyksikko.to_jaxb_json_hash unless lopetusyksikko.nil?
      _h['loppuu'] = loppuu.to_jaxb_json_hash unless loppuu.nil?
      _h['lopettaja'] = lopettaja.to_jaxb_json_hash unless lopettaja.nil?
      _h['poistettu'] = poistettu.to_jaxb_json_hash unless poistettu.nil?
      _h['muutosaika'] = muutosaika.to_jaxb_json_hash unless muutosaika.nil?
      _h['muutospaikka'] = muutospaikka.to_jaxb_json_hash unless muutospaikka.nil?
      _h['paattymissyy'] = paattymissyy.to_jaxb_json_hash unless paattymissyy.nil?
      _h['paattymistarkenne'] = paattymistarkenne.to_jaxb_json_hash unless paattymistarkenne.nil?
      _h['viivastys'] = viivastys.to_jaxb_json_hash unless viivastys.nil?
      _h['kestoarvio'] = kestoarvio.to_jaxb_json_hash unless kestoarvio.nil?
      _h['oid'] = oid.to_jaxb_json_hash unless oid.nil?
      _h['kirjaaja'] = kirjaaja.to_jaxb_json_hash unless kirjaaja.nil?
      _h['vanha'] = vanha.to_jaxb_json_hash unless vanha.nil?
      _h['kirjausyksikko'] = kirjausyksikko.to_jaxb_json_hash unless kirjausyksikko.nil?
      _h['lomake'] = lomake.to_jaxb_json_hash unless lomake.nil?
      _h['tyyppiString'] = tyyppiString.to_jaxb_json_hash unless tyyppiString.nil?
      _h['kirjaajaNimi'] = kirjaajaNimi.to_jaxb_json_hash unless kirjaajaNimi.nil?
      _h['aloitusyksikkoNimi'] = aloitusyksikkoNimi.to_jaxb_json_hash unless aloitusyksikkoNimi.nil?
      _h['aloittajaNimi'] = aloittajaNimi.to_jaxb_json_hash unless aloittajaNimi.nil?
      _h['kirjausyksikkoNimi'] = kirjausyksikkoNimi.to_jaxb_json_hash unless kirjausyksikkoNimi.nil?
      return _h
    end

    #initializes this Riskitieto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['osa'].nil?
          _oa = _o['osa']
            if(_oa.is_a? Hash)
              @osa = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @osa =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @osa = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @osa.push Fixnum.from_json(_item)
                 else
                   @osa.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @osa = _oa
            end
          end
        if !_o['aste'].nil?
          _oa = _o['aste']
            if(_oa.is_a? Hash)
              @aste = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @aste =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @aste = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @aste.push String.from_json(_item)
                 else
                   @aste.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @aste = _oa
            end
          end
        if !_o['tyyppi'].nil?
          _oa = _o['tyyppi']
            if(_oa.is_a? Hash)
              @tyyppi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tyyppi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tyyppi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tyyppi.push String.from_json(_item)
                 else
                   @tyyppi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tyyppi = _oa
            end
          end
        if !_o['koodi'].nil?
          _oa = _o['koodi']
            if(_oa.is_a? Hash)
              @koodi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @koodi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @koodi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @koodi.push String.from_json(_item)
                 else
                   @koodi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @koodi = _oa
            end
          end
        if !_o['selite'].nil?
          _oa = _o['selite']
            if(_oa.is_a? Hash)
              @selite = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @selite =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @selite = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @selite.push String.from_json(_item)
                 else
                   @selite.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @selite = _oa
            end
          end
        if !_o['koodisto'].nil?
          _oa = _o['koodisto']
            if(_oa.is_a? Hash)
              @koodisto = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @koodisto =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @koodisto = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @koodisto.push String.from_json(_item)
                 else
                   @koodisto.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @koodisto = _oa
            end
          end
        if !_o['versio'].nil?
          _oa = _o['versio']
            if(_oa.is_a? Hash)
              @versio = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @versio =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @versio = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @versio.push String.from_json(_item)
                 else
                   @versio.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @versio = _oa
            end
          end
        if !_o['lisakoodi'].nil?
          _oa = _o['lisakoodi']
            if(_oa.is_a? Hash)
              @lisakoodi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lisakoodi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lisakoodi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lisakoodi.push String.from_json(_item)
                 else
                   @lisakoodi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lisakoodi = _oa
            end
          end
        if !_o['lisaselite'].nil?
          _oa = _o['lisaselite']
            if(_oa.is_a? Hash)
              @lisaselite = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lisaselite =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lisaselite = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lisaselite.push String.from_json(_item)
                 else
                   @lisaselite.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lisaselite = _oa
            end
          end
        if !_o['lisakoodisto'].nil?
          _oa = _o['lisakoodisto']
            if(_oa.is_a? Hash)
              @lisakoodisto = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lisakoodisto =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lisakoodisto = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lisakoodisto.push String.from_json(_item)
                 else
                   @lisakoodisto.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lisakoodisto = _oa
            end
          end
        if !_o['lisaversio'].nil?
          _oa = _o['lisaversio']
            if(_oa.is_a? Hash)
              @lisaversio = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lisaversio =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lisaversio = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lisaversio.push String.from_json(_item)
                 else
                   @lisaversio.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lisaversio = _oa
            end
          end
        if !_o['kuvaus'].nil?
          _oa = _o['kuvaus']
            if(_oa.is_a? Hash)
              @kuvaus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kuvaus =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kuvaus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kuvaus.push String.from_json(_item)
                 else
                   @kuvaus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kuvaus = _oa
            end
          end
        if !_o['huomiointi'].nil?
          _oa = _o['huomiointi']
            if(_oa.is_a? Hash)
              @huomiointi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @huomiointi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @huomiointi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @huomiointi.push String.from_json(_item)
                 else
                   @huomiointi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @huomiointi = _oa
            end
          end
        if !_o['pysyvyys'].nil?
          _oa = _o['pysyvyys']
            if(_oa.is_a? Hash)
              @pysyvyys = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @pysyvyys =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @pysyvyys = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @pysyvyys.push String.from_json(_item)
                 else
                   @pysyvyys.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @pysyvyys = _oa
            end
          end
        if !_o['varmuusaste'].nil?
          _oa = _o['varmuusaste']
            if(_oa.is_a? Hash)
              @varmuusaste = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @varmuusaste =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @varmuusaste = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @varmuusaste.push String.from_json(_item)
                 else
                   @varmuusaste.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @varmuusaste = _oa
            end
          end
        if !_o['vakavuus'].nil?
          _oa = _o['vakavuus']
            if(_oa.is_a? Hash)
              @vakavuus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vakavuus =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vakavuus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vakavuus.push String.from_json(_item)
                 else
                   @vakavuus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vakavuus = _oa
            end
          end
        if !_o['lomakelinkki'].nil?
          _oa = _o['lomakelinkki']
            if(_oa.is_a? Hash)
              @lomakelinkki = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lomakelinkki =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lomakelinkki = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lomakelinkki.push Fixnum.from_json(_item)
                 else
                   @lomakelinkki.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lomakelinkki = _oa
            end
          end
        if !_o['osalinkki'].nil?
          _oa = _o['osalinkki']
            if(_oa.is_a? Hash)
              @osalinkki = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @osalinkki =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @osalinkki = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @osalinkki.push Fixnum.from_json(_item)
                 else
                   @osalinkki.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @osalinkki = _oa
            end
          end
        if !_o['lahdetyyppi'].nil?
          _oa = _o['lahdetyyppi']
            if(_oa.is_a? Hash)
              @lahdetyyppi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lahdetyyppi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lahdetyyppi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lahdetyyppi.push String.from_json(_item)
                 else
                   @lahdetyyppi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lahdetyyppi = _oa
            end
          end
        if !_o['lahde'].nil?
          _oa = _o['lahde']
            if(_oa.is_a? Hash)
              @lahde = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lahde =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lahde = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lahde.push Fixnum.from_json(_item)
                 else
                   @lahde.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lahde = _oa
            end
          end
        if !_o['alkaa'].nil?
          _oa = _o['alkaa']
            if(_oa.is_a? Hash)
              @alkaa = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @alkaa =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @alkaa = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @alkaa.push Time.from_json(_item)
                 else
                   @alkaa.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @alkaa = _oa
            end
          end
        if !_o['aloittaja'].nil?
          _oa = _o['aloittaja']
            if(_oa.is_a? Hash)
              @aloittaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @aloittaja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @aloittaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @aloittaja.push Fixnum.from_json(_item)
                 else
                   @aloittaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @aloittaja = _oa
            end
          end
        if !_o['aloitusyksikko'].nil?
          _oa = _o['aloitusyksikko']
            if(_oa.is_a? Hash)
              @aloitusyksikko = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @aloitusyksikko =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @aloitusyksikko = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @aloitusyksikko.push Fixnum.from_json(_item)
                 else
                   @aloitusyksikko.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @aloitusyksikko = _oa
            end
          end
        if !_o['lopetusyksikko'].nil?
          _oa = _o['lopetusyksikko']
            if(_oa.is_a? Hash)
              @lopetusyksikko = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lopetusyksikko =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lopetusyksikko = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lopetusyksikko.push Fixnum.from_json(_item)
                 else
                   @lopetusyksikko.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lopetusyksikko = _oa
            end
          end
        if !_o['loppuu'].nil?
          _oa = _o['loppuu']
            if(_oa.is_a? Hash)
              @loppuu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @loppuu =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @loppuu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @loppuu.push Time.from_json(_item)
                 else
                   @loppuu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @loppuu = _oa
            end
          end
        if !_o['lopettaja'].nil?
          _oa = _o['lopettaja']
            if(_oa.is_a? Hash)
              @lopettaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lopettaja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lopettaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lopettaja.push Fixnum.from_json(_item)
                 else
                   @lopettaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lopettaja = _oa
            end
          end
        if !_o['poistettu'].nil?
          _oa = _o['poistettu']
            if(_oa.is_a? Hash)
              @poistettu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @poistettu =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @poistettu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @poistettu.push String.from_json(_item)
                 else
                   @poistettu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @poistettu = _oa
            end
          end
        if !_o['muutosaika'].nil?
          _oa = _o['muutosaika']
            if(_oa.is_a? Hash)
              @muutosaika = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @muutosaika =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @muutosaika = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @muutosaika.push Time.from_json(_item)
                 else
                   @muutosaika.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @muutosaika = _oa
            end
          end
        if !_o['muutospaikka'].nil?
          _oa = _o['muutospaikka']
            if(_oa.is_a? Hash)
              @muutospaikka = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @muutospaikka =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @muutospaikka = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @muutospaikka.push Fixnum.from_json(_item)
                 else
                   @muutospaikka.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @muutospaikka = _oa
            end
          end
        if !_o['paattymissyy'].nil?
          _oa = _o['paattymissyy']
            if(_oa.is_a? Hash)
              @paattymissyy = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @paattymissyy =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @paattymissyy = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @paattymissyy.push String.from_json(_item)
                 else
                   @paattymissyy.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @paattymissyy = _oa
            end
          end
        if !_o['paattymistarkenne'].nil?
          _oa = _o['paattymistarkenne']
            if(_oa.is_a? Hash)
              @paattymistarkenne = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @paattymistarkenne =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @paattymistarkenne = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @paattymistarkenne.push String.from_json(_item)
                 else
                   @paattymistarkenne.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @paattymistarkenne = _oa
            end
          end
        if !_o['viivastys'].nil?
          _oa = _o['viivastys']
            if(_oa.is_a? Hash)
              @viivastys = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @viivastys =  Java::Sql::Date.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @viivastys = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @viivastys.push Java::Sql::Date.from_json(_item)
                 else
                   @viivastys.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @viivastys = _oa
            end
          end
        if !_o['kestoarvio'].nil?
          _oa = _o['kestoarvio']
            if(_oa.is_a? Hash)
              @kestoarvio = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kestoarvio =  Java::Sql::Date.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kestoarvio = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kestoarvio.push Java::Sql::Date.from_json(_item)
                 else
                   @kestoarvio.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kestoarvio = _oa
            end
          end
        if !_o['oid'].nil?
          _oa = _o['oid']
            if(_oa.is_a? Hash)
              @oid = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @oid =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @oid = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @oid.push String.from_json(_item)
                 else
                   @oid.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @oid = _oa
            end
          end
        if !_o['kirjaaja'].nil?
          _oa = _o['kirjaaja']
            if(_oa.is_a? Hash)
              @kirjaaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kirjaaja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kirjaaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kirjaaja.push Fixnum.from_json(_item)
                 else
                   @kirjaaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kirjaaja = _oa
            end
          end
        if !_o['vanha'].nil?
          _oa = _o['vanha']
            if(_oa.is_a? Hash)
              @vanha = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vanha =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vanha = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vanha.push Fixnum.from_json(_item)
                 else
                   @vanha.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vanha = _oa
            end
          end
        if !_o['kirjausyksikko'].nil?
          _oa = _o['kirjausyksikko']
            if(_oa.is_a? Hash)
              @kirjausyksikko = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kirjausyksikko =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kirjausyksikko = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kirjausyksikko.push Fixnum.from_json(_item)
                 else
                   @kirjausyksikko.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kirjausyksikko = _oa
            end
          end
        if !_o['lomake'].nil?
          _oa = _o['lomake']
            if(_oa.is_a? Hash)
              @lomake = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lomake =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lomake = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lomake.push Fixnum.from_json(_item)
                 else
                   @lomake.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lomake = _oa
            end
          end
        if !_o['tyyppiString'].nil?
          _oa = _o['tyyppiString']
            if(_oa.is_a? Hash)
              @tyyppiString = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tyyppiString =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tyyppiString = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tyyppiString.push String.from_json(_item)
                 else
                   @tyyppiString.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tyyppiString = _oa
            end
          end
        if !_o['kirjaajaNimi'].nil?
          _oa = _o['kirjaajaNimi']
            if(_oa.is_a? Hash)
              @kirjaajaNimi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kirjaajaNimi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kirjaajaNimi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kirjaajaNimi.push String.from_json(_item)
                 else
                   @kirjaajaNimi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kirjaajaNimi = _oa
            end
          end
        if !_o['aloitusyksikkoNimi'].nil?
          _oa = _o['aloitusyksikkoNimi']
            if(_oa.is_a? Hash)
              @aloitusyksikkoNimi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @aloitusyksikkoNimi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @aloitusyksikkoNimi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @aloitusyksikkoNimi.push String.from_json(_item)
                 else
                   @aloitusyksikkoNimi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @aloitusyksikkoNimi = _oa
            end
          end
        if !_o['aloittajaNimi'].nil?
          _oa = _o['aloittajaNimi']
            if(_oa.is_a? Hash)
              @aloittajaNimi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @aloittajaNimi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @aloittajaNimi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @aloittajaNimi.push String.from_json(_item)
                 else
                   @aloittajaNimi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @aloittajaNimi = _oa
            end
          end
        if !_o['kirjausyksikkoNimi'].nil?
          _oa = _o['kirjausyksikkoNimi']
            if(_oa.is_a? Hash)
              @kirjausyksikkoNimi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kirjausyksikkoNimi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kirjausyksikkoNimi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kirjausyksikkoNimi.push String.from_json(_item)
                 else
                   @kirjausyksikkoNimi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kirjausyksikkoNimi = _oa
            end
          end
    end

    # constructs a Riskitieto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class TutkimuspyyntoTiedot < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # Returns the pyynto id
    attr_accessor :pyynto
    # Returns the row number
    attr_accessor :rivi
    # Returns the Tutkimus name
    attr_accessor :tutkimus
    # Returns the version
    attr_accessor :versio
    # Returns the char value for Hajautettu
    attr_accessor :hajautettu
    # Returns the Hoitojakso
    attr_accessor :hoitojakso
    # Returns the notifications
    attr_accessor :huomautuksia
    # Returns the possible control date
    attr_accessor :kontrolloitava
    # Returns the korvausluokka
    attr_accessor :korvausluokka
    # Returns the county council
    attr_accessor :kunta
    # Returns the Kustannuslinkki
    attr_accessor :kustannuslinkki
    # Return the info about if there is some extra information
    attr_accessor :lisatietoja
    # Return the Lomakelinkki
    attr_accessor :lomakelinkki
    # Return the payer
    attr_accessor :maksaja
    # Return the info about if there is Mikrobitietoja available
    attr_accessor :mikrobitietoja
    # Return the time of change
    attr_accessor :muutosaika
    # Return the place of change
    attr_accessor :muutospaikka
    # Return the sample
    attr_accessor :nayte
    # Return the info about if there is sample information
    attr_accessor :naytetietoja
    # Return the result in numeric format
    attr_accessor :numerotulos
    # Return the unit of the result
    attr_accessor :numeroyksikko
    # Return the Osalinkki
    attr_accessor :osalinkki
    # Return the department
    attr_accessor :osasto
    # Return the time when the lab examination is done
    attr_accessor :ottoaika
    # Return the package
    attr_accessor :paketti
    # Return the Väestövastuupiiri
    attr_accessor :piiri
    # Return the info about if the result is removed
    attr_accessor :poistettu
    # 
    attr_accessor :pyydetty
    # Return the verbal result
    attr_accessor :sanallinenvastaus
    # Return the location (department)
    attr_accessor :sijaintiosasto
    # Return the location (place)
    attr_accessor :sijaintipaikka
    # Return the internal payer
    attr_accessor :sisainenMaksaja
    # Return the Suoritelinkki
    attr_accessor :suoritelinkki
    # Return the time when lab examination is done
    attr_accessor :tehty
    # Return the place where lab examination is done
    attr_accessor :tekopaikka
    # Return the result in textual format
    attr_accessor :tekstitulos
    # Return the SMS
    attr_accessor :tekstiviesti
    # Return the state
    attr_accessor :tila
    # Return the orderer
    attr_accessor :tilaaja
    # Return the name of the orderer
    attr_accessor :tilaajaNimi
    # Return the unit of the orderer
    attr_accessor :tilaajayksikko
    # Return the identifier of the order
    attr_accessor :tilaustunnus
    # Return the date when the repetition ends
    attr_accessor :toistoloppuu
    # Return the interval of the repetition
    attr_accessor :toistovali
    # Return the interpretation
    attr_accessor :tulkinta
    # Return the producer
    attr_accessor :tuottaja
    # Return the employer
    attr_accessor :tyonantaja
    # Return the info about if there is Vastaustietoja available
    attr_accessor :vastaustietoja
    # Return the Viitearvot, which contains min and max values for the
    # result. Result is normal, if the value is between the min and max values.
    attr_accessor :viitearvot
    # Return the recorder of the result
    attr_accessor :kirjaaja
    # (no documentation provided)
    attr_accessor :tilaKoodi
    # (no documentation provided)
    attr_accessor :poikkeava
    # (no documentation provided)
    attr_accessor :mikrobit

    # the json hash for this TutkimuspyyntoTiedot
    def to_jaxb_json_hash
      _h = super
      _h['pyynto'] = pyynto.to_jaxb_json_hash unless pyynto.nil?
      _h['rivi'] = rivi.to_jaxb_json_hash unless rivi.nil?
      _h['tutkimus'] = tutkimus.to_jaxb_json_hash unless tutkimus.nil?
      _h['versio'] = versio.to_jaxb_json_hash unless versio.nil?
      _h['hajautettu'] = hajautettu.to_jaxb_json_hash unless hajautettu.nil?
      _h['hoitojakso'] = hoitojakso.to_jaxb_json_hash unless hoitojakso.nil?
      _h['huomautuksia'] = huomautuksia.to_jaxb_json_hash unless huomautuksia.nil?
      _h['kontrolloitava'] = kontrolloitava.to_jaxb_json_hash unless kontrolloitava.nil?
      _h['korvausluokka'] = korvausluokka.to_jaxb_json_hash unless korvausluokka.nil?
      _h['kunta'] = kunta.to_jaxb_json_hash unless kunta.nil?
      _h['kustannuslinkki'] = kustannuslinkki.to_jaxb_json_hash unless kustannuslinkki.nil?
      _h['lisatietoja'] = lisatietoja.to_jaxb_json_hash unless lisatietoja.nil?
      _h['lomakelinkki'] = lomakelinkki.to_jaxb_json_hash unless lomakelinkki.nil?
      _h['maksaja'] = maksaja.to_jaxb_json_hash unless maksaja.nil?
      _h['mikrobitietoja'] = mikrobitietoja.to_jaxb_json_hash unless mikrobitietoja.nil?
      _h['muutosaika'] = muutosaika.to_jaxb_json_hash unless muutosaika.nil?
      _h['muutospaikka'] = muutospaikka.to_jaxb_json_hash unless muutospaikka.nil?
      _h['nayte'] = nayte.to_jaxb_json_hash unless nayte.nil?
      _h['naytetietoja'] = naytetietoja.to_jaxb_json_hash unless naytetietoja.nil?
      _h['numerotulos'] = numerotulos.to_jaxb_json_hash unless numerotulos.nil?
      _h['numeroyksikko'] = numeroyksikko.to_jaxb_json_hash unless numeroyksikko.nil?
      _h['osalinkki'] = osalinkki.to_jaxb_json_hash unless osalinkki.nil?
      _h['osasto'] = osasto.to_jaxb_json_hash unless osasto.nil?
      _h['ottoaika'] = ottoaika.to_jaxb_json_hash unless ottoaika.nil?
      _h['paketti'] = paketti.to_jaxb_json_hash unless paketti.nil?
      _h['piiri'] = piiri.to_jaxb_json_hash unless piiri.nil?
      _h['poistettu'] = poistettu.to_jaxb_json_hash unless poistettu.nil?
      _h['pyydetty'] = pyydetty.to_jaxb_json_hash unless pyydetty.nil?
      _h['sanallinenvastaus'] = sanallinenvastaus.to_jaxb_json_hash unless sanallinenvastaus.nil?
      _h['sijaintiosasto'] = sijaintiosasto.to_jaxb_json_hash unless sijaintiosasto.nil?
      _h['sijaintipaikka'] = sijaintipaikka.to_jaxb_json_hash unless sijaintipaikka.nil?
      _h['sisainenMaksaja'] = sisainenMaksaja.to_jaxb_json_hash unless sisainenMaksaja.nil?
      _h['suoritelinkki'] = suoritelinkki.to_jaxb_json_hash unless suoritelinkki.nil?
      _h['tehty'] = tehty.to_jaxb_json_hash unless tehty.nil?
      _h['tekopaikka'] = tekopaikka.to_jaxb_json_hash unless tekopaikka.nil?
      _h['tekstitulos'] = tekstitulos.to_jaxb_json_hash unless tekstitulos.nil?
      _h['tekstiviesti'] = tekstiviesti.to_jaxb_json_hash unless tekstiviesti.nil?
      _h['tila'] = tila.to_jaxb_json_hash unless tila.nil?
      _h['tilaaja'] = tilaaja.to_jaxb_json_hash unless tilaaja.nil?
      _h['tilaajaNimi'] = tilaajaNimi.to_jaxb_json_hash unless tilaajaNimi.nil?
      _h['tilaajayksikko'] = tilaajayksikko.to_jaxb_json_hash unless tilaajayksikko.nil?
      _h['tilaustunnus'] = tilaustunnus.to_jaxb_json_hash unless tilaustunnus.nil?
      _h['toistoloppuu'] = toistoloppuu.to_jaxb_json_hash unless toistoloppuu.nil?
      _h['toistovali'] = toistovali.to_jaxb_json_hash unless toistovali.nil?
      _h['tulkinta'] = tulkinta.to_jaxb_json_hash unless tulkinta.nil?
      _h['tuottaja'] = tuottaja.to_jaxb_json_hash unless tuottaja.nil?
      _h['tyonantaja'] = tyonantaja.to_jaxb_json_hash unless tyonantaja.nil?
      _h['vastaustietoja'] = vastaustietoja.to_jaxb_json_hash unless vastaustietoja.nil?
      _h['viitearvot'] = viitearvot.to_jaxb_json_hash unless viitearvot.nil?
      _h['kirjaaja'] = kirjaaja.to_jaxb_json_hash unless kirjaaja.nil?
      _h['tilaKoodi'] = tilaKoodi.to_jaxb_json_hash unless tilaKoodi.nil?
      _h['poikkeava'] = poikkeava.to_jaxb_json_hash unless poikkeava.nil?
      if !mikrobit.nil?
        _ha = Array.new
        mikrobit.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['mikrobit'] = _ha
      end
      return _h
    end

    #initializes this TutkimuspyyntoTiedot with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['pyynto'].nil?
          _oa = _o['pyynto']
            if(_oa.is_a? Hash)
              @pyynto = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @pyynto =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @pyynto = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @pyynto.push Fixnum.from_json(_item)
                 else
                   @pyynto.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @pyynto = _oa
            end
          end
        if !_o['rivi'].nil?
          _oa = _o['rivi']
            if(_oa.is_a? Hash)
              @rivi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rivi =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rivi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rivi.push Fixnum.from_json(_item)
                 else
                   @rivi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rivi = _oa
            end
          end
        if !_o['tutkimus'].nil?
          _oa = _o['tutkimus']
            if(_oa.is_a? Hash)
              @tutkimus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tutkimus =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tutkimus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tutkimus.push String.from_json(_item)
                 else
                   @tutkimus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tutkimus = _oa
            end
          end
        if !_o['versio'].nil?
          _oa = _o['versio']
            if(_oa.is_a? Hash)
              @versio = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @versio =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @versio = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @versio.push String.from_json(_item)
                 else
                   @versio.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @versio = _oa
            end
          end
        if !_o['hajautettu'].nil?
          _oa = _o['hajautettu']
            if(_oa.is_a? Hash)
              @hajautettu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @hajautettu =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @hajautettu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @hajautettu.push Fixnum.from_json(_item)
                 else
                   @hajautettu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @hajautettu = _oa
            end
          end
        if !_o['hoitojakso'].nil?
          _oa = _o['hoitojakso']
            if(_oa.is_a? Hash)
              @hoitojakso = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @hoitojakso =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @hoitojakso = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @hoitojakso.push Fixnum.from_json(_item)
                 else
                   @hoitojakso.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @hoitojakso = _oa
            end
          end
        if !_o['huomautuksia'].nil?
          _oa = _o['huomautuksia']
            if(_oa.is_a? Hash)
              @huomautuksia = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @huomautuksia =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @huomautuksia = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @huomautuksia.push String.from_json(_item)
                 else
                   @huomautuksia.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @huomautuksia = _oa
            end
          end
        if !_o['kontrolloitava'].nil?
          _oa = _o['kontrolloitava']
            if(_oa.is_a? Hash)
              @kontrolloitava = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kontrolloitava =  Java::Sql::Date.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kontrolloitava = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kontrolloitava.push Java::Sql::Date.from_json(_item)
                 else
                   @kontrolloitava.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kontrolloitava = _oa
            end
          end
        if !_o['korvausluokka'].nil?
          _oa = _o['korvausluokka']
            if(_oa.is_a? Hash)
              @korvausluokka = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @korvausluokka =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @korvausluokka = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @korvausluokka.push Fixnum.from_json(_item)
                 else
                   @korvausluokka.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @korvausluokka = _oa
            end
          end
        if !_o['kunta'].nil?
          _oa = _o['kunta']
            if(_oa.is_a? Hash)
              @kunta = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kunta =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kunta = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kunta.push Fixnum.from_json(_item)
                 else
                   @kunta.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kunta = _oa
            end
          end
        if !_o['kustannuslinkki'].nil?
          _oa = _o['kustannuslinkki']
            if(_oa.is_a? Hash)
              @kustannuslinkki = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kustannuslinkki =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kustannuslinkki = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kustannuslinkki.push Fixnum.from_json(_item)
                 else
                   @kustannuslinkki.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kustannuslinkki = _oa
            end
          end
        if !_o['lisatietoja'].nil?
          _oa = _o['lisatietoja']
            if(_oa.is_a? Hash)
              @lisatietoja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lisatietoja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lisatietoja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lisatietoja.push Fixnum.from_json(_item)
                 else
                   @lisatietoja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lisatietoja = _oa
            end
          end
        if !_o['lomakelinkki'].nil?
          _oa = _o['lomakelinkki']
            if(_oa.is_a? Hash)
              @lomakelinkki = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lomakelinkki =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lomakelinkki = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lomakelinkki.push Fixnum.from_json(_item)
                 else
                   @lomakelinkki.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lomakelinkki = _oa
            end
          end
        if !_o['maksaja'].nil?
          _oa = _o['maksaja']
            if(_oa.is_a? Hash)
              @maksaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @maksaja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @maksaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @maksaja.push Fixnum.from_json(_item)
                 else
                   @maksaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @maksaja = _oa
            end
          end
        if !_o['mikrobitietoja'].nil?
          _oa = _o['mikrobitietoja']
            if(_oa.is_a? Hash)
              @mikrobitietoja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @mikrobitietoja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @mikrobitietoja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @mikrobitietoja.push Fixnum.from_json(_item)
                 else
                   @mikrobitietoja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @mikrobitietoja = _oa
            end
          end
        if !_o['muutosaika'].nil?
          _oa = _o['muutosaika']
            if(_oa.is_a? Hash)
              @muutosaika = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @muutosaika =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @muutosaika = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @muutosaika.push Time.from_json(_item)
                 else
                   @muutosaika.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @muutosaika = _oa
            end
          end
        if !_o['muutospaikka'].nil?
          _oa = _o['muutospaikka']
            if(_oa.is_a? Hash)
              @muutospaikka = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @muutospaikka =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @muutospaikka = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @muutospaikka.push Fixnum.from_json(_item)
                 else
                   @muutospaikka.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @muutospaikka = _oa
            end
          end
        if !_o['nayte'].nil?
          _oa = _o['nayte']
            if(_oa.is_a? Hash)
              @nayte = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @nayte =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @nayte = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @nayte.push Fixnum.from_json(_item)
                 else
                   @nayte.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @nayte = _oa
            end
          end
        if !_o['naytetietoja'].nil?
          _oa = _o['naytetietoja']
            if(_oa.is_a? Hash)
              @naytetietoja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @naytetietoja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @naytetietoja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @naytetietoja.push Fixnum.from_json(_item)
                 else
                   @naytetietoja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @naytetietoja = _oa
            end
          end
        if !_o['numerotulos'].nil?
          _oa = _o['numerotulos']
            if(_oa.is_a? Hash)
              @numerotulos = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @numerotulos =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @numerotulos = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @numerotulos.push Float.from_json(_item)
                 else
                   @numerotulos.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @numerotulos = _oa
            end
          end
        if !_o['numeroyksikko'].nil?
          _oa = _o['numeroyksikko']
            if(_oa.is_a? Hash)
              @numeroyksikko = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @numeroyksikko =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @numeroyksikko = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @numeroyksikko.push String.from_json(_item)
                 else
                   @numeroyksikko.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @numeroyksikko = _oa
            end
          end
        if !_o['osalinkki'].nil?
          _oa = _o['osalinkki']
            if(_oa.is_a? Hash)
              @osalinkki = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @osalinkki =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @osalinkki = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @osalinkki.push Fixnum.from_json(_item)
                 else
                   @osalinkki.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @osalinkki = _oa
            end
          end
        if !_o['osasto'].nil?
          _oa = _o['osasto']
            if(_oa.is_a? Hash)
              @osasto = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @osasto =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @osasto = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @osasto.push Fixnum.from_json(_item)
                 else
                   @osasto.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @osasto = _oa
            end
          end
        if !_o['ottoaika'].nil?
          _oa = _o['ottoaika']
            if(_oa.is_a? Hash)
              @ottoaika = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ottoaika =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ottoaika = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ottoaika.push Time.from_json(_item)
                 else
                   @ottoaika.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ottoaika = _oa
            end
          end
        if !_o['paketti'].nil?
          _oa = _o['paketti']
            if(_oa.is_a? Hash)
              @paketti = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @paketti =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @paketti = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @paketti.push String.from_json(_item)
                 else
                   @paketti.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @paketti = _oa
            end
          end
        if !_o['piiri'].nil?
          _oa = _o['piiri']
            if(_oa.is_a? Hash)
              @piiri = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @piiri =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @piiri = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @piiri.push Fixnum.from_json(_item)
                 else
                   @piiri.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @piiri = _oa
            end
          end
        if !_o['poistettu'].nil?
          _oa = _o['poistettu']
            if(_oa.is_a? Hash)
              @poistettu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @poistettu =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @poistettu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @poistettu.push String.from_json(_item)
                 else
                   @poistettu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @poistettu = _oa
            end
          end
        if !_o['pyydetty'].nil?
          _oa = _o['pyydetty']
            if(_oa.is_a? Hash)
              @pyydetty = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @pyydetty =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @pyydetty = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @pyydetty.push Time.from_json(_item)
                 else
                   @pyydetty.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @pyydetty = _oa
            end
          end
        if !_o['sanallinenvastaus'].nil?
          _oa = _o['sanallinenvastaus']
            if(_oa.is_a? Hash)
              @sanallinenvastaus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @sanallinenvastaus =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @sanallinenvastaus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @sanallinenvastaus.push String.from_json(_item)
                 else
                   @sanallinenvastaus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @sanallinenvastaus = _oa
            end
          end
        if !_o['sijaintiosasto'].nil?
          _oa = _o['sijaintiosasto']
            if(_oa.is_a? Hash)
              @sijaintiosasto = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @sijaintiosasto =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @sijaintiosasto = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @sijaintiosasto.push String.from_json(_item)
                 else
                   @sijaintiosasto.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @sijaintiosasto = _oa
            end
          end
        if !_o['sijaintipaikka'].nil?
          _oa = _o['sijaintipaikka']
            if(_oa.is_a? Hash)
              @sijaintipaikka = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @sijaintipaikka =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @sijaintipaikka = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @sijaintipaikka.push String.from_json(_item)
                 else
                   @sijaintipaikka.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @sijaintipaikka = _oa
            end
          end
        if !_o['sisainenMaksaja'].nil?
          _oa = _o['sisainenMaksaja']
            if(_oa.is_a? Hash)
              @sisainenMaksaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @sisainenMaksaja =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @sisainenMaksaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @sisainenMaksaja.push String.from_json(_item)
                 else
                   @sisainenMaksaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @sisainenMaksaja = _oa
            end
          end
        if !_o['suoritelinkki'].nil?
          _oa = _o['suoritelinkki']
            if(_oa.is_a? Hash)
              @suoritelinkki = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @suoritelinkki =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @suoritelinkki = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @suoritelinkki.push Fixnum.from_json(_item)
                 else
                   @suoritelinkki.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @suoritelinkki = _oa
            end
          end
        if !_o['tehty'].nil?
          _oa = _o['tehty']
            if(_oa.is_a? Hash)
              @tehty = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tehty =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tehty = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tehty.push Time.from_json(_item)
                 else
                   @tehty.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tehty = _oa
            end
          end
        if !_o['tekopaikka'].nil?
          _oa = _o['tekopaikka']
            if(_oa.is_a? Hash)
              @tekopaikka = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tekopaikka =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tekopaikka = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tekopaikka.push Fixnum.from_json(_item)
                 else
                   @tekopaikka.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tekopaikka = _oa
            end
          end
        if !_o['tekstitulos'].nil?
          _oa = _o['tekstitulos']
            if(_oa.is_a? Hash)
              @tekstitulos = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tekstitulos =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tekstitulos = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tekstitulos.push String.from_json(_item)
                 else
                   @tekstitulos.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tekstitulos = _oa
            end
          end
        if !_o['tekstiviesti'].nil?
          _oa = _o['tekstiviesti']
            if(_oa.is_a? Hash)
              @tekstiviesti = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tekstiviesti =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tekstiviesti = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tekstiviesti.push Fixnum.from_json(_item)
                 else
                   @tekstiviesti.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tekstiviesti = _oa
            end
          end
        if !_o['tila'].nil?
          _oa = _o['tila']
            if(_oa.is_a? Hash)
              @tila = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tila =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tila = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tila.push Fixnum.from_json(_item)
                 else
                   @tila.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tila = _oa
            end
          end
        if !_o['tilaaja'].nil?
          _oa = _o['tilaaja']
            if(_oa.is_a? Hash)
              @tilaaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tilaaja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tilaaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tilaaja.push Fixnum.from_json(_item)
                 else
                   @tilaaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tilaaja = _oa
            end
          end
        if !_o['tilaajaNimi'].nil?
          _oa = _o['tilaajaNimi']
            if(_oa.is_a? Hash)
              @tilaajaNimi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tilaajaNimi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tilaajaNimi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tilaajaNimi.push String.from_json(_item)
                 else
                   @tilaajaNimi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tilaajaNimi = _oa
            end
          end
        if !_o['tilaajayksikko'].nil?
          _oa = _o['tilaajayksikko']
            if(_oa.is_a? Hash)
              @tilaajayksikko = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tilaajayksikko =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tilaajayksikko = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tilaajayksikko.push Fixnum.from_json(_item)
                 else
                   @tilaajayksikko.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tilaajayksikko = _oa
            end
          end
        if !_o['tilaustunnus'].nil?
          _oa = _o['tilaustunnus']
            if(_oa.is_a? Hash)
              @tilaustunnus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tilaustunnus =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tilaustunnus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tilaustunnus.push String.from_json(_item)
                 else
                   @tilaustunnus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tilaustunnus = _oa
            end
          end
        if !_o['toistoloppuu'].nil?
          _oa = _o['toistoloppuu']
            if(_oa.is_a? Hash)
              @toistoloppuu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @toistoloppuu =  Java::Sql::Date.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @toistoloppuu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @toistoloppuu.push Java::Sql::Date.from_json(_item)
                 else
                   @toistoloppuu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @toistoloppuu = _oa
            end
          end
        if !_o['toistovali'].nil?
          _oa = _o['toistovali']
            if(_oa.is_a? Hash)
              @toistovali = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @toistovali =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @toistovali = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @toistovali.push Fixnum.from_json(_item)
                 else
                   @toistovali.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @toistovali = _oa
            end
          end
        if !_o['tulkinta'].nil?
          _oa = _o['tulkinta']
            if(_oa.is_a? Hash)
              @tulkinta = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tulkinta =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tulkinta = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tulkinta.push String.from_json(_item)
                 else
                   @tulkinta.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tulkinta = _oa
            end
          end
        if !_o['tuottaja'].nil?
          _oa = _o['tuottaja']
            if(_oa.is_a? Hash)
              @tuottaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tuottaja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tuottaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tuottaja.push Fixnum.from_json(_item)
                 else
                   @tuottaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tuottaja = _oa
            end
          end
        if !_o['tyonantaja'].nil?
          _oa = _o['tyonantaja']
            if(_oa.is_a? Hash)
              @tyonantaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tyonantaja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tyonantaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tyonantaja.push Fixnum.from_json(_item)
                 else
                   @tyonantaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tyonantaja = _oa
            end
          end
        if !_o['vastaustietoja'].nil?
          _oa = _o['vastaustietoja']
            if(_oa.is_a? Hash)
              @vastaustietoja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vastaustietoja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vastaustietoja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vastaustietoja.push Fixnum.from_json(_item)
                 else
                   @vastaustietoja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vastaustietoja = _oa
            end
          end
        if !_o['viitearvot'].nil?
          _oa = _o['viitearvot']
            if(_oa.is_a? Hash)
              @viitearvot = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @viitearvot =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @viitearvot = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @viitearvot.push String.from_json(_item)
                 else
                   @viitearvot.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @viitearvot = _oa
            end
          end
        if !_o['kirjaaja'].nil?
          _oa = _o['kirjaaja']
            if(_oa.is_a? Hash)
              @kirjaaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kirjaaja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kirjaaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kirjaaja.push Fixnum.from_json(_item)
                 else
                   @kirjaaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kirjaaja = _oa
            end
          end
        if !_o['tilaKoodi'].nil?
          _oa = _o['tilaKoodi']
            if(_oa.is_a? Hash)
              @tilaKoodi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tilaKoodi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tilaKoodi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tilaKoodi.push String.from_json(_item)
                 else
                   @tilaKoodi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tilaKoodi = _oa
            end
          end
        if !_o['poikkeava'].nil?
          _oa = _o['poikkeava']
            if(_oa.is_a? Hash)
              @poikkeava = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @poikkeava =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @poikkeava = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @poikkeava.push Fixnum.from_json(_item)
                 else
                   @poikkeava.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @poikkeava = _oa
            end
          end
        if !_o['mikrobit'].nil?
          _oa = _o['mikrobit']
            if(_oa.is_a? Hash)
              @mikrobit = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @mikrobit =  Fi::Mediconsult::Core::Client::Dto::TutkimuspyyntoMikrobi.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @mikrobit = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @mikrobit.push Fi::Mediconsult::Core::Client::Dto::TutkimuspyyntoMikrobi.from_json(_item)
                 else
                   @mikrobit.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @mikrobit = _oa
            end
          end
    end

    # constructs a TutkimuspyyntoTiedot from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Enums

  # (no documentation provided)
  class ContentGroupType

    # (no documentation provided)
    USER_DEFINED = "USER_DEFINED"

    # (no documentation provided)
    SYSTEM_DEFINED_GENERAL = "SYSTEM_DEFINED_GENERAL"

    # (no documentation provided)
    SYSTEM_DEFINED_WORKERS = "SYSTEM_DEFINED_WORKERS"

    # (no documentation provided)
    SYSTEM_DEFINED_CUSTOMERS = "SYSTEM_DEFINED_CUSTOMERS"

    # (no documentation provided)
    SYSTEM_DEFINED_EQUIPMENT = "SYSTEM_DEFINED_EQUIPMENT"

    # (no documentation provided)
    SYSTEM_DEFINED_ROOM = "SYSTEM_DEFINED_ROOM"

    # (no documentation provided)
    SYSTEM_DEFINED_BASIC_INFORMATION = "SYSTEM_DEFINED_BASIC_INFORMATION"

    # (no documentation provided)
    SYSTEM_DEFINED_SERVICE_CLASS = "SYSTEM_DEFINED_SERVICE_CLASS"

    # (no documentation provided)
    SYSTEM_DEFINED_PLANNING_SETTINGS = "SYSTEM_DEFINED_PLANNING_SETTINGS"
  end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Kanta

module Suostumustenhallinta

  # (no documentation provided)
  class Type

    # (no documentation provided)
    SERVICE_PROVIDER = "SERVICE_PROVIDER"

    # (no documentation provided)
    REGISTER = "REGISTER"

    # (no documentation provided)
    SERVICE_EVENT = "SERVICE_EVENT"
  end

end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Kanta

  # (no documentation provided)
  class EprescriptionsDenials < Fi::Mediconsult::Core::Client::Dto::Kanta::KantaDTO 

    # (no documentation provided)
    attr_accessor :denialData
    # (no documentation provided)
    attr_accessor :errorMessage
    # (no documentation provided)
    attr_accessor :version
    # (no documentation provided)
    attr_accessor :deniablePrescriptions
    # (no documentation provided)
    attr_accessor :userHetu

    # the json hash for this EprescriptionsDenials
    def to_jaxb_json_hash
      _h = super
      _h['denialData'] = denialData.to_jaxb_json_hash unless denialData.nil?
      _h['errorMessage'] = errorMessage.to_jaxb_json_hash unless errorMessage.nil?
      _h['version'] = version.to_jaxb_json_hash unless version.nil?
      if !deniablePrescriptions.nil?
        _ha = Array.new
        deniablePrescriptions.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['deniablePrescriptions'] = _ha
      end
      _h['userHetu'] = userHetu.to_jaxb_json_hash unless userHetu.nil?
      return _h
    end

    #initializes this EprescriptionsDenials with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['denialData'].nil?
          _oa = _o['denialData']
            if(_oa.is_a? Hash)
              @denialData = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @denialData =  Fi::Mediconsult::Core::Client::Dto::Kanta::DenialData.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @denialData = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @denialData.push Fi::Mediconsult::Core::Client::Dto::Kanta::DenialData.from_json(_item)
                 else
                   @denialData.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @denialData = _oa
            end
          end
        if !_o['errorMessage'].nil?
          _oa = _o['errorMessage']
            if(_oa.is_a? Hash)
              @errorMessage = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @errorMessage =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @errorMessage = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @errorMessage.push String.from_json(_item)
                 else
                   @errorMessage.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @errorMessage = _oa
            end
          end
        if !_o['version'].nil?
          _oa = _o['version']
            if(_oa.is_a? Hash)
              @version = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @version =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @version = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @version.push String.from_json(_item)
                 else
                   @version.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @version = _oa
            end
          end
        if !_o['deniablePrescriptions'].nil?
          _oa = _o['deniablePrescriptions']
            if(_oa.is_a? Hash)
              @deniablePrescriptions = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @deniablePrescriptions =  Fi::Mediconsult::Core::Client::Dto::Kanta::Prescription.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @deniablePrescriptions = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @deniablePrescriptions.push Fi::Mediconsult::Core::Client::Dto::Kanta::Prescription.from_json(_item)
                 else
                   @deniablePrescriptions.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @deniablePrescriptions = _oa
            end
          end
        if !_o['userHetu'].nil?
          _oa = _o['userHetu']
            if(_oa.is_a? Hash)
              @userHetu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @userHetu =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @userHetu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @userHetu.push String.from_json(_item)
                 else
                   @userHetu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @userHetu = _oa
            end
          end
    end

    # constructs a EprescriptionsDenials from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Laakitys

  # (no documentation provided)
  class LaakeSelosteTeksti < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # Returns the part number of the description, can be used to order descriptions
    attr_accessor :osa
    # 
    attr_accessor :otsikko
    # Returns the text of the description
    attr_accessor :teksti

    # the json hash for this LaakeSelosteTeksti
    def to_jaxb_json_hash
      _h = super
      _h['osa'] = osa.to_jaxb_json_hash unless osa.nil?
      _h['otsikko'] = otsikko.to_jaxb_json_hash unless otsikko.nil?
      _h['teksti'] = teksti.to_jaxb_json_hash unless teksti.nil?
      return _h
    end

    #initializes this LaakeSelosteTeksti with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['osa'].nil?
          _oa = _o['osa']
            if(_oa.is_a? Hash)
              @osa = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @osa =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @osa = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @osa.push Fixnum.from_json(_item)
                 else
                   @osa.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @osa = _oa
            end
          end
        if !_o['otsikko'].nil?
          _oa = _o['otsikko']
            if(_oa.is_a? Hash)
              @otsikko = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @otsikko =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @otsikko = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @otsikko.push Fixnum.from_json(_item)
                 else
                   @otsikko.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @otsikko = _oa
            end
          end
        if !_o['teksti'].nil?
          _oa = _o['teksti']
            if(_oa.is_a? Hash)
              @teksti = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @teksti =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @teksti = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @teksti.push String.from_json(_item)
                 else
                   @teksti.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @teksti = _oa
            end
          end
    end

    # constructs a LaakeSelosteTeksti from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Paatoksentuki

  # (no documentation provided)
  class GuidelineLink < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # (no documentation provided)
    attr_accessor :guidelineURL
    # (no documentation provided)
    attr_accessor :guidelineTitle
    # (no documentation provided)
    attr_accessor :guidelinePriority
    # (no documentation provided)
    attr_accessor :guidelineID
    # (no documentation provided)
    attr_accessor :diagnosisCode
    # (no documentation provided)
    attr_accessor :diagnosisName

    # the json hash for this GuidelineLink
    def to_jaxb_json_hash
      _h = super
      _h['guidelineURL'] = guidelineURL.to_jaxb_json_hash unless guidelineURL.nil?
      _h['guidelineTitle'] = guidelineTitle.to_jaxb_json_hash unless guidelineTitle.nil?
      _h['guidelinePriority'] = guidelinePriority.to_jaxb_json_hash unless guidelinePriority.nil?
      _h['guidelineID'] = guidelineID.to_jaxb_json_hash unless guidelineID.nil?
      _h['diagnosisCode'] = diagnosisCode.to_jaxb_json_hash unless diagnosisCode.nil?
      _h['diagnosisName'] = diagnosisName.to_jaxb_json_hash unless diagnosisName.nil?
      return _h
    end

    #initializes this GuidelineLink with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['guidelineURL'].nil?
          _oa = _o['guidelineURL']
            if(_oa.is_a? Hash)
              @guidelineURL = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @guidelineURL =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @guidelineURL = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @guidelineURL.push String.from_json(_item)
                 else
                   @guidelineURL.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @guidelineURL = _oa
            end
          end
        if !_o['guidelineTitle'].nil?
          _oa = _o['guidelineTitle']
            if(_oa.is_a? Hash)
              @guidelineTitle = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @guidelineTitle =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @guidelineTitle = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @guidelineTitle.push String.from_json(_item)
                 else
                   @guidelineTitle.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @guidelineTitle = _oa
            end
          end
        if !_o['guidelinePriority'].nil?
          _oa = _o['guidelinePriority']
            if(_oa.is_a? Hash)
              @guidelinePriority = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @guidelinePriority =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @guidelinePriority = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @guidelinePriority.push Fixnum.from_json(_item)
                 else
                   @guidelinePriority.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @guidelinePriority = _oa
            end
          end
        if !_o['guidelineID'].nil?
          _oa = _o['guidelineID']
            if(_oa.is_a? Hash)
              @guidelineID = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @guidelineID =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @guidelineID = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @guidelineID.push String.from_json(_item)
                 else
                   @guidelineID.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @guidelineID = _oa
            end
          end
        if !_o['diagnosisCode'].nil?
          _oa = _o['diagnosisCode']
            if(_oa.is_a? Hash)
              @diagnosisCode = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @diagnosisCode =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @diagnosisCode = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @diagnosisCode.push String.from_json(_item)
                 else
                   @diagnosisCode.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @diagnosisCode = _oa
            end
          end
        if !_o['diagnosisName'].nil?
          _oa = _o['diagnosisName']
            if(_oa.is_a? Hash)
              @diagnosisName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @diagnosisName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @diagnosisName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @diagnosisName.push String.from_json(_item)
                 else
                   @diagnosisName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @diagnosisName = _oa
            end
          end
    end

    # constructs a GuidelineLink from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Medisos

module Dto

  # (no documentation provided)
  class PalvelutehtavanAsiakkuusKyselyDto < Fi::Mediconsult::Medisos::Dto::MediSosDtoBase 

    # (no documentation provided)
    attr_accessor :pageSize
    # (no documentation provided)
    attr_accessor :pageIndex
    # (no documentation provided)
    attr_accessor :grouping
    # (no documentation provided)
    attr_accessor :asiakasnumeroList
    # (no documentation provided)
    attr_accessor :asiakasnimiList
    # (no documentation provided)
    attr_accessor :vastuutyontekijanumeroList
    # (no documentation provided)
    attr_accessor :vastuutyontekijanimiList
    # (no documentation provided)
    attr_accessor :formId

    # the json hash for this PalvelutehtavanAsiakkuusKyselyDto
    def to_jaxb_json_hash
      _h = super
      _h['pageSize'] = pageSize.to_jaxb_json_hash unless pageSize.nil?
      _h['pageIndex'] = pageIndex.to_jaxb_json_hash unless pageIndex.nil?
      _h['grouping'] = grouping.to_jaxb_json_hash unless grouping.nil?
      if !asiakasnumeroList.nil?
        _ha = Array.new
        asiakasnumeroList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['asiakasnumeroList'] = _ha
      end
      if !asiakasnimiList.nil?
        _ha = Array.new
        asiakasnimiList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['asiakasnimiList'] = _ha
      end
      if !vastuutyontekijanumeroList.nil?
        _ha = Array.new
        vastuutyontekijanumeroList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['vastuutyontekijanumeroList'] = _ha
      end
      if !vastuutyontekijanimiList.nil?
        _ha = Array.new
        vastuutyontekijanimiList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['vastuutyontekijanimiList'] = _ha
      end
      _h['formId'] = formId.to_jaxb_json_hash unless formId.nil?
      return _h
    end

    #initializes this PalvelutehtavanAsiakkuusKyselyDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['pageSize'].nil?
          _oa = _o['pageSize']
            if(_oa.is_a? Hash)
              @pageSize = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @pageSize =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @pageSize = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @pageSize.push Fixnum.from_json(_item)
                 else
                   @pageSize.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @pageSize = _oa
            end
          end
        if !_o['pageIndex'].nil?
          _oa = _o['pageIndex']
            if(_oa.is_a? Hash)
              @pageIndex = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @pageIndex =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @pageIndex = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @pageIndex.push Fixnum.from_json(_item)
                 else
                   @pageIndex.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @pageIndex = _oa
            end
          end
        if !_o['grouping'].nil?
          _oa = _o['grouping']
            if(_oa.is_a? Hash)
              @grouping = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @grouping =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @grouping = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @grouping.push String.from_json(_item)
                 else
                   @grouping.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @grouping = _oa
            end
          end
        if !_o['asiakasnumeroList'].nil?
          _oa = _o['asiakasnumeroList']
            if(_oa.is_a? Hash)
              @asiakasnumeroList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakasnumeroList =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakasnumeroList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakasnumeroList.push Fixnum.from_json(_item)
                 else
                   @asiakasnumeroList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakasnumeroList = _oa
            end
          end
        if !_o['asiakasnimiList'].nil?
          _oa = _o['asiakasnimiList']
            if(_oa.is_a? Hash)
              @asiakasnimiList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakasnimiList =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakasnimiList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakasnimiList.push String.from_json(_item)
                 else
                   @asiakasnimiList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakasnimiList = _oa
            end
          end
        if !_o['vastuutyontekijanumeroList'].nil?
          _oa = _o['vastuutyontekijanumeroList']
            if(_oa.is_a? Hash)
              @vastuutyontekijanumeroList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vastuutyontekijanumeroList =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vastuutyontekijanumeroList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vastuutyontekijanumeroList.push Fixnum.from_json(_item)
                 else
                   @vastuutyontekijanumeroList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vastuutyontekijanumeroList = _oa
            end
          end
        if !_o['vastuutyontekijanimiList'].nil?
          _oa = _o['vastuutyontekijanimiList']
            if(_oa.is_a? Hash)
              @vastuutyontekijanimiList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vastuutyontekijanimiList =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vastuutyontekijanimiList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vastuutyontekijanimiList.push String.from_json(_item)
                 else
                   @vastuutyontekijanimiList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vastuutyontekijanimiList = _oa
            end
          end
        if !_o['formId'].nil?
          _oa = _o['formId']
            if(_oa.is_a? Hash)
              @formId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @formId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @formId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @formId.push Fixnum.from_json(_item)
                 else
                   @formId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @formId = _oa
            end
          end
    end

    # constructs a PalvelutehtavanAsiakkuusKyselyDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Medisos

module Dto

  # (no documentation provided)
  class AsiakirjaSummaryDto < Fi::Mediconsult::Medisos::Dto::MediSosDtoBase 

    # (no documentation provided)
    attr_accessor :asiakirjaNimiLista
    # (no documentation provided)
    attr_accessor :asiakirjaTilaLista
    # (no documentation provided)
    attr_accessor :asiakirjaTyyppiLista
    # (no documentation provided)
    attr_accessor :laatijaNimiLista
    # (no documentation provided)
    attr_accessor :laatijaNumeroLista
    # (no documentation provided)
    attr_accessor :laatimisaikaLista
    # (no documentation provided)
    attr_accessor :paatoksentekijaNimiLista
    # (no documentation provided)
    attr_accessor :palvelutehtavaLista
    # (no documentation provided)
    attr_accessor :palveluyksikkoNimiLista
    # (no documentation provided)
    attr_accessor :prosessinvaiheLista
    # (no documentation provided)
    attr_accessor :sosiaalipalveluLista
    # (no documentation provided)
    attr_accessor :valmistelijaNimiLista
    # (no documentation provided)
    attr_accessor :asiakirjaIdLista
    # (no documentation provided)
    attr_accessor :palveluyksikkoNumeroLista

    # the json hash for this AsiakirjaSummaryDto
    def to_jaxb_json_hash
      _h = super
      if !asiakirjaNimiLista.nil?
        _ha = Array.new
        asiakirjaNimiLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['asiakirjaNimiLista'] = _ha
      end
      if !asiakirjaTilaLista.nil?
        _ha = Array.new
        asiakirjaTilaLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['asiakirjaTilaLista'] = _ha
      end
      if !asiakirjaTyyppiLista.nil?
        _ha = Array.new
        asiakirjaTyyppiLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['asiakirjaTyyppiLista'] = _ha
      end
      if !laatijaNimiLista.nil?
        _ha = Array.new
        laatijaNimiLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['laatijaNimiLista'] = _ha
      end
      if !laatijaNumeroLista.nil?
        _ha = Array.new
        laatijaNumeroLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['laatijaNumeroLista'] = _ha
      end
      if !laatimisaikaLista.nil?
        _ha = Array.new
        laatimisaikaLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['laatimisaikaLista'] = _ha
      end
      if !paatoksentekijaNimiLista.nil?
        _ha = Array.new
        paatoksentekijaNimiLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['paatoksentekijaNimiLista'] = _ha
      end
      if !palvelutehtavaLista.nil?
        _ha = Array.new
        palvelutehtavaLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['palvelutehtavaLista'] = _ha
      end
      if !palveluyksikkoNimiLista.nil?
        _ha = Array.new
        palveluyksikkoNimiLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['palveluyksikkoNimiLista'] = _ha
      end
      if !prosessinvaiheLista.nil?
        _ha = Array.new
        prosessinvaiheLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['prosessinvaiheLista'] = _ha
      end
      if !sosiaalipalveluLista.nil?
        _ha = Array.new
        sosiaalipalveluLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['sosiaalipalveluLista'] = _ha
      end
      if !valmistelijaNimiLista.nil?
        _ha = Array.new
        valmistelijaNimiLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['valmistelijaNimiLista'] = _ha
      end
      if !asiakirjaIdLista.nil?
        _ha = Array.new
        asiakirjaIdLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['asiakirjaIdLista'] = _ha
      end
      if !palveluyksikkoNumeroLista.nil?
        _ha = Array.new
        palveluyksikkoNumeroLista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['palveluyksikkoNumeroLista'] = _ha
      end
      return _h
    end

    #initializes this AsiakirjaSummaryDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['asiakirjaNimiLista'].nil?
          _oa = _o['asiakirjaNimiLista']
            if(_oa.is_a? Hash)
              @asiakirjaNimiLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakirjaNimiLista =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakirjaNimiLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakirjaNimiLista.push String.from_json(_item)
                 else
                   @asiakirjaNimiLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakirjaNimiLista = _oa
            end
          end
        if !_o['asiakirjaTilaLista'].nil?
          _oa = _o['asiakirjaTilaLista']
            if(_oa.is_a? Hash)
              @asiakirjaTilaLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakirjaTilaLista =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakirjaTilaLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakirjaTilaLista.push String.from_json(_item)
                 else
                   @asiakirjaTilaLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakirjaTilaLista = _oa
            end
          end
        if !_o['asiakirjaTyyppiLista'].nil?
          _oa = _o['asiakirjaTyyppiLista']
            if(_oa.is_a? Hash)
              @asiakirjaTyyppiLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakirjaTyyppiLista =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakirjaTyyppiLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakirjaTyyppiLista.push String.from_json(_item)
                 else
                   @asiakirjaTyyppiLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakirjaTyyppiLista = _oa
            end
          end
        if !_o['laatijaNimiLista'].nil?
          _oa = _o['laatijaNimiLista']
            if(_oa.is_a? Hash)
              @laatijaNimiLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laatijaNimiLista =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laatijaNimiLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laatijaNimiLista.push String.from_json(_item)
                 else
                   @laatijaNimiLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laatijaNimiLista = _oa
            end
          end
        if !_o['laatijaNumeroLista'].nil?
          _oa = _o['laatijaNumeroLista']
            if(_oa.is_a? Hash)
              @laatijaNumeroLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laatijaNumeroLista =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laatijaNumeroLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laatijaNumeroLista.push Fixnum.from_json(_item)
                 else
                   @laatijaNumeroLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laatijaNumeroLista = _oa
            end
          end
        if !_o['laatimisaikaLista'].nil?
          _oa = _o['laatimisaikaLista']
            if(_oa.is_a? Hash)
              @laatimisaikaLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @laatimisaikaLista =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @laatimisaikaLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @laatimisaikaLista.push Time.from_json(_item)
                 else
                   @laatimisaikaLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @laatimisaikaLista = _oa
            end
          end
        if !_o['paatoksentekijaNimiLista'].nil?
          _oa = _o['paatoksentekijaNimiLista']
            if(_oa.is_a? Hash)
              @paatoksentekijaNimiLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @paatoksentekijaNimiLista =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @paatoksentekijaNimiLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @paatoksentekijaNimiLista.push String.from_json(_item)
                 else
                   @paatoksentekijaNimiLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @paatoksentekijaNimiLista = _oa
            end
          end
        if !_o['palvelutehtavaLista'].nil?
          _oa = _o['palvelutehtavaLista']
            if(_oa.is_a? Hash)
              @palvelutehtavaLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palvelutehtavaLista =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palvelutehtavaLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palvelutehtavaLista.push String.from_json(_item)
                 else
                   @palvelutehtavaLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palvelutehtavaLista = _oa
            end
          end
        if !_o['palveluyksikkoNimiLista'].nil?
          _oa = _o['palveluyksikkoNimiLista']
            if(_oa.is_a? Hash)
              @palveluyksikkoNimiLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palveluyksikkoNimiLista =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palveluyksikkoNimiLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palveluyksikkoNimiLista.push String.from_json(_item)
                 else
                   @palveluyksikkoNimiLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palveluyksikkoNimiLista = _oa
            end
          end
        if !_o['prosessinvaiheLista'].nil?
          _oa = _o['prosessinvaiheLista']
            if(_oa.is_a? Hash)
              @prosessinvaiheLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @prosessinvaiheLista =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @prosessinvaiheLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @prosessinvaiheLista.push String.from_json(_item)
                 else
                   @prosessinvaiheLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @prosessinvaiheLista = _oa
            end
          end
        if !_o['sosiaalipalveluLista'].nil?
          _oa = _o['sosiaalipalveluLista']
            if(_oa.is_a? Hash)
              @sosiaalipalveluLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @sosiaalipalveluLista =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @sosiaalipalveluLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @sosiaalipalveluLista.push String.from_json(_item)
                 else
                   @sosiaalipalveluLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @sosiaalipalveluLista = _oa
            end
          end
        if !_o['valmistelijaNimiLista'].nil?
          _oa = _o['valmistelijaNimiLista']
            if(_oa.is_a? Hash)
              @valmistelijaNimiLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @valmistelijaNimiLista =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @valmistelijaNimiLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @valmistelijaNimiLista.push String.from_json(_item)
                 else
                   @valmistelijaNimiLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @valmistelijaNimiLista = _oa
            end
          end
        if !_o['asiakirjaIdLista'].nil?
          _oa = _o['asiakirjaIdLista']
            if(_oa.is_a? Hash)
              @asiakirjaIdLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakirjaIdLista =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakirjaIdLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakirjaIdLista.push Bignum.from_json(_item)
                 else
                   @asiakirjaIdLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakirjaIdLista = _oa
            end
          end
        if !_o['palveluyksikkoNumeroLista'].nil?
          _oa = _o['palveluyksikkoNumeroLista']
            if(_oa.is_a? Hash)
              @palveluyksikkoNumeroLista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palveluyksikkoNumeroLista =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palveluyksikkoNumeroLista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palveluyksikkoNumeroLista.push Fixnum.from_json(_item)
                 else
                   @palveluyksikkoNumeroLista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palveluyksikkoNumeroLista = _oa
            end
          end
    end

    # constructs a AsiakirjaSummaryDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Medisos

module Dto

  # (no documentation provided)
  class AsiakirjalistaDto < Fi::Mediconsult::Medisos::Dto::MediSosDtoBase 

    # (no documentation provided)
    attr_accessor :asiakirjojenKokonaisLkm
    # (no documentation provided)
    attr_accessor :pageSize
    # (no documentation provided)
    attr_accessor :pageIndex
    # (no documentation provided)
    attr_accessor :asiakirjalista
    # (no documentation provided)
    attr_accessor :asiakirjaIndexAlku
    # (no documentation provided)
    attr_accessor :asiakirjaIndexLoppu
    # (no documentation provided)
    attr_accessor :dokumenttilista

    # the json hash for this AsiakirjalistaDto
    def to_jaxb_json_hash
      _h = super
      _h['asiakirjojenKokonaisLkm'] = asiakirjojenKokonaisLkm.to_jaxb_json_hash unless asiakirjojenKokonaisLkm.nil?
      _h['pageSize'] = pageSize.to_jaxb_json_hash unless pageSize.nil?
      _h['pageIndex'] = pageIndex.to_jaxb_json_hash unless pageIndex.nil?
      if !asiakirjalista.nil?
        _ha = Array.new
        asiakirjalista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['asiakirjalista'] = _ha
      end
      _h['asiakirjaIndexAlku'] = asiakirjaIndexAlku.to_jaxb_json_hash unless asiakirjaIndexAlku.nil?
      _h['asiakirjaIndexLoppu'] = asiakirjaIndexLoppu.to_jaxb_json_hash unless asiakirjaIndexLoppu.nil?
      if !dokumenttilista.nil?
        _ha = Array.new
        dokumenttilista.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['dokumenttilista'] = _ha
      end
      return _h
    end

    #initializes this AsiakirjalistaDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['asiakirjojenKokonaisLkm'].nil?
          _oa = _o['asiakirjojenKokonaisLkm']
            if(_oa.is_a? Hash)
              @asiakirjojenKokonaisLkm = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakirjojenKokonaisLkm =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakirjojenKokonaisLkm = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakirjojenKokonaisLkm.push Fixnum.from_json(_item)
                 else
                   @asiakirjojenKokonaisLkm.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakirjojenKokonaisLkm = _oa
            end
          end
        if !_o['pageSize'].nil?
          _oa = _o['pageSize']
            if(_oa.is_a? Hash)
              @pageSize = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @pageSize =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @pageSize = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @pageSize.push Fixnum.from_json(_item)
                 else
                   @pageSize.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @pageSize = _oa
            end
          end
        if !_o['pageIndex'].nil?
          _oa = _o['pageIndex']
            if(_oa.is_a? Hash)
              @pageIndex = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @pageIndex =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @pageIndex = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @pageIndex.push Fixnum.from_json(_item)
                 else
                   @pageIndex.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @pageIndex = _oa
            end
          end
        if !_o['asiakirjalista'].nil?
          _oa = _o['asiakirjalista']
            if(_oa.is_a? Hash)
              @asiakirjalista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakirjalista =  Fi::Mediconsult::Medisos::Dto::AsiakasAsiakirjaDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakirjalista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakirjalista.push Fi::Mediconsult::Medisos::Dto::AsiakasAsiakirjaDto.from_json(_item)
                 else
                   @asiakirjalista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakirjalista = _oa
            end
          end
        if !_o['asiakirjaIndexAlku'].nil?
          _oa = _o['asiakirjaIndexAlku']
            if(_oa.is_a? Hash)
              @asiakirjaIndexAlku = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakirjaIndexAlku =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakirjaIndexAlku = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakirjaIndexAlku.push Fixnum.from_json(_item)
                 else
                   @asiakirjaIndexAlku.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakirjaIndexAlku = _oa
            end
          end
        if !_o['asiakirjaIndexLoppu'].nil?
          _oa = _o['asiakirjaIndexLoppu']
            if(_oa.is_a? Hash)
              @asiakirjaIndexLoppu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakirjaIndexLoppu =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakirjaIndexLoppu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakirjaIndexLoppu.push Fixnum.from_json(_item)
                 else
                   @asiakirjaIndexLoppu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakirjaIndexLoppu = _oa
            end
          end
        if !_o['dokumenttilista'].nil?
          _oa = _o['dokumenttilista']
            if(_oa.is_a? Hash)
              @dokumenttilista = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @dokumenttilista =  Fi::Mediconsult::Medisos::Dto::DocumentDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @dokumenttilista = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @dokumenttilista.push Fi::Mediconsult::Medisos::Dto::DocumentDto.from_json(_item)
                 else
                   @dokumenttilista.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @dokumenttilista = _oa
            end
          end
    end

    # constructs a AsiakirjalistaDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class PoistettuStatus

    # (no documentation provided)
    AKTIIVINEN = "AKTIIVINEN"

    # (no documentation provided)
    POISTETTU = "POISTETTU"

    # (no documentation provided)
    SIIRRETTY = "SIIRRETTY"
  end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

  # (no documentation provided)
  class Customer < Fi::Mediconsult::Mediplan::Dto::Person 

    # (no documentation provided)
    attr_accessor :name

    # the json hash for this Customer
    def to_jaxb_json_hash
      _h = super
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      return _h
    end

    #initializes this Customer with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
    end

    # constructs a Customer from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Title

module Data

  # (no documentation provided)
  class TitleBaseData < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # (no documentation provided)
    attr_accessor :annotation
    # (no documentation provided)
    attr_accessor :vakio
    # (no documentation provided)
    attr_accessor :emptyValue
    # (no documentation provided)
    attr_accessor :link
    # (no documentation provided)
    attr_accessor :vapaa
    # (no documentation provided)
    attr_accessor :row

    # the json hash for this TitleBaseData
    def to_jaxb_json_hash
      _h = super
      _h['annotation'] = annotation.to_jaxb_json_hash unless annotation.nil?
      _h['vakio'] = vakio.to_jaxb_json_hash unless vakio.nil?
      _h['emptyValue'] = emptyValue.to_jaxb_json_hash unless emptyValue.nil?
      _h['link'] = link.to_jaxb_json_hash unless link.nil?
      _h['vapaa'] = vapaa.to_jaxb_json_hash unless vapaa.nil?
      _h['row'] = row.to_jaxb_json_hash unless row.nil?
      return _h
    end

    #initializes this TitleBaseData with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['annotation'].nil?
          _oa = _o['annotation']
            if(_oa.is_a? Hash)
              @annotation = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @annotation =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @annotation = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @annotation.push String.from_json(_item)
                 else
                   @annotation.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @annotation = _oa
            end
          end
        if !_o['vakio'].nil?
          _oa = _o['vakio']
            if(_oa.is_a? Hash)
              @vakio = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vakio =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vakio = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vakio.push String.from_json(_item)
                 else
                   @vakio.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vakio = _oa
            end
          end
        if !_o['emptyValue'].nil?
          _oa = _o['emptyValue']
            if(_oa.is_a? Hash)
              @emptyValue = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @emptyValue =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @emptyValue = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @emptyValue.push Boolean.from_json(_item)
                 else
                   @emptyValue.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @emptyValue = _oa
            end
          end
        if !_o['link'].nil?
          _oa = _o['link']
            if(_oa.is_a? Hash)
              @link = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @link =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @link = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @link.push Fixnum.from_json(_item)
                 else
                   @link.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @link = _oa
            end
          end
        if !_o['vapaa'].nil?
          _oa = _o['vapaa']
            if(_oa.is_a? Hash)
              @vapaa = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vapaa =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vapaa = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vapaa.push String.from_json(_item)
                 else
                   @vapaa.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vapaa = _oa
            end
          end
        if !_o['row'].nil?
          _oa = _o['row']
            if(_oa.is_a? Hash)
              @row = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @row =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @row = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @row.push Fixnum.from_json(_item)
                 else
                   @row.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @row = _oa
            end
          end
    end

    # constructs a TitleBaseData from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Kertomus

  # (no documentation provided)
  class KertomusEntryEdit < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # (no documentation provided)
    attr_accessor :id
    # (no documentation provided)
    attr_accessor :mainTitle
    # (no documentation provided)
    attr_accessor :titles
    # (no documentation provided)
    attr_accessor :kirjaaja
    # (no documentation provided)
    attr_accessor :suorittaja
    # (no documentation provided)
    attr_accessor :status
    # (no documentation provided)
    attr_accessor :unitId
    # (no documentation provided)
    attr_accessor :lockTime
    # (no documentation provided)
    attr_accessor :kayttajaRyhmaId

    # the json hash for this KertomusEntryEdit
    def to_jaxb_json_hash
      _h = super
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['mainTitle'] = mainTitle.to_jaxb_json_hash unless mainTitle.nil?
      if !titles.nil?
        _ha = Array.new
        titles.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['titles'] = _ha
      end
      _h['kirjaaja'] = kirjaaja.to_jaxb_json_hash unless kirjaaja.nil?
      _h['suorittaja'] = suorittaja.to_jaxb_json_hash unless suorittaja.nil?
      _h['status'] = status.to_jaxb_json_hash unless status.nil?
      _h['unitId'] = unitId.to_jaxb_json_hash unless unitId.nil?
      _h['lockTime'] = lockTime.to_jaxb_json_hash unless lockTime.nil?
      _h['kayttajaRyhmaId'] = kayttajaRyhmaId.to_jaxb_json_hash unless kayttajaRyhmaId.nil?
      return _h
    end

    #initializes this KertomusEntryEdit with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  Fi::Mediconsult::Core::Client::Dto::Kertomus::KertomusID.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push Fi::Mediconsult::Core::Client::Dto::Kertomus::KertomusID.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
        if !_o['mainTitle'].nil?
          _oa = _o['mainTitle']
            if(_oa.is_a? Hash)
              @mainTitle = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @mainTitle =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @mainTitle = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @mainTitle.push String.from_json(_item)
                 else
                   @mainTitle.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @mainTitle = _oa
            end
          end
        if !_o['titles'].nil?
          _oa = _o['titles']
            if(_oa.is_a? Hash)
              @titles = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @titles =  Fi::Mediconsult::Core::Client::Dto::Title::TitleSettings.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @titles = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @titles.push Fi::Mediconsult::Core::Client::Dto::Title::TitleSettings.from_json(_item)
                 else
                   @titles.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @titles = _oa
            end
          end
        if !_o['kirjaaja'].nil?
          _oa = _o['kirjaaja']
            if(_oa.is_a? Hash)
              @kirjaaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kirjaaja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kirjaaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kirjaaja.push Fixnum.from_json(_item)
                 else
                   @kirjaaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kirjaaja = _oa
            end
          end
        if !_o['suorittaja'].nil?
          _oa = _o['suorittaja']
            if(_oa.is_a? Hash)
              @suorittaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @suorittaja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @suorittaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @suorittaja.push Fixnum.from_json(_item)
                 else
                   @suorittaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @suorittaja = _oa
            end
          end
        if !_o['status'].nil?
          _oa = _o['status']
            if(_oa.is_a? Hash)
              @status = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @status =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @status = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @status.push String.from_json(_item)
                 else
                   @status.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @status = _oa
            end
          end
        if !_o['unitId'].nil?
          _oa = _o['unitId']
            if(_oa.is_a? Hash)
              @unitId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @unitId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @unitId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @unitId.push Fixnum.from_json(_item)
                 else
                   @unitId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @unitId = _oa
            end
          end
        if !_o['lockTime'].nil?
          _oa = _o['lockTime']
            if(_oa.is_a? Hash)
              @lockTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lockTime =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lockTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lockTime.push Time.from_json(_item)
                 else
                   @lockTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lockTime = _oa
            end
          end
        if !_o['kayttajaRyhmaId'].nil?
          _oa = _o['kayttajaRyhmaId']
            if(_oa.is_a? Hash)
              @kayttajaRyhmaId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kayttajaRyhmaId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kayttajaRyhmaId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kayttajaRyhmaId.push Fixnum.from_json(_item)
                 else
                   @kayttajaRyhmaId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kayttajaRyhmaId = _oa
            end
          end
    end

    # constructs a KertomusEntryEdit from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Medisos

module Dto

  # (no documentation provided)
  class PaivitysDto < Fi::Mediconsult::Medisos::Dto::MediSosDtoBase 

    # (no documentation provided)
    attr_accessor :kohdeId
    # (no documentation provided)
    attr_accessor :suostumus
    # (no documentation provided)
    attr_accessor :muuttaja
    # (no documentation provided)
    attr_accessor :viesti
    # (no documentation provided)
    attr_accessor :formId

    # the json hash for this PaivitysDto
    def to_jaxb_json_hash
      _h = super
      _h['kohdeId'] = kohdeId.to_jaxb_json_hash unless kohdeId.nil?
      _h['suostumus'] = suostumus.to_jaxb_json_hash unless suostumus.nil?
      _h['muuttaja'] = muuttaja.to_jaxb_json_hash unless muuttaja.nil?
      _h['viesti'] = viesti.to_jaxb_json_hash unless viesti.nil?
      _h['formId'] = formId.to_jaxb_json_hash unless formId.nil?
      return _h
    end

    #initializes this PaivitysDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['kohdeId'].nil?
          _oa = _o['kohdeId']
            if(_oa.is_a? Hash)
              @kohdeId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kohdeId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kohdeId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kohdeId.push Bignum.from_json(_item)
                 else
                   @kohdeId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kohdeId = _oa
            end
          end
        if !_o['suostumus'].nil?
          _oa = _o['suostumus']
            if(_oa.is_a? Hash)
              @suostumus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @suostumus =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @suostumus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @suostumus.push Boolean.from_json(_item)
                 else
                   @suostumus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @suostumus = _oa
            end
          end
        if !_o['muuttaja'].nil?
          _oa = _o['muuttaja']
            if(_oa.is_a? Hash)
              @muuttaja = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @muuttaja =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @muuttaja = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @muuttaja.push Fixnum.from_json(_item)
                 else
                   @muuttaja.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @muuttaja = _oa
            end
          end
        if !_o['viesti'].nil?
          _oa = _o['viesti']
            if(_oa.is_a? Hash)
              @viesti = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @viesti =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @viesti = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @viesti.push String.from_json(_item)
                 else
                   @viesti.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @viesti = _oa
            end
          end
        if !_o['formId'].nil?
          _oa = _o['formId']
            if(_oa.is_a? Hash)
              @formId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @formId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @formId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @formId.push Fixnum.from_json(_item)
                 else
                   @formId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @formId = _oa
            end
          end
    end

    # constructs a PaivitysDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Laakitys

  # (no documentation provided)
  class LaakeTerapiaryhma < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # Returns the code of the therapy group
    attr_accessor :terapiaryhma
    # Returns the origin of the therapy group
    # -&#39;O&#39; if therapy group is linked in the current organization
    # -&#39;A&#39; or &#39;M&#39; otherwise
    attr_accessor :alkupera
    # Returns the name of the therapy group
    attr_accessor :nimi
    # Returns the level of the therapy group
    # -1 is the highest level, lower levels are &gt;1
    attr_accessor :taso
    # Returns the code of the therapy group removal. &#39;E&#39; - not removed, &#39;K&#39; = removed
    attr_accessor :poistettu

    # the json hash for this LaakeTerapiaryhma
    def to_jaxb_json_hash
      _h = super
      _h['terapiaryhma'] = terapiaryhma.to_jaxb_json_hash unless terapiaryhma.nil?
      _h['alkupera'] = alkupera.to_jaxb_json_hash unless alkupera.nil?
      _h['nimi'] = nimi.to_jaxb_json_hash unless nimi.nil?
      _h['taso'] = taso.to_jaxb_json_hash unless taso.nil?
      _h['poistettu'] = poistettu.to_jaxb_json_hash unless poistettu.nil?
      return _h
    end

    #initializes this LaakeTerapiaryhma with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['terapiaryhma'].nil?
          _oa = _o['terapiaryhma']
            if(_oa.is_a? Hash)
              @terapiaryhma = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @terapiaryhma =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @terapiaryhma = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @terapiaryhma.push String.from_json(_item)
                 else
                   @terapiaryhma.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @terapiaryhma = _oa
            end
          end
        if !_o['alkupera'].nil?
          _oa = _o['alkupera']
            if(_oa.is_a? Hash)
              @alkupera = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @alkupera =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @alkupera = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @alkupera.push Fixnum.from_json(_item)
                 else
                   @alkupera.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @alkupera = _oa
            end
          end
        if !_o['nimi'].nil?
          _oa = _o['nimi']
            if(_oa.is_a? Hash)
              @nimi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @nimi =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @nimi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @nimi.push String.from_json(_item)
                 else
                   @nimi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @nimi = _oa
            end
          end
        if !_o['taso'].nil?
          _oa = _o['taso']
            if(_oa.is_a? Hash)
              @taso = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @taso =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @taso = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @taso.push Fixnum.from_json(_item)
                 else
                   @taso.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @taso = _oa
            end
          end
        if !_o['poistettu'].nil?
          _oa = _o['poistettu']
            if(_oa.is_a? Hash)
              @poistettu = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @poistettu =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @poistettu = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @poistettu.push Fixnum.from_json(_item)
                 else
                   @poistettu.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @poistettu = _oa
            end
          end
    end

    # constructs a LaakeTerapiaryhma from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Event

  # (no documentation provided)
  class EventCustomerDto < Fi::Mediconsult::Mediplan::Dto::Event::EventParticipantDto 

    # the amount
    attr_accessor :amount
    # the coursePeriodId
    attr_accessor :coursePeriodId
    # the serviceDecisionStatus
    attr_accessor :serviceDecisionStatus
    # the serviceDecision
    attr_accessor :serviceDecision
    # the homeAddress
    attr_accessor :homeAddress
    # the birthDate
    attr_accessor :birthDate
    # the passivatedDate
    attr_accessor :passivatedDate
    # (no documentation provided)
    attr_accessor :age
    # the gender
    attr_accessor :gender
    # (no documentation provided)
    attr_accessor :viewTitle
    # (no documentation provided)
    attr_accessor :riskStatus

    # the json hash for this EventCustomerDto
    def to_jaxb_json_hash
      _h = super
      _h['amount'] = amount.to_jaxb_json_hash unless amount.nil?
      _h['coursePeriodId'] = coursePeriodId.to_jaxb_json_hash unless coursePeriodId.nil?
      _h['serviceDecisionStatus'] = serviceDecisionStatus.to_jaxb_json_hash unless serviceDecisionStatus.nil?
      _h['serviceDecision'] = serviceDecision.to_jaxb_json_hash unless serviceDecision.nil?
      _h['homeAddress'] = homeAddress.to_jaxb_json_hash unless homeAddress.nil?
      _h['birthDate'] = birthDate.to_jaxb_json_hash unless birthDate.nil?
      _h['passivatedDate'] = passivatedDate.to_jaxb_json_hash unless passivatedDate.nil?
      _h['age'] = age.to_jaxb_json_hash unless age.nil?
      _h['gender'] = gender.to_jaxb_json_hash unless gender.nil?
      _h['viewTitle'] = viewTitle.to_jaxb_json_hash unless viewTitle.nil?
      _h['riskStatus'] = riskStatus.to_jaxb_json_hash unless riskStatus.nil?
      return _h
    end

    #initializes this EventCustomerDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['amount'].nil?
          _oa = _o['amount']
            if(_oa.is_a? Hash)
              @amount = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @amount =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @amount = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @amount.push Fixnum.from_json(_item)
                 else
                   @amount.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @amount = _oa
            end
          end
        if !_o['coursePeriodId'].nil?
          _oa = _o['coursePeriodId']
            if(_oa.is_a? Hash)
              @coursePeriodId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @coursePeriodId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @coursePeriodId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @coursePeriodId.push Bignum.from_json(_item)
                 else
                   @coursePeriodId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @coursePeriodId = _oa
            end
          end
        if !_o['serviceDecisionStatus'].nil?
          _oa = _o['serviceDecisionStatus']
            if(_oa.is_a? Hash)
              @serviceDecisionStatus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @serviceDecisionStatus =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @serviceDecisionStatus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @serviceDecisionStatus.push String.from_json(_item)
                 else
                   @serviceDecisionStatus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @serviceDecisionStatus = _oa
            end
          end
        if !_o['serviceDecision'].nil?
          _oa = _o['serviceDecision']
            if(_oa.is_a? Hash)
              @serviceDecision = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @serviceDecision =  Fi::Mediconsult::Core::Client::Dto::Palvelupaatos::Palvelupaatos.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @serviceDecision = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @serviceDecision.push Fi::Mediconsult::Core::Client::Dto::Palvelupaatos::Palvelupaatos.from_json(_item)
                 else
                   @serviceDecision.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @serviceDecision = _oa
            end
          end
        if !_o['homeAddress'].nil?
          _oa = _o['homeAddress']
            if(_oa.is_a? Hash)
              @homeAddress = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @homeAddress =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @homeAddress = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @homeAddress.push String.from_json(_item)
                 else
                   @homeAddress.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @homeAddress = _oa
            end
          end
        if !_o['birthDate'].nil?
          _oa = _o['birthDate']
            if(_oa.is_a? Hash)
              @birthDate = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @birthDate =  java.time::LocalDate.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @birthDate = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @birthDate.push java.time::LocalDate.from_json(_item)
                 else
                   @birthDate.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @birthDate = _oa
            end
          end
        if !_o['passivatedDate'].nil?
          _oa = _o['passivatedDate']
            if(_oa.is_a? Hash)
              @passivatedDate = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @passivatedDate =  java.time::LocalDate.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @passivatedDate = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @passivatedDate.push java.time::LocalDate.from_json(_item)
                 else
                   @passivatedDate.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @passivatedDate = _oa
            end
          end
        if !_o['age'].nil?
          _oa = _o['age']
            if(_oa.is_a? Hash)
              @age = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @age =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @age = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @age.push Fixnum.from_json(_item)
                 else
                   @age.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @age = _oa
            end
          end
        if !_o['gender'].nil?
          _oa = _o['gender']
            if(_oa.is_a? Hash)
              @gender = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @gender =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @gender = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @gender.push String.from_json(_item)
                 else
                   @gender.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @gender = _oa
            end
          end
        if !_o['viewTitle'].nil?
          _oa = _o['viewTitle']
            if(_oa.is_a? Hash)
              @viewTitle = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @viewTitle =  Fi::Mediconsult::Core::Client::Dto::Title::TitleSettings.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @viewTitle = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @viewTitle.push Fi::Mediconsult::Core::Client::Dto::Title::TitleSettings.from_json(_item)
                 else
                   @viewTitle.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @viewTitle = _oa
            end
          end
        if !_o['riskStatus'].nil?
          _oa = _o['riskStatus']
            if(_oa.is_a? Hash)
              @riskStatus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @riskStatus =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @riskStatus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @riskStatus.push String.from_json(_item)
                 else
                   @riskStatus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @riskStatus = _oa
            end
          end
    end

    # constructs a EventCustomerDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Event

  # (no documentation provided)
  class EventServiceDecisionStatus

    # (no documentation provided)
    NOT_REQUIRED = "NOT_REQUIRED"

    # (no documentation provided)
    MISSING = "MISSING"

    # (no documentation provided)
    INTERRUPTED = "INTERRUPTED"

    # (no documentation provided)
    PENDING = "PENDING"

    # (no documentation provided)
    AVAILABLE = "AVAILABLE"
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Paatoksentuki

  # (no documentation provided)
  class SuggestedAction < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # (no documentation provided)
    attr_accessor :codeValue
    # (no documentation provided)
    attr_accessor :codeSystem
    # (no documentation provided)
    attr_accessor :codeSystemVersion
    # (no documentation provided)
    attr_accessor :startDate
    # (no documentation provided)
    attr_accessor :startTime
    # (no documentation provided)
    attr_accessor :endDate
    # (no documentation provided)
    attr_accessor :endTime
    # (no documentation provided)
    attr_accessor :pointDate
    # (no documentation provided)
    attr_accessor :pointTime
    # (no documentation provided)
    attr_accessor :actionType
    # (no documentation provided)
    attr_accessor :actionText
    # (no documentation provided)
    attr_accessor :start

    # the json hash for this SuggestedAction
    def to_jaxb_json_hash
      _h = super
      _h['codeValue'] = codeValue.to_jaxb_json_hash unless codeValue.nil?
      _h['codeSystem'] = codeSystem.to_jaxb_json_hash unless codeSystem.nil?
      _h['codeSystemVersion'] = codeSystemVersion.to_jaxb_json_hash unless codeSystemVersion.nil?
      _h['startDate'] = startDate.to_jaxb_json_hash unless startDate.nil?
      _h['startTime'] = startTime.to_jaxb_json_hash unless startTime.nil?
      _h['endDate'] = endDate.to_jaxb_json_hash unless endDate.nil?
      _h['endTime'] = endTime.to_jaxb_json_hash unless endTime.nil?
      _h['pointDate'] = pointDate.to_jaxb_json_hash unless pointDate.nil?
      _h['pointTime'] = pointTime.to_jaxb_json_hash unless pointTime.nil?
      _h['actionType'] = actionType.to_jaxb_json_hash unless actionType.nil?
      _h['actionText'] = actionText.to_jaxb_json_hash unless actionText.nil?
      _h['start'] = start.to_jaxb_json_hash unless start.nil?
      return _h
    end

    #initializes this SuggestedAction with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['codeValue'].nil?
          _oa = _o['codeValue']
            if(_oa.is_a? Hash)
              @codeValue = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @codeValue =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @codeValue = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @codeValue.push String.from_json(_item)
                 else
                   @codeValue.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @codeValue = _oa
            end
          end
        if !_o['codeSystem'].nil?
          _oa = _o['codeSystem']
            if(_oa.is_a? Hash)
              @codeSystem = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @codeSystem =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @codeSystem = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @codeSystem.push String.from_json(_item)
                 else
                   @codeSystem.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @codeSystem = _oa
            end
          end
        if !_o['codeSystemVersion'].nil?
          _oa = _o['codeSystemVersion']
            if(_oa.is_a? Hash)
              @codeSystemVersion = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @codeSystemVersion =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @codeSystemVersion = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @codeSystemVersion.push String.from_json(_item)
                 else
                   @codeSystemVersion.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @codeSystemVersion = _oa
            end
          end
        if !_o['startDate'].nil?
          _oa = _o['startDate']
            if(_oa.is_a? Hash)
              @startDate = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @startDate =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @startDate = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @startDate.push Time.from_json(_item)
                 else
                   @startDate.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @startDate = _oa
            end
          end
        if !_o['startTime'].nil?
          _oa = _o['startTime']
            if(_oa.is_a? Hash)
              @startTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @startTime =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @startTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @startTime.push Time.from_json(_item)
                 else
                   @startTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @startTime = _oa
            end
          end
        if !_o['endDate'].nil?
          _oa = _o['endDate']
            if(_oa.is_a? Hash)
              @endDate = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @endDate =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @endDate = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @endDate.push Time.from_json(_item)
                 else
                   @endDate.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @endDate = _oa
            end
          end
        if !_o['endTime'].nil?
          _oa = _o['endTime']
            if(_oa.is_a? Hash)
              @endTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @endTime =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @endTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @endTime.push Time.from_json(_item)
                 else
                   @endTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @endTime = _oa
            end
          end
        if !_o['pointDate'].nil?
          _oa = _o['pointDate']
            if(_oa.is_a? Hash)
              @pointDate = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @pointDate =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @pointDate = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @pointDate.push Time.from_json(_item)
                 else
                   @pointDate.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @pointDate = _oa
            end
          end
        if !_o['pointTime'].nil?
          _oa = _o['pointTime']
            if(_oa.is_a? Hash)
              @pointTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @pointTime =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @pointTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @pointTime.push Time.from_json(_item)
                 else
                   @pointTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @pointTime = _oa
            end
          end
        if !_o['actionType'].nil?
          _oa = _o['actionType']
            if(_oa.is_a? Hash)
              @actionType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @actionType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @actionType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @actionType.push Fixnum.from_json(_item)
                 else
                   @actionType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @actionType = _oa
            end
          end
        if !_o['actionText'].nil?
          _oa = _o['actionText']
            if(_oa.is_a? Hash)
              @actionText = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @actionText =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @actionText = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @actionText.push String.from_json(_item)
                 else
                   @actionText.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @actionText = _oa
            end
          end
        if !_o['start'].nil?
          _oa = _o['start']
            if(_oa.is_a? Hash)
              @start = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @start =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @start = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @start.push Time.from_json(_item)
                 else
                   @start.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @start = _oa
            end
          end
    end

    # constructs a SuggestedAction from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

  # (no documentation provided)
  class Employee < Fi::Mediconsult::Mediplan::Dto::Person 

    # (no documentation provided)
    attr_accessor :name

    # the json hash for this Employee
    def to_jaxb_json_hash
      _h = super
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      return _h
    end

    #initializes this Employee with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
    end

    # constructs a Employee from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Planner

  # (no documentation provided)
  class EventOptimizationStatusDto < Fi::Mediconsult::Mediplan::Dto::KuhaDtoBase 

    # (no documentation provided)
    attr_accessor :optimRunTaskId
    # (no documentation provided)
    attr_accessor :hardScore
    # (no documentation provided)
    attr_accessor :mediumScore
    # (no documentation provided)
    attr_accessor :softScore
    # (no documentation provided)
    attr_accessor :optimPhase
    # (no documentation provided)
    attr_accessor :optimPhaseExtraInfo
    # (no documentation provided)
    attr_accessor :missingAddresses
    # (no documentation provided)
    attr_accessor :invalidAddresses

    # the json hash for this EventOptimizationStatusDto
    def to_jaxb_json_hash
      _h = super
      _h['optimRunTaskId'] = optimRunTaskId.to_jaxb_json_hash unless optimRunTaskId.nil?
      _h['hardScore'] = hardScore.to_jaxb_json_hash unless hardScore.nil?
      _h['mediumScore'] = mediumScore.to_jaxb_json_hash unless mediumScore.nil?
      _h['softScore'] = softScore.to_jaxb_json_hash unless softScore.nil?
      _h['optimPhase'] = optimPhase.to_jaxb_json_hash unless optimPhase.nil?
      _h['optimPhaseExtraInfo'] = optimPhaseExtraInfo.to_jaxb_json_hash unless optimPhaseExtraInfo.nil?
      _h['missingAddresses'] = missingAddresses.to_jaxb_json_hash unless missingAddresses.nil?
      _h['invalidAddresses'] = invalidAddresses.to_jaxb_json_hash unless invalidAddresses.nil?
      return _h
    end

    #initializes this EventOptimizationStatusDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['optimRunTaskId'].nil?
          _oa = _o['optimRunTaskId']
            if(_oa.is_a? Hash)
              @optimRunTaskId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @optimRunTaskId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @optimRunTaskId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @optimRunTaskId.push Bignum.from_json(_item)
                 else
                   @optimRunTaskId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @optimRunTaskId = _oa
            end
          end
        if !_o['hardScore'].nil?
          _oa = _o['hardScore']
            if(_oa.is_a? Hash)
              @hardScore = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @hardScore =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @hardScore = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @hardScore.push Fixnum.from_json(_item)
                 else
                   @hardScore.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @hardScore = _oa
            end
          end
        if !_o['mediumScore'].nil?
          _oa = _o['mediumScore']
            if(_oa.is_a? Hash)
              @mediumScore = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @mediumScore =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @mediumScore = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @mediumScore.push Fixnum.from_json(_item)
                 else
                   @mediumScore.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @mediumScore = _oa
            end
          end
        if !_o['softScore'].nil?
          _oa = _o['softScore']
            if(_oa.is_a? Hash)
              @softScore = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @softScore =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @softScore = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @softScore.push Fixnum.from_json(_item)
                 else
                   @softScore.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @softScore = _oa
            end
          end
        if !_o['optimPhase'].nil?
          _oa = _o['optimPhase']
            if(_oa.is_a? Hash)
              @optimPhase = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @optimPhase =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @optimPhase = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @optimPhase.push Fixnum.from_json(_item)
                 else
                   @optimPhase.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @optimPhase = _oa
            end
          end
        if !_o['optimPhaseExtraInfo'].nil?
          _oa = _o['optimPhaseExtraInfo']
            if(_oa.is_a? Hash)
              @optimPhaseExtraInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @optimPhaseExtraInfo =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @optimPhaseExtraInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @optimPhaseExtraInfo.push String.from_json(_item)
                 else
                   @optimPhaseExtraInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @optimPhaseExtraInfo = _oa
            end
          end
        if !_o['missingAddresses'].nil?
          _oa = _o['missingAddresses']
            if(_oa.is_a? Hash)
              @missingAddresses = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @missingAddresses =  Fi::Mediconsult::Mediplan::Dto::Planner::MissingAddresses.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @missingAddresses = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @missingAddresses.push Fi::Mediconsult::Mediplan::Dto::Planner::MissingAddresses.from_json(_item)
                 else
                   @missingAddresses.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @missingAddresses = _oa
            end
          end
        if !_o['invalidAddresses'].nil?
          _oa = _o['invalidAddresses']
            if(_oa.is_a? Hash)
              @invalidAddresses = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @invalidAddresses =  Fi::Mediconsult::Mediplan::Dto::Planner::InvalidAddresses.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @invalidAddresses = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @invalidAddresses.push Fi::Mediconsult::Mediplan::Dto::Planner::InvalidAddresses.from_json(_item)
                 else
                   @invalidAddresses.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @invalidAddresses = _oa
            end
          end
    end

    # constructs a EventOptimizationStatusDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class PalvelutapahtumaSelectType

    # (no documentation provided)
    HEURISTIC_NO_MATCH = "HEURISTIC_NO_MATCH"

    # (no documentation provided)
    HEURISTIC_SINGLE_MATCH = "HEURISTIC_SINGLE_MATCH"

    # (no documentation provided)
    HEURISTIC_MULTIPLE_MATCHES = "HEURISTIC_MULTIPLE_MATCHES"

    # (no documentation provided)
    HEURISTIC_FROM_CARE_RELATION = "HEURISTIC_FROM_CARE_RELATION"

    # (no documentation provided)
    USER_SELECTED = "USER_SELECTED"
  end

end

end

end

end

end

module Fi

module Mediconsult

module Medisos

module Dto

  # (no documentation provided)
  class PalvelutehtavanAsiakkaatDto < Fi::Mediconsult::Medisos::Dto::MediSosDtoBase 

    # (no documentation provided)
    attr_accessor :palvelutehtavaCode
    # (no documentation provided)
    attr_accessor :asiakasnumeroList

    # the json hash for this PalvelutehtavanAsiakkaatDto
    def to_jaxb_json_hash
      _h = super
      _h['palvelutehtavaCode'] = palvelutehtavaCode.to_jaxb_json_hash unless palvelutehtavaCode.nil?
      if !asiakasnumeroList.nil?
        _ha = Array.new
        asiakasnumeroList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['asiakasnumeroList'] = _ha
      end
      return _h
    end

    #initializes this PalvelutehtavanAsiakkaatDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['palvelutehtavaCode'].nil?
          _oa = _o['palvelutehtavaCode']
            if(_oa.is_a? Hash)
              @palvelutehtavaCode = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @palvelutehtavaCode =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @palvelutehtavaCode = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @palvelutehtavaCode.push Fixnum.from_json(_item)
                 else
                   @palvelutehtavaCode.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @palvelutehtavaCode = _oa
            end
          end
        if !_o['asiakasnumeroList'].nil?
          _oa = _o['asiakasnumeroList']
            if(_oa.is_a? Hash)
              @asiakasnumeroList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asiakasnumeroList =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asiakasnumeroList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asiakasnumeroList.push Fixnum.from_json(_item)
                 else
                   @asiakasnumeroList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asiakasnumeroList = _oa
            end
          end
    end

    # constructs a PalvelutehtavanAsiakkaatDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Course

  # (no documentation provided)
  class CourseNamedGroupDto < Fi::Mediconsult::Mediplan::Dto::KuhaDtoNameBase 

    # (no documentation provided)
    attr_accessor :removed
    # (no documentation provided)
    attr_accessor :members
    # (no documentation provided)
    attr_accessor :newNameGroupId

    # the json hash for this CourseNamedGroupDto
    def to_jaxb_json_hash
      _h = super
      _h['removed'] = removed.to_jaxb_json_hash unless removed.nil?
      if !members.nil?
        _ha = Array.new
        members.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['members'] = _ha
      end
      _h['newNameGroupId'] = newNameGroupId.to_jaxb_json_hash unless newNameGroupId.nil?
      return _h
    end

    #initializes this CourseNamedGroupDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['removed'].nil?
          _oa = _o['removed']
            if(_oa.is_a? Hash)
              @removed = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @removed =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @removed = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @removed.push Boolean.from_json(_item)
                 else
                   @removed.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @removed = _oa
            end
          end
        if !_o['members'].nil?
          _oa = _o['members']
            if(_oa.is_a? Hash)
              @members = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @members =  Fi::Mediconsult::Mediplan::Dto::Course::NamedGroupMemberDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @members = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @members.push Fi::Mediconsult::Mediplan::Dto::Course::NamedGroupMemberDto.from_json(_item)
                 else
                   @members.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @members = _oa
            end
          end
        if !_o['newNameGroupId'].nil?
          _oa = _o['newNameGroupId']
            if(_oa.is_a? Hash)
              @newNameGroupId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @newNameGroupId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @newNameGroupId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @newNameGroupId.push Bignum.from_json(_item)
                 else
                   @newNameGroupId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @newNameGroupId = _oa
            end
          end
    end

    # constructs a CourseNamedGroupDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Eventmodel

  # (no documentation provided)
  class EventModelDto < Fi::Mediconsult::Mediplan::Dto::KuhaDtoNameBase 

    # List of content groups of the EventModel
    attr_accessor :defaultTitleValues
    # (no documentation provided)
    attr_accessor :name
    # abbreviation
    attr_accessor :abbr
    # (no documentation provided)
    attr_accessor :basicData
    # the reportingGroupId
    attr_accessor :reportingGroupId
    # the calendarModelFormId
    attr_accessor :calendarModelFormId
    # (no documentation provided)
    attr_accessor :defaultUnit
    # (no documentation provided)
    attr_accessor :internalNote
    # the defaultDurationInMins
    attr_accessor :defaultDurationInMins
    # the requiredSkills
    attr_accessor :requiredSkills
    # the requiredRoomGroups
    attr_accessor :requiredRoomGroups
    # the requiredEquipmentTypes
    attr_accessor :requiredEquipmentTypes
    # (no documentation provided)
    attr_accessor :contentGroups
    # (no documentation provided)
    attr_accessor :customerEvent
    # (no documentation provided)
    attr_accessor :participantAmount
    # (no documentation provided)
    attr_accessor :waitingRoom
    # (no documentation provided)
    attr_accessor :serviceClass
    # (no documentation provided)
    attr_accessor :serviceClassChangeable
    # the outdated
    attr_accessor :outdated
    # the hasEvents
    attr_accessor :hasEvents
    # (no documentation provided)
    attr_accessor :planningSettingsChangeable

    # the json hash for this EventModelDto
    def to_jaxb_json_hash
      _h = super
      if !defaultTitleValues.nil?
        _ha = Array.new
        defaultTitleValues.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['defaultTitleValues'] = _ha
      end
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['abbr'] = abbr.to_jaxb_json_hash unless abbr.nil?
      _h['basicData'] = basicData.to_jaxb_json_hash unless basicData.nil?
      _h['reportingGroupId'] = reportingGroupId.to_jaxb_json_hash unless reportingGroupId.nil?
      _h['calendarModelFormId'] = calendarModelFormId.to_jaxb_json_hash unless calendarModelFormId.nil?
      _h['defaultUnit'] = defaultUnit.to_jaxb_json_hash unless defaultUnit.nil?
      _h['internalNote'] = internalNote.to_jaxb_json_hash unless internalNote.nil?
      _h['defaultDurationInMins'] = defaultDurationInMins.to_jaxb_json_hash unless defaultDurationInMins.nil?
      if !requiredSkills.nil?
        _ha = Array.new
        requiredSkills.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['requiredSkills'] = _ha
      end
      if !requiredRoomGroups.nil?
        _ha = Array.new
        requiredRoomGroups.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['requiredRoomGroups'] = _ha
      end
      if !requiredEquipmentTypes.nil?
        _ha = Array.new
        requiredEquipmentTypes.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['requiredEquipmentTypes'] = _ha
      end
      if !contentGroups.nil?
        _ha = Array.new
        contentGroups.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['contentGroups'] = _ha
      end
      _h['customerEvent'] = customerEvent.to_jaxb_json_hash unless customerEvent.nil?
      _h['participantAmount'] = participantAmount.to_jaxb_json_hash unless participantAmount.nil?
      _h['waitingRoom'] = waitingRoom.to_jaxb_json_hash unless waitingRoom.nil?
      _h['serviceClass'] = serviceClass.to_jaxb_json_hash unless serviceClass.nil?
      _h['serviceClassChangeable'] = serviceClassChangeable.to_jaxb_json_hash unless serviceClassChangeable.nil?
      _h['outdated'] = outdated.to_jaxb_json_hash unless outdated.nil?
      _h['hasEvents'] = hasEvents.to_jaxb_json_hash unless hasEvents.nil?
      _h['planningSettingsChangeable'] = planningSettingsChangeable.to_jaxb_json_hash unless planningSettingsChangeable.nil?
      return _h
    end

    #initializes this EventModelDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['defaultTitleValues'].nil?
          _oa = _o['defaultTitleValues']
            if(_oa.is_a? Hash)
              @defaultTitleValues = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @defaultTitleValues =  Fi::Mediconsult::Mediplan::Dto::Contentgroup::CalendarEventContentGroupDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @defaultTitleValues = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @defaultTitleValues.push Fi::Mediconsult::Mediplan::Dto::Contentgroup::CalendarEventContentGroupDto.from_json(_item)
                 else
                   @defaultTitleValues.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @defaultTitleValues = _oa
            end
          end
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['abbr'].nil?
          _oa = _o['abbr']
            if(_oa.is_a? Hash)
              @abbr = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @abbr =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @abbr = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @abbr.push String.from_json(_item)
                 else
                   @abbr.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @abbr = _oa
            end
          end
        if !_o['basicData'].nil?
          _oa = _o['basicData']
            if(_oa.is_a? Hash)
              @basicData = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @basicData =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @basicData = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @basicData.push Hash.from_json(_item)
                 else
                   @basicData.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @basicData = _oa
            end
          end
        if !_o['reportingGroupId'].nil?
          _oa = _o['reportingGroupId']
            if(_oa.is_a? Hash)
              @reportingGroupId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @reportingGroupId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @reportingGroupId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @reportingGroupId.push Bignum.from_json(_item)
                 else
                   @reportingGroupId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @reportingGroupId = _oa
            end
          end
        if !_o['calendarModelFormId'].nil?
          _oa = _o['calendarModelFormId']
            if(_oa.is_a? Hash)
              @calendarModelFormId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @calendarModelFormId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @calendarModelFormId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @calendarModelFormId.push Fixnum.from_json(_item)
                 else
                   @calendarModelFormId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @calendarModelFormId = _oa
            end
          end
        if !_o['defaultUnit'].nil?
          _oa = _o['defaultUnit']
            if(_oa.is_a? Hash)
              @defaultUnit = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @defaultUnit =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @defaultUnit = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @defaultUnit.push Fixnum.from_json(_item)
                 else
                   @defaultUnit.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @defaultUnit = _oa
            end
          end
        if !_o['internalNote'].nil?
          _oa = _o['internalNote']
            if(_oa.is_a? Hash)
              @internalNote = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @internalNote =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @internalNote = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @internalNote.push String.from_json(_item)
                 else
                   @internalNote.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @internalNote = _oa
            end
          end
        if !_o['defaultDurationInMins'].nil?
          _oa = _o['defaultDurationInMins']
            if(_oa.is_a? Hash)
              @defaultDurationInMins = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @defaultDurationInMins =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @defaultDurationInMins = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @defaultDurationInMins.push Fixnum.from_json(_item)
                 else
                   @defaultDurationInMins.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @defaultDurationInMins = _oa
            end
          end
        if !_o['requiredSkills'].nil?
          _oa = _o['requiredSkills']
            if(_oa.is_a? Hash)
              @requiredSkills = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @requiredSkills =  Fi::Mediconsult::Mediplan::Dto::Eventmodel::EventModelSkillDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @requiredSkills = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @requiredSkills.push Fi::Mediconsult::Mediplan::Dto::Eventmodel::EventModelSkillDto.from_json(_item)
                 else
                   @requiredSkills.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @requiredSkills = _oa
            end
          end
        if !_o['requiredRoomGroups'].nil?
          _oa = _o['requiredRoomGroups']
            if(_oa.is_a? Hash)
              @requiredRoomGroups = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @requiredRoomGroups =  Fi::Mediconsult::Mediplan::Dto::Setup::RoomGroupDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @requiredRoomGroups = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @requiredRoomGroups.push Fi::Mediconsult::Mediplan::Dto::Setup::RoomGroupDto.from_json(_item)
                 else
                   @requiredRoomGroups.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @requiredRoomGroups = _oa
            end
          end
        if !_o['requiredEquipmentTypes'].nil?
          _oa = _o['requiredEquipmentTypes']
            if(_oa.is_a? Hash)
              @requiredEquipmentTypes = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @requiredEquipmentTypes =  Fi::Mediconsult::Mediplan::Dto::Eventmodel::RequiredEquipmentTypeDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @requiredEquipmentTypes = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @requiredEquipmentTypes.push Fi::Mediconsult::Mediplan::Dto::Eventmodel::RequiredEquipmentTypeDto.from_json(_item)
                 else
                   @requiredEquipmentTypes.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @requiredEquipmentTypes = _oa
            end
          end
        if !_o['contentGroups'].nil?
          _oa = _o['contentGroups']
            if(_oa.is_a? Hash)
              @contentGroups = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @contentGroups =  Fi::Mediconsult::Mediplan::Dto::Contentgroup::EventModelContentGroupDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @contentGroups = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @contentGroups.push Fi::Mediconsult::Mediplan::Dto::Contentgroup::EventModelContentGroupDto.from_json(_item)
                 else
                   @contentGroups.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @contentGroups = _oa
            end
          end
        if !_o['customerEvent'].nil?
          _oa = _o['customerEvent']
            if(_oa.is_a? Hash)
              @customerEvent = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @customerEvent =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @customerEvent = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @customerEvent.push Boolean.from_json(_item)
                 else
                   @customerEvent.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @customerEvent = _oa
            end
          end
        if !_o['participantAmount'].nil?
          _oa = _o['participantAmount']
            if(_oa.is_a? Hash)
              @participantAmount = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @participantAmount =  Fi::Mediconsult::Mediplan::Dto::Eventmodel::ParticipantAmountDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @participantAmount = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @participantAmount.push Fi::Mediconsult::Mediplan::Dto::Eventmodel::ParticipantAmountDto.from_json(_item)
                 else
                   @participantAmount.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @participantAmount = _oa
            end
          end
        if !_o['waitingRoom'].nil?
          _oa = _o['waitingRoom']
            if(_oa.is_a? Hash)
              @waitingRoom = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @waitingRoom =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @waitingRoom = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @waitingRoom.push String.from_json(_item)
                 else
                   @waitingRoom.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @waitingRoom = _oa
            end
          end
        if !_o['serviceClass'].nil?
          _oa = _o['serviceClass']
            if(_oa.is_a? Hash)
              @serviceClass = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @serviceClass =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @serviceClass = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @serviceClass.push String.from_json(_item)
                 else
                   @serviceClass.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @serviceClass = _oa
            end
          end
        if !_o['serviceClassChangeable'].nil?
          _oa = _o['serviceClassChangeable']
            if(_oa.is_a? Hash)
              @serviceClassChangeable = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @serviceClassChangeable =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @serviceClassChangeable = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @serviceClassChangeable.push Boolean.from_json(_item)
                 else
                   @serviceClassChangeable.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @serviceClassChangeable = _oa
            end
          end
        if !_o['outdated'].nil?
          _oa = _o['outdated']
            if(_oa.is_a? Hash)
              @outdated = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @outdated =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @outdated = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @outdated.push Boolean.from_json(_item)
                 else
                   @outdated.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @outdated = _oa
            end
          end
        if !_o['hasEvents'].nil?
          _oa = _o['hasEvents']
            if(_oa.is_a? Hash)
              @hasEvents = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @hasEvents =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @hasEvents = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @hasEvents.push Boolean.from_json(_item)
                 else
                   @hasEvents.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @hasEvents = _oa
            end
          end
        if !_o['planningSettingsChangeable'].nil?
          _oa = _o['planningSettingsChangeable']
            if(_oa.is_a? Hash)
              @planningSettingsChangeable = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @planningSettingsChangeable =  Fi::Mediconsult::Mediplan::Dto::Eventmodel::PlanningSettingsChangeable.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @planningSettingsChangeable = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @planningSettingsChangeable.push Fi::Mediconsult::Mediplan::Dto::Eventmodel::PlanningSettingsChangeable.from_json(_item)
                 else
                   @planningSettingsChangeable.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @planningSettingsChangeable = _oa
            end
          end
    end

    # constructs a EventModelDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Setup

  # (no documentation provided)
  class RoomGroupDto < Fi::Mediconsult::Mediplan::Dto::KuhaDtoNameBase 

    # (no documentation provided)
    attr_accessor :roomDtos

    # the json hash for this RoomGroupDto
    def to_jaxb_json_hash
      _h = super
      if !roomDtos.nil?
        _ha = Array.new
        roomDtos.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['roomDtos'] = _ha
      end
      return _h
    end

    #initializes this RoomGroupDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['roomDtos'].nil?
          _oa = _o['roomDtos']
            if(_oa.is_a? Hash)
              @roomDtos = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @roomDtos =  Fi::Mediconsult::Mediplan::Dto::Setup::RoomDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @roomDtos = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @roomDtos.push Fi::Mediconsult::Mediplan::Dto::Setup::RoomDto.from_json(_item)
                 else
                   @roomDtos.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @roomDtos = _oa
            end
          end
    end

    # constructs a RoomGroupDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Setup

  # (no documentation provided)
  class CourseResourceDtoBase < Fi::Mediconsult::Mediplan::Dto::KuhaDtoNameBase 

    # (no documentation provided)
    attr_accessor :courseFormId

    # the json hash for this CourseResourceDtoBase
    def to_jaxb_json_hash
      _h = super
      _h['courseFormId'] = courseFormId.to_jaxb_json_hash unless courseFormId.nil?
      return _h
    end

    #initializes this CourseResourceDtoBase with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['courseFormId'].nil?
          _oa = _o['courseFormId']
            if(_oa.is_a? Hash)
              @courseFormId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @courseFormId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @courseFormId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @courseFormId.push Fixnum.from_json(_item)
                 else
                   @courseFormId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @courseFormId = _oa
            end
          end
    end

    # constructs a CourseResourceDtoBase from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Course

  # (no documentation provided)
  class CourseDto < Fi::Mediconsult::Mediplan::Dto::KuhaDtoNameBase 

    # (no documentation provided)
    attr_accessor :id
    # (no documentation provided)
    attr_accessor :kelaID
    # (no documentation provided)
    attr_accessor :dayPrice
    # status
    attr_accessor :status
    # Start time
    attr_accessor :startTime
    # 
    attr_accessor :startDate
    # End time
    attr_accessor :endTime
    # 
    attr_accessor :endDate
    # List of course periods
    attr_accessor :periods
    # (no documentation provided)
    attr_accessor :periodIds
    # (no documentation provided)
    attr_accessor :tags
    # (no documentation provided)
    attr_accessor :namedGroups
    # (no documentation provided)
    attr_accessor :customers
    # (no documentation provided)
    attr_accessor :calendarContext

    # the json hash for this CourseDto
    def to_jaxb_json_hash
      _h = super
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['kelaID'] = kelaID.to_jaxb_json_hash unless kelaID.nil?
      _h['dayPrice'] = dayPrice.to_jaxb_json_hash unless dayPrice.nil?
      _h['status'] = status.to_jaxb_json_hash unless status.nil?
      _h['startTime'] = startTime.to_jaxb_json_hash unless startTime.nil?
      _h['startDate'] = startDate.to_jaxb_json_hash unless startDate.nil?
      _h['endTime'] = endTime.to_jaxb_json_hash unless endTime.nil?
      _h['endDate'] = endDate.to_jaxb_json_hash unless endDate.nil?
      if !periods.nil?
        _ha = Array.new
        periods.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['periods'] = _ha
      end
      if !periodIds.nil?
        _ha = Array.new
        periodIds.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['periodIds'] = _ha
      end
      if !tags.nil?
        _ha = Array.new
        tags.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['tags'] = _ha
      end
      if !namedGroups.nil?
        _ha = Array.new
        namedGroups.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['namedGroups'] = _ha
      end
      if !customers.nil?
        _ha = Array.new
        customers.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['customers'] = _ha
      end
      _h['calendarContext'] = calendarContext.to_jaxb_json_hash unless calendarContext.nil?
      return _h
    end

    #initializes this CourseDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push Bignum.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
        if !_o['kelaID'].nil?
          _oa = _o['kelaID']
            if(_oa.is_a? Hash)
              @kelaID = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @kelaID =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @kelaID = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @kelaID.push String.from_json(_item)
                 else
                   @kelaID.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @kelaID = _oa
            end
          end
        if !_o['dayPrice'].nil?
          _oa = _o['dayPrice']
            if(_oa.is_a? Hash)
              @dayPrice = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @dayPrice =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @dayPrice = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @dayPrice.push Float.from_json(_item)
                 else
                   @dayPrice.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @dayPrice = _oa
            end
          end
        if !_o['status'].nil?
          _oa = _o['status']
            if(_oa.is_a? Hash)
              @status = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @status =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @status = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @status.push String.from_json(_item)
                 else
                   @status.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @status = _oa
            end
          end
        if !_o['startTime'].nil?
          _oa = _o['startTime']
            if(_oa.is_a? Hash)
              @startTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @startTime =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @startTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @startTime.push Bignum.from_json(_item)
                 else
                   @startTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @startTime = _oa
            end
          end
        if !_o['startDate'].nil?
          _oa = _o['startDate']
            if(_oa.is_a? Hash)
              @startDate = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @startDate =  java.time::LocalDate.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @startDate = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @startDate.push java.time::LocalDate.from_json(_item)
                 else
                   @startDate.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @startDate = _oa
            end
          end
        if !_o['endTime'].nil?
          _oa = _o['endTime']
            if(_oa.is_a? Hash)
              @endTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @endTime =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @endTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @endTime.push Bignum.from_json(_item)
                 else
                   @endTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @endTime = _oa
            end
          end
        if !_o['endDate'].nil?
          _oa = _o['endDate']
            if(_oa.is_a? Hash)
              @endDate = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @endDate =  java.time::LocalDate.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @endDate = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @endDate.push java.time::LocalDate.from_json(_item)
                 else
                   @endDate.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @endDate = _oa
            end
          end
        if !_o['periods'].nil?
          _oa = _o['periods']
            if(_oa.is_a? Hash)
              @periods = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @periods =  Fi::Mediconsult::Mediplan::Dto::Course::CoursePeriodDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @periods = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @periods.push Fi::Mediconsult::Mediplan::Dto::Course::CoursePeriodDto.from_json(_item)
                 else
                   @periods.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @periods = _oa
            end
          end
        if !_o['periodIds'].nil?
          _oa = _o['periodIds']
            if(_oa.is_a? Hash)
              @periodIds = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @periodIds =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @periodIds = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @periodIds.push Bignum.from_json(_item)
                 else
                   @periodIds.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @periodIds = _oa
            end
          end
        if !_o['tags'].nil?
          _oa = _o['tags']
            if(_oa.is_a? Hash)
              @tags = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tags =  Fi::Mediconsult::Mediplan::Dto::Course::TagsForCourseDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tags = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tags.push Fi::Mediconsult::Mediplan::Dto::Course::TagsForCourseDto.from_json(_item)
                 else
                   @tags.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tags = _oa
            end
          end
        if !_o['namedGroups'].nil?
          _oa = _o['namedGroups']
            if(_oa.is_a? Hash)
              @namedGroups = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @namedGroups =  Fi::Mediconsult::Mediplan::Dto::Course::CourseNamedGroupDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @namedGroups = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @namedGroups.push Fi::Mediconsult::Mediplan::Dto::Course::CourseNamedGroupDto.from_json(_item)
                 else
                   @namedGroups.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @namedGroups = _oa
            end
          end
        if !_o['customers'].nil?
          _oa = _o['customers']
            if(_oa.is_a? Hash)
              @customers = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @customers =  Fi::Mediconsult::Mediplan::Dto::Course::CourseCustomerDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @customers = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @customers.push Fi::Mediconsult::Mediplan::Dto::Course::CourseCustomerDto.from_json(_item)
                 else
                   @customers.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @customers = _oa
            end
          end
        if !_o['calendarContext'].nil?
          _oa = _o['calendarContext']
            if(_oa.is_a? Hash)
              @calendarContext = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @calendarContext =  Fi::Mediconsult::Mediplan::Dto::CalendarContextDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @calendarContext = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @calendarContext.push Fi::Mediconsult::Mediplan::Dto::CalendarContextDto.from_json(_item)
                 else
                   @calendarContext.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @calendarContext = _oa
            end
          end
    end

    # constructs a CourseDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Eventmodel

  # (no documentation provided)
  class RequiredEquipmentTypeDto < Fi::Mediconsult::Mediplan::Dto::KuhaDtoNameBase 

    # (no documentation provided)
    attr_accessor :amount
    # (no documentation provided)
    attr_accessor :requirement

    # the json hash for this RequiredEquipmentTypeDto
    def to_jaxb_json_hash
      _h = super
      _h['amount'] = amount.to_jaxb_json_hash unless amount.nil?
      _h['requirement'] = requirement.to_jaxb_json_hash unless requirement.nil?
      return _h
    end

    #initializes this RequiredEquipmentTypeDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['amount'].nil?
          _oa = _o['amount']
            if(_oa.is_a? Hash)
              @amount = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @amount =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @amount = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @amount.push Fixnum.from_json(_item)
                 else
                   @amount.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @amount = _oa
            end
          end
        if !_o['requirement'].nil?
          _oa = _o['requirement']
            if(_oa.is_a? Hash)
              @requirement = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @requirement =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @requirement = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @requirement.push String.from_json(_item)
                 else
                   @requirement.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @requirement = _oa
            end
          end
    end

    # constructs a RequiredEquipmentTypeDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Planner

  # (no documentation provided)
  class EventOptimizationTaskDetailsDto < Fi::Mediconsult::Mediplan::Dto::Planner::EventOptimizationTaskBaseDto 

    # (no documentation provided)
    attr_accessor :optimizationCategory
    # (no documentation provided)
    attr_accessor :routingVsClustering
    # (no documentation provided)
    attr_accessor :eventsToOptimize
    # (no documentation provided)
    attr_accessor :eventLockId
    # (no documentation provided)
    attr_accessor :otherNonFixedEvents
    # (no documentation provided)
    attr_accessor :empUnitRuleWeight
    # (no documentation provided)
    attr_accessor :workingHourRuleWeight
    # (no documentation provided)
    attr_accessor :useCareGroups

    # the json hash for this EventOptimizationTaskDetailsDto
    def to_jaxb_json_hash
      _h = super
      _h['optimizationCategory'] = optimizationCategory.to_jaxb_json_hash unless optimizationCategory.nil?
      _h['routingVsClustering'] = routingVsClustering.to_jaxb_json_hash unless routingVsClustering.nil?
      if !eventsToOptimize.nil?
        _ha = Array.new
        eventsToOptimize.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['eventsToOptimize'] = _ha
      end
      _h['eventLockId'] = eventLockId.to_jaxb_json_hash unless eventLockId.nil?
      if !otherNonFixedEvents.nil?
        _ha = Array.new
        otherNonFixedEvents.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['otherNonFixedEvents'] = _ha
      end
      _h['empUnitRuleWeight'] = empUnitRuleWeight.to_jaxb_json_hash unless empUnitRuleWeight.nil?
      _h['workingHourRuleWeight'] = workingHourRuleWeight.to_jaxb_json_hash unless workingHourRuleWeight.nil?
      _h['useCareGroups'] = useCareGroups.to_jaxb_json_hash unless useCareGroups.nil?
      return _h
    end

    #initializes this EventOptimizationTaskDetailsDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['optimizationCategory'].nil?
          _oa = _o['optimizationCategory']
            if(_oa.is_a? Hash)
              @optimizationCategory = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @optimizationCategory =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @optimizationCategory = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @optimizationCategory.push String.from_json(_item)
                 else
                   @optimizationCategory.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @optimizationCategory = _oa
            end
          end
        if !_o['routingVsClustering'].nil?
          _oa = _o['routingVsClustering']
            if(_oa.is_a? Hash)
              @routingVsClustering = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @routingVsClustering =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @routingVsClustering = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @routingVsClustering.push String.from_json(_item)
                 else
                   @routingVsClustering.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @routingVsClustering = _oa
            end
          end
        if !_o['eventsToOptimize'].nil?
          _oa = _o['eventsToOptimize']
            if(_oa.is_a? Hash)
              @eventsToOptimize = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @eventsToOptimize =  Fi::Mediconsult::Mediplan::Dto::Planner::EventInfo.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @eventsToOptimize = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @eventsToOptimize.push Fi::Mediconsult::Mediplan::Dto::Planner::EventInfo.from_json(_item)
                 else
                   @eventsToOptimize.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @eventsToOptimize = _oa
            end
          end
        if !_o['eventLockId'].nil?
          _oa = _o['eventLockId']
            if(_oa.is_a? Hash)
              @eventLockId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @eventLockId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @eventLockId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @eventLockId.push Bignum.from_json(_item)
                 else
                   @eventLockId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @eventLockId = _oa
            end
          end
        if !_o['otherNonFixedEvents'].nil?
          _oa = _o['otherNonFixedEvents']
            if(_oa.is_a? Hash)
              @otherNonFixedEvents = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @otherNonFixedEvents =  Fi::Mediconsult::Mediplan::Dto::Planner::EventCategoryParameters.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @otherNonFixedEvents = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @otherNonFixedEvents.push Fi::Mediconsult::Mediplan::Dto::Planner::EventCategoryParameters.from_json(_item)
                 else
                   @otherNonFixedEvents.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @otherNonFixedEvents = _oa
            end
          end
        if !_o['empUnitRuleWeight'].nil?
          _oa = _o['empUnitRuleWeight']
            if(_oa.is_a? Hash)
              @empUnitRuleWeight = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @empUnitRuleWeight =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @empUnitRuleWeight = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @empUnitRuleWeight.push Fixnum.from_json(_item)
                 else
                   @empUnitRuleWeight.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @empUnitRuleWeight = _oa
            end
          end
        if !_o['workingHourRuleWeight'].nil?
          _oa = _o['workingHourRuleWeight']
            if(_oa.is_a? Hash)
              @workingHourRuleWeight = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @workingHourRuleWeight =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @workingHourRuleWeight = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @workingHourRuleWeight.push Fixnum.from_json(_item)
                 else
                   @workingHourRuleWeight.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @workingHourRuleWeight = _oa
            end
          end
        if !_o['useCareGroups'].nil?
          _oa = _o['useCareGroups']
            if(_oa.is_a? Hash)
              @useCareGroups = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @useCareGroups =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @useCareGroups = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @useCareGroups.push Boolean.from_json(_item)
                 else
                   @useCareGroups.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @useCareGroups = _oa
            end
          end
    end

    # constructs a EventOptimizationTaskDetailsDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Title

module Data

  # (no documentation provided)
  class SimpleValueData<T extends Object> < Fi::Mediconsult::Core::Client::Dto::Title::Data::TitleBaseData 

    # (no documentation provided)
    attr_accessor :value
    # (no documentation provided)
    attr_accessor :presentation

    # the json hash for this SimpleValueData<T extends Object>
    def to_jaxb_json_hash
      _h = super
      _h['value'] = value.to_jaxb_json_hash unless value.nil?
      _h['presentation'] = presentation.to_jaxb_json_hash unless presentation.nil?
      return _h
    end

    #initializes this SimpleValueData<T extends Object> with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['value'].nil?
          _oa = _o['value']
            if(_oa.is_a? Hash)
              @value = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @value =  Object.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @value = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @value.push Object.from_json(_item)
                 else
                   @value.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @value = _oa
            end
          end
        if !_o['presentation'].nil?
          _oa = _o['presentation']
            if(_oa.is_a? Hash)
              @presentation = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @presentation =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @presentation = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @presentation.push String.from_json(_item)
                 else
                   @presentation.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @presentation = _oa
            end
          end
    end

    # constructs a SimpleValueData<T extends Object> from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Contentgroup

  # (no documentation provided)
  class CalendarEventTitleDto < Fi::Mediconsult::Mediplan::Dto::Contentgroup::ContentGroupTitle 

    # the eventModelContentGroupItemId
    attr_accessor :eventModelContentGroupItemId

    # the json hash for this CalendarEventTitleDto
    def to_jaxb_json_hash
      _h = super
      _h['eventModelContentGroupItemId'] = eventModelContentGroupItemId.to_jaxb_json_hash unless eventModelContentGroupItemId.nil?
      return _h
    end

    #initializes this CalendarEventTitleDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['eventModelContentGroupItemId'].nil?
          _oa = _o['eventModelContentGroupItemId']
            if(_oa.is_a? Hash)
              @eventModelContentGroupItemId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @eventModelContentGroupItemId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @eventModelContentGroupItemId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @eventModelContentGroupItemId.push Bignum.from_json(_item)
                 else
                   @eventModelContentGroupItemId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @eventModelContentGroupItemId = _oa
            end
          end
    end

    # constructs a CalendarEventTitleDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Planner

  # (no documentation provided)
  class EventOptimizationConflictDto < Fi::Mediconsult::Mediplan::Dto::KuhaDtoNameBase 

    # (no documentation provided)
    attr_accessor :eventId
    # (no documentation provided)
    attr_accessor :conflictingHardRules
    # (no documentation provided)
    attr_accessor :conflictingSoftRules

    # the json hash for this EventOptimizationConflictDto
    def to_jaxb_json_hash
      _h = super
      _h['eventId'] = eventId.to_jaxb_json_hash unless eventId.nil?
      if !conflictingHardRules.nil?
        _ha = Array.new
        conflictingHardRules.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['conflictingHardRules'] = _ha
      end
      if !conflictingSoftRules.nil?
        _ha = Array.new
        conflictingSoftRules.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['conflictingSoftRules'] = _ha
      end
      return _h
    end

    #initializes this EventOptimizationConflictDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['eventId'].nil?
          _oa = _o['eventId']
            if(_oa.is_a? Hash)
              @eventId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @eventId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @eventId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @eventId.push Bignum.from_json(_item)
                 else
                   @eventId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @eventId = _oa
            end
          end
        if !_o['conflictingHardRules'].nil?
          _oa = _o['conflictingHardRules']
            if(_oa.is_a? Hash)
              @conflictingHardRules = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @conflictingHardRules =  Fi::Mediconsult::Mediplan::Dto::Planner::EventOptimizationRuleConflictDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @conflictingHardRules = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @conflictingHardRules.push Fi::Mediconsult::Mediplan::Dto::Planner::EventOptimizationRuleConflictDto.from_json(_item)
                 else
                   @conflictingHardRules.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @conflictingHardRules = _oa
            end
          end
        if !_o['conflictingSoftRules'].nil?
          _oa = _o['conflictingSoftRules']
            if(_oa.is_a? Hash)
              @conflictingSoftRules = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @conflictingSoftRules =  Fi::Mediconsult::Mediplan::Dto::Planner::EventOptimizationRuleConflictDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @conflictingSoftRules = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @conflictingSoftRules.push Fi::Mediconsult::Mediplan::Dto::Planner::EventOptimizationRuleConflictDto.from_json(_item)
                 else
                   @conflictingSoftRules.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @conflictingSoftRules = _oa
            end
          end
    end

    # constructs a EventOptimizationConflictDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Course

  # (no documentation provided)
  class CoursePeriodDto < Fi::Mediconsult::Mediplan::Dto::KuhaDtoNameBase 

    # (no documentation provided)
    attr_accessor :id
    # (no documentation provided)
    attr_accessor :status
    # (no documentation provided)
    attr_accessor :name
    # abbreviation
    attr_accessor :abbr
    # (no documentation provided)
    attr_accessor :description
    # (no documentation provided)
    attr_accessor :minAttendees
    # (no documentation provided)
    attr_accessor :maxAttendees
    # (no documentation provided)
    attr_accessor :startTime
    # 
    attr_accessor :startDate
    # end date
    attr_accessor :endTime
    # 
    attr_accessor :endDate
    # true if customer is canceled period
    attr_accessor :customerCanceled
    # customers
    attr_accessor :customers
    # Period tags connnected to this course period
    attr_accessor :periodTags
    # (no documentation provided)
    attr_accessor :courseId

    # the json hash for this CoursePeriodDto
    def to_jaxb_json_hash
      _h = super
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['status'] = status.to_jaxb_json_hash unless status.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['abbr'] = abbr.to_jaxb_json_hash unless abbr.nil?
      _h['description'] = description.to_jaxb_json_hash unless description.nil?
      _h['minAttendees'] = minAttendees.to_jaxb_json_hash unless minAttendees.nil?
      _h['maxAttendees'] = maxAttendees.to_jaxb_json_hash unless maxAttendees.nil?
      _h['startTime'] = startTime.to_jaxb_json_hash unless startTime.nil?
      _h['startDate'] = startDate.to_jaxb_json_hash unless startDate.nil?
      _h['endTime'] = endTime.to_jaxb_json_hash unless endTime.nil?
      _h['endDate'] = endDate.to_jaxb_json_hash unless endDate.nil?
      _h['customerCanceled'] = customerCanceled.to_jaxb_json_hash unless customerCanceled.nil?
      if !customers.nil?
        _ha = Array.new
        customers.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['customers'] = _ha
      end
      if !periodTags.nil?
        _ha = Array.new
        periodTags.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['periodTags'] = _ha
      end
      _h['courseId'] = courseId.to_jaxb_json_hash unless courseId.nil?
      return _h
    end

    #initializes this CoursePeriodDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push Bignum.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
        if !_o['status'].nil?
          _oa = _o['status']
            if(_oa.is_a? Hash)
              @status = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @status =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @status = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @status.push String.from_json(_item)
                 else
                   @status.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @status = _oa
            end
          end
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['abbr'].nil?
          _oa = _o['abbr']
            if(_oa.is_a? Hash)
              @abbr = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @abbr =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @abbr = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @abbr.push String.from_json(_item)
                 else
                   @abbr.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @abbr = _oa
            end
          end
        if !_o['description'].nil?
          _oa = _o['description']
            if(_oa.is_a? Hash)
              @description = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @description =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @description = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @description.push String.from_json(_item)
                 else
                   @description.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @description = _oa
            end
          end
        if !_o['minAttendees'].nil?
          _oa = _o['minAttendees']
            if(_oa.is_a? Hash)
              @minAttendees = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @minAttendees =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @minAttendees = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @minAttendees.push Fixnum.from_json(_item)
                 else
                   @minAttendees.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @minAttendees = _oa
            end
          end
        if !_o['maxAttendees'].nil?
          _oa = _o['maxAttendees']
            if(_oa.is_a? Hash)
              @maxAttendees = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @maxAttendees =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @maxAttendees = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @maxAttendees.push Fixnum.from_json(_item)
                 else
                   @maxAttendees.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @maxAttendees = _oa
            end
          end
        if !_o['startTime'].nil?
          _oa = _o['startTime']
            if(_oa.is_a? Hash)
              @startTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @startTime =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @startTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @startTime.push Bignum.from_json(_item)
                 else
                   @startTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @startTime = _oa
            end
          end
        if !_o['startDate'].nil?
          _oa = _o['startDate']
            if(_oa.is_a? Hash)
              @startDate = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @startDate =  java.time::LocalDate.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @startDate = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @startDate.push java.time::LocalDate.from_json(_item)
                 else
                   @startDate.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @startDate = _oa
            end
          end
        if !_o['endTime'].nil?
          _oa = _o['endTime']
            if(_oa.is_a? Hash)
              @endTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @endTime =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @endTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @endTime.push Bignum.from_json(_item)
                 else
                   @endTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @endTime = _oa
            end
          end
        if !_o['endDate'].nil?
          _oa = _o['endDate']
            if(_oa.is_a? Hash)
              @endDate = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @endDate =  java.time::LocalDate.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @endDate = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @endDate.push java.time::LocalDate.from_json(_item)
                 else
                   @endDate.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @endDate = _oa
            end
          end
        if !_o['customerCanceled'].nil?
          _oa = _o['customerCanceled']
            if(_oa.is_a? Hash)
              @customerCanceled = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @customerCanceled =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @customerCanceled = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @customerCanceled.push Boolean.from_json(_item)
                 else
                   @customerCanceled.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @customerCanceled = _oa
            end
          end
        if !_o['customers'].nil?
          _oa = _o['customers']
            if(_oa.is_a? Hash)
              @customers = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @customers =  Fi::Mediconsult::Mediplan::Dto::Course::CourseCustomerDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @customers = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @customers.push Fi::Mediconsult::Mediplan::Dto::Course::CourseCustomerDto.from_json(_item)
                 else
                   @customers.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @customers = _oa
            end
          end
        if !_o['periodTags'].nil?
          _oa = _o['periodTags']
            if(_oa.is_a? Hash)
              @periodTags = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @periodTags =  Fi::Mediconsult::Mediplan::Dto::Course::TagsForPeriodDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @periodTags = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @periodTags.push Fi::Mediconsult::Mediplan::Dto::Course::TagsForPeriodDto.from_json(_item)
                 else
                   @periodTags.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @periodTags = _oa
            end
          end
        if !_o['courseId'].nil?
          _oa = _o['courseId']
            if(_oa.is_a? Hash)
              @courseId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @courseId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @courseId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @courseId.push Bignum.from_json(_item)
                 else
                   @courseId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @courseId = _oa
            end
          end
    end

    # constructs a CoursePeriodDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Course

  # (no documentation provided)
  class CourseCopyDto < Fi::Mediconsult::Mediplan::Dto::KuhaDtoNameBase 

    # the startDate
    attr_accessor :startDate
    # the courseCopyOption
    attr_accessor :courseCopyOption
    # (no documentation provided)
    attr_accessor :courseEventWorkerCopyOption
    # (no documentation provided)
    attr_accessor :courseEventCustomerCopied
    # the calendarContext
    attr_accessor :calendarContext

    # the json hash for this CourseCopyDto
    def to_jaxb_json_hash
      _h = super
      _h['startDate'] = startDate.to_jaxb_json_hash unless startDate.nil?
      _h['courseCopyOption'] = courseCopyOption.to_jaxb_json_hash unless courseCopyOption.nil?
      _h['courseEventWorkerCopyOption'] = courseEventWorkerCopyOption.to_jaxb_json_hash unless courseEventWorkerCopyOption.nil?
      _h['courseEventCustomerCopied'] = courseEventCustomerCopied.to_jaxb_json_hash unless courseEventCustomerCopied.nil?
      _h['calendarContext'] = calendarContext.to_jaxb_json_hash unless calendarContext.nil?
      return _h
    end

    #initializes this CourseCopyDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['startDate'].nil?
          _oa = _o['startDate']
            if(_oa.is_a? Hash)
              @startDate = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @startDate =  java.time::LocalDate.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @startDate = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @startDate.push java.time::LocalDate.from_json(_item)
                 else
                   @startDate.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @startDate = _oa
            end
          end
        if !_o['courseCopyOption'].nil?
          _oa = _o['courseCopyOption']
            if(_oa.is_a? Hash)
              @courseCopyOption = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @courseCopyOption =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @courseCopyOption = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @courseCopyOption.push String.from_json(_item)
                 else
                   @courseCopyOption.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @courseCopyOption = _oa
            end
          end
        if !_o['courseEventWorkerCopyOption'].nil?
          _oa = _o['courseEventWorkerCopyOption']
            if(_oa.is_a? Hash)
              @courseEventWorkerCopyOption = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @courseEventWorkerCopyOption =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @courseEventWorkerCopyOption = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @courseEventWorkerCopyOption.push String.from_json(_item)
                 else
                   @courseEventWorkerCopyOption.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @courseEventWorkerCopyOption = _oa
            end
          end
        if !_o['courseEventCustomerCopied'].nil?
          _oa = _o['courseEventCustomerCopied']
            if(_oa.is_a? Hash)
              @courseEventCustomerCopied = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @courseEventCustomerCopied =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @courseEventCustomerCopied = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @courseEventCustomerCopied.push Boolean.from_json(_item)
                 else
                   @courseEventCustomerCopied.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @courseEventCustomerCopied = _oa
            end
          end
        if !_o['calendarContext'].nil?
          _oa = _o['calendarContext']
            if(_oa.is_a? Hash)
              @calendarContext = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @calendarContext =  Fi::Mediconsult::Mediplan::Dto::CalendarContextDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @calendarContext = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @calendarContext.push Fi::Mediconsult::Mediplan::Dto::CalendarContextDto.from_json(_item)
                 else
                   @calendarContext.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @calendarContext = _oa
            end
          end
    end

    # constructs a CourseCopyDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Kanta

  # (no documentation provided)
  class OrganDonationWill < Fi::Mediconsult::Core::Client::Dto::Kanta::AbstractWillDTO 

    # (no documentation provided)
    attr_accessor :additionalInfo
    # (no documentation provided)
    attr_accessor :organDonationWillStatus

    # the json hash for this OrganDonationWill
    def to_jaxb_json_hash
      _h = super
      _h['additionalInfo'] = additionalInfo.to_jaxb_json_hash unless additionalInfo.nil?
      _h['organDonationWillStatus'] = organDonationWillStatus.to_jaxb_json_hash unless organDonationWillStatus.nil?
      return _h
    end

    #initializes this OrganDonationWill with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['additionalInfo'].nil?
          _oa = _o['additionalInfo']
            if(_oa.is_a? Hash)
              @additionalInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @additionalInfo =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @additionalInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @additionalInfo.push String.from_json(_item)
                 else
                   @additionalInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @additionalInfo = _oa
            end
          end
        if !_o['organDonationWillStatus'].nil?
          _oa = _o['organDonationWillStatus']
            if(_oa.is_a? Hash)
              @organDonationWillStatus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @organDonationWillStatus =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @organDonationWillStatus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @organDonationWillStatus.push String.from_json(_item)
                 else
                   @organDonationWillStatus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @organDonationWillStatus = _oa
            end
          end
    end

    # constructs a OrganDonationWill from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Setup

  # (no documentation provided)
  class EquipmentDto < Fi::Mediconsult::Mediplan::Dto::KuhaDtoNameBase 

    # the startTime
    attr_accessor :startTime
    # the endTime
    attr_accessor :endTime
    # the endTime
    attr_accessor :amount

    # the json hash for this EquipmentDto
    def to_jaxb_json_hash
      _h = super
      _h['startTime'] = startTime.to_jaxb_json_hash unless startTime.nil?
      _h['endTime'] = endTime.to_jaxb_json_hash unless endTime.nil?
      _h['amount'] = amount.to_jaxb_json_hash unless amount.nil?
      return _h
    end

    #initializes this EquipmentDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['startTime'].nil?
          _oa = _o['startTime']
            if(_oa.is_a? Hash)
              @startTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @startTime =  Java::Sql::Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @startTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @startTime.push Java::Sql::Time.from_json(_item)
                 else
                   @startTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @startTime = _oa
            end
          end
        if !_o['endTime'].nil?
          _oa = _o['endTime']
            if(_oa.is_a? Hash)
              @endTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @endTime =  Java::Sql::Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @endTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @endTime.push Java::Sql::Time.from_json(_item)
                 else
                   @endTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @endTime = _oa
            end
          end
        if !_o['amount'].nil?
          _oa = _o['amount']
            if(_oa.is_a? Hash)
              @amount = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @amount =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @amount = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @amount.push Fixnum.from_json(_item)
                 else
                   @amount.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @amount = _oa
            end
          end
    end

    # constructs a EquipmentDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Planner

  # (no documentation provided)
  class EventOptimizationDataDto < Fi::Mediconsult::Mediplan::Dto::KuhaDtoNameBase 

    # (no documentation provided)
    attr_accessor :eventId
    # (no documentation provided)
    attr_accessor :responsibleIds
    # (no documentation provided)
    attr_accessor :startTime

    # the json hash for this EventOptimizationDataDto
    def to_jaxb_json_hash
      _h = super
      _h['eventId'] = eventId.to_jaxb_json_hash unless eventId.nil?
      if !responsibleIds.nil?
        _ha = Array.new
        responsibleIds.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['responsibleIds'] = _ha
      end
      _h['startTime'] = startTime.to_jaxb_json_hash unless startTime.nil?
      return _h
    end

    #initializes this EventOptimizationDataDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['eventId'].nil?
          _oa = _o['eventId']
            if(_oa.is_a? Hash)
              @eventId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @eventId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @eventId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @eventId.push Bignum.from_json(_item)
                 else
                   @eventId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @eventId = _oa
            end
          end
        if !_o['responsibleIds'].nil?
          _oa = _o['responsibleIds']
            if(_oa.is_a? Hash)
              @responsibleIds = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @responsibleIds =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @responsibleIds = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @responsibleIds.push Fixnum.from_json(_item)
                 else
                   @responsibleIds.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @responsibleIds = _oa
            end
          end
        if !_o['startTime'].nil?
          _oa = _o['startTime']
            if(_oa.is_a? Hash)
              @startTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @startTime =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @startTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @startTime.push Bignum.from_json(_item)
                 else
                   @startTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @startTime = _oa
            end
          end
    end

    # constructs a EventOptimizationDataDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Planner

  # (no documentation provided)
  class EventReAssignTaskDetailsDto < Fi::Mediconsult::Mediplan::Dto::Planner::EventOptimizationTaskBaseDto 

    # (no documentation provided)
    attr_accessor :empId
    # (no documentation provided)
    attr_accessor :startTime
    # (no documentation provided)
    attr_accessor :endTime
    # (no documentation provided)
    attr_accessor :empOptimizedEventCategories
    # (no documentation provided)
    attr_accessor :allOptimizedEventCategories

    # the json hash for this EventReAssignTaskDetailsDto
    def to_jaxb_json_hash
      _h = super
      _h['empId'] = empId.to_jaxb_json_hash unless empId.nil?
      _h['startTime'] = startTime.to_jaxb_json_hash unless startTime.nil?
      _h['endTime'] = endTime.to_jaxb_json_hash unless endTime.nil?
      if !empOptimizedEventCategories.nil?
        _ha = Array.new
        empOptimizedEventCategories.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['empOptimizedEventCategories'] = _ha
      end
      if !allOptimizedEventCategories.nil?
        _ha = Array.new
        allOptimizedEventCategories.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['allOptimizedEventCategories'] = _ha
      end
      return _h
    end

    #initializes this EventReAssignTaskDetailsDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['empId'].nil?
          _oa = _o['empId']
            if(_oa.is_a? Hash)
              @empId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @empId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @empId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @empId.push Fixnum.from_json(_item)
                 else
                   @empId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @empId = _oa
            end
          end
        if !_o['startTime'].nil?
          _oa = _o['startTime']
            if(_oa.is_a? Hash)
              @startTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @startTime =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @startTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @startTime.push Bignum.from_json(_item)
                 else
                   @startTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @startTime = _oa
            end
          end
        if !_o['endTime'].nil?
          _oa = _o['endTime']
            if(_oa.is_a? Hash)
              @endTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @endTime =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @endTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @endTime.push Bignum.from_json(_item)
                 else
                   @endTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @endTime = _oa
            end
          end
        if !_o['empOptimizedEventCategories'].nil?
          _oa = _o['empOptimizedEventCategories']
            if(_oa.is_a? Hash)
              @empOptimizedEventCategories = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @empOptimizedEventCategories =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @empOptimizedEventCategories = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @empOptimizedEventCategories.push String.from_json(_item)
                 else
                   @empOptimizedEventCategories.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @empOptimizedEventCategories = _oa
            end
          end
        if !_o['allOptimizedEventCategories'].nil?
          _oa = _o['allOptimizedEventCategories']
            if(_oa.is_a? Hash)
              @allOptimizedEventCategories = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @allOptimizedEventCategories =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @allOptimizedEventCategories = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @allOptimizedEventCategories.push String.from_json(_item)
                 else
                   @allOptimizedEventCategories.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @allOptimizedEventCategories = _oa
            end
          end
    end

    # constructs a EventReAssignTaskDetailsDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Setup

  # (no documentation provided)
  class RoomDto < Fi::Mediconsult::Mediplan::Dto::KuhaDtoNameBase 

    # the startTime
    attr_accessor :startTime
    # the endTime
    attr_accessor :endTime
    # the roomGroupId
    attr_accessor :roomGroupId
    # the capacity
    attr_accessor :capacity
    # the waitingRoom
    attr_accessor :waitingRoom

    # the json hash for this RoomDto
    def to_jaxb_json_hash
      _h = super
      _h['startTime'] = startTime.to_jaxb_json_hash unless startTime.nil?
      _h['endTime'] = endTime.to_jaxb_json_hash unless endTime.nil?
      _h['roomGroupId'] = roomGroupId.to_jaxb_json_hash unless roomGroupId.nil?
      _h['capacity'] = capacity.to_jaxb_json_hash unless capacity.nil?
      _h['waitingRoom'] = waitingRoom.to_jaxb_json_hash unless waitingRoom.nil?
      return _h
    end

    #initializes this RoomDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['startTime'].nil?
          _oa = _o['startTime']
            if(_oa.is_a? Hash)
              @startTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @startTime =  Java::Sql::Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @startTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @startTime.push Java::Sql::Time.from_json(_item)
                 else
                   @startTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @startTime = _oa
            end
          end
        if !_o['endTime'].nil?
          _oa = _o['endTime']
            if(_oa.is_a? Hash)
              @endTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @endTime =  Java::Sql::Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @endTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @endTime.push Java::Sql::Time.from_json(_item)
                 else
                   @endTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @endTime = _oa
            end
          end
        if !_o['roomGroupId'].nil?
          _oa = _o['roomGroupId']
            if(_oa.is_a? Hash)
              @roomGroupId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @roomGroupId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @roomGroupId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @roomGroupId.push Bignum.from_json(_item)
                 else
                   @roomGroupId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @roomGroupId = _oa
            end
          end
        if !_o['capacity'].nil?
          _oa = _o['capacity']
            if(_oa.is_a? Hash)
              @capacity = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @capacity =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @capacity = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @capacity.push Fixnum.from_json(_item)
                 else
                   @capacity.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @capacity = _oa
            end
          end
        if !_o['waitingRoom'].nil?
          _oa = _o['waitingRoom']
            if(_oa.is_a? Hash)
              @waitingRoom = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @waitingRoom =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @waitingRoom = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @waitingRoom.push String.from_json(_item)
                 else
                   @waitingRoom.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @waitingRoom = _oa
            end
          end
    end

    # constructs a RoomDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Title

module Data

  # (no documentation provided)
  class MittausBaseData < Fi::Mediconsult::Core::Client::Dto::Title::Data::TitleBaseData 

    # (no documentation provided)
    attr_accessor :editable
    # (no documentation provided)
    attr_accessor :normal
    # (no documentation provided)
    attr_accessor :responsible
    # (no documentation provided)
    attr_accessor :userUnit
    # (no documentation provided)
    attr_accessor :muutosAika
    # (no documentation provided)
    attr_accessor :unit
    # (no documentation provided)
    attr_accessor :mtType
    # (no documentation provided)
    attr_accessor :aika
    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :type
    # (no documentation provided)
    attr_accessor :vanhaAika

    # the json hash for this MittausBaseData
    def to_jaxb_json_hash
      _h = super
      _h['editable'] = editable.to_jaxb_json_hash unless editable.nil?
      _h['normal'] = normal.to_jaxb_json_hash unless normal.nil?
      _h['responsible'] = responsible.to_jaxb_json_hash unless responsible.nil?
      _h['userUnit'] = userUnit.to_jaxb_json_hash unless userUnit.nil?
      _h['muutosAika'] = muutosAika.to_jaxb_json_hash unless muutosAika.nil?
      _h['unit'] = unit.to_jaxb_json_hash unless unit.nil?
      _h['mtType'] = mtType.to_jaxb_json_hash unless mtType.nil?
      _h['aika'] = aika.to_jaxb_json_hash unless aika.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['type'] = type.to_jaxb_json_hash unless type.nil?
      _h['vanhaAika'] = vanhaAika.to_jaxb_json_hash unless vanhaAika.nil?
      return _h
    end

    #initializes this MittausBaseData with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['editable'].nil?
          _oa = _o['editable']
            if(_oa.is_a? Hash)
              @editable = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @editable =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @editable = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @editable.push Boolean.from_json(_item)
                 else
                   @editable.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @editable = _oa
            end
          end
        if !_o['normal'].nil?
          _oa = _o['normal']
            if(_oa.is_a? Hash)
              @normal = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @normal =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @normal = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @normal.push Boolean.from_json(_item)
                 else
                   @normal.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @normal = _oa
            end
          end
        if !_o['responsible'].nil?
          _oa = _o['responsible']
            if(_oa.is_a? Hash)
              @responsible = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @responsible =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @responsible = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @responsible.push String.from_json(_item)
                 else
                   @responsible.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @responsible = _oa
            end
          end
        if !_o['userUnit'].nil?
          _oa = _o['userUnit']
            if(_oa.is_a? Hash)
              @userUnit = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @userUnit =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @userUnit = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @userUnit.push String.from_json(_item)
                 else
                   @userUnit.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @userUnit = _oa
            end
          end
        if !_o['muutosAika'].nil?
          _oa = _o['muutosAika']
            if(_oa.is_a? Hash)
              @muutosAika = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @muutosAika =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @muutosAika = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @muutosAika.push Time.from_json(_item)
                 else
                   @muutosAika.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @muutosAika = _oa
            end
          end
        if !_o['unit'].nil?
          _oa = _o['unit']
            if(_oa.is_a? Hash)
              @unit = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @unit =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @unit = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @unit.push String.from_json(_item)
                 else
                   @unit.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @unit = _oa
            end
          end
        if !_o['mtType'].nil?
          _oa = _o['mtType']
            if(_oa.is_a? Hash)
              @mtType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @mtType =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @mtType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @mtType.push String.from_json(_item)
                 else
                   @mtType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @mtType = _oa
            end
          end
        if !_o['aika'].nil?
          _oa = _o['aika']
            if(_oa.is_a? Hash)
              @aika = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @aika =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @aika = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @aika.push Time.from_json(_item)
                 else
                   @aika.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @aika = _oa
            end
          end
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['type'].nil?
          _oa = _o['type']
            if(_oa.is_a? Hash)
              @type = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @type =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @type = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @type.push Fixnum.from_json(_item)
                 else
                   @type.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @type = _oa
            end
          end
        if !_o['vanhaAika'].nil?
          _oa = _o['vanhaAika']
            if(_oa.is_a? Hash)
              @vanhaAika = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vanhaAika =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vanhaAika = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vanhaAika.push Time.from_json(_item)
                 else
                   @vanhaAika.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vanhaAika = _oa
            end
          end
    end

    # constructs a MittausBaseData from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Setup

  # (no documentation provided)
  class ReportingGroupDto < Fi::Mediconsult::Mediplan::Dto::KuhaDtoNameBase 

    # color
    attr_accessor :color
    # meaning, cab be AVAILABLE, BYSY_MANDAROTY or BUSY_OPTIONAL
    attr_accessor :meaning
    # lomake id
    attr_accessor :calendarModelFormId
    # Either WORK or TIME
    attr_accessor :category
    # (no documentation provided)
    attr_accessor :eventModels

    # the json hash for this ReportingGroupDto
    def to_jaxb_json_hash
      _h = super
      _h['color'] = color.to_jaxb_json_hash unless color.nil?
      _h['meaning'] = meaning.to_jaxb_json_hash unless meaning.nil?
      _h['calendarModelFormId'] = calendarModelFormId.to_jaxb_json_hash unless calendarModelFormId.nil?
      _h['category'] = category.to_jaxb_json_hash unless category.nil?
      if !eventModels.nil?
        _ha = Array.new
        eventModels.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['eventModels'] = _ha
      end
      return _h
    end

    #initializes this ReportingGroupDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['color'].nil?
          _oa = _o['color']
            if(_oa.is_a? Hash)
              @color = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @color =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @color = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @color.push String.from_json(_item)
                 else
                   @color.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @color = _oa
            end
          end
        if !_o['meaning'].nil?
          _oa = _o['meaning']
            if(_oa.is_a? Hash)
              @meaning = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @meaning =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @meaning = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @meaning.push String.from_json(_item)
                 else
                   @meaning.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @meaning = _oa
            end
          end
        if !_o['calendarModelFormId'].nil?
          _oa = _o['calendarModelFormId']
            if(_oa.is_a? Hash)
              @calendarModelFormId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @calendarModelFormId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @calendarModelFormId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @calendarModelFormId.push Fixnum.from_json(_item)
                 else
                   @calendarModelFormId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @calendarModelFormId = _oa
            end
          end
        if !_o['category'].nil?
          _oa = _o['category']
            if(_oa.is_a? Hash)
              @category = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @category =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @category = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @category.push String.from_json(_item)
                 else
                   @category.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @category = _oa
            end
          end
        if !_o['eventModels'].nil?
          _oa = _o['eventModels']
            if(_oa.is_a? Hash)
              @eventModels = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @eventModels =  Fi::Mediconsult::Mediplan::Dto::Eventmodel::EventModelDto.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @eventModels = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @eventModels.push Fi::Mediconsult::Mediplan::Dto::Eventmodel::EventModelDto.from_json(_item)
                 else
                   @eventModels.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @eventModels = _oa
            end
          end
    end

    # constructs a ReportingGroupDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Title

module Data

  # (no documentation provided)
  class TitleComment < Fi::Mediconsult::Core::Client::Dto::Title::Data::TitleBaseData 

    # (no documentation provided)
    attr_accessor :value

    # the json hash for this TitleComment
    def to_jaxb_json_hash
      _h = super
      _h['value'] = value.to_jaxb_json_hash unless value.nil?
      return _h
    end

    #initializes this TitleComment with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['value'].nil?
          _oa = _o['value']
            if(_oa.is_a? Hash)
              @value = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @value =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @value = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @value.push String.from_json(_item)
                 else
                   @value.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @value = _oa
            end
          end
    end

    # constructs a TitleComment from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Title

module Data

  # (no documentation provided)
  class ValueDescriptionData < Fi::Mediconsult::Core::Client::Dto::Title::Data::TitleBaseData 

    # (no documentation provided)
    attr_accessor :value
    # (no documentation provided)
    attr_accessor :description

    # the json hash for this ValueDescriptionData
    def to_jaxb_json_hash
      _h = super
      _h['value'] = value.to_jaxb_json_hash unless value.nil?
      _h['description'] = description.to_jaxb_json_hash unless description.nil?
      return _h
    end

    #initializes this ValueDescriptionData with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['value'].nil?
          _oa = _o['value']
            if(_oa.is_a? Hash)
              @value = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @value =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @value = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @value.push String.from_json(_item)
                 else
                   @value.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @value = _oa
            end
          end
        if !_o['description'].nil?
          _oa = _o['description']
            if(_oa.is_a? Hash)
              @description = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @description =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @description = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @description.push String.from_json(_item)
                 else
                   @description.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @description = _oa
            end
          end
    end

    # constructs a ValueDescriptionData from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Contentgroup

  # (no documentation provided)
  class EventModelContentGroupDto < Fi::Mediconsult::Mediplan::Dto::Contentgroup::ContentGroup 


    # the json hash for this EventModelContentGroupDto
    def to_jaxb_json_hash
      _h = super
      return _h
    end

    #initializes this EventModelContentGroupDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
    end

    # constructs a EventModelContentGroupDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Title

module Data

  # (no documentation provided)
  class DiagnoseData < Fi::Mediconsult::Core::Client::Dto::Title::Data::TitleBaseData 

    # (no documentation provided)
    attr_accessor :ownerId
    # (no documentation provided)
    attr_accessor :vakio
    # (no documentation provided)
    attr_accessor :vapaa
    # (no documentation provided)
    attr_accessor :diagnoseCode
    # (no documentation provided)
    attr_accessor :formId
    # (no documentation provided)
    attr_accessor :diagnoseDoneByUser
    # (no documentation provided)
    attr_accessor :diagnoseDoneInUnit
    # (no documentation provided)
    attr_accessor :diagnoseEndedByUser
    # (no documentation provided)
    attr_accessor :diagnoseEndedInUnit
    # (no documentation provided)
    attr_accessor :startDate
    # (no documentation provided)
    attr_accessor :endDate
    # (no documentation provided)
    attr_accessor :description
    # (no documentation provided)
    attr_accessor :fullDescription
    # (no documentation provided)
    attr_accessor :priority
    # (no documentation provided)
    attr_accessor :permanency
    # (no documentation provided)
    attr_accessor :certainty
    # (no documentation provided)
    attr_accessor :diagnoseType
    # (no documentation provided)
    attr_accessor :episodeName
    # (no documentation provided)
    attr_accessor :reasonCode
    # (no documentation provided)
    attr_accessor :symptomCode
    # (no documentation provided)
    attr_accessor :muutosAika
    # (no documentation provided)
    attr_accessor :negated
    # (no documentation provided)
    attr_accessor :codeSystem
    # (no documentation provided)
    attr_accessor :codeSystemVersion
    # (no documentation provided)
    attr_accessor :disruption
    # (no documentation provided)
    attr_accessor :atc
    # (no documentation provided)
    attr_accessor :operationCode
    # (no documentation provided)
    attr_accessor :idc10CodeEquivalent
    # (no documentation provided)
    attr_accessor :exerciseTypeCode
    # (no documentation provided)
    attr_accessor :informationSource
    # (no documentation provided)
    attr_accessor :endingReason
    # (no documentation provided)
    attr_accessor :endingReasonDetails
    # (no documentation provided)
    attr_accessor :correctedDiagnoseCode
    # (no documentation provided)
    attr_accessor :episodeIds
    # Return build presentation of diagnose data.
    attr_accessor :presentation

    # the json hash for this DiagnoseData
    def to_jaxb_json_hash
      _h = super
      _h['ownerId'] = ownerId.to_jaxb_json_hash unless ownerId.nil?
      _h['vakio'] = vakio.to_jaxb_json_hash unless vakio.nil?
      _h['vapaa'] = vapaa.to_jaxb_json_hash unless vapaa.nil?
      _h['diagnoseCode'] = diagnoseCode.to_jaxb_json_hash unless diagnoseCode.nil?
      _h['formId'] = formId.to_jaxb_json_hash unless formId.nil?
      _h['diagnoseDoneByUser'] = diagnoseDoneByUser.to_jaxb_json_hash unless diagnoseDoneByUser.nil?
      _h['diagnoseDoneInUnit'] = diagnoseDoneInUnit.to_jaxb_json_hash unless diagnoseDoneInUnit.nil?
      _h['diagnoseEndedByUser'] = diagnoseEndedByUser.to_jaxb_json_hash unless diagnoseEndedByUser.nil?
      _h['diagnoseEndedInUnit'] = diagnoseEndedInUnit.to_jaxb_json_hash unless diagnoseEndedInUnit.nil?
      _h['startDate'] = startDate.to_jaxb_json_hash unless startDate.nil?
      _h['endDate'] = endDate.to_jaxb_json_hash unless endDate.nil?
      _h['description'] = description.to_jaxb_json_hash unless description.nil?
      _h['fullDescription'] = fullDescription.to_jaxb_json_hash unless fullDescription.nil?
      _h['priority'] = priority.to_jaxb_json_hash unless priority.nil?
      _h['permanency'] = permanency.to_jaxb_json_hash unless permanency.nil?
      _h['certainty'] = certainty.to_jaxb_json_hash unless certainty.nil?
      _h['diagnoseType'] = diagnoseType.to_jaxb_json_hash unless diagnoseType.nil?
      _h['episodeName'] = episodeName.to_jaxb_json_hash unless episodeName.nil?
      _h['reasonCode'] = reasonCode.to_jaxb_json_hash unless reasonCode.nil?
      _h['symptomCode'] = symptomCode.to_jaxb_json_hash unless symptomCode.nil?
      _h['muutosAika'] = muutosAika.to_jaxb_json_hash unless muutosAika.nil?
      _h['negated'] = negated.to_jaxb_json_hash unless negated.nil?
      _h['codeSystem'] = codeSystem.to_jaxb_json_hash unless codeSystem.nil?
      _h['codeSystemVersion'] = codeSystemVersion.to_jaxb_json_hash unless codeSystemVersion.nil?
      _h['disruption'] = disruption.to_jaxb_json_hash unless disruption.nil?
      _h['atc'] = atc.to_jaxb_json_hash unless atc.nil?
      _h['operationCode'] = operationCode.to_jaxb_json_hash unless operationCode.nil?
      _h['idc10CodeEquivalent'] = idc10CodeEquivalent.to_jaxb_json_hash unless idc10CodeEquivalent.nil?
      _h['exerciseTypeCode'] = exerciseTypeCode.to_jaxb_json_hash unless exerciseTypeCode.nil?
      _h['informationSource'] = informationSource.to_jaxb_json_hash unless informationSource.nil?
      _h['endingReason'] = endingReason.to_jaxb_json_hash unless endingReason.nil?
      _h['endingReasonDetails'] = endingReasonDetails.to_jaxb_json_hash unless endingReasonDetails.nil?
      _h['correctedDiagnoseCode'] = correctedDiagnoseCode.to_jaxb_json_hash unless correctedDiagnoseCode.nil?
      if !episodeIds.nil?
        _ha = Array.new
        episodeIds.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['episodeIds'] = _ha
      end
      _h['presentation'] = presentation.to_jaxb_json_hash unless presentation.nil?
      return _h
    end

    #initializes this DiagnoseData with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['ownerId'].nil?
          _oa = _o['ownerId']
            if(_oa.is_a? Hash)
              @ownerId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ownerId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ownerId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ownerId.push Fixnum.from_json(_item)
                 else
                   @ownerId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ownerId = _oa
            end
          end
        if !_o['vakio'].nil?
          _oa = _o['vakio']
            if(_oa.is_a? Hash)
              @vakio = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vakio =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vakio = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vakio.push String.from_json(_item)
                 else
                   @vakio.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vakio = _oa
            end
          end
        if !_o['vapaa'].nil?
          _oa = _o['vapaa']
            if(_oa.is_a? Hash)
              @vapaa = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vapaa =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vapaa = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vapaa.push String.from_json(_item)
                 else
                   @vapaa.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vapaa = _oa
            end
          end
        if !_o['diagnoseCode'].nil?
          _oa = _o['diagnoseCode']
            if(_oa.is_a? Hash)
              @diagnoseCode = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @diagnoseCode =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @diagnoseCode = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @diagnoseCode.push String.from_json(_item)
                 else
                   @diagnoseCode.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @diagnoseCode = _oa
            end
          end
        if !_o['formId'].nil?
          _oa = _o['formId']
            if(_oa.is_a? Hash)
              @formId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @formId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @formId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @formId.push Fixnum.from_json(_item)
                 else
                   @formId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @formId = _oa
            end
          end
        if !_o['diagnoseDoneByUser'].nil?
          _oa = _o['diagnoseDoneByUser']
            if(_oa.is_a? Hash)
              @diagnoseDoneByUser = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @diagnoseDoneByUser =  Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @diagnoseDoneByUser = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @diagnoseDoneByUser.push Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_item)
                 else
                   @diagnoseDoneByUser.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @diagnoseDoneByUser = _oa
            end
          end
        if !_o['diagnoseDoneInUnit'].nil?
          _oa = _o['diagnoseDoneInUnit']
            if(_oa.is_a? Hash)
              @diagnoseDoneInUnit = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @diagnoseDoneInUnit =  Fi::Mediconsult::Core::Client::Dto::Omistaja::Unit.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @diagnoseDoneInUnit = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @diagnoseDoneInUnit.push Fi::Mediconsult::Core::Client::Dto::Omistaja::Unit.from_json(_item)
                 else
                   @diagnoseDoneInUnit.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @diagnoseDoneInUnit = _oa
            end
          end
        if !_o['diagnoseEndedByUser'].nil?
          _oa = _o['diagnoseEndedByUser']
            if(_oa.is_a? Hash)
              @diagnoseEndedByUser = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @diagnoseEndedByUser =  Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @diagnoseEndedByUser = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @diagnoseEndedByUser.push Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_item)
                 else
                   @diagnoseEndedByUser.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @diagnoseEndedByUser = _oa
            end
          end
        if !_o['diagnoseEndedInUnit'].nil?
          _oa = _o['diagnoseEndedInUnit']
            if(_oa.is_a? Hash)
              @diagnoseEndedInUnit = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @diagnoseEndedInUnit =  Fi::Mediconsult::Core::Client::Dto::Omistaja::Unit.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @diagnoseEndedInUnit = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @diagnoseEndedInUnit.push Fi::Mediconsult::Core::Client::Dto::Omistaja::Unit.from_json(_item)
                 else
                   @diagnoseEndedInUnit.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @diagnoseEndedInUnit = _oa
            end
          end
        if !_o['startDate'].nil?
          _oa = _o['startDate']
            if(_oa.is_a? Hash)
              @startDate = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @startDate =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @startDate = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @startDate.push String.from_json(_item)
                 else
                   @startDate.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @startDate = _oa
            end
          end
        if !_o['endDate'].nil?
          _oa = _o['endDate']
            if(_oa.is_a? Hash)
              @endDate = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @endDate =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @endDate = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @endDate.push String.from_json(_item)
                 else
                   @endDate.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @endDate = _oa
            end
          end
        if !_o['description'].nil?
          _oa = _o['description']
            if(_oa.is_a? Hash)
              @description = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @description =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @description = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @description.push String.from_json(_item)
                 else
                   @description.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @description = _oa
            end
          end
        if !_o['fullDescription'].nil?
          _oa = _o['fullDescription']
            if(_oa.is_a? Hash)
              @fullDescription = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @fullDescription =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @fullDescription = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @fullDescription.push String.from_json(_item)
                 else
                   @fullDescription.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @fullDescription = _oa
            end
          end
        if !_o['priority'].nil?
          _oa = _o['priority']
            if(_oa.is_a? Hash)
              @priority = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @priority =  Fi::Mediconsult::Core::Client::Dto::Title::Diagnose::DiagnoseProperty.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @priority = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @priority.push Fi::Mediconsult::Core::Client::Dto::Title::Diagnose::DiagnoseProperty.from_json(_item)
                 else
                   @priority.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @priority = _oa
            end
          end
        if !_o['permanency'].nil?
          _oa = _o['permanency']
            if(_oa.is_a? Hash)
              @permanency = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @permanency =  Fi::Mediconsult::Core::Client::Dto::Title::Diagnose::DiagnoseProperty.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @permanency = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @permanency.push Fi::Mediconsult::Core::Client::Dto::Title::Diagnose::DiagnoseProperty.from_json(_item)
                 else
                   @permanency.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @permanency = _oa
            end
          end
        if !_o['certainty'].nil?
          _oa = _o['certainty']
            if(_oa.is_a? Hash)
              @certainty = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @certainty =  Fi::Mediconsult::Core::Client::Dto::Title::Diagnose::DiagnoseProperty.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @certainty = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @certainty.push Fi::Mediconsult::Core::Client::Dto::Title::Diagnose::DiagnoseProperty.from_json(_item)
                 else
                   @certainty.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @certainty = _oa
            end
          end
        if !_o['diagnoseType'].nil?
          _oa = _o['diagnoseType']
            if(_oa.is_a? Hash)
              @diagnoseType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @diagnoseType =  Fi::Mediconsult::Core::Client::Dto::Title::Diagnose::DiagnoseProperty.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @diagnoseType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @diagnoseType.push Fi::Mediconsult::Core::Client::Dto::Title::Diagnose::DiagnoseProperty.from_json(_item)
                 else
                   @diagnoseType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @diagnoseType = _oa
            end
          end
        if !_o['episodeName'].nil?
          _oa = _o['episodeName']
            if(_oa.is_a? Hash)
              @episodeName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @episodeName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @episodeName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @episodeName.push String.from_json(_item)
                 else
                   @episodeName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @episodeName = _oa
            end
          end
        if !_o['reasonCode'].nil?
          _oa = _o['reasonCode']
            if(_oa.is_a? Hash)
              @reasonCode = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @reasonCode =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @reasonCode = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @reasonCode.push String.from_json(_item)
                 else
                   @reasonCode.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @reasonCode = _oa
            end
          end
        if !_o['symptomCode'].nil?
          _oa = _o['symptomCode']
            if(_oa.is_a? Hash)
              @symptomCode = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @symptomCode =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @symptomCode = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @symptomCode.push String.from_json(_item)
                 else
                   @symptomCode.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @symptomCode = _oa
            end
          end
        if !_o['muutosAika'].nil?
          _oa = _o['muutosAika']
            if(_oa.is_a? Hash)
              @muutosAika = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @muutosAika =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @muutosAika = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @muutosAika.push Time.from_json(_item)
                 else
                   @muutosAika.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @muutosAika = _oa
            end
          end
        if !_o['negated'].nil?
          _oa = _o['negated']
            if(_oa.is_a? Hash)
              @negated = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @negated =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @negated = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @negated.push Boolean.from_json(_item)
                 else
                   @negated.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @negated = _oa
            end
          end
        if !_o['codeSystem'].nil?
          _oa = _o['codeSystem']
            if(_oa.is_a? Hash)
              @codeSystem = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @codeSystem =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @codeSystem = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @codeSystem.push String.from_json(_item)
                 else
                   @codeSystem.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @codeSystem = _oa
            end
          end
        if !_o['codeSystemVersion'].nil?
          _oa = _o['codeSystemVersion']
            if(_oa.is_a? Hash)
              @codeSystemVersion = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @codeSystemVersion =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @codeSystemVersion = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @codeSystemVersion.push String.from_json(_item)
                 else
                   @codeSystemVersion.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @codeSystemVersion = _oa
            end
          end
        if !_o['disruption'].nil?
          _oa = _o['disruption']
            if(_oa.is_a? Hash)
              @disruption = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @disruption =  Fi::Mediconsult::Core::Client::Dto::Diagnose::DiagnoseCode.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @disruption = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @disruption.push Fi::Mediconsult::Core::Client::Dto::Diagnose::DiagnoseCode.from_json(_item)
                 else
                   @disruption.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @disruption = _oa
            end
          end
        if !_o['atc'].nil?
          _oa = _o['atc']
            if(_oa.is_a? Hash)
              @atc = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @atc =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @atc = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @atc.push String.from_json(_item)
                 else
                   @atc.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @atc = _oa
            end
          end
        if !_o['operationCode'].nil?
          _oa = _o['operationCode']
            if(_oa.is_a? Hash)
              @operationCode = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @operationCode =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @operationCode = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @operationCode.push String.from_json(_item)
                 else
                   @operationCode.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @operationCode = _oa
            end
          end
        if !_o['idc10CodeEquivalent'].nil?
          _oa = _o['idc10CodeEquivalent']
            if(_oa.is_a? Hash)
              @idc10CodeEquivalent = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @idc10CodeEquivalent =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @idc10CodeEquivalent = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @idc10CodeEquivalent.push String.from_json(_item)
                 else
                   @idc10CodeEquivalent.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @idc10CodeEquivalent = _oa
            end
          end
        if !_o['exerciseTypeCode'].nil?
          _oa = _o['exerciseTypeCode']
            if(_oa.is_a? Hash)
              @exerciseTypeCode = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @exerciseTypeCode =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @exerciseTypeCode = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @exerciseTypeCode.push String.from_json(_item)
                 else
                   @exerciseTypeCode.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @exerciseTypeCode = _oa
            end
          end
        if !_o['informationSource'].nil?
          _oa = _o['informationSource']
            if(_oa.is_a? Hash)
              @informationSource = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @informationSource =  Fi::Mediconsult::Core::Client::Dto::Title::Diagnose::DiagnoseProperty.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @informationSource = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @informationSource.push Fi::Mediconsult::Core::Client::Dto::Title::Diagnose::DiagnoseProperty.from_json(_item)
                 else
                   @informationSource.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @informationSource = _oa
            end
          end
        if !_o['endingReason'].nil?
          _oa = _o['endingReason']
            if(_oa.is_a? Hash)
              @endingReason = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @endingReason =  Fi::Mediconsult::Core::Client::Dto::Title::Diagnose::DiagnoseProperty.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @endingReason = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @endingReason.push Fi::Mediconsult::Core::Client::Dto::Title::Diagnose::DiagnoseProperty.from_json(_item)
                 else
                   @endingReason.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @endingReason = _oa
            end
          end
        if !_o['endingReasonDetails'].nil?
          _oa = _o['endingReasonDetails']
            if(_oa.is_a? Hash)
              @endingReasonDetails = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @endingReasonDetails =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @endingReasonDetails = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @endingReasonDetails.push String.from_json(_item)
                 else
                   @endingReasonDetails.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @endingReasonDetails = _oa
            end
          end
        if !_o['correctedDiagnoseCode'].nil?
          _oa = _o['correctedDiagnoseCode']
            if(_oa.is_a? Hash)
              @correctedDiagnoseCode = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @correctedDiagnoseCode =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @correctedDiagnoseCode = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @correctedDiagnoseCode.push Fixnum.from_json(_item)
                 else
                   @correctedDiagnoseCode.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @correctedDiagnoseCode = _oa
            end
          end
        if !_o['episodeIds'].nil?
          _oa = _o['episodeIds']
            if(_oa.is_a? Hash)
              @episodeIds = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @episodeIds =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @episodeIds = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @episodeIds.push String.from_json(_item)
                 else
                   @episodeIds.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @episodeIds = _oa
            end
          end
        if !_o['presentation'].nil?
          _oa = _o['presentation']
            if(_oa.is_a? Hash)
              @presentation = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @presentation =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @presentation = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @presentation.push String.from_json(_item)
                 else
                   @presentation.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @presentation = _oa
            end
          end
    end

    # constructs a DiagnoseData from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Title

module Data

  # (no documentation provided)
  class OptionsData < Fi::Mediconsult::Core::Client::Dto::Title::Data::TitleBaseData 

    # (no documentation provided)
    attr_accessor :options

    # the json hash for this OptionsData
    def to_jaxb_json_hash
      _h = super
      if !options.nil?
        _ha = Array.new
        options.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['options'] = _ha
      end
      return _h
    end

    #initializes this OptionsData with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['options'].nil?
          _oa = _o['options']
            if(_oa.is_a? Hash)
              @options = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @options =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @options = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @options.push String.from_json(_item)
                 else
                   @options.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @options = _oa
            end
          end
    end

    # constructs a OptionsData from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Planner

  # (no documentation provided)
  class EventOptimizationChangeDataDto < Fi::Mediconsult::Mediplan::Dto::KuhaDtoNameBase 

    # (no documentation provided)
    attr_accessor :eventId
    # (no documentation provided)
    attr_accessor :responsibleChangeIds
    # (no documentation provided)
    attr_accessor :startTime

    # the json hash for this EventOptimizationChangeDataDto
    def to_jaxb_json_hash
      _h = super
      _h['eventId'] = eventId.to_jaxb_json_hash unless eventId.nil?
      if !responsibleChangeIds.nil?
        _ha = Array.new
        responsibleChangeIds.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['responsibleChangeIds'] = _ha
      end
      _h['startTime'] = startTime.to_jaxb_json_hash unless startTime.nil?
      return _h
    end

    #initializes this EventOptimizationChangeDataDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['eventId'].nil?
          _oa = _o['eventId']
            if(_oa.is_a? Hash)
              @eventId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @eventId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @eventId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @eventId.push Bignum.from_json(_item)
                 else
                   @eventId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @eventId = _oa
            end
          end
        if !_o['responsibleChangeIds'].nil?
          _oa = _o['responsibleChangeIds']
            if(_oa.is_a? Hash)
              @responsibleChangeIds = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @responsibleChangeIds =  Fi::Mediconsult::Mediplan::Dto::Planner::IdChangePair.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @responsibleChangeIds = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @responsibleChangeIds.push Fi::Mediconsult::Mediplan::Dto::Planner::IdChangePair.from_json(_item)
                 else
                   @responsibleChangeIds.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @responsibleChangeIds = _oa
            end
          end
        if !_o['startTime'].nil?
          _oa = _o['startTime']
            if(_oa.is_a? Hash)
              @startTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @startTime =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @startTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @startTime.push Bignum.from_json(_item)
                 else
                   @startTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @startTime = _oa
            end
          end
    end

    # constructs a EventOptimizationChangeDataDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Kanta

  # (no documentation provided)
  class LivingWill < Fi::Mediconsult::Core::Client::Dto::Kanta::AbstractWillDTO 

    # (no documentation provided)
    attr_accessor :user
    # (no documentation provided)
    attr_accessor :unit
    # (no documentation provided)
    attr_accessor :livingWillText
    # (no documentation provided)
    attr_accessor :patient
    # (no documentation provided)
    attr_accessor :livingWillStatus

    # the json hash for this LivingWill
    def to_jaxb_json_hash
      _h = super
      _h['user'] = user.to_jaxb_json_hash unless user.nil?
      _h['unit'] = unit.to_jaxb_json_hash unless unit.nil?
      _h['livingWillText'] = livingWillText.to_jaxb_json_hash unless livingWillText.nil?
      _h['patient'] = patient.to_jaxb_json_hash unless patient.nil?
      _h['livingWillStatus'] = livingWillStatus.to_jaxb_json_hash unless livingWillStatus.nil?
      return _h
    end

    #initializes this LivingWill with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['user'].nil?
          _oa = _o['user']
            if(_oa.is_a? Hash)
              @user = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @user =  Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @user = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @user.push Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_item)
                 else
                   @user.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @user = _oa
            end
          end
        if !_o['unit'].nil?
          _oa = _o['unit']
            if(_oa.is_a? Hash)
              @unit = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @unit =  Fi::Mediconsult::Core::Client::Dto::Omistaja::Unit.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @unit = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @unit.push Fi::Mediconsult::Core::Client::Dto::Omistaja::Unit.from_json(_item)
                 else
                   @unit.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @unit = _oa
            end
          end
        if !_o['livingWillText'].nil?
          _oa = _o['livingWillText']
            if(_oa.is_a? Hash)
              @livingWillText = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @livingWillText =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @livingWillText = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @livingWillText.push String.from_json(_item)
                 else
                   @livingWillText.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @livingWillText = _oa
            end
          end
        if !_o['patient'].nil?
          _oa = _o['patient']
            if(_oa.is_a? Hash)
              @patient = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @patient =  Fi::Mediconsult::Core::Client::Dto::Omistaja::Patient.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @patient = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @patient.push Fi::Mediconsult::Core::Client::Dto::Omistaja::Patient.from_json(_item)
                 else
                   @patient.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @patient = _oa
            end
          end
        if !_o['livingWillStatus'].nil?
          _oa = _o['livingWillStatus']
            if(_oa.is_a? Hash)
              @livingWillStatus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @livingWillStatus =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @livingWillStatus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @livingWillStatus.push String.from_json(_item)
                 else
                   @livingWillStatus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @livingWillStatus = _oa
            end
          end
    end

    # constructs a LivingWill from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Contentgroup

  # (no documentation provided)
  class CalendarEventContentGroupDto < Fi::Mediconsult::Mediplan::Dto::Contentgroup::ContentGroup 

    # the eventModelContentGroupId
    attr_accessor :eventModelContentGroupId

    # the json hash for this CalendarEventContentGroupDto
    def to_jaxb_json_hash
      _h = super
      _h['eventModelContentGroupId'] = eventModelContentGroupId.to_jaxb_json_hash unless eventModelContentGroupId.nil?
      return _h
    end

    #initializes this CalendarEventContentGroupDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['eventModelContentGroupId'].nil?
          _oa = _o['eventModelContentGroupId']
            if(_oa.is_a? Hash)
              @eventModelContentGroupId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @eventModelContentGroupId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @eventModelContentGroupId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @eventModelContentGroupId.push Bignum.from_json(_item)
                 else
                   @eventModelContentGroupId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @eventModelContentGroupId = _oa
            end
          end
    end

    # constructs a CalendarEventContentGroupDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Title

module Data

  # (no documentation provided)
  class NimikeGroupData < Fi::Mediconsult::Core::Client::Dto::Title::Data::TitleBaseData 

    # (no documentation provided)
    attr_accessor :group
    # list od nimike items, it can be empty
    attr_accessor :data

    # the json hash for this NimikeGroupData
    def to_jaxb_json_hash
      _h = super
      _h['group'] = group.to_jaxb_json_hash unless group.nil?
      if !data.nil?
        _ha = Array.new
        data.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['data'] = _ha
      end
      return _h
    end

    #initializes this NimikeGroupData with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['group'].nil?
          _oa = _o['group']
            if(_oa.is_a? Hash)
              @group = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @group =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @group = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @group.push String.from_json(_item)
                 else
                   @group.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @group = _oa
            end
          end
        if !_o['data'].nil?
          _oa = _o['data']
            if(_oa.is_a? Hash)
              @data = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @data =  Fi::Mediconsult::Core::Client::Dto::Title::Data::ValueDescriptionData.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @data = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @data.push Fi::Mediconsult::Core::Client::Dto::Title::Data::ValueDescriptionData.from_json(_item)
                 else
                   @data.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @data = _oa
            end
          end
    end

    # constructs a NimikeGroupData from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Title

module Data

  # (no documentation provided)
  class SeurantaValueDescriptionData < Fi::Mediconsult::Core::Client::Dto::Title::Data::MittausBaseData 

    # (no documentation provided)
    attr_accessor :value
    # (no documentation provided)
    attr_accessor :description

    # the json hash for this SeurantaValueDescriptionData
    def to_jaxb_json_hash
      _h = super
      _h['value'] = value.to_jaxb_json_hash unless value.nil?
      _h['description'] = description.to_jaxb_json_hash unless description.nil?
      return _h
    end

    #initializes this SeurantaValueDescriptionData with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['value'].nil?
          _oa = _o['value']
            if(_oa.is_a? Hash)
              @value = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @value =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @value = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @value.push String.from_json(_item)
                 else
                   @value.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @value = _oa
            end
          end
        if !_o['description'].nil?
          _oa = _o['description']
            if(_oa.is_a? Hash)
              @description = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @description =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @description = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @description.push String.from_json(_item)
                 else
                   @description.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @description = _oa
            end
          end
    end

    # constructs a SeurantaValueDescriptionData from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Title

module Data

  # (no documentation provided)
  class MittausData<T extends Object> < Fi::Mediconsult::Core::Client::Dto::Title::Data::MittausBaseData 

    # (no documentation provided)
    attr_accessor :value
    # (no documentation provided)
    attr_accessor :tulos
    # (no documentation provided)
    attr_accessor :mittausTapa
    # (no documentation provided)
    attr_accessor :presentation
    # (no documentation provided)
    attr_accessor :codingTable
    # (no documentation provided)
    attr_accessor :codingTableVersion
    # (no documentation provided)
    attr_accessor :code

    # the json hash for this MittausData<T extends Object>
    def to_jaxb_json_hash
      _h = super
      _h['value'] = value.to_jaxb_json_hash unless value.nil?
      _h['tulos'] = tulos.to_jaxb_json_hash unless tulos.nil?
      _h['mittausTapa'] = mittausTapa.to_jaxb_json_hash unless mittausTapa.nil?
      _h['presentation'] = presentation.to_jaxb_json_hash unless presentation.nil?
      _h['codingTable'] = codingTable.to_jaxb_json_hash unless codingTable.nil?
      _h['codingTableVersion'] = codingTableVersion.to_jaxb_json_hash unless codingTableVersion.nil?
      _h['code'] = code.to_jaxb_json_hash unless code.nil?
      return _h
    end

    #initializes this MittausData<T extends Object> with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['value'].nil?
          _oa = _o['value']
            if(_oa.is_a? Hash)
              @value = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @value =  Object.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @value = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @value.push Object.from_json(_item)
                 else
                   @value.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @value = _oa
            end
          end
        if !_o['tulos'].nil?
          _oa = _o['tulos']
            if(_oa.is_a? Hash)
              @tulos = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tulos =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tulos = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tulos.push String.from_json(_item)
                 else
                   @tulos.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tulos = _oa
            end
          end
        if !_o['mittausTapa'].nil?
          _oa = _o['mittausTapa']
            if(_oa.is_a? Hash)
              @mittausTapa = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @mittausTapa =  Fi::Mediconsult::Core::Client::Dto::Title::View::MittausTapa.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @mittausTapa = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @mittausTapa.push Fi::Mediconsult::Core::Client::Dto::Title::View::MittausTapa.from_json(_item)
                 else
                   @mittausTapa.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @mittausTapa = _oa
            end
          end
        if !_o['presentation'].nil?
          _oa = _o['presentation']
            if(_oa.is_a? Hash)
              @presentation = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @presentation =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @presentation = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @presentation.push String.from_json(_item)
                 else
                   @presentation.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @presentation = _oa
            end
          end
        if !_o['codingTable'].nil?
          _oa = _o['codingTable']
            if(_oa.is_a? Hash)
              @codingTable = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @codingTable =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @codingTable = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @codingTable.push String.from_json(_item)
                 else
                   @codingTable.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @codingTable = _oa
            end
          end
        if !_o['codingTableVersion'].nil?
          _oa = _o['codingTableVersion']
            if(_oa.is_a? Hash)
              @codingTableVersion = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @codingTableVersion =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @codingTableVersion = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @codingTableVersion.push String.from_json(_item)
                 else
                   @codingTableVersion.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @codingTableVersion = _oa
            end
          end
        if !_o['code'].nil?
          _oa = _o['code']
            if(_oa.is_a? Hash)
              @code = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @code =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @code = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @code.push String.from_json(_item)
                 else
                   @code.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @code = _oa
            end
          end
    end

    # constructs a MittausData<T extends Object> from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Title

module Data

  # (no documentation provided)
  class SeurantaOptionsData < Fi::Mediconsult::Core::Client::Dto::Title::Data::MittausBaseData 

    # (no documentation provided)
    attr_accessor :options

    # the json hash for this SeurantaOptionsData
    def to_jaxb_json_hash
      _h = super
      if !options.nil?
        _ha = Array.new
        options.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['options'] = _ha
      end
      return _h
    end

    #initializes this SeurantaOptionsData with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['options'].nil?
          _oa = _o['options']
            if(_oa.is_a? Hash)
              @options = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @options =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @options = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @options.push String.from_json(_item)
                 else
                   @options.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @options = _oa
            end
          end
    end

    # constructs a SeurantaOptionsData from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Setup

  # (no documentation provided)
  class CourseTagDto < Fi::Mediconsult::Mediplan::Dto::Setup::CourseResourceDtoBase 


    # the json hash for this CourseTagDto
    def to_jaxb_json_hash
      _h = super
      return _h
    end

    #initializes this CourseTagDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
    end

    # constructs a CourseTagDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Title

module Data

  # (no documentation provided)
  class SeurantaStringData < Fi::Mediconsult::Core::Client::Dto::Title::Data::MittausBaseData 

    # (no documentation provided)
    attr_accessor :value

    # the json hash for this SeurantaStringData
    def to_jaxb_json_hash
      _h = super
      _h['value'] = value.to_jaxb_json_hash unless value.nil?
      return _h
    end

    #initializes this SeurantaStringData with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['value'].nil?
          _oa = _o['value']
            if(_oa.is_a? Hash)
              @value = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @value =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @value = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @value.push String.from_json(_item)
                 else
                   @value.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @value = _oa
            end
          end
    end

    # constructs a SeurantaStringData from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end
