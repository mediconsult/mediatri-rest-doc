#
# 
#
# Generated by <a href="http://enunciate.webcohesion.com">Enunciate</a>.
#
require 'json'

# adding necessary json serialization methods to standard classes.
class Object
  def to_jaxb_json_hash
    return self
  end
  def self.from_json o
    return o
  end
end

class String
  def self.from_json o
    return o
  end
end

class Boolean
  def self.from_json o
    return o
  end
end

class Numeric
  def self.from_json o
    return o
  end
end

class Time
  #json time is represented as number of milliseconds since epoch
  def to_jaxb_json_hash
    return (to_i * 1000) + (usec / 1000)
  end
  def self.from_json o
    if o.nil?
      return nil
    else
      return Time.at(o / 1000, (o % 1000) * 1000)
    end
  end
end

class Array
  def to_jaxb_json_hash
    a = Array.new
    each { | _item | a.push _item.to_jaxb_json_hash }
    return a
  end
end

class Hash
  def to_jaxb_json_hash
    h = Hash.new
    each { | _key, _value | h[_key.to_jaxb_json_hash] = _value.to_jaxb_json_hash }
    return h
  end
end


module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class Palvelutapahtuma 

    # (no documentation provided)
    attr_accessor :kirjausyksikkoId
    # (no documentation provided)
    attr_accessor :omistaja
    # (no documentation provided)
    attr_accessor :rekisteri
    # (no documentation provided)
    attr_accessor :loppuaika
    # (no documentation provided)
    attr_accessor :kirjausAika
    # (no documentation provided)
    attr_accessor :kirjausyksikko
    # (no documentation provided)
    attr_accessor :peruuntumisSyyKoodi
    # (no documentation provided)
    attr_accessor :aktiivinen
    # (no documentation provided)
    attr_accessor :palvelunantaja
    # (no documentation provided)
    attr_accessor :tapahtumalaji
    # (no documentation provided)
    attr_accessor :tyonantaja
    # (no documentation provided)
    attr_accessor :kirjaaja
    # (no documentation provided)
    attr_accessor :palveluntuottaja
    # (no documentation provided)
    attr_accessor :tyyppi
    # (no documentation provided)
    attr_accessor :id
    # (no documentation provided)
    attr_accessor :alkuaika
    # (no documentation provided)
    attr_accessor :oid
    # (no documentation provided)
    attr_accessor :luovutusHaunPalvelutapahtuma

    # the json hash for this Palvelutapahtuma
    def to_jaxb_json_hash
      _h = {}
      _h['kirjausyksikkoId'] = kirjausyksikkoId.to_jaxb_json_hash unless kirjausyksikkoId.nil?
      _h['omistaja'] = omistaja.to_jaxb_json_hash unless omistaja.nil?
      _h['rekisteri'] = rekisteri.to_jaxb_json_hash unless rekisteri.nil?
      _h['loppuaika'] = loppuaika.to_jaxb_json_hash unless loppuaika.nil?
      _h['kirjausAika'] = kirjausAika.to_jaxb_json_hash unless kirjausAika.nil?
      _h['kirjausyksikko'] = kirjausyksikko.to_jaxb_json_hash unless kirjausyksikko.nil?
      _h['peruuntumisSyyKoodi'] = peruuntumisSyyKoodi.to_jaxb_json_hash unless peruuntumisSyyKoodi.nil?
      _h['aktiivinen'] = aktiivinen.to_jaxb_json_hash unless aktiivinen.nil?
      _h['palvelunantaja'] = palvelunantaja.to_jaxb_json_hash unless palvelunantaja.nil?
      _h['tapahtumalaji'] = tapahtumalaji.to_jaxb_json_hash unless tapahtumalaji.nil?
      _h['tyonantaja'] = tyonantaja.to_jaxb_json_hash unless tyonantaja.nil?
      _h['kirjaaja'] = kirjaaja.to_jaxb_json_hash unless kirjaaja.nil?
      _h['palveluntuottaja'] = palveluntuottaja.to_jaxb_json_hash unless palveluntuottaja.nil?
      _h['tyyppi'] = tyyppi.to_jaxb_json_hash unless tyyppi.nil?
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['alkuaika'] = alkuaika.to_jaxb_json_hash unless alkuaika.nil?
      _h['oid'] = oid.to_jaxb_json_hash unless oid.nil?
      _h['luovutusHaunPalvelutapahtuma'] = luovutusHaunPalvelutapahtuma.to_jaxb_json_hash unless luovutusHaunPalvelutapahtuma.nil?
      return _h
    end

    # the json (string form) for this Palvelutapahtuma
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Palvelutapahtuma with a json hash
    def init_jaxb_json_hash(_o)
      @kirjausyksikkoId = Fixnum.from_json(_o['kirjausyksikkoId']) unless _o['kirjausyksikkoId'].nil?
      @omistaja = Fixnum.from_json(_o['omistaja']) unless _o['omistaja'].nil?
      @rekisteri = String.from_json(_o['rekisteri']) unless _o['rekisteri'].nil?
      @loppuaika = Time.from_json(_o['loppuaika']) unless _o['loppuaika'].nil?
      @kirjausAika = Time.from_json(_o['kirjausAika']) unless _o['kirjausAika'].nil?
      @kirjausyksikko = Fi::Mediconsult::Core::Client::Dto::Omistaja::LazyLoadedDto.from_json(_o['kirjausyksikko']) unless _o['kirjausyksikko'].nil?
      @peruuntumisSyyKoodi = String.from_json(_o['peruuntumisSyyKoodi']) unless _o['peruuntumisSyyKoodi'].nil?
      @aktiivinen = Boolean.from_json(_o['aktiivinen']) unless _o['aktiivinen'].nil?
      @palvelunantaja = String.from_json(_o['palvelunantaja']) unless _o['palvelunantaja'].nil?
      @tapahtumalaji = String.from_json(_o['tapahtumalaji']) unless _o['tapahtumalaji'].nil?
      @tyonantaja = Fixnum.from_json(_o['tyonantaja']) unless _o['tyonantaja'].nil?
      @kirjaaja = Fixnum.from_json(_o['kirjaaja']) unless _o['kirjaaja'].nil?
      @palveluntuottaja = String.from_json(_o['palveluntuottaja']) unless _o['palveluntuottaja'].nil?
      @tyyppi = String.from_json(_o['tyyppi']) unless _o['tyyppi'].nil?
      @id = Fixnum.from_json(_o['id']) unless _o['id'].nil?
      @alkuaika = Time.from_json(_o['alkuaika']) unless _o['alkuaika'].nil?
      @oid = String.from_json(_o['oid']) unless _o['oid'].nil?
      @luovutusHaunPalvelutapahtuma = Boolean.from_json(_o['luovutusHaunPalvelutapahtuma']) unless _o['luovutusHaunPalvelutapahtuma'].nil?
    end

    # constructs a Palvelutapahtuma from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class MetadataGroup 

    # (no documentation provided)
    attr_accessor :groupID
    # (no documentation provided)
    attr_accessor :groupName
    # (no documentation provided)
    attr_accessor :startDate
    # (no documentation provided)
    attr_accessor :endDate
    # (no documentation provided)
    attr_accessor :metadata

    # the json hash for this MetadataGroup
    def to_jaxb_json_hash
      _h = {}
      _h['groupID'] = groupID.to_jaxb_json_hash unless groupID.nil?
      _h['groupName'] = groupName.to_jaxb_json_hash unless groupName.nil?
      _h['startDate'] = startDate.to_jaxb_json_hash unless startDate.nil?
      _h['endDate'] = endDate.to_jaxb_json_hash unless endDate.nil?
      if !metadata.nil?
        _ha = Array.new
        metadata.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['metadata'] = _ha
      end
      return _h
    end

    # the json (string form) for this MetadataGroup
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this MetadataGroup with a json hash
    def init_jaxb_json_hash(_o)
      @groupID = Fixnum.from_json(_o['groupID']) unless _o['groupID'].nil?
      @groupName = String.from_json(_o['groupName']) unless _o['groupName'].nil?
      @startDate = Time.from_json(_o['startDate']) unless _o['startDate'].nil?
      @endDate = Time.from_json(_o['endDate']) unless _o['endDate'].nil?
      if !_o['metadata'].nil?
        @metadata = Array.new
        _oa = _o['metadata']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @metadata.push Fi::Mediconsult::Core::Client::Dto::Metadata.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @metadata.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
    end

    # constructs a MetadataGroup from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class Riskitiedot 

    # (no documentation provided)
    attr_accessor :permissionDTO
    # (no documentation provided)
    attr_accessor :riskitiedotList
    # (no documentation provided)
    attr_accessor :omistaja

    # the json hash for this Riskitiedot
    def to_jaxb_json_hash
      _h = {}
      _h['permissionDTO'] = permissionDTO.to_jaxb_json_hash unless permissionDTO.nil?
      if !riskitiedotList.nil?
        _ha = Array.new
        riskitiedotList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['riskitiedotList'] = _ha
      end
      _h['omistaja'] = omistaja.to_jaxb_json_hash unless omistaja.nil?
      return _h
    end

    # the json (string form) for this Riskitiedot
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Riskitiedot with a json hash
    def init_jaxb_json_hash(_o)
      @permissionDTO = Fi::Mediconsult::Core::Client::Dto::Permission.from_json(_o['permissionDTO']) unless _o['permissionDTO'].nil?
      if !_o['riskitiedotList'].nil?
        @riskitiedotList = Array.new
        _oa = _o['riskitiedotList']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @riskitiedotList.push Fi::Mediconsult::Core::Client::Dto::Riskitieto.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @riskitiedotList.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
      @omistaja = Fixnum.from_json(_o['omistaja']) unless _o['omistaja'].nil?
    end

    # constructs a Riskitiedot from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Kertomus

  # (no documentation provided)
  class MittausFormConfig 

    # (no documentation provided)
    attr_accessor :mainTitles
    # (no documentation provided)
    attr_accessor :kayttajaRyhmaId
    # (no documentation provided)
    attr_accessor :editable
    # (no documentation provided)
    attr_accessor :permission

    # the json hash for this MittausFormConfig
    def to_jaxb_json_hash
      _h = {}
      _h['mainTitles'] = mainTitles.to_jaxb_json_hash unless mainTitles.nil?
      _h['kayttajaRyhmaId'] = kayttajaRyhmaId.to_jaxb_json_hash unless kayttajaRyhmaId.nil?
      _h['editable'] = editable.to_jaxb_json_hash unless editable.nil?
      _h['permission'] = permission.to_jaxb_json_hash unless permission.nil?
      return _h
    end

    # the json (string form) for this MittausFormConfig
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this MittausFormConfig with a json hash
    def init_jaxb_json_hash(_o)
      @mainTitles = Hash.from_json(_o['mainTitles']) unless _o['mainTitles'].nil?
      @kayttajaRyhmaId = Fixnum.from_json(_o['kayttajaRyhmaId']) unless _o['kayttajaRyhmaId'].nil?
      @editable = Boolean.from_json(_o['editable']) unless _o['editable'].nil?
      @permission = Fi::Mediconsult::Core::Client::Dto::PermissionDTO.from_json(_o['permission']) unless _o['permission'].nil?
    end

    # constructs a MittausFormConfig from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Kertomus

  # (no documentation provided)
  class KertomusEntryView 

    # (no documentation provided)
    attr_accessor :id
    # (no documentation provided)
    attr_accessor :mainTitle
    # (no documentation provided)
    attr_accessor :unit
    # (no documentation provided)
    attr_accessor :formName
    # (no documentation provided)
    attr_accessor :responsible
    # (no documentation provided)
    attr_accessor :titles
    # (no documentation provided)
    attr_accessor :kirjaaja
    # (no documentation provided)
    attr_accessor :suorittaja
    # (no documentation provided)
    attr_accessor :color
    # (no documentation provided)
    attr_accessor :vanha
    # (no documentation provided)
    attr_accessor :status
    # (no documentation provided)
    attr_accessor :kirjaajaName
    # (no documentation provided)
    attr_accessor :nakyma
    # (no documentation provided)
    attr_accessor :unitId
    # (no documentation provided)
    attr_accessor :kayttajaRyhma
    # (no documentation provided)
    attr_accessor :kayttajaRyhmaId
    # (no documentation provided)
    attr_accessor :lockTime

    # the json hash for this KertomusEntryView
    def to_jaxb_json_hash
      _h = {}
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['mainTitle'] = mainTitle.to_jaxb_json_hash unless mainTitle.nil?
      _h['unit'] = unit.to_jaxb_json_hash unless unit.nil?
      _h['formName'] = formName.to_jaxb_json_hash unless formName.nil?
      _h['responsible'] = responsible.to_jaxb_json_hash unless responsible.nil?
      if !titles.nil?
        _ha = Array.new
        titles.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['titles'] = _ha
      end
      _h['kirjaaja'] = kirjaaja.to_jaxb_json_hash unless kirjaaja.nil?
      _h['suorittaja'] = suorittaja.to_jaxb_json_hash unless suorittaja.nil?
      _h['color'] = color.to_jaxb_json_hash unless color.nil?
      _h['vanha'] = vanha.to_jaxb_json_hash unless vanha.nil?
      _h['status'] = status.to_jaxb_json_hash unless status.nil?
      _h['kirjaajaName'] = kirjaajaName.to_jaxb_json_hash unless kirjaajaName.nil?
      _h['nakyma'] = nakyma.to_jaxb_json_hash unless nakyma.nil?
      _h['unitId'] = unitId.to_jaxb_json_hash unless unitId.nil?
      _h['kayttajaRyhma'] = kayttajaRyhma.to_jaxb_json_hash unless kayttajaRyhma.nil?
      _h['kayttajaRyhmaId'] = kayttajaRyhmaId.to_jaxb_json_hash unless kayttajaRyhmaId.nil?
      _h['lockTime'] = lockTime.to_jaxb_json_hash unless lockTime.nil?
      return _h
    end

    # the json (string form) for this KertomusEntryView
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this KertomusEntryView with a json hash
    def init_jaxb_json_hash(_o)
      @id = Fi::Mediconsult::Core::Client::Dto::Kertomus::KertomusID.from_json(_o['id']) unless _o['id'].nil?
      @mainTitle = String.from_json(_o['mainTitle']) unless _o['mainTitle'].nil?
      @unit = String.from_json(_o['unit']) unless _o['unit'].nil?
      @formName = String.from_json(_o['formName']) unless _o['formName'].nil?
      @responsible = String.from_json(_o['responsible']) unless _o['responsible'].nil?
      if !_o['titles'].nil?
        @titles = Array.new
        _oa = _o['titles']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @titles.push Fi::Mediconsult::Core::Client::Dto::Title::View::ViewTitleValue.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @titles.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
      @kirjaaja = Fixnum.from_json(_o['kirjaaja']) unless _o['kirjaaja'].nil?
      @suorittaja = Fixnum.from_json(_o['suorittaja']) unless _o['suorittaja'].nil?
      @color = String.from_json(_o['color']) unless _o['color'].nil?
      @vanha = Boolean.from_json(_o['vanha']) unless _o['vanha'].nil?
      @status = String.from_json(_o['status']) unless _o['status'].nil?
      @kirjaajaName = String.from_json(_o['kirjaajaName']) unless _o['kirjaajaName'].nil?
      @nakyma = String.from_json(_o['nakyma']) unless _o['nakyma'].nil?
      @unitId = Fixnum.from_json(_o['unitId']) unless _o['unitId'].nil?
      @kayttajaRyhma = String.from_json(_o['kayttajaRyhma']) unless _o['kayttajaRyhma'].nil?
      @kayttajaRyhmaId = Fixnum.from_json(_o['kayttajaRyhmaId']) unless _o['kayttajaRyhmaId'].nil?
      @lockTime = Time.from_json(_o['lockTime']) unless _o['lockTime'].nil?
    end

    # constructs a KertomusEntryView from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class Laakityskategoria 

    # (no documentation provided)
    attr_accessor :displayName
    # (no documentation provided)
    attr_accessor :code
    # (no documentation provided)
    attr_accessor :laakityshistoriaList

    # the json hash for this Laakityskategoria
    def to_jaxb_json_hash
      _h = {}
      _h['displayName'] = displayName.to_jaxb_json_hash unless displayName.nil?
      _h['code'] = code.to_jaxb_json_hash unless code.nil?
      if !laakityshistoriaList.nil?
        _ha = Array.new
        laakityshistoriaList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['laakityshistoriaList'] = _ha
      end
      return _h
    end

    # the json (string form) for this Laakityskategoria
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Laakityskategoria with a json hash
    def init_jaxb_json_hash(_o)
      @displayName = String.from_json(_o['displayName']) unless _o['displayName'].nil?
      @code = String.from_json(_o['code']) unless _o['code'].nil?
      if !_o['laakityshistoriaList'].nil?
        @laakityshistoriaList = Array.new
        _oa = _o['laakityshistoriaList']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @laakityshistoriaList.push Fi::Mediconsult::Core::Client::Dto::LaakitysHistoria.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @laakityshistoriaList.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
    end

    # constructs a Laakityskategoria from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Kertomus

  # (no documentation provided)
  class KertomusID 

    # (no documentation provided)
    attr_accessor :ownerId
    # (no documentation provided)
    attr_accessor :aika
    # (no documentation provided)
    attr_accessor :formId
    # (no documentation provided)
    attr_accessor :reportId

    # the json hash for this KertomusID
    def to_jaxb_json_hash
      _h = {}
      _h['ownerId'] = ownerId.to_jaxb_json_hash unless ownerId.nil?
      _h['aika'] = aika.to_jaxb_json_hash unless aika.nil?
      _h['formId'] = formId.to_jaxb_json_hash unless formId.nil?
      _h['reportId'] = reportId.to_jaxb_json_hash unless reportId.nil?
      return _h
    end

    # the json (string form) for this KertomusID
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this KertomusID with a json hash
    def init_jaxb_json_hash(_o)
      @ownerId = Fixnum.from_json(_o['ownerId']) unless _o['ownerId'].nil?
      @aika = Time.from_json(_o['aika']) unless _o['aika'].nil?
      @formId = Fixnum.from_json(_o['formId']) unless _o['formId'].nil?
      @reportId = Fixnum.from_json(_o['reportId']) unless _o['reportId'].nil?
    end

    # constructs a KertomusID from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Palvelupaatos

  # (no documentation provided)
  class Palvelupaatos 

    # (no documentation provided)
    attr_accessor :paatos
    # (no documentation provided)
    attr_accessor :palveluluokkaTunnus
    # (no documentation provided)
    attr_accessor :palveluluokka
    # (no documentation provided)
    attr_accessor :alkaa
    # (no documentation provided)
    attr_accessor :diaarinumero
    # (no documentation provided)
    attr_accessor :haettu
    # (no documentation provided)
    attr_accessor :huomautuksia
    # (no documentation provided)
    attr_accessor :kayttajaryhma
    # (no documentation provided)
    attr_accessor :kustannuspaikka
    # (no documentation provided)
    attr_accessor :kuukausimaksu
    # (no documentation provided)
    attr_accessor :laki
    # (no documentation provided)
    attr_accessor :laskutusalkaa
    # (no documentation provided)
    attr_accessor :loppuu
    # (no documentation provided)
    attr_accessor :luokittelu1
    # (no documentation provided)
    attr_accessor :luokittelu2
    # (no documentation provided)
    attr_accessor :maara
    # (no documentation provided)
    attr_accessor :maksuperuste
    # (no documentation provided)
    attr_accessor :mitatoija
    # (no documentation provided)
    attr_accessor :mitatoijaUser
    # (no documentation provided)
    attr_accessor :mitatointisyy
    # (no documentation provided)
    attr_accessor :mitatoity
    # (no documentation provided)
    attr_accessor :muutosaika
    # (no documentation provided)
    attr_accessor :muutospaikka
    # (no documentation provided)
    attr_accessor :paatetty
    # (no documentation provided)
    attr_accessor :paatosyksikko
    # (no documentation provided)
    attr_accessor :paatosyksikkoUnit
    # (no documentation provided)
    attr_accessor :paattaja
    # (no documentation provided)
    attr_accessor :paattajaUser
    # (no documentation provided)
    attr_accessor :paattajaryhma
    # (no documentation provided)
    attr_accessor :poistettu
    # (no documentation provided)
    attr_accessor :tarve
    # (no documentation provided)
    attr_accessor :teksti
    # (no documentation provided)
    attr_accessor :tiedonantaja
    # (no documentation provided)
    attr_accessor :tilasto1
    # (no documentation provided)
    attr_accessor :tilasto2
    # (no documentation provided)
    attr_accessor :tilasto3
    # (no documentation provided)
    attr_accessor :tulot
    # (no documentation provided)
    attr_accessor :valitettu
    # (no documentation provided)
    attr_accessor :valmistelija
    # (no documentation provided)
    attr_accessor :valmistelijaUser
    # (no documentation provided)
    attr_accessor :valmisteluyksikko
    # (no documentation provided)
    attr_accessor :valmisteluyksikkoUnit
    # (no documentation provided)
    attr_accessor :tila
    # (no documentation provided)
    attr_accessor :laatu
    # (no documentation provided)
    attr_accessor :lasnaolot
    # (no documentation provided)
    attr_accessor :palvelukeskeytykset

    # the json hash for this Palvelupaatos
    def to_jaxb_json_hash
      _h = {}
      _h['paatos'] = paatos.to_jaxb_json_hash unless paatos.nil?
      _h['palveluluokkaTunnus'] = palveluluokkaTunnus.to_jaxb_json_hash unless palveluluokkaTunnus.nil?
      _h['palveluluokka'] = palveluluokka.to_jaxb_json_hash unless palveluluokka.nil?
      _h['alkaa'] = alkaa.to_jaxb_json_hash unless alkaa.nil?
      _h['diaarinumero'] = diaarinumero.to_jaxb_json_hash unless diaarinumero.nil?
      _h['haettu'] = haettu.to_jaxb_json_hash unless haettu.nil?
      _h['huomautuksia'] = huomautuksia.to_jaxb_json_hash unless huomautuksia.nil?
      _h['kayttajaryhma'] = kayttajaryhma.to_jaxb_json_hash unless kayttajaryhma.nil?
      _h['kustannuspaikka'] = kustannuspaikka.to_jaxb_json_hash unless kustannuspaikka.nil?
      _h['kuukausimaksu'] = kuukausimaksu.to_jaxb_json_hash unless kuukausimaksu.nil?
      _h['laki'] = laki.to_jaxb_json_hash unless laki.nil?
      _h['laskutusalkaa'] = laskutusalkaa.to_jaxb_json_hash unless laskutusalkaa.nil?
      _h['loppuu'] = loppuu.to_jaxb_json_hash unless loppuu.nil?
      _h['luokittelu1'] = luokittelu1.to_jaxb_json_hash unless luokittelu1.nil?
      _h['luokittelu2'] = luokittelu2.to_jaxb_json_hash unless luokittelu2.nil?
      _h['maara'] = maara.to_jaxb_json_hash unless maara.nil?
      _h['maksuperuste'] = maksuperuste.to_jaxb_json_hash unless maksuperuste.nil?
      _h['mitatoija'] = mitatoija.to_jaxb_json_hash unless mitatoija.nil?
      _h['mitatoijaUser'] = mitatoijaUser.to_jaxb_json_hash unless mitatoijaUser.nil?
      _h['mitatointisyy'] = mitatointisyy.to_jaxb_json_hash unless mitatointisyy.nil?
      _h['mitatoity'] = mitatoity.to_jaxb_json_hash unless mitatoity.nil?
      _h['muutosaika'] = muutosaika.to_jaxb_json_hash unless muutosaika.nil?
      _h['muutospaikka'] = muutospaikka.to_jaxb_json_hash unless muutospaikka.nil?
      _h['paatetty'] = paatetty.to_jaxb_json_hash unless paatetty.nil?
      _h['paatosyksikko'] = paatosyksikko.to_jaxb_json_hash unless paatosyksikko.nil?
      _h['paatosyksikkoUnit'] = paatosyksikkoUnit.to_jaxb_json_hash unless paatosyksikkoUnit.nil?
      _h['paattaja'] = paattaja.to_jaxb_json_hash unless paattaja.nil?
      _h['paattajaUser'] = paattajaUser.to_jaxb_json_hash unless paattajaUser.nil?
      _h['paattajaryhma'] = paattajaryhma.to_jaxb_json_hash unless paattajaryhma.nil?
      _h['poistettu'] = poistettu.to_jaxb_json_hash unless poistettu.nil?
      _h['tarve'] = tarve.to_jaxb_json_hash unless tarve.nil?
      _h['teksti'] = teksti.to_jaxb_json_hash unless teksti.nil?
      _h['tiedonantaja'] = tiedonantaja.to_jaxb_json_hash unless tiedonantaja.nil?
      _h['tilasto1'] = tilasto1.to_jaxb_json_hash unless tilasto1.nil?
      _h['tilasto2'] = tilasto2.to_jaxb_json_hash unless tilasto2.nil?
      _h['tilasto3'] = tilasto3.to_jaxb_json_hash unless tilasto3.nil?
      _h['tulot'] = tulot.to_jaxb_json_hash unless tulot.nil?
      _h['valitettu'] = valitettu.to_jaxb_json_hash unless valitettu.nil?
      _h['valmistelija'] = valmistelija.to_jaxb_json_hash unless valmistelija.nil?
      _h['valmistelijaUser'] = valmistelijaUser.to_jaxb_json_hash unless valmistelijaUser.nil?
      _h['valmisteluyksikko'] = valmisteluyksikko.to_jaxb_json_hash unless valmisteluyksikko.nil?
      _h['valmisteluyksikkoUnit'] = valmisteluyksikkoUnit.to_jaxb_json_hash unless valmisteluyksikkoUnit.nil?
      _h['tila'] = tila.to_jaxb_json_hash unless tila.nil?
      _h['laatu'] = laatu.to_jaxb_json_hash unless laatu.nil?
      _h['lasnaolot'] = lasnaolot.to_jaxb_json_hash unless lasnaolot.nil?
      if !palvelukeskeytykset.nil?
        _ha = Array.new
        palvelukeskeytykset.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['palvelukeskeytykset'] = _ha
      end
      return _h
    end

    # the json (string form) for this Palvelupaatos
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Palvelupaatos with a json hash
    def init_jaxb_json_hash(_o)
      @paatos = Fixnum.from_json(_o['paatos']) unless _o['paatos'].nil?
      @palveluluokkaTunnus = String.from_json(_o['palveluluokkaTunnus']) unless _o['palveluluokkaTunnus'].nil?
      @palveluluokka = Fi::Mediconsult::Core::Client::Dto::Palvelupaatos::Palveluluokka.from_json(_o['palveluluokka']) unless _o['palveluluokka'].nil?
      @alkaa = Java::Sql::Date.from_json(_o['alkaa']) unless _o['alkaa'].nil?
      @diaarinumero = String.from_json(_o['diaarinumero']) unless _o['diaarinumero'].nil?
      @haettu = Java::Sql::Date.from_json(_o['haettu']) unless _o['haettu'].nil?
      @huomautuksia = String.from_json(_o['huomautuksia']) unless _o['huomautuksia'].nil?
      @kayttajaryhma = Fixnum.from_json(_o['kayttajaryhma']) unless _o['kayttajaryhma'].nil?
      @kustannuspaikka = Fixnum.from_json(_o['kustannuspaikka']) unless _o['kustannuspaikka'].nil?
      @kuukausimaksu = Float.from_json(_o['kuukausimaksu']) unless _o['kuukausimaksu'].nil?
      @laki = String.from_json(_o['laki']) unless _o['laki'].nil?
      @laskutusalkaa = Java::Sql::Date.from_json(_o['laskutusalkaa']) unless _o['laskutusalkaa'].nil?
      @loppuu = Java::Sql::Date.from_json(_o['loppuu']) unless _o['loppuu'].nil?
      @luokittelu1 = String.from_json(_o['luokittelu1']) unless _o['luokittelu1'].nil?
      @luokittelu2 = String.from_json(_o['luokittelu2']) unless _o['luokittelu2'].nil?
      @maara = Fixnum.from_json(_o['maara']) unless _o['maara'].nil?
      @maksuperuste = String.from_json(_o['maksuperuste']) unless _o['maksuperuste'].nil?
      @mitatoija = Fixnum.from_json(_o['mitatoija']) unless _o['mitatoija'].nil?
      @mitatoijaUser = Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_o['mitatoijaUser']) unless _o['mitatoijaUser'].nil?
      @mitatointisyy = String.from_json(_o['mitatointisyy']) unless _o['mitatointisyy'].nil?
      @mitatoity = Time.from_json(_o['mitatoity']) unless _o['mitatoity'].nil?
      @muutosaika = Time.from_json(_o['muutosaika']) unless _o['muutosaika'].nil?
      @muutospaikka = Fixnum.from_json(_o['muutospaikka']) unless _o['muutospaikka'].nil?
      @paatetty = Java::Sql::Date.from_json(_o['paatetty']) unless _o['paatetty'].nil?
      @paatosyksikko = Fixnum.from_json(_o['paatosyksikko']) unless _o['paatosyksikko'].nil?
      @paatosyksikkoUnit = Fi::Mediconsult::Core::Client::Dto::Omistaja::Unit.from_json(_o['paatosyksikkoUnit']) unless _o['paatosyksikkoUnit'].nil?
      @paattaja = Fixnum.from_json(_o['paattaja']) unless _o['paattaja'].nil?
      @paattajaUser = Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_o['paattajaUser']) unless _o['paattajaUser'].nil?
      @paattajaryhma = String.from_json(_o['paattajaryhma']) unless _o['paattajaryhma'].nil?
      @poistettu = Boolean.from_json(_o['poistettu']) unless _o['poistettu'].nil?
      @tarve = String.from_json(_o['tarve']) unless _o['tarve'].nil?
      @teksti = String.from_json(_o['teksti']) unless _o['teksti'].nil?
      @tiedonantaja = String.from_json(_o['tiedonantaja']) unless _o['tiedonantaja'].nil?
      @tilasto1 = String.from_json(_o['tilasto1']) unless _o['tilasto1'].nil?
      @tilasto2 = String.from_json(_o['tilasto2']) unless _o['tilasto2'].nil?
      @tilasto3 = String.from_json(_o['tilasto3']) unless _o['tilasto3'].nil?
      @tulot = Float.from_json(_o['tulot']) unless _o['tulot'].nil?
      @valitettu = Java::Sql::Date.from_json(_o['valitettu']) unless _o['valitettu'].nil?
      @valmistelija = Fixnum.from_json(_o['valmistelija']) unless _o['valmistelija'].nil?
      @valmistelijaUser = Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_o['valmistelijaUser']) unless _o['valmistelijaUser'].nil?
      @valmisteluyksikko = Fixnum.from_json(_o['valmisteluyksikko']) unless _o['valmisteluyksikko'].nil?
      @valmisteluyksikkoUnit = Fi::Mediconsult::Core::Client::Dto::Omistaja::Unit.from_json(_o['valmisteluyksikkoUnit']) unless _o['valmisteluyksikkoUnit'].nil?
      @tila = String.from_json(_o['tila']) unless _o['tila'].nil?
      @laatu = String.from_json(_o['laatu']) unless _o['laatu'].nil?
      @lasnaolot = Hash.from_json(_o['lasnaolot']) unless _o['lasnaolot'].nil?
      if !_o['palvelukeskeytykset'].nil?
        @palvelukeskeytykset = Array.new
        _oa = _o['palvelukeskeytykset']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @palvelukeskeytykset.push Fi::Mediconsult::Core::Client::Dto::Palvelupaatos::Palvelukeskeytys.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @palvelukeskeytykset.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
    end

    # constructs a Palvelupaatos from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Seuranta

  # (no documentation provided)
  class SeurantaConfig 

    # (no documentation provided)
    attr_accessor :writeCount
    # (no documentation provided)
    attr_accessor :configs

    # the json hash for this SeurantaConfig
    def to_jaxb_json_hash
      _h = {}
      _h['writeCount'] = writeCount.to_jaxb_json_hash unless writeCount.nil?
      if !configs.nil?
        _ha = Array.new
        configs.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['configs'] = _ha
      end
      return _h
    end

    # the json (string form) for this SeurantaConfig
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this SeurantaConfig with a json hash
    def init_jaxb_json_hash(_o)
      @writeCount = Fixnum.from_json(_o['writeCount']) unless _o['writeCount'].nil?
      if !_o['configs'].nil?
        @configs = Array.new
        _oa = _o['configs']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @configs.push Fi::Mediconsult::Core::Client::Dto::Seuranta::SeurantaFormConfig.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @configs.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
    end

    # constructs a SeurantaConfig from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Hoito

  # (no documentation provided)
  class Hoidot 

    # (no documentation provided)
    attr_accessor :permissions
    # (no documentation provided)
    attr_accessor :hoidot
    # (no documentation provided)
    attr_accessor :omistaja

    # the json hash for this Hoidot
    def to_jaxb_json_hash
      _h = {}
      if !permissions.nil?
        _ha = Array.new
        permissions.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['permissions'] = _ha
      end
      if !hoidot.nil?
        _ha = Array.new
        hoidot.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['hoidot'] = _ha
      end
      _h['omistaja'] = omistaja.to_jaxb_json_hash unless omistaja.nil?
      return _h
    end

    # the json (string form) for this Hoidot
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Hoidot with a json hash
    def init_jaxb_json_hash(_o)
      if !_o['permissions'].nil?
        @permissions = Array.new
        _oa = _o['permissions']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @permissions.push Fi::Mediconsult::Core::Client::Dto::PermissionDTO.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @permissions.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
      if !_o['hoidot'].nil?
        @hoidot = Array.new
        _oa = _o['hoidot']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @hoidot.push Fi::Mediconsult::Core::Client::Dto::Hoito::Hoito.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @hoidot.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
      @omistaja = Fixnum.from_json(_o['omistaja']) unless _o['omistaja'].nil?
    end

    # constructs a Hoidot from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Event

  # (no documentation provided)
  class EventResourceDto 

    # the id
    attr_accessor :id
    # the typeid
    attr_accessor :typeid
    # the name
    attr_accessor :name
    # the delay
    attr_accessor :delay
    # the duration
    attr_accessor :duration
    # the amount
    attr_accessor :amount
    # the required
    attr_accessor :required

    # the json hash for this EventResourceDto
    def to_jaxb_json_hash
      _h = {}
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['typeid'] = typeid.to_jaxb_json_hash unless typeid.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['delay'] = delay.to_jaxb_json_hash unless delay.nil?
      _h['duration'] = duration.to_jaxb_json_hash unless duration.nil?
      _h['amount'] = amount.to_jaxb_json_hash unless amount.nil?
      _h['required'] = required.to_jaxb_json_hash unless required.nil?
      return _h
    end

    # the json (string form) for this EventResourceDto
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this EventResourceDto with a json hash
    def init_jaxb_json_hash(_o)
      @id = Bignum.from_json(_o['id']) unless _o['id'].nil?
      @typeid = Bignum.from_json(_o['typeid']) unless _o['typeid'].nil?
      @name = String.from_json(_o['name']) unless _o['name'].nil?
      @delay = Fixnum.from_json(_o['delay']) unless _o['delay'].nil?
      @duration = Fixnum.from_json(_o['duration']) unless _o['duration'].nil?
      @amount = Fixnum.from_json(_o['amount']) unless _o['amount'].nil?
      @required = Boolean.from_json(_o['required']) unless _o['required'].nil?
    end

    # constructs a EventResourceDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Omistaja

  # (no documentation provided)
  class OmistajaList 

    # (no documentation provided)
    attr_accessor :pageSize
    # (no documentation provided)
    attr_accessor :allItemsCount
    # (no documentation provided)
    attr_accessor :pageIndex
    # (no documentation provided)
    attr_accessor :pageItemsCount

    # the json hash for this OmistajaList
    def to_jaxb_json_hash
      _h = {}
      _h['pageSize'] = pageSize.to_jaxb_json_hash unless pageSize.nil?
      _h['allItemsCount'] = allItemsCount.to_jaxb_json_hash unless allItemsCount.nil?
      _h['pageIndex'] = pageIndex.to_jaxb_json_hash unless pageIndex.nil?
      _h['pageItemsCount'] = pageItemsCount.to_jaxb_json_hash unless pageItemsCount.nil?
      return _h
    end

    # the json (string form) for this OmistajaList
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this OmistajaList with a json hash
    def init_jaxb_json_hash(_o)
      @pageSize = Fixnum.from_json(_o['pageSize']) unless _o['pageSize'].nil?
      @allItemsCount = Fixnum.from_json(_o['allItemsCount']) unless _o['allItemsCount'].nil?
      @pageIndex = Fixnum.from_json(_o['pageIndex']) unless _o['pageIndex'].nil?
      @pageItemsCount = Fixnum.from_json(_o['pageItemsCount']) unless _o['pageItemsCount'].nil?
    end

    # constructs a OmistajaList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class FysiologisetMittauksetView 

    # (no documentation provided)
    attr_accessor :patientId
    # (no documentation provided)
    attr_accessor :fysiologinenMittausList

    # the json hash for this FysiologisetMittauksetView
    def to_jaxb_json_hash
      _h = {}
      _h['patientId'] = patientId.to_jaxb_json_hash unless patientId.nil?
      if !fysiologinenMittausList.nil?
        _ha = Array.new
        fysiologinenMittausList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['fysiologinenMittausList'] = _ha
      end
      return _h
    end

    # the json (string form) for this FysiologisetMittauksetView
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this FysiologisetMittauksetView with a json hash
    def init_jaxb_json_hash(_o)
      @patientId = Fixnum.from_json(_o['patientId']) unless _o['patientId'].nil?
      if !_o['fysiologinenMittausList'].nil?
        @fysiologinenMittausList = Array.new
        _oa = _o['fysiologinenMittausList']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @fysiologinenMittausList.push Fi::Mediconsult::Core::Client::Dto::FysiologinenMittaus.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @fysiologinenMittausList.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
    end

    # constructs a FysiologisetMittauksetView from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Laakitys

  # (no documentation provided)
  class Laakitys 

    # the omistaja
    attr_accessor :omistaja
    # Maps to columns
    # &lt;ul&gt;
    # &lt;li&gt;LaakitysHistoriaPK#getOsa()
    # &lt;/ul&gt;
    attr_accessor :osa
    # Maps to columns
    # &lt;ul&gt;
    # &lt;li&gt;LaakeValmisteEntity#getNimi()
    # &lt;/ul&gt;
    attr_accessor :nimi
    # (no documentation provided)
    attr_accessor :annostus
    # (no documentation provided)
    attr_accessor :aloitusPvm
    # (no documentation provided)
    attr_accessor :lopetusPvm
    # (no documentation provided)
    attr_accessor :kokoNimi
    # (no documentation provided)
    attr_accessor :kertaAnnos
    # (no documentation provided)
    attr_accessor :toistokuvaus
    # (no documentation provided)
    attr_accessor :maaraaja
    # (no documentation provided)
    attr_accessor :kirjaaja
    # (no documentation provided)
    attr_accessor :huomautuksia
    # (no documentation provided)
    attr_accessor :ohjeet
    # (no documentation provided)
    attr_accessor :kellonajat
    # (no documentation provided)
    attr_accessor :annosteluteksti
    # (no documentation provided)
    attr_accessor :kayttotarkoitus
    # (no documentation provided)
    attr_accessor :aikayksikko
    # (no documentation provided)
    attr_accessor :antotahti
    # (no documentation provided)
    attr_accessor :laakeaineet
    # (no documentation provided)
    attr_accessor :kuitattava
    # (no documentation provided)
    attr_accessor :tauonAloitusPvm
    # (no documentation provided)
    attr_accessor :tauonLopetusPvm
    # (no documentation provided)
    attr_accessor :taukohuomautuksia
    # (no documentation provided)
    attr_accessor :reseptityyppi
    # (no documentation provided)
    attr_accessor :laakitysKayttoaiheList
    # the annettavaMaara
    attr_accessor :annettavaMaara
    # the annettavaMaksimi
    attr_accessor :annettavaMaksimi
    # the annettavaYksikko
    attr_accessor :annettavaYksikko
    # return Medicine VNR Code Maps to columns
    # &lt;ul&gt;
    # &lt;li&gt;LaakeValmisteEntity#getKoodi()
    # &lt;/ul&gt;
    attr_accessor :laake
    # the vrkmaara
    attr_accessor :vrkmaara
    # the vrkmaaraYksikko
    attr_accessor :vrkmaaraYksikko
    # (no documentation provided)
    attr_accessor :vaihtelevaAnnostus
    # (no documentation provided)
    attr_accessor :vaihteleva
    # (no documentation provided)
    attr_accessor :paino
    # (no documentation provided)
    attr_accessor :annettavaMaaraTimesPaino
    # (no documentation provided)
    attr_accessor :vrkkerratCalc
    # (no documentation provided)
    attr_accessor :vrkmaaraCalc
    # (no documentation provided)
    attr_accessor :tauot
    # (no documentation provided)
    attr_accessor :annot
    # (no documentation provided)
    attr_accessor :tavat
    # (no documentation provided)
    attr_accessor :kayttoaiheet
    # (no documentation provided)
    attr_accessor :kuittaukset

    # the json hash for this Laakitys
    def to_jaxb_json_hash
      _h = {}
      _h['omistaja'] = omistaja.to_jaxb_json_hash unless omistaja.nil?
      _h['osa'] = osa.to_jaxb_json_hash unless osa.nil?
      _h['nimi'] = nimi.to_jaxb_json_hash unless nimi.nil?
      _h['annostus'] = annostus.to_jaxb_json_hash unless annostus.nil?
      _h['aloitusPvm'] = aloitusPvm.to_jaxb_json_hash unless aloitusPvm.nil?
      _h['lopetusPvm'] = lopetusPvm.to_jaxb_json_hash unless lopetusPvm.nil?
      _h['kokoNimi'] = kokoNimi.to_jaxb_json_hash unless kokoNimi.nil?
      _h['kertaAnnos'] = kertaAnnos.to_jaxb_json_hash unless kertaAnnos.nil?
      _h['toistokuvaus'] = toistokuvaus.to_jaxb_json_hash unless toistokuvaus.nil?
      _h['maaraaja'] = maaraaja.to_jaxb_json_hash unless maaraaja.nil?
      _h['kirjaaja'] = kirjaaja.to_jaxb_json_hash unless kirjaaja.nil?
      _h['huomautuksia'] = huomautuksia.to_jaxb_json_hash unless huomautuksia.nil?
      _h['ohjeet'] = ohjeet.to_jaxb_json_hash unless ohjeet.nil?
      _h['kellonajat'] = kellonajat.to_jaxb_json_hash unless kellonajat.nil?
      _h['annosteluteksti'] = annosteluteksti.to_jaxb_json_hash unless annosteluteksti.nil?
      _h['kayttotarkoitus'] = kayttotarkoitus.to_jaxb_json_hash unless kayttotarkoitus.nil?
      _h['aikayksikko'] = aikayksikko.to_jaxb_json_hash unless aikayksikko.nil?
      _h['antotahti'] = antotahti.to_jaxb_json_hash unless antotahti.nil?
      _h['laakeaineet'] = laakeaineet.to_jaxb_json_hash unless laakeaineet.nil?
      _h['kuitattava'] = kuitattava.to_jaxb_json_hash unless kuitattava.nil?
      _h['tauonAloitusPvm'] = tauonAloitusPvm.to_jaxb_json_hash unless tauonAloitusPvm.nil?
      _h['tauonLopetusPvm'] = tauonLopetusPvm.to_jaxb_json_hash unless tauonLopetusPvm.nil?
      _h['taukohuomautuksia'] = taukohuomautuksia.to_jaxb_json_hash unless taukohuomautuksia.nil?
      _h['reseptityyppi'] = reseptityyppi.to_jaxb_json_hash unless reseptityyppi.nil?
      if !laakitysKayttoaiheList.nil?
        _ha = Array.new
        laakitysKayttoaiheList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['laakitysKayttoaiheList'] = _ha
      end
      _h['annettavaMaara'] = annettavaMaara.to_jaxb_json_hash unless annettavaMaara.nil?
      _h['annettavaMaksimi'] = annettavaMaksimi.to_jaxb_json_hash unless annettavaMaksimi.nil?
      _h['annettavaYksikko'] = annettavaYksikko.to_jaxb_json_hash unless annettavaYksikko.nil?
      _h['laake'] = laake.to_jaxb_json_hash unless laake.nil?
      _h['vrkmaara'] = vrkmaara.to_jaxb_json_hash unless vrkmaara.nil?
      _h['vrkmaaraYksikko'] = vrkmaaraYksikko.to_jaxb_json_hash unless vrkmaaraYksikko.nil?
      _h['vaihtelevaAnnostus'] = vaihtelevaAnnostus.to_jaxb_json_hash unless vaihtelevaAnnostus.nil?
      _h['vaihteleva'] = vaihteleva.to_jaxb_json_hash unless vaihteleva.nil?
      _h['paino'] = paino.to_jaxb_json_hash unless paino.nil?
      _h['annettavaMaaraTimesPaino'] = annettavaMaaraTimesPaino.to_jaxb_json_hash unless annettavaMaaraTimesPaino.nil?
      _h['vrkkerratCalc'] = vrkkerratCalc.to_jaxb_json_hash unless vrkkerratCalc.nil?
      _h['vrkmaaraCalc'] = vrkmaaraCalc.to_jaxb_json_hash unless vrkmaaraCalc.nil?
      if !tauot.nil?
        _ha = Array.new
        tauot.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['tauot'] = _ha
      end
      if !annot.nil?
        _ha = Array.new
        annot.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['annot'] = _ha
      end
      if !tavat.nil?
        _ha = Array.new
        tavat.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['tavat'] = _ha
      end
      if !kayttoaiheet.nil?
        _ha = Array.new
        kayttoaiheet.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['kayttoaiheet'] = _ha
      end
      if !kuittaukset.nil?
        _ha = Array.new
        kuittaukset.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['kuittaukset'] = _ha
      end
      return _h
    end

    # the json (string form) for this Laakitys
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Laakitys with a json hash
    def init_jaxb_json_hash(_o)
      @omistaja = Fixnum.from_json(_o['omistaja']) unless _o['omistaja'].nil?
      @osa = Fixnum.from_json(_o['osa']) unless _o['osa'].nil?
      @nimi = String.from_json(_o['nimi']) unless _o['nimi'].nil?
      @annostus = String.from_json(_o['annostus']) unless _o['annostus'].nil?
      @aloitusPvm = Time.from_json(_o['aloitusPvm']) unless _o['aloitusPvm'].nil?
      @lopetusPvm = Time.from_json(_o['lopetusPvm']) unless _o['lopetusPvm'].nil?
      @kokoNimi = String.from_json(_o['kokoNimi']) unless _o['kokoNimi'].nil?
      @kertaAnnos = String.from_json(_o['kertaAnnos']) unless _o['kertaAnnos'].nil?
      @toistokuvaus = String.from_json(_o['toistokuvaus']) unless _o['toistokuvaus'].nil?
      @maaraaja = String.from_json(_o['maaraaja']) unless _o['maaraaja'].nil?
      @kirjaaja = String.from_json(_o['kirjaaja']) unless _o['kirjaaja'].nil?
      @huomautuksia = String.from_json(_o['huomautuksia']) unless _o['huomautuksia'].nil?
      @ohjeet = String.from_json(_o['ohjeet']) unless _o['ohjeet'].nil?
      @kellonajat = String.from_json(_o['kellonajat']) unless _o['kellonajat'].nil?
      @annosteluteksti = String.from_json(_o['annosteluteksti']) unless _o['annosteluteksti'].nil?
      @kayttotarkoitus = String.from_json(_o['kayttotarkoitus']) unless _o['kayttotarkoitus'].nil?
      @aikayksikko = String.from_json(_o['aikayksikko']) unless _o['aikayksikko'].nil?
      @antotahti = String.from_json(_o['antotahti']) unless _o['antotahti'].nil?
      @laakeaineet = String.from_json(_o['laakeaineet']) unless _o['laakeaineet'].nil?
      @kuitattava = String.from_json(_o['kuitattava']) unless _o['kuitattava'].nil?
      @tauonAloitusPvm = Bignum.from_json(_o['tauonAloitusPvm']) unless _o['tauonAloitusPvm'].nil?
      @tauonLopetusPvm = Bignum.from_json(_o['tauonLopetusPvm']) unless _o['tauonLopetusPvm'].nil?
      @taukohuomautuksia = String.from_json(_o['taukohuomautuksia']) unless _o['taukohuomautuksia'].nil?
      @reseptityyppi = String.from_json(_o['reseptityyppi']) unless _o['reseptityyppi'].nil?
      if !_o['laakitysKayttoaiheList'].nil?
        @laakitysKayttoaiheList = Array.new
        _oa = _o['laakitysKayttoaiheList']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @laakitysKayttoaiheList.push Fi::Mediconsult::Core::Client::Dto::LaakitysKayttoaiheView.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @laakitysKayttoaiheList.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
      @annettavaMaara = Float.from_json(_o['annettavaMaara']) unless _o['annettavaMaara'].nil?
      @annettavaMaksimi = Float.from_json(_o['annettavaMaksimi']) unless _o['annettavaMaksimi'].nil?
      @annettavaYksikko = String.from_json(_o['annettavaYksikko']) unless _o['annettavaYksikko'].nil?
      @laake = String.from_json(_o['laake']) unless _o['laake'].nil?
      @vrkmaara = Float.from_json(_o['vrkmaara']) unless _o['vrkmaara'].nil?
      @vrkmaaraYksikko = String.from_json(_o['vrkmaaraYksikko']) unless _o['vrkmaaraYksikko'].nil?
      @vaihtelevaAnnostus = String.from_json(_o['vaihtelevaAnnostus']) unless _o['vaihtelevaAnnostus'].nil?
      @vaihteleva = Boolean.from_json(_o['vaihteleva']) unless _o['vaihteleva'].nil?
      @paino = Float.from_json(_o['paino']) unless _o['paino'].nil?
      @annettavaMaaraTimesPaino = Float.from_json(_o['annettavaMaaraTimesPaino']) unless _o['annettavaMaaraTimesPaino'].nil?
      @vrkkerratCalc = Fixnum.from_json(_o['vrkkerratCalc']) unless _o['vrkkerratCalc'].nil?
      @vrkmaaraCalc = Float.from_json(_o['vrkmaaraCalc']) unless _o['vrkmaaraCalc'].nil?
      if !_o['tauot'].nil?
        @tauot = Array.new
        _oa = _o['tauot']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @tauot.push Fi::Mediconsult::Core::Client::Dto::Laakitys::LaakitysTauko.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @tauot.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
      if !_o['annot'].nil?
        @annot = Array.new
        _oa = _o['annot']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @annot.push Fi::Mediconsult::Core::Client::Dto::LaakitysAnto.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @annot.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
      if !_o['tavat'].nil?
        @tavat = Array.new
        _oa = _o['tavat']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @tavat.push Fi::Mediconsult::Core::Client::Dto::Laakitys::LaakitysTapa.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @tavat.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
      if !_o['kayttoaiheet'].nil?
        @kayttoaiheet = Array.new
        _oa = _o['kayttoaiheet']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @kayttoaiheet.push Fi::Mediconsult::Core::Client::Dto::Laakitys::LaakitysKayttoaihe.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @kayttoaiheet.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
      if !_o['kuittaukset'].nil?
        @kuittaukset = Array.new
        _oa = _o['kuittaukset']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @kuittaukset.push Fi::Mediconsult::Core::Client::Dto::Laakitys::LaakitysKuittaus.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @kuittaukset.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
    end

    # constructs a Laakitys from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Omistaja

  # (no documentation provided)
  class OmistajaListConfig 

    # (no documentation provided)
    attr_accessor :linkedFormInfo
    # (no documentation provided)
    attr_accessor :listDataOwnerType
    # (no documentation provided)
    attr_accessor :listOwnerId
    # (no documentation provided)
    attr_accessor :listId
    # (no documentation provided)
    attr_accessor :basicInfoTitles
    # (no documentation provided)
    attr_accessor :listName

    # the json hash for this OmistajaListConfig
    def to_jaxb_json_hash
      _h = {}
      _h['linkedFormInfo'] = linkedFormInfo.to_jaxb_json_hash unless linkedFormInfo.nil?
      _h['listDataOwnerType'] = listDataOwnerType.to_jaxb_json_hash unless listDataOwnerType.nil?
      _h['listOwnerId'] = listOwnerId.to_jaxb_json_hash unless listOwnerId.nil?
      _h['listId'] = listId.to_jaxb_json_hash unless listId.nil?
      if !basicInfoTitles.nil?
        _ha = Array.new
        basicInfoTitles.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['basicInfoTitles'] = _ha
      end
      _h['listName'] = listName.to_jaxb_json_hash unless listName.nil?
      return _h
    end

    # the json (string form) for this OmistajaListConfig
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this OmistajaListConfig with a json hash
    def init_jaxb_json_hash(_o)
      @linkedFormInfo = Fi::Mediconsult::Core::Client::Dto::FormInfo.from_json(_o['linkedFormInfo']) unless _o['linkedFormInfo'].nil?
      @listDataOwnerType = Fi::Mediconsult::Core::Client::Dto::Omistaja::OwnerTypeInfo.from_json(_o['listDataOwnerType']) unless _o['listDataOwnerType'].nil?
      @listOwnerId = Fixnum.from_json(_o['listOwnerId']) unless _o['listOwnerId'].nil?
      @listId = Fixnum.from_json(_o['listId']) unless _o['listId'].nil?
      if !_o['basicInfoTitles'].nil?
        @basicInfoTitles = Array.new
        _oa = _o['basicInfoTitles']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @basicInfoTitles.push String.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @basicInfoTitles.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
      @listName = String.from_json(_o['listName']) unless _o['listName'].nil?
    end

    # constructs a OmistajaListConfig from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

  # (no documentation provided)
  class PersonListByUnitAndForm<T extends Object> 

    # (no documentation provided)
    attr_accessor :unitId
    # (no documentation provided)
    attr_accessor :people
    # (no documentation provided)
    attr_accessor :listId

    # the json hash for this PersonListByUnitAndForm<T extends Object>
    def to_jaxb_json_hash
      _h = {}
      _h['unitId'] = unitId.to_jaxb_json_hash unless unitId.nil?
      if !people.nil?
        _ha = Array.new
        people.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['people'] = _ha
      end
      _h['listId'] = listId.to_jaxb_json_hash unless listId.nil?
      return _h
    end

    # the json (string form) for this PersonListByUnitAndForm<T extends Object>
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this PersonListByUnitAndForm<T extends Object> with a json hash
    def init_jaxb_json_hash(_o)
      @unitId = Fixnum.from_json(_o['unitId']) unless _o['unitId'].nil?
      if !_o['people'].nil?
        @people = Array.new
        _oa = _o['people']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @people.push Object.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @people.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
      @listId = Fixnum.from_json(_o['listId']) unless _o['listId'].nil?
    end

    # constructs a PersonListByUnitAndForm<T extends Object> from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class Permission 

    # (no documentation provided)
    attr_accessor :permissions

    # the json hash for this Permission
    def to_jaxb_json_hash
      _h = {}
      _h['permissions'] = permissions.to_jaxb_json_hash unless permissions.nil?
      return _h
    end

    # the json (string form) for this Permission
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Permission with a json hash
    def init_jaxb_json_hash(_o)
      @permissions = Hash.from_json(_o['permissions']) unless _o['permissions'].nil?
    end

    # constructs a Permission from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class FysiologinenMittaus 

    # (no documentation provided)
    attr_accessor :type
    # (no documentation provided)
    attr_accessor :mittausInfo
    # (no documentation provided)
    attr_accessor :name

    # the json hash for this FysiologinenMittaus
    def to_jaxb_json_hash
      _h = {}
      _h['type'] = type.to_jaxb_json_hash unless type.nil?
      if !mittausInfo.nil?
        _ha = Array.new
        mittausInfo.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['mittausInfo'] = _ha
      end
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      return _h
    end

    # the json (string form) for this FysiologinenMittaus
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this FysiologinenMittaus with a json hash
    def init_jaxb_json_hash(_o)
      @type = Fixnum.from_json(_o['type']) unless _o['type'].nil?
      if !_o['mittausInfo'].nil?
        @mittausInfo = Array.new
        _oa = _o['mittausInfo']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @mittausInfo.push Fi::Mediconsult::Core::Client::Dto::Title::View::MittausBase.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @mittausInfo.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
      @name = String.from_json(_o['name']) unless _o['name'].nil?
    end

    # constructs a FysiologinenMittaus from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class Hoitojakso 

    # (no documentation provided)
    attr_accessor :patientId
    # (no documentation provided)
    attr_accessor :osa
    # (no documentation provided)
    attr_accessor :alkoi
    # (no documentation provided)
    attr_accessor :loppui
    # (no documentation provided)
    attr_accessor :yksikko
    # (no documentation provided)
    attr_accessor :kustannuspaikka
    # (no documentation provided)
    attr_accessor :maksaja
    # (no documentation provided)
    attr_accessor :maksusopimus
    # (no documentation provided)
    attr_accessor :palveluala
    # (no documentation provided)
    attr_accessor :mistatuli
    # (no documentation provided)
    attr_accessor :jatkohoito
    # (no documentation provided)
    attr_accessor :ika
    # (no documentation provided)
    attr_accessor :eihoitoilmoitusta
    # (no documentation provided)
    attr_accessor :hoitojaksolinkki
    # (no documentation provided)
    attr_accessor :poistettu
    # (no documentation provided)
    attr_accessor :muutosoikeus
    # (no documentation provided)
    attr_accessor :projekti
    # (no documentation provided)
    attr_accessor :puutteellinen
    # (no documentation provided)
    attr_accessor :tiedot
    # (no documentation provided)
    attr_accessor :editTime
    # (no documentation provided)
    attr_accessor :muutospaikka

    # the json hash for this Hoitojakso
    def to_jaxb_json_hash
      _h = {}
      _h['patientId'] = patientId.to_jaxb_json_hash unless patientId.nil?
      _h['osa'] = osa.to_jaxb_json_hash unless osa.nil?
      _h['alkoi'] = alkoi.to_jaxb_json_hash unless alkoi.nil?
      _h['loppui'] = loppui.to_jaxb_json_hash unless loppui.nil?
      _h['yksikko'] = yksikko.to_jaxb_json_hash unless yksikko.nil?
      _h['kustannuspaikka'] = kustannuspaikka.to_jaxb_json_hash unless kustannuspaikka.nil?
      _h['maksaja'] = maksaja.to_jaxb_json_hash unless maksaja.nil?
      _h['maksusopimus'] = maksusopimus.to_jaxb_json_hash unless maksusopimus.nil?
      _h['palveluala'] = palveluala.to_jaxb_json_hash unless palveluala.nil?
      _h['mistatuli'] = mistatuli.to_jaxb_json_hash unless mistatuli.nil?
      _h['jatkohoito'] = jatkohoito.to_jaxb_json_hash unless jatkohoito.nil?
      _h['ika'] = ika.to_jaxb_json_hash unless ika.nil?
      _h['eihoitoilmoitusta'] = eihoitoilmoitusta.to_jaxb_json_hash unless eihoitoilmoitusta.nil?
      _h['hoitojaksolinkki'] = hoitojaksolinkki.to_jaxb_json_hash unless hoitojaksolinkki.nil?
      _h['poistettu'] = poistettu.to_jaxb_json_hash unless poistettu.nil?
      _h['muutosoikeus'] = muutosoikeus.to_jaxb_json_hash unless muutosoikeus.nil?
      _h['projekti'] = projekti.to_jaxb_json_hash unless projekti.nil?
      _h['puutteellinen'] = puutteellinen.to_jaxb_json_hash unless puutteellinen.nil?
      if !tiedot.nil?
        _ha = Array.new
        tiedot.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['tiedot'] = _ha
      end
      _h['editTime'] = editTime.to_jaxb_json_hash unless editTime.nil?
      _h['muutospaikka'] = muutospaikka.to_jaxb_json_hash unless muutospaikka.nil?
      return _h
    end

    # the json (string form) for this Hoitojakso
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Hoitojakso with a json hash
    def init_jaxb_json_hash(_o)
      @patientId = Fixnum.from_json(_o['patientId']) unless _o['patientId'].nil?
      @osa = Fixnum.from_json(_o['osa']) unless _o['osa'].nil?
      @alkoi = Time.from_json(_o['alkoi']) unless _o['alkoi'].nil?
      @loppui = Time.from_json(_o['loppui']) unless _o['loppui'].nil?
      @yksikko = Fixnum.from_json(_o['yksikko']) unless _o['yksikko'].nil?
      @kustannuspaikka = Fixnum.from_json(_o['kustannuspaikka']) unless _o['kustannuspaikka'].nil?
      @maksaja = Fixnum.from_json(_o['maksaja']) unless _o['maksaja'].nil?
      @maksusopimus = Fixnum.from_json(_o['maksusopimus']) unless _o['maksusopimus'].nil?
      @palveluala = String.from_json(_o['palveluala']) unless _o['palveluala'].nil?
      @mistatuli = String.from_json(_o['mistatuli']) unless _o['mistatuli'].nil?
      @jatkohoito = String.from_json(_o['jatkohoito']) unless _o['jatkohoito'].nil?
      @ika = Fixnum.from_json(_o['ika']) unless _o['ika'].nil?
      @eihoitoilmoitusta = Boolean.from_json(_o['eihoitoilmoitusta']) unless _o['eihoitoilmoitusta'].nil?
      @hoitojaksolinkki = Fixnum.from_json(_o['hoitojaksolinkki']) unless _o['hoitojaksolinkki'].nil?
      @poistettu = String.from_json(_o['poistettu']) unless _o['poistettu'].nil?
      @muutosoikeus = Fixnum.from_json(_o['muutosoikeus']) unless _o['muutosoikeus'].nil?
      @projekti = Fixnum.from_json(_o['projekti']) unless _o['projekti'].nil?
      @puutteellinen = String.from_json(_o['puutteellinen']) unless _o['puutteellinen'].nil?
      if !_o['tiedot'].nil?
        @tiedot = Array.new
        _oa = _o['tiedot']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @tiedot.push String.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @tiedot.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
      @editTime = Bignum.from_json(_o['editTime']) unless _o['editTime'].nil?
      @muutospaikka = Fixnum.from_json(_o['muutospaikka']) unless _o['muutospaikka'].nil?
    end

    # constructs a Hoitojakso from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class PalvelutapahtumaList 

    # (no documentation provided)
    attr_accessor :totalCount
    # (no documentation provided)
    attr_accessor :responseItemCount
    # (no documentation provided)
    attr_accessor :entries
    # (no documentation provided)
    attr_accessor :preferredPalvelutapahtumaReference

    # the json hash for this PalvelutapahtumaList
    def to_jaxb_json_hash
      _h = {}
      _h['totalCount'] = totalCount.to_jaxb_json_hash unless totalCount.nil?
      _h['responseItemCount'] = responseItemCount.to_jaxb_json_hash unless responseItemCount.nil?
      if !entries.nil?
        _ha = Array.new
        entries.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['entries'] = _ha
      end
      if !preferredPalvelutapahtumaReference.nil?
        _ha = Array.new
        preferredPalvelutapahtumaReference.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['preferredPalvelutapahtumaReference'] = _ha
      end
      return _h
    end

    # the json (string form) for this PalvelutapahtumaList
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this PalvelutapahtumaList with a json hash
    def init_jaxb_json_hash(_o)
      @totalCount = Fixnum.from_json(_o['totalCount']) unless _o['totalCount'].nil?
      @responseItemCount = Fixnum.from_json(_o['responseItemCount']) unless _o['responseItemCount'].nil?
      if !_o['entries'].nil?
        @entries = Array.new
        _oa = _o['entries']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @entries.push Fi::Mediconsult::Core::Client::Dto::Palvelutapahtuma.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @entries.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
      if !_o['preferredPalvelutapahtumaReference'].nil?
        @preferredPalvelutapahtumaReference = Array.new
        _oa = _o['preferredPalvelutapahtumaReference']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @preferredPalvelutapahtumaReference.push Fixnum.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @preferredPalvelutapahtumaReference.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
    end

    # constructs a PalvelutapahtumaList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class Metadata 

    # (no documentation provided)
    attr_accessor :groupID
    # (no documentation provided)
    attr_accessor :groupName
    # (no documentation provided)
    attr_accessor :metadataID
    # (no documentation provided)
    attr_accessor :metadataName
    # (no documentation provided)
    attr_accessor :mandatory
    # (no documentation provided)
    attr_accessor :startDate
    # (no documentation provided)
    attr_accessor :endDate

    # the json hash for this Metadata
    def to_jaxb_json_hash
      _h = {}
      _h['groupID'] = groupID.to_jaxb_json_hash unless groupID.nil?
      _h['groupName'] = groupName.to_jaxb_json_hash unless groupName.nil?
      _h['metadataID'] = metadataID.to_jaxb_json_hash unless metadataID.nil?
      _h['metadataName'] = metadataName.to_jaxb_json_hash unless metadataName.nil?
      _h['mandatory'] = mandatory.to_jaxb_json_hash unless mandatory.nil?
      _h['startDate'] = startDate.to_jaxb_json_hash unless startDate.nil?
      _h['endDate'] = endDate.to_jaxb_json_hash unless endDate.nil?
      return _h
    end

    # the json (string form) for this Metadata
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Metadata with a json hash
    def init_jaxb_json_hash(_o)
      @groupID = Fixnum.from_json(_o['groupID']) unless _o['groupID'].nil?
      @groupName = String.from_json(_o['groupName']) unless _o['groupName'].nil?
      @metadataID = Fixnum.from_json(_o['metadataID']) unless _o['metadataID'].nil?
      @metadataName = String.from_json(_o['metadataName']) unless _o['metadataName'].nil?
      @mandatory = Boolean.from_json(_o['mandatory']) unless _o['mandatory'].nil?
      @startDate = Time.from_json(_o['startDate']) unless _o['startDate'].nil?
      @endDate = Time.from_json(_o['endDate']) unless _o['endDate'].nil?
    end

    # constructs a Metadata from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Title

module Config

  # (no documentation provided)
  class ClientTitleConfig 

    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :type
    # (no documentation provided)
    attr_accessor :pakollinen
    # (no documentation provided)
    attr_accessor :onlyFromList
    # (no documentation provided)
    attr_accessor :optionsUrl
    # (no documentation provided)
    attr_accessor :editable
    # (no documentation provided)
    attr_accessor :attribute
    # (no documentation provided)
    attr_accessor :optionValues

    # the json hash for this ClientTitleConfig
    def to_jaxb_json_hash
      _h = {}
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['type'] = type.to_jaxb_json_hash unless type.nil?
      _h['pakollinen'] = pakollinen.to_jaxb_json_hash unless pakollinen.nil?
      _h['onlyFromList'] = onlyFromList.to_jaxb_json_hash unless onlyFromList.nil?
      _h['optionsUrl'] = optionsUrl.to_jaxb_json_hash unless optionsUrl.nil?
      _h['editable'] = editable.to_jaxb_json_hash unless editable.nil?
      _h['attribute'] = attribute.to_jaxb_json_hash unless attribute.nil?
      if !optionValues.nil?
        _ha = Array.new
        optionValues.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['optionValues'] = _ha
      end
      return _h
    end

    # the json (string form) for this ClientTitleConfig
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this ClientTitleConfig with a json hash
    def init_jaxb_json_hash(_o)
      @name = String.from_json(_o['name']) unless _o['name'].nil?
      @type = Fixnum.from_json(_o['type']) unless _o['type'].nil?
      @pakollinen = Boolean.from_json(_o['pakollinen']) unless _o['pakollinen'].nil?
      @onlyFromList = Boolean.from_json(_o['onlyFromList']) unless _o['onlyFromList'].nil?
      @optionsUrl = String.from_json(_o['optionsUrl']) unless _o['optionsUrl'].nil?
      @editable = Boolean.from_json(_o['editable']) unless _o['editable'].nil?
      @attribute = Fixnum.from_json(_o['attribute']) unless _o['attribute'].nil?
      if !_o['optionValues'].nil?
        @optionValues = Array.new
        _oa = _o['optionValues']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @optionValues.push Fi::Mediconsult::Core::Client::Dto::Title::View::ViewTitleValue.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @optionValues.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
    end

    # constructs a ClientTitleConfig from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class AbstractDTO 


    # the json hash for this AbstractDTO
    def to_jaxb_json_hash
      _h = {}
      return _h
    end

    # the json (string form) for this AbstractDTO
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this AbstractDTO with a json hash
    def init_jaxb_json_hash(_o)
    end

    # constructs a AbstractDTO from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class FormTypeInfo 

    # (no documentation provided)
    attr_accessor :description
    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :id

    # the json hash for this FormTypeInfo
    def to_jaxb_json_hash
      _h = {}
      _h['description'] = description.to_jaxb_json_hash unless description.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      return _h
    end

    # the json (string form) for this FormTypeInfo
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this FormTypeInfo with a json hash
    def init_jaxb_json_hash(_o)
      @description = String.from_json(_o['description']) unless _o['description'].nil?
      @name = String.from_json(_o['name']) unless _o['name'].nil?
      @id = Fixnum.from_json(_o['id']) unless _o['id'].nil?
    end

    # constructs a FormTypeInfo from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Omistaja

  # (no documentation provided)
  class SkillsInfo 

    # &lt;code&gt;true&lt;/code&gt; if basic information loaded, otherwise &lt;code&gt;false&lt;/code&gt;
    attr_accessor :dataLoaded
    # If #getDataLoaded() returns &lt;code&gt;false&lt;/code&gt;
    # then this method will return URL to fetch the missing data, otherwise &lt;code&gt;null&lt;/code&gt;.
    attr_accessor :href
    # all skills
    attr_accessor :skills

    # the json hash for this SkillsInfo
    def to_jaxb_json_hash
      _h = {}
      _h['dataLoaded'] = dataLoaded.to_jaxb_json_hash unless dataLoaded.nil?
      _h['href'] = href.to_jaxb_json_hash unless href.nil?
      if !skills.nil?
        _ha = Array.new
        skills.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['skills'] = _ha
      end
      return _h
    end

    # the json (string form) for this SkillsInfo
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this SkillsInfo with a json hash
    def init_jaxb_json_hash(_o)
      @dataLoaded = Boolean.from_json(_o['dataLoaded']) unless _o['dataLoaded'].nil?
      @href = String.from_json(_o['href']) unless _o['href'].nil?
      if !_o['skills'].nil?
        @skills = Array.new
        _oa = _o['skills']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @skills.push Fi::Mediconsult::Mediplan::Dto::Worker::SkillDto.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @skills.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
    end

    # constructs a SkillsInfo from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Security

  # (no documentation provided)
  class LoginCredentials 

    # (no documentation provided)
    attr_accessor :username
    # (no documentation provided)
    attr_accessor :password
    # (no documentation provided)
    attr_accessor :domainName

    # the json hash for this LoginCredentials
    def to_jaxb_json_hash
      _h = {}
      _h['username'] = username.to_jaxb_json_hash unless username.nil?
      _h['password'] = password.to_jaxb_json_hash unless password.nil?
      _h['domainName'] = domainName.to_jaxb_json_hash unless domainName.nil?
      return _h
    end

    # the json (string form) for this LoginCredentials
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this LoginCredentials with a json hash
    def init_jaxb_json_hash(_o)
      @username = String.from_json(_o['username']) unless _o['username'].nil?
      @password = String.from_json(_o['password']) unless _o['password'].nil?
      @domainName = String.from_json(_o['domainName']) unless _o['domainName'].nil?
    end

    # constructs a LoginCredentials from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Rights

  # (no documentation provided)
  class OptimizationRightsAndSettings 

    # form
    attr_accessor :form
    # the streetAddressTitle
    attr_accessor :streetAddressTitle
    # the postOfficeTitle
    attr_accessor :postOfficeTitle
    # the travelModeTitle
    attr_accessor :travelModeTitle
    # the byFootTerm
    attr_accessor :byFootTerm
    # the byCarTerm
    attr_accessor :byCarTerm
    # the byBicycleTerm
    attr_accessor :byBicycleTerm

    # the json hash for this OptimizationRightsAndSettings
    def to_jaxb_json_hash
      _h = {}
      _h['form'] = form.to_jaxb_json_hash unless form.nil?
      _h['streetAddressTitle'] = streetAddressTitle.to_jaxb_json_hash unless streetAddressTitle.nil?
      _h['postOfficeTitle'] = postOfficeTitle.to_jaxb_json_hash unless postOfficeTitle.nil?
      _h['travelModeTitle'] = travelModeTitle.to_jaxb_json_hash unless travelModeTitle.nil?
      _h['byFootTerm'] = byFootTerm.to_jaxb_json_hash unless byFootTerm.nil?
      _h['byCarTerm'] = byCarTerm.to_jaxb_json_hash unless byCarTerm.nil?
      _h['byBicycleTerm'] = byBicycleTerm.to_jaxb_json_hash unless byBicycleTerm.nil?
      return _h
    end

    # the json (string form) for this OptimizationRightsAndSettings
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this OptimizationRightsAndSettings with a json hash
    def init_jaxb_json_hash(_o)
      @form = Fi::Mediconsult::Mediplan::Dto::Rights::FormRights.from_json(_o['form']) unless _o['form'].nil?
      @streetAddressTitle = String.from_json(_o['streetAddressTitle']) unless _o['streetAddressTitle'].nil?
      @postOfficeTitle = String.from_json(_o['postOfficeTitle']) unless _o['postOfficeTitle'].nil?
      @travelModeTitle = String.from_json(_o['travelModeTitle']) unless _o['travelModeTitle'].nil?
      @byFootTerm = String.from_json(_o['byFootTerm']) unless _o['byFootTerm'].nil?
      @byCarTerm = String.from_json(_o['byCarTerm']) unless _o['byCarTerm'].nil?
      @byBicycleTerm = String.from_json(_o['byBicycleTerm']) unless _o['byBicycleTerm'].nil?
    end

    # constructs a OptimizationRightsAndSettings from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Event

  # (no documentation provided)
  class EventCoursePeriodDto 

    # the coursePeriodId
    attr_accessor :coursePeriodId
    # the coursePeriodName
    attr_accessor :coursePeriodName
    # the coursePeriodAbbreviation
    attr_accessor :coursePeriodAbbreviation
    # the courseId
    attr_accessor :courseId
    # the courseName
    attr_accessor :courseName
    # the courseAbbreviation
    attr_accessor :courseAbbreviation

    # the json hash for this EventCoursePeriodDto
    def to_jaxb_json_hash
      _h = {}
      _h['coursePeriodId'] = coursePeriodId.to_jaxb_json_hash unless coursePeriodId.nil?
      _h['coursePeriodName'] = coursePeriodName.to_jaxb_json_hash unless coursePeriodName.nil?
      _h['coursePeriodAbbreviation'] = coursePeriodAbbreviation.to_jaxb_json_hash unless coursePeriodAbbreviation.nil?
      _h['courseId'] = courseId.to_jaxb_json_hash unless courseId.nil?
      _h['courseName'] = courseName.to_jaxb_json_hash unless courseName.nil?
      _h['courseAbbreviation'] = courseAbbreviation.to_jaxb_json_hash unless courseAbbreviation.nil?
      return _h
    end

    # the json (string form) for this EventCoursePeriodDto
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this EventCoursePeriodDto with a json hash
    def init_jaxb_json_hash(_o)
      @coursePeriodId = Bignum.from_json(_o['coursePeriodId']) unless _o['coursePeriodId'].nil?
      @coursePeriodName = String.from_json(_o['coursePeriodName']) unless _o['coursePeriodName'].nil?
      @coursePeriodAbbreviation = String.from_json(_o['coursePeriodAbbreviation']) unless _o['coursePeriodAbbreviation'].nil?
      @courseId = Bignum.from_json(_o['courseId']) unless _o['courseId'].nil?
      @courseName = String.from_json(_o['courseName']) unless _o['courseName'].nil?
      @courseAbbreviation = String.from_json(_o['courseAbbreviation']) unless _o['courseAbbreviation'].nil?
    end

    # constructs a EventCoursePeriodDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Omistaja

  # (no documentation provided)
  class LazyLoadedDto<T extends Object> 

    # (no documentation provided)
    attr_accessor :object
    # (no documentation provided)
    attr_accessor :loaded
    # (no documentation provided)
    attr_accessor :loadUrl
    # (no documentation provided)
    attr_accessor :type

    # the json hash for this LazyLoadedDto<T extends Object>
    def to_jaxb_json_hash
      _h = {}
      _h['object'] = object.to_jaxb_json_hash unless object.nil?
      _h['loaded'] = loaded.to_jaxb_json_hash unless loaded.nil?
      _h['loadUrl'] = loadUrl.to_jaxb_json_hash unless loadUrl.nil?
      _h['type'] = type.to_jaxb_json_hash unless type.nil?
      return _h
    end

    # the json (string form) for this LazyLoadedDto<T extends Object>
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this LazyLoadedDto<T extends Object> with a json hash
    def init_jaxb_json_hash(_o)
      @object = Object.from_json(_o['object']) unless _o['object'].nil?
      @loaded = Boolean.from_json(_o['loaded']) unless _o['loaded'].nil?
      @loadUrl = String.from_json(_o['loadUrl']) unless _o['loadUrl'].nil?
      @type = String.from_json(_o['type']) unless _o['type'].nil?
    end

    # constructs a LazyLoadedDto<T extends Object> from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Kertomus

  # (no documentation provided)
  class KertomusFormConfig 

    # (no documentation provided)
    attr_accessor :lomake
    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :mainTitles
    # (no documentation provided)
    attr_accessor :color
    # (no documentation provided)
    attr_accessor :kayttajaRyhmaId
    # (no documentation provided)
    attr_accessor :signing

    # the json hash for this KertomusFormConfig
    def to_jaxb_json_hash
      _h = {}
      _h['lomake'] = lomake.to_jaxb_json_hash unless lomake.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      if !mainTitles.nil?
        _ha = Array.new
        mainTitles.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['mainTitles'] = _ha
      end
      _h['color'] = color.to_jaxb_json_hash unless color.nil?
      _h['kayttajaRyhmaId'] = kayttajaRyhmaId.to_jaxb_json_hash unless kayttajaRyhmaId.nil?
      _h['signing'] = signing.to_jaxb_json_hash unless signing.nil?
      return _h
    end

    # the json (string form) for this KertomusFormConfig
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this KertomusFormConfig with a json hash
    def init_jaxb_json_hash(_o)
      @lomake = Fixnum.from_json(_o['lomake']) unless _o['lomake'].nil?
      @name = String.from_json(_o['name']) unless _o['name'].nil?
      if !_o['mainTitles'].nil?
        @mainTitles = Array.new
        _oa = _o['mainTitles']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @mainTitles.push String.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @mainTitles.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
      @color = String.from_json(_o['color']) unless _o['color'].nil?
      @kayttajaRyhmaId = Fixnum.from_json(_o['kayttajaRyhmaId']) unless _o['kayttajaRyhmaId'].nil?
      @signing = Fi::Mediconsult::Core::Client::Dto::Title::Config::ClientTitleConfig.from_json(_o['signing']) unless _o['signing'].nil?
    end

    # constructs a KertomusFormConfig from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Event

  # (no documentation provided)
  class EventMissingResourcesDto 

    # the numOfMissingWorkers
    attr_accessor :numOfMissingWorkers
    # the missingSkill
    attr_accessor :missingSkill
    # the numOfMissingEquipmentTypes
    attr_accessor :numOfMissingEquipmentTypes
    # the missingEquipmentType
    attr_accessor :missingEquipmentType
    # the numOfMissingEquipment
    attr_accessor :numOfMissingEquipment
    # the numOfRequiredEquipment
    attr_accessor :numOfRequiredEquipment
    # the numOfMissingRoomGroups
    attr_accessor :numOfMissingRoomGroups
    # the missingRoomGroup
    attr_accessor :missingRoomGroup

    # the json hash for this EventMissingResourcesDto
    def to_jaxb_json_hash
      _h = {}
      _h['numOfMissingWorkers'] = numOfMissingWorkers.to_jaxb_json_hash unless numOfMissingWorkers.nil?
      _h['missingSkill'] = missingSkill.to_jaxb_json_hash unless missingSkill.nil?
      _h['numOfMissingEquipmentTypes'] = numOfMissingEquipmentTypes.to_jaxb_json_hash unless numOfMissingEquipmentTypes.nil?
      _h['missingEquipmentType'] = missingEquipmentType.to_jaxb_json_hash unless missingEquipmentType.nil?
      _h['numOfMissingEquipment'] = numOfMissingEquipment.to_jaxb_json_hash unless numOfMissingEquipment.nil?
      _h['numOfRequiredEquipment'] = numOfRequiredEquipment.to_jaxb_json_hash unless numOfRequiredEquipment.nil?
      _h['numOfMissingRoomGroups'] = numOfMissingRoomGroups.to_jaxb_json_hash unless numOfMissingRoomGroups.nil?
      _h['missingRoomGroup'] = missingRoomGroup.to_jaxb_json_hash unless missingRoomGroup.nil?
      return _h
    end

    # the json (string form) for this EventMissingResourcesDto
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this EventMissingResourcesDto with a json hash
    def init_jaxb_json_hash(_o)
      @numOfMissingWorkers = Fixnum.from_json(_o['numOfMissingWorkers']) unless _o['numOfMissingWorkers'].nil?
      @missingSkill = Bignum.from_json(_o['missingSkill']) unless _o['missingSkill'].nil?
      @numOfMissingEquipmentTypes = Fixnum.from_json(_o['numOfMissingEquipmentTypes']) unless _o['numOfMissingEquipmentTypes'].nil?
      @missingEquipmentType = Bignum.from_json(_o['missingEquipmentType']) unless _o['missingEquipmentType'].nil?
      @numOfMissingEquipment = Fixnum.from_json(_o['numOfMissingEquipment']) unless _o['numOfMissingEquipment'].nil?
      @numOfRequiredEquipment = Fixnum.from_json(_o['numOfRequiredEquipment']) unless _o['numOfRequiredEquipment'].nil?
      @numOfMissingRoomGroups = Fixnum.from_json(_o['numOfMissingRoomGroups']) unless _o['numOfMissingRoomGroups'].nil?
      @missingRoomGroup = Bignum.from_json(_o['missingRoomGroup']) unless _o['missingRoomGroup'].nil?
    end

    # constructs a EventMissingResourcesDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Kertomus

  # (no documentation provided)
  class MittausComponentConfig 

    # List of mittaus form configs
    attr_accessor :kertomusConfigs

    # the json hash for this MittausComponentConfig
    def to_jaxb_json_hash
      _h = {}
      if !kertomusConfigs.nil?
        _ha = Array.new
        kertomusConfigs.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['kertomusConfigs'] = _ha
      end
      return _h
    end

    # the json (string form) for this MittausComponentConfig
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this MittausComponentConfig with a json hash
    def init_jaxb_json_hash(_o)
      if !_o['kertomusConfigs'].nil?
        @kertomusConfigs = Array.new
        _oa = _o['kertomusConfigs']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @kertomusConfigs.push Fi::Mediconsult::Core::Client::Dto::Kertomus::MittausFormConfig.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @kertomusConfigs.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
    end

    # constructs a MittausComponentConfig from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Security

module Dto

  # (no documentation provided)
  class CoreAuthenticationDTO 

    # Username in core. This in not unique ID. Usually maps to Omistaja.Tunnus but it&#39;s not guaranteed (with Medinet-customer login this can be anything!).
    attr_accessor :username
    # Roles grouped by unit id. Key is the unitId and value is @see UserRoleInfo Maps to UserRoleInfo
    attr_accessor :roles
    # Unit map with units long name as key
    attr_accessor :units
    # Returns roleId for current session. If roleId is null you must change role+unit using authentication-resource.
    attr_accessor :activeRole
    # Returns unitId for current session. If unitId is null you must change role+unit using authentication-resource.
    attr_accessor :activeUnit
    # Authenticated users first names. Can contain multiple names separated by spaces.
    attr_accessor :firstNames
    # Last name of the authenticated user.
    attr_accessor :lastName
    # boolean true if authentication was successful. If false, errorMessage is provided in message-key.
    attr_accessor :success
    # Error message for authentication if authentication has failed
    attr_accessor :message
    # true if authenticated user is patient-type.
    attr_accessor :patient
    # (no documentation provided)
    attr_accessor :userId
    # (no documentation provided)
    attr_accessor :developer

    # the json hash for this CoreAuthenticationDTO
    def to_jaxb_json_hash
      _h = {}
      _h['username'] = username.to_jaxb_json_hash unless username.nil?
      _h['roles'] = roles.to_jaxb_json_hash unless roles.nil?
      if !units.nil?
        _ha = Array.new
        units.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['units'] = _ha
      end
      _h['activeRole'] = activeRole.to_jaxb_json_hash unless activeRole.nil?
      _h['activeUnit'] = activeUnit.to_jaxb_json_hash unless activeUnit.nil?
      _h['firstNames'] = firstNames.to_jaxb_json_hash unless firstNames.nil?
      _h['lastName'] = lastName.to_jaxb_json_hash unless lastName.nil?
      _h['success'] = success.to_jaxb_json_hash unless success.nil?
      _h['message'] = message.to_jaxb_json_hash unless message.nil?
      _h['patient'] = patient.to_jaxb_json_hash unless patient.nil?
      _h['userId'] = userId.to_jaxb_json_hash unless userId.nil?
      _h['developer'] = developer.to_jaxb_json_hash unless developer.nil?
      return _h
    end

    # the json (string form) for this CoreAuthenticationDTO
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this CoreAuthenticationDTO with a json hash
    def init_jaxb_json_hash(_o)
      @username = String.from_json(_o['username']) unless _o['username'].nil?
      @roles = Hash.from_json(_o['roles']) unless _o['roles'].nil?
      if !_o['units'].nil?
        @units = Array.new
        _oa = _o['units']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @units.push Fi::Mediconsult::Core::Client::Dto::Omistaja::Unit.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @units.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
      @activeRole = Fixnum.from_json(_o['activeRole']) unless _o['activeRole'].nil?
      @activeUnit = Fixnum.from_json(_o['activeUnit']) unless _o['activeUnit'].nil?
      @firstNames = String.from_json(_o['firstNames']) unless _o['firstNames'].nil?
      @lastName = String.from_json(_o['lastName']) unless _o['lastName'].nil?
      @success = Boolean.from_json(_o['success']) unless _o['success'].nil?
      @message = String.from_json(_o['message']) unless _o['message'].nil?
      @patient = Boolean.from_json(_o['patient']) unless _o['patient'].nil?
      @userId = Fixnum.from_json(_o['userId']) unless _o['userId'].nil?
      @developer = Boolean.from_json(_o['developer']) unless _o['developer'].nil?
    end

    # constructs a CoreAuthenticationDTO from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class PermissionDTO<T extends Object> 

    # (no documentation provided)
    attr_accessor :view
    # (no documentation provided)
    attr_accessor :change
    # (no documentation provided)
    attr_accessor :add
    # (no documentation provided)
    attr_accessor :data
    # (no documentation provided)
    attr_accessor :remove
    # (no documentation provided)
    attr_accessor :type

    # the json hash for this PermissionDTO<T extends Object>
    def to_jaxb_json_hash
      _h = {}
      _h['view'] = view.to_jaxb_json_hash unless view.nil?
      _h['change'] = change.to_jaxb_json_hash unless change.nil?
      _h['add'] = add.to_jaxb_json_hash unless add.nil?
      _h['data'] = data.to_jaxb_json_hash unless data.nil?
      _h['remove'] = remove.to_jaxb_json_hash unless remove.nil?
      _h['type'] = type.to_jaxb_json_hash unless type.nil?
      return _h
    end

    # the json (string form) for this PermissionDTO<T extends Object>
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this PermissionDTO<T extends Object> with a json hash
    def init_jaxb_json_hash(_o)
      @view = Boolean.from_json(_o['view']) unless _o['view'].nil?
      @change = Boolean.from_json(_o['change']) unless _o['change'].nil?
      @add = Boolean.from_json(_o['add']) unless _o['add'].nil?
      @data = Object.from_json(_o['data']) unless _o['data'].nil?
      @remove = Boolean.from_json(_o['remove']) unless _o['remove'].nil?
      @type = String.from_json(_o['type']) unless _o['type'].nil?
    end

    # constructs a PermissionDTO<T extends Object> from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

  # (no documentation provided)
  class CalendarContextDto 

    # the unit
    attr_accessor :unit
    # the form
    attr_accessor :form

    # the json hash for this CalendarContextDto
    def to_jaxb_json_hash
      _h = {}
      _h['unit'] = unit.to_jaxb_json_hash unless unit.nil?
      _h['form'] = form.to_jaxb_json_hash unless form.nil?
      return _h
    end

    # the json (string form) for this CalendarContextDto
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this CalendarContextDto with a json hash
    def init_jaxb_json_hash(_o)
      @unit = Fixnum.from_json(_o['unit']) unless _o['unit'].nil?
      @form = Fixnum.from_json(_o['form']) unless _o['form'].nil?
    end

    # constructs a CalendarContextDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Rights

  # (no documentation provided)
  class CalendarDomainRightsAndSettings 

    # the name
    attr_accessor :name
    # the settings
    attr_accessor :setupForm
    # the patientList
    attr_accessor :patientList
    # the workerLists
    attr_accessor :workerLists
    # the calendarForm
    attr_accessor :calendarForm
    # the coursesForm
    attr_accessor :coursesForm
    # the workers
    attr_accessor :workerSettingsForm
    # the optimization
    attr_accessor :optimization

    # the json hash for this CalendarDomainRightsAndSettings
    def to_jaxb_json_hash
      _h = {}
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['setupForm'] = setupForm.to_jaxb_json_hash unless setupForm.nil?
      _h['patientList'] = patientList.to_jaxb_json_hash unless patientList.nil?
      if !workerLists.nil?
        _ha = Array.new
        workerLists.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['workerLists'] = _ha
      end
      _h['calendarForm'] = calendarForm.to_jaxb_json_hash unless calendarForm.nil?
      _h['coursesForm'] = coursesForm.to_jaxb_json_hash unless coursesForm.nil?
      _h['workerSettingsForm'] = workerSettingsForm.to_jaxb_json_hash unless workerSettingsForm.nil?
      _h['optimization'] = optimization.to_jaxb_json_hash unless optimization.nil?
      return _h
    end

    # the json (string form) for this CalendarDomainRightsAndSettings
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this CalendarDomainRightsAndSettings with a json hash
    def init_jaxb_json_hash(_o)
      @name = String.from_json(_o['name']) unless _o['name'].nil?
      @setupForm = Fi::Mediconsult::Mediplan::Dto::Rights::FormRights.from_json(_o['setupForm']) unless _o['setupForm'].nil?
      @patientList = Fi::Mediconsult::Mediplan::Dto::Rights::FormRights.from_json(_o['patientList']) unless _o['patientList'].nil?
      if !_o['workerLists'].nil?
        @workerLists = Array.new
        _oa = _o['workerLists']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @workerLists.push Fi::Mediconsult::Mediplan::Dto::Rights::FormRights.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @workerLists.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
      @calendarForm = Fi::Mediconsult::Mediplan::Dto::Rights::FormRights.from_json(_o['calendarForm']) unless _o['calendarForm'].nil?
      @coursesForm = Fi::Mediconsult::Mediplan::Dto::Rights::FormRights.from_json(_o['coursesForm']) unless _o['coursesForm'].nil?
      @workerSettingsForm = Fi::Mediconsult::Mediplan::Dto::Rights::FormRights.from_json(_o['workerSettingsForm']) unless _o['workerSettingsForm'].nil?
      @optimization = Fi::Mediconsult::Mediplan::Dto::Rights::OptimizationRightsAndSettings.from_json(_o['optimization']) unless _o['optimization'].nil?
    end

    # constructs a CalendarDomainRightsAndSettings from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Omistaja

  # (no documentation provided)
  class TimeInterval 

    # (no documentation provided)
    attr_accessor :endTime
    # (no documentation provided)
    attr_accessor :startTime

    # the json hash for this TimeInterval
    def to_jaxb_json_hash
      _h = {}
      _h['endTime'] = endTime.to_jaxb_json_hash unless endTime.nil?
      _h['startTime'] = startTime.to_jaxb_json_hash unless startTime.nil?
      return _h
    end

    # the json (string form) for this TimeInterval
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this TimeInterval with a json hash
    def init_jaxb_json_hash(_o)
      @endTime = Time.from_json(_o['endTime']) unless _o['endTime'].nil?
      @startTime = Time.from_json(_o['startTime']) unless _o['startTime'].nil?
    end

    # constructs a TimeInterval from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Course

  # (no documentation provided)
  class CourseCollectionDto 

    # (no documentation provided)
    attr_accessor :courses

    # the json hash for this CourseCollectionDto
    def to_jaxb_json_hash
      _h = {}
      if !courses.nil?
        _ha = Array.new
        courses.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['courses'] = _ha
      end
      return _h
    end

    # the json (string form) for this CourseCollectionDto
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this CourseCollectionDto with a json hash
    def init_jaxb_json_hash(_o)
      if !_o['courses'].nil?
        @courses = Array.new
        _oa = _o['courses']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @courses.push Fi::Mediconsult::Mediplan::Dto::Course::CourseDto.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @courses.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
    end

    # constructs a CourseCollectionDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Omistaja

  # (no documentation provided)
  class BasicInfo 

    # &lt;code&gt;true&lt;/code&gt; if basic information loaded, otherwise &lt;code&gt;false&lt;/code&gt;
    attr_accessor :dataLoaded
    # If #getDataLoaded() returns &lt;code&gt;false&lt;/code&gt;
    # then this method will return URL to fetch the missing data, otherwise &lt;code&gt;null&lt;/code&gt;.
    attr_accessor :href
    # basic info titles
    attr_accessor :titles

    # the json hash for this BasicInfo
    def to_jaxb_json_hash
      _h = {}
      _h['dataLoaded'] = dataLoaded.to_jaxb_json_hash unless dataLoaded.nil?
      _h['href'] = href.to_jaxb_json_hash unless href.nil?
      if !titles.nil?
        _ha = Array.new
        titles.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['titles'] = _ha
      end
      return _h
    end

    # the json (string form) for this BasicInfo
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this BasicInfo with a json hash
    def init_jaxb_json_hash(_o)
      @dataLoaded = Boolean.from_json(_o['dataLoaded']) unless _o['dataLoaded'].nil?
      @href = String.from_json(_o['href']) unless _o['href'].nil?
      if !_o['titles'].nil?
        @titles = Array.new
        _oa = _o['titles']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @titles.push Fi::Mediconsult::Core::Client::Dto::Title::View::ViewTitleValue.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @titles.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
    end

    # constructs a BasicInfo from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class FormInfo 

    # (no documentation provided)
    attr_accessor :fullFormTypeId
    # (no documentation provided)
    attr_accessor :formTypeInfo
    # (no documentation provided)
    attr_accessor :ownerTypeInfo
    # (no documentation provided)
    attr_accessor :formOwnerId

    # the json hash for this FormInfo
    def to_jaxb_json_hash
      _h = {}
      _h['fullFormTypeId'] = fullFormTypeId.to_jaxb_json_hash unless fullFormTypeId.nil?
      _h['formTypeInfo'] = formTypeInfo.to_jaxb_json_hash unless formTypeInfo.nil?
      _h['ownerTypeInfo'] = ownerTypeInfo.to_jaxb_json_hash unless ownerTypeInfo.nil?
      _h['formOwnerId'] = formOwnerId.to_jaxb_json_hash unless formOwnerId.nil?
      return _h
    end

    # the json (string form) for this FormInfo
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this FormInfo with a json hash
    def init_jaxb_json_hash(_o)
      @fullFormTypeId = Fixnum.from_json(_o['fullFormTypeId']) unless _o['fullFormTypeId'].nil?
      @formTypeInfo = Fi::Mediconsult::Core::Client::Dto::FormTypeInfo.from_json(_o['formTypeInfo']) unless _o['formTypeInfo'].nil?
      @ownerTypeInfo = Fi::Mediconsult::Core::Client::Dto::Omistaja::OwnerTypeInfo.from_json(_o['ownerTypeInfo']) unless _o['ownerTypeInfo'].nil?
      @formOwnerId = Fixnum.from_json(_o['formOwnerId']) unless _o['formOwnerId'].nil?
    end

    # constructs a FormInfo from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

  # (no documentation provided)
  class KuhaDtoBase 

    # (no documentation provided)
    attr_accessor :id
    # (no documentation provided)
    attr_accessor :created
    # (no documentation provided)
    attr_accessor :modified

    # the json hash for this KuhaDtoBase
    def to_jaxb_json_hash
      _h = {}
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['created'] = created.to_jaxb_json_hash unless created.nil?
      _h['modified'] = modified.to_jaxb_json_hash unless modified.nil?
      return _h
    end

    # the json (string form) for this KuhaDtoBase
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this KuhaDtoBase with a json hash
    def init_jaxb_json_hash(_o)
      @id = Bignum.from_json(_o['id']) unless _o['id'].nil?
      @created = Bignum.from_json(_o['created']) unless _o['created'].nil?
      @modified = Bignum.from_json(_o['modified']) unless _o['modified'].nil?
    end

    # constructs a KuhaDtoBase from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class Hoitosuhde 

    # (no documentation provided)
    attr_accessor :date
    # (no documentation provided)
    attr_accessor :unit
    # (no documentation provided)
    attr_accessor :patient
    # (no documentation provided)
    attr_accessor :palvelutapahtuma
    # (no documentation provided)
    attr_accessor :katselunErityinenSyy
    # (no documentation provided)
    attr_accessor :erityissuojausperustelu
    # users omistajaId
    attr_accessor :user
    # List of erityissuojausryhmat that user has access in this session. Means that user has given &quot;perustelu&quot; already and no need to ask for it.
    attr_accessor :sallitutErityissuojausryhmat

    # the json hash for this Hoitosuhde
    def to_jaxb_json_hash
      _h = {}
      _h['date'] = date.to_jaxb_json_hash unless date.nil?
      _h['unit'] = unit.to_jaxb_json_hash unless unit.nil?
      _h['patient'] = patient.to_jaxb_json_hash unless patient.nil?
      _h['palvelutapahtuma'] = palvelutapahtuma.to_jaxb_json_hash unless palvelutapahtuma.nil?
      _h['katselunErityinenSyy'] = katselunErityinenSyy.to_jaxb_json_hash unless katselunErityinenSyy.nil?
      _h['erityissuojausperustelu'] = erityissuojausperustelu.to_jaxb_json_hash unless erityissuojausperustelu.nil?
      _h['user'] = user.to_jaxb_json_hash unless user.nil?
      if !sallitutErityissuojausryhmat.nil?
        _ha = Array.new
        sallitutErityissuojausryhmat.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['sallitutErityissuojausryhmat'] = _ha
      end
      return _h
    end

    # the json (string form) for this Hoitosuhde
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Hoitosuhde with a json hash
    def init_jaxb_json_hash(_o)
      @date = Time.from_json(_o['date']) unless _o['date'].nil?
      @unit = Fixnum.from_json(_o['unit']) unless _o['unit'].nil?
      @patient = Fixnum.from_json(_o['patient']) unless _o['patient'].nil?
      @palvelutapahtuma = Fi::Mediconsult::Core::Client::Dto::Palvelutapahtuma.from_json(_o['palvelutapahtuma']) unless _o['palvelutapahtuma'].nil?
      @katselunErityinenSyy = String.from_json(_o['katselunErityinenSyy']) unless _o['katselunErityinenSyy'].nil?
      @erityissuojausperustelu = String.from_json(_o['erityissuojausperustelu']) unless _o['erityissuojausperustelu'].nil?
      @user = Fixnum.from_json(_o['user']) unless _o['user'].nil?
      if !_o['sallitutErityissuojausryhmat'].nil?
        @sallitutErityissuojausryhmat = Array.new
        _oa = _o['sallitutErityissuojausryhmat']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @sallitutErityissuojausryhmat.push String.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @sallitutErityissuojausryhmat.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
    end

    # constructs a Hoitosuhde from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class LaakitysHistoria 

    # the omistaja
    attr_accessor :omistaja
    # Maps to columns
    # &lt;ul&gt;
    # &lt;li&gt;LaakitysHistoriaPK#getOsa()
    # &lt;/ul&gt;
    attr_accessor :osa
    # Maps to columns
    # &lt;ul&gt;
    # &lt;li&gt;LaakeValmisteEntity#getNimi()
    # &lt;/ul&gt;
    attr_accessor :nimi
    # (no documentation provided)
    attr_accessor :annostus
    # (no documentation provided)
    attr_accessor :aloitusPvm
    # (no documentation provided)
    attr_accessor :lopetusPvm
    # (no documentation provided)
    attr_accessor :kokoNimi
    # (no documentation provided)
    attr_accessor :kertaAnnos
    # (no documentation provided)
    attr_accessor :toistokuvaus
    # (no documentation provided)
    attr_accessor :maaraaja
    # (no documentation provided)
    attr_accessor :kirjaaja
    # (no documentation provided)
    attr_accessor :huomautuksia
    # (no documentation provided)
    attr_accessor :ohjeet
    # (no documentation provided)
    attr_accessor :kellonajat
    # (no documentation provided)
    attr_accessor :annosteluteksti
    # (no documentation provided)
    attr_accessor :kayttotarkoitus
    # (no documentation provided)
    attr_accessor :aikayksikko
    # (no documentation provided)
    attr_accessor :antotahti
    # (no documentation provided)
    attr_accessor :laakeaineet
    # (no documentation provided)
    attr_accessor :kuitattava
    # (no documentation provided)
    attr_accessor :tauonAloitusPvm
    # (no documentation provided)
    attr_accessor :tauonLopetusPvm
    # (no documentation provided)
    attr_accessor :taukohuomautuksia
    # (no documentation provided)
    attr_accessor :reseptityyppi
    # (no documentation provided)
    attr_accessor :laakitysAntoList
    # (no documentation provided)
    attr_accessor :laakitysKayttoaiheList
    # the annettavaMaara
    attr_accessor :annettavaMaara
    # the annettavaMaksimi
    attr_accessor :annettavaMaksimi
    # the annettavaYksikko
    attr_accessor :annettavaYksikko
    # return Medicine VNR Code Maps to columns
    # &lt;ul&gt;
    # &lt;li&gt;LaakeValmisteEntity#getKoodi()
    # &lt;/ul&gt;
    attr_accessor :laake
    # the vrkmaara
    attr_accessor :vrkmaara
    # the vrkmaaraYksikko
    attr_accessor :vrkmaaraYksikko
    # (no documentation provided)
    attr_accessor :vaihtelevaAnnostus
    # (no documentation provided)
    attr_accessor :vaihteleva
    # (no documentation provided)
    attr_accessor :paino
    # (no documentation provided)
    attr_accessor :annettavaMaaraTimesPaino
    # (no documentation provided)
    attr_accessor :vrkkerratCalc
    # (no documentation provided)
    attr_accessor :vrkmaaraCalc

    # the json hash for this LaakitysHistoria
    def to_jaxb_json_hash
      _h = {}
      _h['omistaja'] = omistaja.to_jaxb_json_hash unless omistaja.nil?
      _h['osa'] = osa.to_jaxb_json_hash unless osa.nil?
      _h['nimi'] = nimi.to_jaxb_json_hash unless nimi.nil?
      _h['annostus'] = annostus.to_jaxb_json_hash unless annostus.nil?
      _h['aloitusPvm'] = aloitusPvm.to_jaxb_json_hash unless aloitusPvm.nil?
      _h['lopetusPvm'] = lopetusPvm.to_jaxb_json_hash unless lopetusPvm.nil?
      _h['kokoNimi'] = kokoNimi.to_jaxb_json_hash unless kokoNimi.nil?
      _h['kertaAnnos'] = kertaAnnos.to_jaxb_json_hash unless kertaAnnos.nil?
      _h['toistokuvaus'] = toistokuvaus.to_jaxb_json_hash unless toistokuvaus.nil?
      _h['maaraaja'] = maaraaja.to_jaxb_json_hash unless maaraaja.nil?
      _h['kirjaaja'] = kirjaaja.to_jaxb_json_hash unless kirjaaja.nil?
      _h['huomautuksia'] = huomautuksia.to_jaxb_json_hash unless huomautuksia.nil?
      _h['ohjeet'] = ohjeet.to_jaxb_json_hash unless ohjeet.nil?
      _h['kellonajat'] = kellonajat.to_jaxb_json_hash unless kellonajat.nil?
      _h['annosteluteksti'] = annosteluteksti.to_jaxb_json_hash unless annosteluteksti.nil?
      _h['kayttotarkoitus'] = kayttotarkoitus.to_jaxb_json_hash unless kayttotarkoitus.nil?
      _h['aikayksikko'] = aikayksikko.to_jaxb_json_hash unless aikayksikko.nil?
      _h['antotahti'] = antotahti.to_jaxb_json_hash unless antotahti.nil?
      _h['laakeaineet'] = laakeaineet.to_jaxb_json_hash unless laakeaineet.nil?
      _h['kuitattava'] = kuitattava.to_jaxb_json_hash unless kuitattava.nil?
      _h['tauonAloitusPvm'] = tauonAloitusPvm.to_jaxb_json_hash unless tauonAloitusPvm.nil?
      _h['tauonLopetusPvm'] = tauonLopetusPvm.to_jaxb_json_hash unless tauonLopetusPvm.nil?
      _h['taukohuomautuksia'] = taukohuomautuksia.to_jaxb_json_hash unless taukohuomautuksia.nil?
      _h['reseptityyppi'] = reseptityyppi.to_jaxb_json_hash unless reseptityyppi.nil?
      if !laakitysAntoList.nil?
        _ha = Array.new
        laakitysAntoList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['laakitysAntoList'] = _ha
      end
      if !laakitysKayttoaiheList.nil?
        _ha = Array.new
        laakitysKayttoaiheList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['laakitysKayttoaiheList'] = _ha
      end
      _h['annettavaMaara'] = annettavaMaara.to_jaxb_json_hash unless annettavaMaara.nil?
      _h['annettavaMaksimi'] = annettavaMaksimi.to_jaxb_json_hash unless annettavaMaksimi.nil?
      _h['annettavaYksikko'] = annettavaYksikko.to_jaxb_json_hash unless annettavaYksikko.nil?
      _h['laake'] = laake.to_jaxb_json_hash unless laake.nil?
      _h['vrkmaara'] = vrkmaara.to_jaxb_json_hash unless vrkmaara.nil?
      _h['vrkmaaraYksikko'] = vrkmaaraYksikko.to_jaxb_json_hash unless vrkmaaraYksikko.nil?
      _h['vaihtelevaAnnostus'] = vaihtelevaAnnostus.to_jaxb_json_hash unless vaihtelevaAnnostus.nil?
      _h['vaihteleva'] = vaihteleva.to_jaxb_json_hash unless vaihteleva.nil?
      _h['paino'] = paino.to_jaxb_json_hash unless paino.nil?
      _h['annettavaMaaraTimesPaino'] = annettavaMaaraTimesPaino.to_jaxb_json_hash unless annettavaMaaraTimesPaino.nil?
      _h['vrkkerratCalc'] = vrkkerratCalc.to_jaxb_json_hash unless vrkkerratCalc.nil?
      _h['vrkmaaraCalc'] = vrkmaaraCalc.to_jaxb_json_hash unless vrkmaaraCalc.nil?
      return _h
    end

    # the json (string form) for this LaakitysHistoria
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this LaakitysHistoria with a json hash
    def init_jaxb_json_hash(_o)
      @omistaja = Fixnum.from_json(_o['omistaja']) unless _o['omistaja'].nil?
      @osa = Fixnum.from_json(_o['osa']) unless _o['osa'].nil?
      @nimi = String.from_json(_o['nimi']) unless _o['nimi'].nil?
      @annostus = String.from_json(_o['annostus']) unless _o['annostus'].nil?
      @aloitusPvm = Time.from_json(_o['aloitusPvm']) unless _o['aloitusPvm'].nil?
      @lopetusPvm = Time.from_json(_o['lopetusPvm']) unless _o['lopetusPvm'].nil?
      @kokoNimi = String.from_json(_o['kokoNimi']) unless _o['kokoNimi'].nil?
      @kertaAnnos = String.from_json(_o['kertaAnnos']) unless _o['kertaAnnos'].nil?
      @toistokuvaus = String.from_json(_o['toistokuvaus']) unless _o['toistokuvaus'].nil?
      @maaraaja = String.from_json(_o['maaraaja']) unless _o['maaraaja'].nil?
      @kirjaaja = String.from_json(_o['kirjaaja']) unless _o['kirjaaja'].nil?
      @huomautuksia = String.from_json(_o['huomautuksia']) unless _o['huomautuksia'].nil?
      @ohjeet = String.from_json(_o['ohjeet']) unless _o['ohjeet'].nil?
      @kellonajat = String.from_json(_o['kellonajat']) unless _o['kellonajat'].nil?
      @annosteluteksti = String.from_json(_o['annosteluteksti']) unless _o['annosteluteksti'].nil?
      @kayttotarkoitus = String.from_json(_o['kayttotarkoitus']) unless _o['kayttotarkoitus'].nil?
      @aikayksikko = String.from_json(_o['aikayksikko']) unless _o['aikayksikko'].nil?
      @antotahti = String.from_json(_o['antotahti']) unless _o['antotahti'].nil?
      @laakeaineet = String.from_json(_o['laakeaineet']) unless _o['laakeaineet'].nil?
      @kuitattava = String.from_json(_o['kuitattava']) unless _o['kuitattava'].nil?
      @tauonAloitusPvm = Bignum.from_json(_o['tauonAloitusPvm']) unless _o['tauonAloitusPvm'].nil?
      @tauonLopetusPvm = Bignum.from_json(_o['tauonLopetusPvm']) unless _o['tauonLopetusPvm'].nil?
      @taukohuomautuksia = String.from_json(_o['taukohuomautuksia']) unless _o['taukohuomautuksia'].nil?
      @reseptityyppi = String.from_json(_o['reseptityyppi']) unless _o['reseptityyppi'].nil?
      if !_o['laakitysAntoList'].nil?
        @laakitysAntoList = Array.new
        _oa = _o['laakitysAntoList']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @laakitysAntoList.push Fi::Mediconsult::Core::Client::Dto::LaakitysAnto.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @laakitysAntoList.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
      if !_o['laakitysKayttoaiheList'].nil?
        @laakitysKayttoaiheList = Array.new
        _oa = _o['laakitysKayttoaiheList']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @laakitysKayttoaiheList.push Fi::Mediconsult::Core::Client::Dto::LaakitysKayttoaiheView.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @laakitysKayttoaiheList.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
      @annettavaMaara = Float.from_json(_o['annettavaMaara']) unless _o['annettavaMaara'].nil?
      @annettavaMaksimi = Float.from_json(_o['annettavaMaksimi']) unless _o['annettavaMaksimi'].nil?
      @annettavaYksikko = String.from_json(_o['annettavaYksikko']) unless _o['annettavaYksikko'].nil?
      @laake = String.from_json(_o['laake']) unless _o['laake'].nil?
      @vrkmaara = Float.from_json(_o['vrkmaara']) unless _o['vrkmaara'].nil?
      @vrkmaaraYksikko = String.from_json(_o['vrkmaaraYksikko']) unless _o['vrkmaaraYksikko'].nil?
      @vaihtelevaAnnostus = String.from_json(_o['vaihtelevaAnnostus']) unless _o['vaihtelevaAnnostus'].nil?
      @vaihteleva = Boolean.from_json(_o['vaihteleva']) unless _o['vaihteleva'].nil?
      @paino = Float.from_json(_o['paino']) unless _o['paino'].nil?
      @annettavaMaaraTimesPaino = Float.from_json(_o['annettavaMaaraTimesPaino']) unless _o['annettavaMaaraTimesPaino'].nil?
      @vrkkerratCalc = Fixnum.from_json(_o['vrkkerratCalc']) unless _o['vrkkerratCalc'].nil?
      @vrkmaaraCalc = Float.from_json(_o['vrkmaaraCalc']) unless _o['vrkmaaraCalc'].nil?
    end

    # constructs a LaakitysHistoria from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Event

  # (no documentation provided)
  class EventOverlapConflictDto 

    # the conflictId
    attr_accessor :conflictId
    # the calendarEventId
    attr_accessor :calendarEventId
    # the eventName
    attr_accessor :eventName

    # the json hash for this EventOverlapConflictDto
    def to_jaxb_json_hash
      _h = {}
      _h['conflictId'] = conflictId.to_jaxb_json_hash unless conflictId.nil?
      _h['calendarEventId'] = calendarEventId.to_jaxb_json_hash unless calendarEventId.nil?
      _h['eventName'] = eventName.to_jaxb_json_hash unless eventName.nil?
      return _h
    end

    # the json (string form) for this EventOverlapConflictDto
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this EventOverlapConflictDto with a json hash
    def init_jaxb_json_hash(_o)
      @conflictId = Bignum.from_json(_o['conflictId']) unless _o['conflictId'].nil?
      @calendarEventId = Bignum.from_json(_o['calendarEventId']) unless _o['calendarEventId'].nil?
      @eventName = String.from_json(_o['eventName']) unless _o['eventName'].nil?
    end

    # constructs a EventOverlapConflictDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class OsastolistaPaikkatieto 

    # (no documentation provided)
    attr_accessor :patient
    # (no documentation provided)
    attr_accessor :paikka
    # (no documentation provided)
    attr_accessor :tilanneKoodi
    # (no documentation provided)
    attr_accessor :ryhmaKoodit
    # (no documentation provided)
    attr_accessor :riskitietoja
    # (no documentation provided)
    attr_accessor :suunniteltu

    # the json hash for this OsastolistaPaikkatieto
    def to_jaxb_json_hash
      _h = {}
      _h['patient'] = patient.to_jaxb_json_hash unless patient.nil?
      _h['paikka'] = paikka.to_jaxb_json_hash unless paikka.nil?
      _h['tilanneKoodi'] = tilanneKoodi.to_jaxb_json_hash unless tilanneKoodi.nil?
      if !ryhmaKoodit.nil?
        _ha = Array.new
        ryhmaKoodit.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['ryhmaKoodit'] = _ha
      end
      _h['riskitietoja'] = riskitietoja.to_jaxb_json_hash unless riskitietoja.nil?
      _h['suunniteltu'] = suunniteltu.to_jaxb_json_hash unless suunniteltu.nil?
      return _h
    end

    # the json (string form) for this OsastolistaPaikkatieto
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this OsastolistaPaikkatieto with a json hash
    def init_jaxb_json_hash(_o)
      @patient = Fi::Mediconsult::Core::Client::Dto::Omistaja::Patient.from_json(_o['patient']) unless _o['patient'].nil?
      @paikka = String.from_json(_o['paikka']) unless _o['paikka'].nil?
      @tilanneKoodi = String.from_json(_o['tilanneKoodi']) unless _o['tilanneKoodi'].nil?
      if !_o['ryhmaKoodit'].nil?
        @ryhmaKoodit = Array.new
        _oa = _o['ryhmaKoodit']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @ryhmaKoodit.push String.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @ryhmaKoodit.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
      @riskitietoja = Boolean.from_json(_o['riskitietoja']) unless _o['riskitietoja'].nil?
      @suunniteltu = Boolean.from_json(_o['suunniteltu']) unless _o['suunniteltu'].nil?
    end

    # constructs a OsastolistaPaikkatieto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Event

  # (no documentation provided)
  class EventParticipantDto 

    # the id
    attr_accessor :id
    # the unit
    attr_accessor :unit
    # the name
    attr_accessor :name
    # the delay
    attr_accessor :delay
    # the duration
    attr_accessor :duration
    # the canceled
    attr_accessor :canceled
    # the description
    attr_accessor :cancellationReason
    # the conflicting
    attr_accessor :conflicting
    # the overlapConflicts
    attr_accessor :overlapConflicts
    # the basicInfoTitles
    attr_accessor :basicInfoTitles
    # the participantId
    attr_accessor :participantId
    # the removed
    attr_accessor :removed

    # the json hash for this EventParticipantDto
    def to_jaxb_json_hash
      _h = {}
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['unit'] = unit.to_jaxb_json_hash unless unit.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['delay'] = delay.to_jaxb_json_hash unless delay.nil?
      _h['duration'] = duration.to_jaxb_json_hash unless duration.nil?
      _h['canceled'] = canceled.to_jaxb_json_hash unless canceled.nil?
      _h['cancellationReason'] = cancellationReason.to_jaxb_json_hash unless cancellationReason.nil?
      _h['conflicting'] = conflicting.to_jaxb_json_hash unless conflicting.nil?
      if !overlapConflicts.nil?
        _ha = Array.new
        overlapConflicts.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['overlapConflicts'] = _ha
      end
      if !basicInfoTitles.nil?
        _ha = Array.new
        basicInfoTitles.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['basicInfoTitles'] = _ha
      end
      _h['participantId'] = participantId.to_jaxb_json_hash unless participantId.nil?
      _h['removed'] = removed.to_jaxb_json_hash unless removed.nil?
      return _h
    end

    # the json (string form) for this EventParticipantDto
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this EventParticipantDto with a json hash
    def init_jaxb_json_hash(_o)
      @id = Fixnum.from_json(_o['id']) unless _o['id'].nil?
      @unit = Fixnum.from_json(_o['unit']) unless _o['unit'].nil?
      @name = String.from_json(_o['name']) unless _o['name'].nil?
      @delay = Fixnum.from_json(_o['delay']) unless _o['delay'].nil?
      @duration = Fixnum.from_json(_o['duration']) unless _o['duration'].nil?
      @canceled = Boolean.from_json(_o['canceled']) unless _o['canceled'].nil?
      @cancellationReason = String.from_json(_o['cancellationReason']) unless _o['cancellationReason'].nil?
      @conflicting = Boolean.from_json(_o['conflicting']) unless _o['conflicting'].nil?
      if !_o['overlapConflicts'].nil?
        @overlapConflicts = Array.new
        _oa = _o['overlapConflicts']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @overlapConflicts.push Fi::Mediconsult::Mediplan::Dto::Event::EventOverlapConflictDto.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @overlapConflicts.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
      if !_o['basicInfoTitles'].nil?
        @basicInfoTitles = Array.new
        _oa = _o['basicInfoTitles']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @basicInfoTitles.push Fi::Mediconsult::Core::Client::Dto::Title::BaseTitleValue.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @basicInfoTitles.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
      @participantId = Bignum.from_json(_o['participantId']) unless _o['participantId'].nil?
      @removed = Boolean.from_json(_o['removed']) unless _o['removed'].nil?
    end

    # constructs a EventParticipantDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class LaakitysKayttoaiheView 

    # (no documentation provided)
    attr_accessor :omistaja
    # (no documentation provided)
    attr_accessor :osa
    # (no documentation provided)
    attr_accessor :rivi
    # (no documentation provided)
    attr_accessor :numero
    # (no documentation provided)
    attr_accessor :selite
    # (no documentation provided)
    attr_accessor :reseptiteksti
    # (no documentation provided)
    attr_accessor :alkupera
    # (no documentation provided)
    attr_accessor :tyyppi
    # (no documentation provided)
    attr_accessor :poistettu
    # (no documentation provided)
    attr_accessor :muutosaika
    # (no documentation provided)
    attr_accessor :muutospaikka

    # the json hash for this LaakitysKayttoaiheView
    def to_jaxb_json_hash
      _h = {}
      _h['omistaja'] = omistaja.to_jaxb_json_hash unless omistaja.nil?
      _h['osa'] = osa.to_jaxb_json_hash unless osa.nil?
      _h['rivi'] = rivi.to_jaxb_json_hash unless rivi.nil?
      _h['numero'] = numero.to_jaxb_json_hash unless numero.nil?
      _h['selite'] = selite.to_jaxb_json_hash unless selite.nil?
      _h['reseptiteksti'] = reseptiteksti.to_jaxb_json_hash unless reseptiteksti.nil?
      _h['alkupera'] = alkupera.to_jaxb_json_hash unless alkupera.nil?
      _h['tyyppi'] = tyyppi.to_jaxb_json_hash unless tyyppi.nil?
      _h['poistettu'] = poistettu.to_jaxb_json_hash unless poistettu.nil?
      _h['muutosaika'] = muutosaika.to_jaxb_json_hash unless muutosaika.nil?
      _h['muutospaikka'] = muutospaikka.to_jaxb_json_hash unless muutospaikka.nil?
      return _h
    end

    # the json (string form) for this LaakitysKayttoaiheView
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this LaakitysKayttoaiheView with a json hash
    def init_jaxb_json_hash(_o)
      @omistaja = Fixnum.from_json(_o['omistaja']) unless _o['omistaja'].nil?
      @osa = Fixnum.from_json(_o['osa']) unless _o['osa'].nil?
      @rivi = Fixnum.from_json(_o['rivi']) unless _o['rivi'].nil?
      @numero = Fixnum.from_json(_o['numero']) unless _o['numero'].nil?
      @selite = String.from_json(_o['selite']) unless _o['selite'].nil?
      @reseptiteksti = String.from_json(_o['reseptiteksti']) unless _o['reseptiteksti'].nil?
      @alkupera = Fixnum.from_json(_o['alkupera']) unless _o['alkupera'].nil?
      @tyyppi = Fixnum.from_json(_o['tyyppi']) unless _o['tyyppi'].nil?
      @poistettu = Fixnum.from_json(_o['poistettu']) unless _o['poistettu'].nil?
      @muutosaika = Time.from_json(_o['muutosaika']) unless _o['muutosaika'].nil?
      @muutospaikka = Fixnum.from_json(_o['muutospaikka']) unless _o['muutospaikka'].nil?
    end

    # constructs a LaakitysKayttoaiheView from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class Tutkimuspyynnot 

    # (no documentation provided)
    attr_accessor :patientId
    # (no documentation provided)
    attr_accessor :tutkimuspyyntoList
    # (no documentation provided)
    attr_accessor :permissionDTO

    # the json hash for this Tutkimuspyynnot
    def to_jaxb_json_hash
      _h = {}
      _h['patientId'] = patientId.to_jaxb_json_hash unless patientId.nil?
      if !tutkimuspyyntoList.nil?
        _ha = Array.new
        tutkimuspyyntoList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['tutkimuspyyntoList'] = _ha
      end
      _h['permissionDTO'] = permissionDTO.to_jaxb_json_hash unless permissionDTO.nil?
      return _h
    end

    # the json (string form) for this Tutkimuspyynnot
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Tutkimuspyynnot with a json hash
    def init_jaxb_json_hash(_o)
      @patientId = Fixnum.from_json(_o['patientId']) unless _o['patientId'].nil?
      if !_o['tutkimuspyyntoList'].nil?
        @tutkimuspyyntoList = Array.new
        _oa = _o['tutkimuspyyntoList']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @tutkimuspyyntoList.push Fi::Mediconsult::Core::Client::Dto::Tutkimuspyynto.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @tutkimuspyyntoList.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
      @permissionDTO = Fi::Mediconsult::Core::Client::Dto::Permission.from_json(_o['permissionDTO']) unless _o['permissionDTO'].nil?
    end

    # constructs a Tutkimuspyynnot from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Java

module Util

  # (no documentation provided)
  class Optional<T extends Object> 

    # (no documentation provided)
    attr_accessor :present

    # the json hash for this Optional<T extends Object>
    def to_jaxb_json_hash
      _h = {}
      _h['present'] = present.to_jaxb_json_hash unless present.nil?
      return _h
    end

    # the json (string form) for this Optional<T extends Object>
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Optional<T extends Object> with a json hash
    def init_jaxb_json_hash(_o)
      @present = Boolean.from_json(_o['present']) unless _o['present'].nil?
    end

    # constructs a Optional<T extends Object> from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class Koodisto 

    # (no documentation provided)
    attr_accessor :otsikot
    # (no documentation provided)
    attr_accessor :koodisto
    # values
    attr_accessor :values
    # key
    attr_accessor :key

    # the json hash for this Koodisto
    def to_jaxb_json_hash
      _h = {}
      if !otsikot.nil?
        _ha = Array.new
        otsikot.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['headers'] = _ha
      end
      if !koodisto.nil?
        _ha = Array.new
        koodisto.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['koodisto'] = _ha
      end
      _h['values'] = values.to_jaxb_json_hash unless values.nil?
      _h['key'] = key.to_jaxb_json_hash unless key.nil?
      return _h
    end

    # the json (string form) for this Koodisto
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Koodisto with a json hash
    def init_jaxb_json_hash(_o)
      if !_o['headers'].nil?
        @otsikot = Array.new
        _oa = _o['headers']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @otsikot.push String.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @otsikot.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
      if !_o['koodisto'].nil?
        @koodisto = Array.new
        _oa = _o['koodisto']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @koodisto.push String[].from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @koodisto.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
      @values = Hash.from_json(_o['values']) unless _o['values'].nil?
      @key = String.from_json(_o['key']) unless _o['key'].nil?
    end

    # constructs a Koodisto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Rights

  # (no documentation provided)
  class FormRights 

    # the id
    attr_accessor :id
    # the name
    attr_accessor :name
    # the ownerId
    attr_accessor :ownerId
    # the rights
    attr_accessor :rights

    # the json hash for this FormRights
    def to_jaxb_json_hash
      _h = {}
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['ownerId'] = ownerId.to_jaxb_json_hash unless ownerId.nil?
      if !rights.nil?
        _ha = Array.new
        rights.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['rights'] = _ha
      end
      return _h
    end

    # the json (string form) for this FormRights
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this FormRights with a json hash
    def init_jaxb_json_hash(_o)
      @id = Fixnum.from_json(_o['id']) unless _o['id'].nil?
      @name = String.from_json(_o['name']) unless _o['name'].nil?
      @ownerId = Fixnum.from_json(_o['ownerId']) unless _o['ownerId'].nil?
      if !_o['rights'].nil?
        @rights = Array.new
        _oa = _o['rights']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @rights.push String.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @rights.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
    end

    # constructs a FormRights from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class Osastolista 

    # (no documentation provided)
    attr_accessor :paikkatiedot
    # (no documentation provided)
    attr_accessor :nimi

    # the json hash for this Osastolista
    def to_jaxb_json_hash
      _h = {}
      if !paikkatiedot.nil?
        _ha = Array.new
        paikkatiedot.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['paikkatiedot'] = _ha
      end
      _h['nimi'] = nimi.to_jaxb_json_hash unless nimi.nil?
      return _h
    end

    # the json (string form) for this Osastolista
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Osastolista with a json hash
    def init_jaxb_json_hash(_o)
      if !_o['paikkatiedot'].nil?
        @paikkatiedot = Array.new
        _oa = _o['paikkatiedot']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @paikkatiedot.push Fi::Mediconsult::Core::Client::Dto::OsastolistaPaikkatieto.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @paikkatiedot.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
      @nimi = String.from_json(_o['nimi']) unless _o['nimi'].nil?
    end

    # constructs a Osastolista from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class Hoitotyomerkinta 

    # (no documentation provided)
    attr_accessor :merkinta
    # (no documentation provided)
    attr_accessor :vaihe
    # (no documentation provided)
    attr_accessor :otsikkokoodi
    # (no documentation provided)
    attr_accessor :komponentti
    # (no documentation provided)
    attr_accessor :luokka
    # (no documentation provided)
    attr_accessor :jarjestys
    # (no documentation provided)
    attr_accessor :teksti
    # (no documentation provided)
    attr_accessor :kirjaaja
    # (no documentation provided)
    attr_accessor :kirjausaika
    # (no documentation provided)
    attr_accessor :varmuus
    # (no documentation provided)
    attr_accessor :tilanne
    # (no documentation provided)
    attr_accessor :pysyvyys
    # (no documentation provided)
    attr_accessor :readTime

    # the json hash for this Hoitotyomerkinta
    def to_jaxb_json_hash
      _h = {}
      _h['merkinta'] = merkinta.to_jaxb_json_hash unless merkinta.nil?
      _h['vaihe'] = vaihe.to_jaxb_json_hash unless vaihe.nil?
      _h['otsikkokoodi'] = otsikkokoodi.to_jaxb_json_hash unless otsikkokoodi.nil?
      _h['komponentti'] = komponentti.to_jaxb_json_hash unless komponentti.nil?
      _h['luokka'] = luokka.to_jaxb_json_hash unless luokka.nil?
      _h['jarjestys'] = jarjestys.to_jaxb_json_hash unless jarjestys.nil?
      _h['teksti'] = teksti.to_jaxb_json_hash unless teksti.nil?
      _h['kirjaaja'] = kirjaaja.to_jaxb_json_hash unless kirjaaja.nil?
      _h['kirjausaika'] = kirjausaika.to_jaxb_json_hash unless kirjausaika.nil?
      _h['varmuus'] = varmuus.to_jaxb_json_hash unless varmuus.nil?
      _h['tilanne'] = tilanne.to_jaxb_json_hash unless tilanne.nil?
      _h['pysyvyys'] = pysyvyys.to_jaxb_json_hash unless pysyvyys.nil?
      _h['readTime'] = readTime.to_jaxb_json_hash unless readTime.nil?
      return _h
    end

    # the json (string form) for this Hoitotyomerkinta
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Hoitotyomerkinta with a json hash
    def init_jaxb_json_hash(_o)
      @merkinta = Fixnum.from_json(_o['merkinta']) unless _o['merkinta'].nil?
      @vaihe = String.from_json(_o['vaihe']) unless _o['vaihe'].nil?
      @otsikkokoodi = String.from_json(_o['otsikkokoodi']) unless _o['otsikkokoodi'].nil?
      @komponentti = String.from_json(_o['komponentti']) unless _o['komponentti'].nil?
      @luokka = String.from_json(_o['luokka']) unless _o['luokka'].nil?
      @jarjestys = Float.from_json(_o['jarjestys']) unless _o['jarjestys'].nil?
      @teksti = String.from_json(_o['teksti']) unless _o['teksti'].nil?
      @kirjaaja = Fi::Mediconsult::Core::Client::Dto::Omistaja::LazyLoadedDto.from_json(_o['kirjaaja']) unless _o['kirjaaja'].nil?
      @kirjausaika = Time.from_json(_o['kirjausaika']) unless _o['kirjausaika'].nil?
      @varmuus = String.from_json(_o['varmuus']) unless _o['varmuus'].nil?
      @tilanne = String.from_json(_o['tilanne']) unless _o['tilanne'].nil?
      @pysyvyys = String.from_json(_o['pysyvyys']) unless _o['pysyvyys'].nil?
      @readTime = Bignum.from_json(_o['readTime']) unless _o['readTime'].nil?
    end

    # constructs a Hoitotyomerkinta from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Omistaja

  # (no documentation provided)
  class GenericOmistaja 

    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :nameExtension
    # (no documentation provided)
    attr_accessor :editTime
    # (no documentation provided)
    attr_accessor :omistajaId
    # (no documentation provided)
    attr_accessor :omistajaListAvailability

    # the json hash for this GenericOmistaja
    def to_jaxb_json_hash
      _h = {}
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['nameExtension'] = nameExtension.to_jaxb_json_hash unless nameExtension.nil?
      _h['editTime'] = editTime.to_jaxb_json_hash unless editTime.nil?
      _h['omistajaId'] = omistajaId.to_jaxb_json_hash unless omistajaId.nil?
      _h['omistajaListAvailability'] = omistajaListAvailability.to_jaxb_json_hash unless omistajaListAvailability.nil?
      return _h
    end

    # the json (string form) for this GenericOmistaja
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this GenericOmistaja with a json hash
    def init_jaxb_json_hash(_o)
      @name = String.from_json(_o['name']) unless _o['name'].nil?
      @nameExtension = String.from_json(_o['nameExtension']) unless _o['nameExtension'].nil?
      @editTime = Bignum.from_json(_o['editTime']) unless _o['editTime'].nil?
      @omistajaId = Fixnum.from_json(_o['omistajaId']) unless _o['omistajaId'].nil?
      @omistajaListAvailability = Fi::Mediconsult::Core::Client::Dto::Omistaja::TimeInterval.from_json(_o['omistajaListAvailability']) unless _o['omistajaListAvailability'].nil?
    end

    # constructs a GenericOmistaja from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class Hoitotyo 

    # (no documentation provided)
    attr_accessor :id
    # (no documentation provided)
    attr_accessor :patientId
    # (no documentation provided)
    attr_accessor :locked
    # (no documentation provided)
    attr_accessor :lukitsija
    # (no documentation provided)
    attr_accessor :vastuullinen
    # (no documentation provided)
    attr_accessor :muutosaika
    # (no documentation provided)
    attr_accessor :alkaa
    # (no documentation provided)
    attr_accessor :loppuu
    # (no documentation provided)
    attr_accessor :lastEntry
    # (no documentation provided)
    attr_accessor :firstEntry
    # (no documentation provided)
    attr_accessor :previousEntry
    # (no documentation provided)
    attr_accessor :asetukset
    # (no documentation provided)
    attr_accessor :nextEntry
    # (no documentation provided)
    attr_accessor :merkinnat
    # (no documentation provided)
    attr_accessor :previousVersion
    # (no documentation provided)
    attr_accessor :nextVersion
    # (no documentation provided)
    attr_accessor :readTime

    # the json hash for this Hoitotyo
    def to_jaxb_json_hash
      _h = {}
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['patientId'] = patientId.to_jaxb_json_hash unless patientId.nil?
      _h['locked'] = locked.to_jaxb_json_hash unless locked.nil?
      _h['lukitsija'] = lukitsija.to_jaxb_json_hash unless lukitsija.nil?
      _h['vastuullinen'] = vastuullinen.to_jaxb_json_hash unless vastuullinen.nil?
      _h['muutosaika'] = muutosaika.to_jaxb_json_hash unless muutosaika.nil?
      _h['alkaa'] = alkaa.to_jaxb_json_hash unless alkaa.nil?
      _h['loppuu'] = loppuu.to_jaxb_json_hash unless loppuu.nil?
      _h['lastEntry'] = lastEntry.to_jaxb_json_hash unless lastEntry.nil?
      _h['firstEntry'] = firstEntry.to_jaxb_json_hash unless firstEntry.nil?
      _h['previousEntry'] = previousEntry.to_jaxb_json_hash unless previousEntry.nil?
      _h['asetukset'] = asetukset.to_jaxb_json_hash unless asetukset.nil?
      _h['nextEntry'] = nextEntry.to_jaxb_json_hash unless nextEntry.nil?
      if !merkinnat.nil?
        _ha = Array.new
        merkinnat.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['merkinnat'] = _ha
      end
      _h['previousVersion'] = previousVersion.to_jaxb_json_hash unless previousVersion.nil?
      _h['nextVersion'] = nextVersion.to_jaxb_json_hash unless nextVersion.nil?
      _h['readTime'] = readTime.to_jaxb_json_hash unless readTime.nil?
      return _h
    end

    # the json (string form) for this Hoitotyo
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Hoitotyo with a json hash
    def init_jaxb_json_hash(_o)
      @id = Fixnum.from_json(_o['id']) unless _o['id'].nil?
      @patientId = Fixnum.from_json(_o['patientId']) unless _o['patientId'].nil?
      @locked = Boolean.from_json(_o['locked']) unless _o['locked'].nil?
      @lukitsija = Fi::Mediconsult::Core::Client::Dto::Omistaja::LazyLoadedDto.from_json(_o['lukitsija']) unless _o['lukitsija'].nil?
      @vastuullinen = Fi::Mediconsult::Core::Client::Dto::Omistaja::LazyLoadedDto.from_json(_o['vastuullinen']) unless _o['vastuullinen'].nil?
      @muutosaika = Time.from_json(_o['muutosaika']) unless _o['muutosaika'].nil?
      @alkaa = Time.from_json(_o['alkaa']) unless _o['alkaa'].nil?
      @loppuu = Time.from_json(_o['loppuu']) unless _o['loppuu'].nil?
      @lastEntry = Fi::Mediconsult::Core::Client::Dto::Omistaja::LazyLoadedDto.from_json(_o['lastEntry']) unless _o['lastEntry'].nil?
      @firstEntry = Fi::Mediconsult::Core::Client::Dto::Omistaja::LazyLoadedDto.from_json(_o['firstEntry']) unless _o['firstEntry'].nil?
      @previousEntry = Fi::Mediconsult::Core::Client::Dto::Omistaja::LazyLoadedDto.from_json(_o['previousEntry']) unless _o['previousEntry'].nil?
      @asetukset = Fi::Mediconsult::Core::Client::Dto::Omistaja::LazyLoadedDto.from_json(_o['asetukset']) unless _o['asetukset'].nil?
      @nextEntry = Fi::Mediconsult::Core::Client::Dto::Omistaja::LazyLoadedDto.from_json(_o['nextEntry']) unless _o['nextEntry'].nil?
      if !_o['merkinnat'].nil?
        @merkinnat = Array.new
        _oa = _o['merkinnat']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @merkinnat.push Fi::Mediconsult::Core::Client::Dto::Hoitotyomerkinta.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @merkinnat.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
      @previousVersion = Fi::Mediconsult::Core::Client::Dto::Omistaja::LazyLoadedDto.from_json(_o['previousVersion']) unless _o['previousVersion'].nil?
      @nextVersion = Fi::Mediconsult::Core::Client::Dto::Omistaja::LazyLoadedDto.from_json(_o['nextVersion']) unless _o['nextVersion'].nil?
      @readTime = Bignum.from_json(_o['readTime']) unless _o['readTime'].nil?
    end

    # constructs a Hoitotyo from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Palvelupaatos

  # (no documentation provided)
  class Palveluluokka 

    # (no documentation provided)
    attr_accessor :tunnus
    # (no documentation provided)
    attr_accessor :nimi
    # (no documentation provided)
    attr_accessor :kayttajaryhma
    # (no documentation provided)
    attr_accessor :palvelunTarveOtsikko
    # (no documentation provided)
    attr_accessor :paatostekstinOtsikko
    # (no documentation provided)
    attr_accessor :lakipykalat
    # (no documentation provided)
    attr_accessor :suoritekoodi
    # (no documentation provided)
    attr_accessor :diaarinumerosarja
    # (no documentation provided)
    attr_accessor :paatosAvoin
    # (no documentation provided)
    attr_accessor :riviotsikko
    # (no documentation provided)
    attr_accessor :sarakeotsikko
    # (no documentation provided)
    attr_accessor :laskutusTapahtumienMukaisesti
    # (no documentation provided)
    attr_accessor :tukipalvelu
    # (no documentation provided)
    attr_accessor :paattajaryhmanOtsikko
    # (no documentation provided)
    attr_accessor :palvelunimikkeisto
    # (no documentation provided)
    attr_accessor :tapahtumamalli
    # (no documentation provided)
    attr_accessor :laskettavatTilat

    # the json hash for this Palveluluokka
    def to_jaxb_json_hash
      _h = {}
      _h['tunnus'] = tunnus.to_jaxb_json_hash unless tunnus.nil?
      _h['nimi'] = nimi.to_jaxb_json_hash unless nimi.nil?
      _h['kayttajaryhma'] = kayttajaryhma.to_jaxb_json_hash unless kayttajaryhma.nil?
      _h['palvelunTarveOtsikko'] = palvelunTarveOtsikko.to_jaxb_json_hash unless palvelunTarveOtsikko.nil?
      _h['paatostekstinOtsikko'] = paatostekstinOtsikko.to_jaxb_json_hash unless paatostekstinOtsikko.nil?
      if !lakipykalat.nil?
        _ha = Array.new
        lakipykalat.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['lakipykalat'] = _ha
      end
      _h['suoritekoodi'] = suoritekoodi.to_jaxb_json_hash unless suoritekoodi.nil?
      _h['diaarinumerosarja'] = diaarinumerosarja.to_jaxb_json_hash unless diaarinumerosarja.nil?
      _h['paatosAvoin'] = paatosAvoin.to_jaxb_json_hash unless paatosAvoin.nil?
      _h['riviotsikko'] = riviotsikko.to_jaxb_json_hash unless riviotsikko.nil?
      _h['sarakeotsikko'] = sarakeotsikko.to_jaxb_json_hash unless sarakeotsikko.nil?
      _h['laskutusTapahtumienMukaisesti'] = laskutusTapahtumienMukaisesti.to_jaxb_json_hash unless laskutusTapahtumienMukaisesti.nil?
      _h['tukipalvelu'] = tukipalvelu.to_jaxb_json_hash unless tukipalvelu.nil?
      _h['paattajaryhmanOtsikko'] = paattajaryhmanOtsikko.to_jaxb_json_hash unless paattajaryhmanOtsikko.nil?
      _h['palvelunimikkeisto'] = palvelunimikkeisto.to_jaxb_json_hash unless palvelunimikkeisto.nil?
      _h['tapahtumamalli'] = tapahtumamalli.to_jaxb_json_hash unless tapahtumamalli.nil?
      if !laskettavatTilat.nil?
        _ha = Array.new
        laskettavatTilat.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['laskettavatTilat'] = _ha
      end
      return _h
    end

    # the json (string form) for this Palveluluokka
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Palveluluokka with a json hash
    def init_jaxb_json_hash(_o)
      @tunnus = String.from_json(_o['tunnus']) unless _o['tunnus'].nil?
      @nimi = String.from_json(_o['nimi']) unless _o['nimi'].nil?
      @kayttajaryhma = String.from_json(_o['kayttajaryhma']) unless _o['kayttajaryhma'].nil?
      @palvelunTarveOtsikko = String.from_json(_o['palvelunTarveOtsikko']) unless _o['palvelunTarveOtsikko'].nil?
      @paatostekstinOtsikko = String.from_json(_o['paatostekstinOtsikko']) unless _o['paatostekstinOtsikko'].nil?
      if !_o['lakipykalat'].nil?
        @lakipykalat = Array.new
        _oa = _o['lakipykalat']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @lakipykalat.push String.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @lakipykalat.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
      @suoritekoodi = String.from_json(_o['suoritekoodi']) unless _o['suoritekoodi'].nil?
      @diaarinumerosarja = String.from_json(_o['diaarinumerosarja']) unless _o['diaarinumerosarja'].nil?
      @paatosAvoin = Boolean.from_json(_o['paatosAvoin']) unless _o['paatosAvoin'].nil?
      @riviotsikko = String.from_json(_o['riviotsikko']) unless _o['riviotsikko'].nil?
      @sarakeotsikko = String.from_json(_o['sarakeotsikko']) unless _o['sarakeotsikko'].nil?
      @laskutusTapahtumienMukaisesti = Boolean.from_json(_o['laskutusTapahtumienMukaisesti']) unless _o['laskutusTapahtumienMukaisesti'].nil?
      @tukipalvelu = Boolean.from_json(_o['tukipalvelu']) unless _o['tukipalvelu'].nil?
      @paattajaryhmanOtsikko = String.from_json(_o['paattajaryhmanOtsikko']) unless _o['paattajaryhmanOtsikko'].nil?
      @palvelunimikkeisto = String.from_json(_o['palvelunimikkeisto']) unless _o['palvelunimikkeisto'].nil?
      @tapahtumamalli = String.from_json(_o['tapahtumamalli']) unless _o['tapahtumamalli'].nil?
      if !_o['laskettavatTilat'].nil?
        @laskettavatTilat = Array.new
        _oa = _o['laskettavatTilat']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @laskettavatTilat.push String.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @laskettavatTilat.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
    end

    # constructs a Palveluluokka from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

  # (no documentation provided)
  class IdNamePair 

    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :id

    # the json hash for this IdNamePair
    def to_jaxb_json_hash
      _h = {}
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      return _h
    end

    # the json (string form) for this IdNamePair
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this IdNamePair with a json hash
    def init_jaxb_json_hash(_o)
      @name = String.from_json(_o['name']) unless _o['name'].nil?
      @id = Bignum.from_json(_o['id']) unless _o['id'].nil?
    end

    # constructs a IdNamePair from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class Hoitotyoasetukset 

    # (no documentation provided)
    attr_accessor :tulosluokitus
    # (no documentation provided)
    attr_accessor :hoitoprosessinVaiheKoodisto
    # (no documentation provided)
    attr_accessor :otsikkoKoodisto
    # (no documentation provided)
    attr_accessor :tarveluokitusKoodisto
    # (no documentation provided)
    attr_accessor :toimintoluokitusKoodisto

    # the json hash for this Hoitotyoasetukset
    def to_jaxb_json_hash
      _h = {}
      _h['tulosluokitus'] = tulosluokitus.to_jaxb_json_hash unless tulosluokitus.nil?
      _h['hoitoprosessinVaiheKoodisto'] = hoitoprosessinVaiheKoodisto.to_jaxb_json_hash unless hoitoprosessinVaiheKoodisto.nil?
      _h['otsikkoKoodisto'] = otsikkoKoodisto.to_jaxb_json_hash unless otsikkoKoodisto.nil?
      _h['tarveluokitusKoodisto'] = tarveluokitusKoodisto.to_jaxb_json_hash unless tarveluokitusKoodisto.nil?
      _h['toimintoluokitusKoodisto'] = toimintoluokitusKoodisto.to_jaxb_json_hash unless toimintoluokitusKoodisto.nil?
      return _h
    end

    # the json (string form) for this Hoitotyoasetukset
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Hoitotyoasetukset with a json hash
    def init_jaxb_json_hash(_o)
      @tulosluokitus = Fi::Mediconsult::Core::Client::Dto::Koodisto.from_json(_o['tulosluokitus']) unless _o['tulosluokitus'].nil?
      @hoitoprosessinVaiheKoodisto = Fi::Mediconsult::Core::Client::Dto::Koodisto.from_json(_o['hoitoprosessinVaiheKoodisto']) unless _o['hoitoprosessinVaiheKoodisto'].nil?
      @otsikkoKoodisto = Fi::Mediconsult::Core::Client::Dto::Koodisto.from_json(_o['otsikkoKoodisto']) unless _o['otsikkoKoodisto'].nil?
      @tarveluokitusKoodisto = Fi::Mediconsult::Core::Client::Dto::Koodisto.from_json(_o['tarveluokitusKoodisto']) unless _o['tarveluokitusKoodisto'].nil?
      @toimintoluokitusKoodisto = Fi::Mediconsult::Core::Client::Dto::Koodisto.from_json(_o['toimintoluokitusKoodisto']) unless _o['toimintoluokitusKoodisto'].nil?
    end

    # constructs a Hoitotyoasetukset from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Omistaja

  # (no documentation provided)
  class OwnerTypeInfo 

    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :id

    # the json hash for this OwnerTypeInfo
    def to_jaxb_json_hash
      _h = {}
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      return _h
    end

    # the json (string form) for this OwnerTypeInfo
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this OwnerTypeInfo with a json hash
    def init_jaxb_json_hash(_o)
      @name = String.from_json(_o['name']) unless _o['name'].nil?
      @id = Fixnum.from_json(_o['id']) unless _o['id'].nil?
    end

    # constructs a OwnerTypeInfo from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class UserRoleInfo 

    # (no documentation provided)
    attr_accessor :id
    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :forceVahvatunnistus

    # the json hash for this UserRoleInfo
    def to_jaxb_json_hash
      _h = {}
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['forceVahvatunnistus'] = forceVahvatunnistus.to_jaxb_json_hash unless forceVahvatunnistus.nil?
      return _h
    end

    # the json (string form) for this UserRoleInfo
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this UserRoleInfo with a json hash
    def init_jaxb_json_hash(_o)
      @id = Fixnum.from_json(_o['id']) unless _o['id'].nil?
      @name = String.from_json(_o['name']) unless _o['name'].nil?
      @forceVahvatunnistus = Boolean.from_json(_o['forceVahvatunnistus']) unless _o['forceVahvatunnistus'].nil?
    end

    # constructs a UserRoleInfo from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class BaseModel 

    # (no documentation provided)
    attr_accessor :ownerId
    # (no documentation provided)
    attr_accessor :editTime
    # (no documentation provided)
    attr_accessor :componentId

    # the json hash for this BaseModel
    def to_jaxb_json_hash
      _h = {}
      _h['ownerId'] = ownerId.to_jaxb_json_hash unless ownerId.nil?
      _h['editTime'] = editTime.to_jaxb_json_hash unless editTime.nil?
      _h['componentId'] = componentId.to_jaxb_json_hash unless componentId.nil?
      return _h
    end

    # the json (string form) for this BaseModel
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this BaseModel with a json hash
    def init_jaxb_json_hash(_o)
      @ownerId = Fixnum.from_json(_o['ownerId']) unless _o['ownerId'].nil?
      @editTime = Bignum.from_json(_o['editTime']) unless _o['editTime'].nil?
      @componentId = String.from_json(_o['componentId']) unless _o['componentId'].nil?
    end

    # constructs a BaseModel from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Seuranta

  # (no documentation provided)
  class SeurantaFormConfig 

    # (no documentation provided)
    attr_accessor :titles
    # (no documentation provided)
    attr_accessor :permission

    # the json hash for this SeurantaFormConfig
    def to_jaxb_json_hash
      _h = {}
      _h['titles'] = titles.to_jaxb_json_hash unless titles.nil?
      _h['permission'] = permission.to_jaxb_json_hash unless permission.nil?
      return _h
    end

    # the json (string form) for this SeurantaFormConfig
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this SeurantaFormConfig with a json hash
    def init_jaxb_json_hash(_o)
      @titles = Hash.from_json(_o['titles']) unless _o['titles'].nil?
      @permission = Fi::Mediconsult::Core::Client::Dto::PermissionDTO.from_json(_o['permission']) unless _o['permission'].nil?
    end

    # constructs a SeurantaFormConfig from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

  # (no documentation provided)
  class Employee 

    # the id
    attr_accessor :id
    # the name
    attr_accessor :name
    # the data
    attr_accessor :data

    # the json hash for this Employee
    def to_jaxb_json_hash
      _h = {}
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['data'] = data.to_jaxb_json_hash unless data.nil?
      return _h
    end

    # the json (string form) for this Employee
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Employee with a json hash
    def init_jaxb_json_hash(_o)
      @id = Fixnum.from_json(_o['id']) unless _o['id'].nil?
      @name = String.from_json(_o['name']) unless _o['name'].nil?
      @data = Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_o['data']) unless _o['data'].nil?
    end

    # constructs a Employee from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class UserGroup 

    # (no documentation provided)
    attr_accessor :groupdId
    # (no documentation provided)
    attr_accessor :name

    # the json hash for this UserGroup
    def to_jaxb_json_hash
      _h = {}
      _h['groupdId'] = groupdId.to_jaxb_json_hash unless groupdId.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      return _h
    end

    # the json (string form) for this UserGroup
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this UserGroup with a json hash
    def init_jaxb_json_hash(_o)
      @groupdId = Fixnum.from_json(_o['groupdId']) unless _o['groupdId'].nil?
      @name = String.from_json(_o['name']) unless _o['name'].nil?
    end

    # constructs a UserGroup from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Kertomus

  # (no documentation provided)
  class MainTitleConfig 

    # (no documentation provided)
    attr_accessor :templateTitles
    # (no documentation provided)
    attr_accessor :groupTitles
    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :paanakyma

    # the json hash for this MainTitleConfig
    def to_jaxb_json_hash
      _h = {}
      _h['templateTitles'] = templateTitles.to_jaxb_json_hash unless templateTitles.nil?
      _h['groupTitles'] = groupTitles.to_jaxb_json_hash unless groupTitles.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['paanakyma'] = paanakyma.to_jaxb_json_hash unless paanakyma.nil?
      return _h
    end

    # the json (string form) for this MainTitleConfig
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this MainTitleConfig with a json hash
    def init_jaxb_json_hash(_o)
      @templateTitles = Hash.from_json(_o['templateTitles']) unless _o['templateTitles'].nil?
      @groupTitles = Hash.from_json(_o['groupTitles']) unless _o['groupTitles'].nil?
      @name = String.from_json(_o['name']) unless _o['name'].nil?
      @paanakyma = String.from_json(_o['paanakyma']) unless _o['paanakyma'].nil?
    end

    # constructs a MainTitleConfig from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Worker

  # (no documentation provided)
  class AvailabilityDto 

    # the start
    attr_accessor :start
    # the end
    attr_accessor :end
    # the available
    attr_accessor :available
    # the workingHoursPlanned
    attr_accessor :workingHoursPlanned
    # the conflicts
    attr_accessor :conflicts
    # the workingHourEvents
    attr_accessor :workingHourEvents
    # the conflictingEvents
    attr_accessor :conflictingEvents

    # the json hash for this AvailabilityDto
    def to_jaxb_json_hash
      _h = {}
      _h['start'] = start.to_jaxb_json_hash unless start.nil?
      _h['end'] = end.to_jaxb_json_hash unless end.nil?
      _h['available'] = available.to_jaxb_json_hash unless available.nil?
      _h['workingHoursPlanned'] = workingHoursPlanned.to_jaxb_json_hash unless workingHoursPlanned.nil?
      _h['conflicts'] = conflicts.to_jaxb_json_hash unless conflicts.nil?
      if !workingHourEvents.nil?
        _ha = Array.new
        workingHourEvents.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['workingHourEvents'] = _ha
      end
      if !conflictingEvents.nil?
        _ha = Array.new
        conflictingEvents.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['conflictingEvents'] = _ha
      end
      return _h
    end

    # the json (string form) for this AvailabilityDto
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this AvailabilityDto with a json hash
    def init_jaxb_json_hash(_o)
      @start = Time.from_json(_o['start']) unless _o['start'].nil?
      @end = Time.from_json(_o['end']) unless _o['end'].nil?
      @available = Boolean.from_json(_o['available']) unless _o['available'].nil?
      @workingHoursPlanned = Boolean.from_json(_o['workingHoursPlanned']) unless _o['workingHoursPlanned'].nil?
      @conflicts = Boolean.from_json(_o['conflicts']) unless _o['conflicts'].nil?
      if !_o['workingHourEvents'].nil?
        @workingHourEvents = Array.new
        _oa = _o['workingHourEvents']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @workingHourEvents.push Fi::Mediconsult::Mediplan::Dto::Event::CalendarEventDto.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @workingHourEvents.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
      if !_o['conflictingEvents'].nil?
        @conflictingEvents = Array.new
        _oa = _o['conflictingEvents']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @conflictingEvents.push Fi::Mediconsult::Mediplan::Dto::Event::CalendarEventDto.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @conflictingEvents.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
    end

    # constructs a AvailabilityDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Security

module Dto

  # (no documentation provided)
  class RoleDTO 

    # (no documentation provided)
    attr_accessor :role
    # (no documentation provided)
    attr_accessor :unit

    # the json hash for this RoleDTO
    def to_jaxb_json_hash
      _h = {}
      _h['role'] = role.to_jaxb_json_hash unless role.nil?
      _h['unit'] = unit.to_jaxb_json_hash unless unit.nil?
      return _h
    end

    # the json (string form) for this RoleDTO
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this RoleDTO with a json hash
    def init_jaxb_json_hash(_o)
      @role = Fixnum.from_json(_o['role']) unless _o['role'].nil?
      @unit = Fixnum.from_json(_o['unit']) unless _o['unit'].nil?
    end

    # constructs a RoleDTO from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Worker

  # (no documentation provided)
  class WorkerAvailabilityDto 

    # the worker
    attr_accessor :worker
    # the availability
    attr_accessor :availability

    # the json hash for this WorkerAvailabilityDto
    def to_jaxb_json_hash
      _h = {}
      _h['worker'] = worker.to_jaxb_json_hash unless worker.nil?
      _h['availability'] = availability.to_jaxb_json_hash unless availability.nil?
      return _h
    end

    # the json (string form) for this WorkerAvailabilityDto
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this WorkerAvailabilityDto with a json hash
    def init_jaxb_json_hash(_o)
      @worker = Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_o['worker']) unless _o['worker'].nil?
      @availability = Fi::Mediconsult::Mediplan::Dto::Worker::AvailabilityDto.from_json(_o['availability']) unless _o['availability'].nil?
    end

    # constructs a WorkerAvailabilityDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Kertomus

  # (no documentation provided)
  class KertomusComponentConfig 

    # list of configs for all forms.
    attr_accessor :kertomusConfigs
    # (no documentation provided)
    attr_accessor :titleConfigs
    # (no documentation provided)
    attr_accessor :mainTitleConfigs

    # the json hash for this KertomusComponentConfig
    def to_jaxb_json_hash
      _h = {}
      if !kertomusConfigs.nil?
        _ha = Array.new
        kertomusConfigs.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['kertomusConfigs'] = _ha
      end
      _h['titleConfigs'] = titleConfigs.to_jaxb_json_hash unless titleConfigs.nil?
      _h['mainTitleConfigs'] = mainTitleConfigs.to_jaxb_json_hash unless mainTitleConfigs.nil?
      return _h
    end

    # the json (string form) for this KertomusComponentConfig
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this KertomusComponentConfig with a json hash
    def init_jaxb_json_hash(_o)
      if !_o['kertomusConfigs'].nil?
        @kertomusConfigs = Array.new
        _oa = _o['kertomusConfigs']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @kertomusConfigs.push Fi::Mediconsult::Core::Client::Dto::Kertomus::KertomusFormConfig.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @kertomusConfigs.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
      @titleConfigs = Hash.from_json(_o['titleConfigs']) unless _o['titleConfigs'].nil?
      @mainTitleConfigs = Hash.from_json(_o['mainTitleConfigs']) unless _o['mainTitleConfigs'].nil?
    end

    # constructs a KertomusComponentConfig from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Rights

  # (no documentation provided)
  class PlannerRightsAndSettings 

    # the skillsForm
    attr_accessor :skillsForm
    # the calendarDomain
    attr_accessor :calendarDomains

    # the json hash for this PlannerRightsAndSettings
    def to_jaxb_json_hash
      _h = {}
      _h['skillsForm'] = skillsForm.to_jaxb_json_hash unless skillsForm.nil?
      if !calendarDomains.nil?
        _ha = Array.new
        calendarDomains.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['calendarDomains'] = _ha
      end
      return _h
    end

    # the json (string form) for this PlannerRightsAndSettings
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this PlannerRightsAndSettings with a json hash
    def init_jaxb_json_hash(_o)
      @skillsForm = Fi::Mediconsult::Mediplan::Dto::Rights::FormRights.from_json(_o['skillsForm']) unless _o['skillsForm'].nil?
      if !_o['calendarDomains'].nil?
        @calendarDomains = Array.new
        _oa = _o['calendarDomains']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @calendarDomains.push Fi::Mediconsult::Mediplan::Dto::Rights::CalendarDomainRightsAndSettings.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @calendarDomains.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
    end

    # constructs a PlannerRightsAndSettings from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class Tutkimuspyynto < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # Returns the name of the Tutkimus
    attr_accessor :tutkimus
    # Returns a list of Tutkimus details under the same tutkimus name
    attr_accessor :tutkimuspyyntoTiedotList
    # Returns the category of the tutkimus. Category could be
    # &quot;tilattu&quot;, &quot;kuittaamaton&quot; or &quot;tulos&quot;
    attr_accessor :kategoria
    # (no documentation provided)
    attr_accessor :latestTime

    # the json hash for this Tutkimuspyynto
    def to_jaxb_json_hash
      _h = super
      _h['tutkimus'] = tutkimus.to_jaxb_json_hash unless tutkimus.nil?
      if !tutkimuspyyntoTiedotList.nil?
        _ha = Array.new
        tutkimuspyyntoTiedotList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['tutkimuspyyntoTiedotList'] = _ha
      end
      _h['kategoria'] = kategoria.to_jaxb_json_hash unless kategoria.nil?
      _h['latestTime'] = latestTime.to_jaxb_json_hash unless latestTime.nil?
      return _h
    end

    #initializes this Tutkimuspyynto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @tutkimus = String.from_json(_o['tutkimus']) unless _o['tutkimus'].nil?
      if !_o['tutkimuspyyntoTiedotList'].nil?
        @tutkimuspyyntoTiedotList = Array.new
        _oa = _o['tutkimuspyyntoTiedotList']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @tutkimuspyyntoTiedotList.push Fi::Mediconsult::Core::Client::Dto::TutkimuspyyntoTiedot.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @tutkimuspyyntoTiedotList.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
      @kategoria = String.from_json(_o['kategoria']) unless _o['kategoria'].nil?
      @latestTime = Time.from_json(_o['latestTime']) unless _o['latestTime'].nil?
    end

    # constructs a Tutkimuspyynto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Omistaja

  # (no documentation provided)
  class Patient < Fi::Mediconsult::Core::Client::Dto::Omistaja::GenericOmistaja 

    # (no documentation provided)
    attr_accessor :lastName
    # (no documentation provided)
    attr_accessor :ssn
    # (no documentation provided)
    attr_accessor :domainId
    # (no documentation provided)
    attr_accessor :realmId
    # (no documentation provided)
    attr_accessor :basicInfo
    # (no documentation provided)
    attr_accessor :gender
    # (no documentation provided)
    attr_accessor :age
    # (no documentation provided)
    attr_accessor :hoitojakso
    # (no documentation provided)
    attr_accessor :hoitosuhde
    # (no documentation provided)
    attr_accessor :uuid
    # (no documentation provided)
    attr_accessor :firstName
    # (no documentation provided)
    attr_accessor :riskitietoStatus

    # the json hash for this Patient
    def to_jaxb_json_hash
      _h = super
      _h['lastName'] = lastName.to_jaxb_json_hash unless lastName.nil?
      _h['ssn'] = ssn.to_jaxb_json_hash unless ssn.nil?
      _h['domainId'] = domainId.to_jaxb_json_hash unless domainId.nil?
      _h['realmId'] = realmId.to_jaxb_json_hash unless realmId.nil?
      _h['basicInfo'] = basicInfo.to_jaxb_json_hash unless basicInfo.nil?
      _h['gender'] = gender.to_jaxb_json_hash unless gender.nil?
      _h['age'] = age.to_jaxb_json_hash unless age.nil?
      _h['hoitojakso'] = hoitojakso.to_jaxb_json_hash unless hoitojakso.nil?
      _h['hoitosuhde'] = hoitosuhde.to_jaxb_json_hash unless hoitosuhde.nil?
      _h['uuid'] = uuid.to_jaxb_json_hash unless uuid.nil?
      _h['firstName'] = firstName.to_jaxb_json_hash unless firstName.nil?
      _h['riskitietoStatus'] = riskitietoStatus.to_jaxb_json_hash unless riskitietoStatus.nil?
      return _h
    end

    #initializes this Patient with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @lastName = String.from_json(_o['lastName']) unless _o['lastName'].nil?
      @ssn = String.from_json(_o['ssn']) unless _o['ssn'].nil?
      @domainId = String.from_json(_o['domainId']) unless _o['domainId'].nil?
      @realmId = String.from_json(_o['realmId']) unless _o['realmId'].nil?
      @basicInfo = Fi::Mediconsult::Core::Client::Dto::Omistaja::BasicInfo.from_json(_o['basicInfo']) unless _o['basicInfo'].nil?
      @gender = String.from_json(_o['gender']) unless _o['gender'].nil?
      @age = Fixnum.from_json(_o['age']) unless _o['age'].nil?
      @hoitojakso = Fi::Mediconsult::Core::Client::Dto::Omistaja::LazyLoadedDto.from_json(_o['hoitojakso']) unless _o['hoitojakso'].nil?
      @hoitosuhde = Fi::Mediconsult::Core::Client::Dto::Omistaja::LazyLoadedDto.from_json(_o['hoitosuhde']) unless _o['hoitosuhde'].nil?
      @uuid = String.from_json(_o['uuid']) unless _o['uuid'].nil?
      @firstName = String.from_json(_o['firstName']) unless _o['firstName'].nil?
      @riskitietoStatus = Fi::Mediconsult::Core::Client::Dto::Omistaja::LazyLoadedDto.from_json(_o['riskitietoStatus']) unless _o['riskitietoStatus'].nil?
    end

    # constructs a Patient from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Omistaja

  # (no documentation provided)
  class UserList < Fi::Mediconsult::Core::Client::Dto::Omistaja::OmistajaList 

    # (no documentation provided)
    attr_accessor :users

    # the json hash for this UserList
    def to_jaxb_json_hash
      _h = super
      if !users.nil?
        _ha = Array.new
        users.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['users'] = _ha
      end
      return _h
    end

    #initializes this UserList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      if !_o['users'].nil?
        @users = Array.new
        _oa = _o['users']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @users.push Fi::Mediconsult::Core::Client::Dto::Omistaja::User.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @users.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
    end

    # constructs a UserList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Kuha

module Util

  # (no documentation provided)
  class EventCategory

    # 
    WORK = "WORK"

    # 
    TIME = "TIME"
  end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class Osastokartta < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # (no documentation provided)
    attr_accessor :listat
    # (no documentation provided)
    attr_accessor :tilanteet
    # (no documentation provided)
    attr_accessor :ryhmat

    # the json hash for this Osastokartta
    def to_jaxb_json_hash
      _h = super
      if !listat.nil?
        _ha = Array.new
        listat.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['listat'] = _ha
      end
      if !tilanteet.nil?
        _ha = Array.new
        tilanteet.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['tilanteet'] = _ha
      end
      if !ryhmat.nil?
        _ha = Array.new
        ryhmat.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['ryhmat'] = _ha
      end
      return _h
    end

    #initializes this Osastokartta with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      if !_o['listat'].nil?
        @listat = Array.new
        _oa = _o['listat']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @listat.push Fi::Mediconsult::Core::Client::Dto::Osastolista.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @listat.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
      if !_o['tilanteet'].nil?
        @tilanteet = Array.new
        _oa = _o['tilanteet']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @tilanteet.push Fi::Mediconsult::Core::Client::Dto::OsastolistaTilannekoodi.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @tilanteet.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
      if !_o['ryhmat'].nil?
        @ryhmat = Array.new
        _oa = _o['ryhmat']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @ryhmat.push Fi::Mediconsult::Core::Client::Dto::Potilasryhma.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @ryhmat.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
    end

    # constructs a Osastokartta from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Laakitys

  # (no documentation provided)
  class LaakeAnnostus < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # Returns the id of the dosage
    attr_accessor :numero
    # Returns the explanation of the dosage
    attr_accessor :selite
    # Returns the lower age limit
    attr_accessor :alaikaraja
    # Returns the upper age limit
    attr_accessor :ylaikaraja
    # Returns the lower weight limit
    attr_accessor :alapainoraja
    # Returns the upper weight limit
    attr_accessor :ylapainoraja
    # Returns the model for the prescription text
    attr_accessor :malli
    # Returns the amount of decimals in prescription text
    attr_accessor :desimaaleja
    # Returns &#39;K&#39; if dosage should be multiplied by patients weight
    attr_accessor :painokerroin
    # Returns the size of the single dosage
    attr_accessor :annettavaMaara
    # Returns the maximum size of a single dosage
    attr_accessor :annettavaMaksimi
    # Returns the unit of the single dosage
    attr_accessor :annettavaYksikko
    # Returns the speed of dosing
    attr_accessor :antotahti
    # Returns the unit of the dosing speed
    attr_accessor :antotahtiYksikko
    # Returns the total duratio of the dosage
    attr_accessor :kokonaiskesto
    # Returns the total amount of the dosage
    attr_accessor :kokonaismaara
    # Returns the unit of total amount of the dosage
    attr_accessor :kokonaismaaraYksikko
    # Returns the confirmation for the dosage
    # -&#39;K&#39; if &quot;sic!&quot; should be added to the prescription text
    # -&#39;E&#39; otherwise
    attr_accessor :varmistus
    # Returns the use of the dosage
    attr_accessor :kayttotarkoitus
    # Returns the instructions of the dosage
    attr_accessor :ohjeet
    # Returns the iteration
    attr_accessor :iterointi
    # Returns the permanence of the dosage
    # -&#39;K&#39; pysyv�
    # -&#39;E&#39; otherwise
    attr_accessor :pysyva
    # Returns if the medicine is taken when needed
    # -&#39;K&#39; tarvittaessa
    # -&#39;E&#39; otherwise
    attr_accessor :tarvittaessa
    # Returns &#39;K&#39; if Kela wants user to explain the usage of medicine. &#39;E&#39; otherwise.
    attr_accessor :perusteluVaaditaan
    # Returns &quot;antoreitit&quot; for the medicine
    attr_accessor :antoreitit
    # Returns &quot;antopaikat&quot; for the medicine
    attr_accessor :antopaikat
    # Returns &quot;antov�lineet&quot; for the medicine
    attr_accessor :antovalineet
    # Returns &quot;antotavat&quot; for the medicine
    attr_accessor :antotavat
    # Returns the origin of the dosage
    # -&#39;O&#39; if current organization
    # -&#39;A&#39; or &#39;M&#39; otherwise
    attr_accessor :alkupera
    # Returns the code of the dosage removal. &#39;E&#39; - not removed, &#39;K&#39; = removed
    attr_accessor :poistettu
    # Returns the actual DB-change time of the dosage
    attr_accessor :muutosaika
    # Returns the organization in which the change has been made
    attr_accessor :muutospaikka
    # Returns whose dosage it is
    attr_accessor :kenen
    # Returns a summary of the dosage
    attr_accessor :lyhyesti
    # Returns the repetition of the dosage
    attr_accessor :toisto
    # Returns the repetition in plain language
    attr_accessor :toistokuvaus
    # Returns the time unit used
    attr_accessor :aikayksikko

    # the json hash for this LaakeAnnostus
    def to_jaxb_json_hash
      _h = super
      _h['numero'] = numero.to_jaxb_json_hash unless numero.nil?
      _h['selite'] = selite.to_jaxb_json_hash unless selite.nil?
      _h['alaikaraja'] = alaikaraja.to_jaxb_json_hash unless alaikaraja.nil?
      _h['ylaikaraja'] = ylaikaraja.to_jaxb_json_hash unless ylaikaraja.nil?
      _h['alapainoraja'] = alapainoraja.to_jaxb_json_hash unless alapainoraja.nil?
      _h['ylapainoraja'] = ylapainoraja.to_jaxb_json_hash unless ylapainoraja.nil?
      _h['malli'] = malli.to_jaxb_json_hash unless malli.nil?
      _h['desimaaleja'] = desimaaleja.to_jaxb_json_hash unless desimaaleja.nil?
      _h['painokerroin'] = painokerroin.to_jaxb_json_hash unless painokerroin.nil?
      _h['annettavaMaara'] = annettavaMaara.to_jaxb_json_hash unless annettavaMaara.nil?
      _h['annettavaMaksimi'] = annettavaMaksimi.to_jaxb_json_hash unless annettavaMaksimi.nil?
      _h['annettavaYksikko'] = annettavaYksikko.to_jaxb_json_hash unless annettavaYksikko.nil?
      _h['antotahti'] = antotahti.to_jaxb_json_hash unless antotahti.nil?
      _h['antotahtiYksikko'] = antotahtiYksikko.to_jaxb_json_hash unless antotahtiYksikko.nil?
      _h['kokonaiskesto'] = kokonaiskesto.to_jaxb_json_hash unless kokonaiskesto.nil?
      _h['kokonaismaara'] = kokonaismaara.to_jaxb_json_hash unless kokonaismaara.nil?
      _h['kokonaismaaraYksikko'] = kokonaismaaraYksikko.to_jaxb_json_hash unless kokonaismaaraYksikko.nil?
      _h['varmistus'] = varmistus.to_jaxb_json_hash unless varmistus.nil?
      _h['kayttotarkoitus'] = kayttotarkoitus.to_jaxb_json_hash unless kayttotarkoitus.nil?
      _h['ohjeet'] = ohjeet.to_jaxb_json_hash unless ohjeet.nil?
      _h['iterointi'] = iterointi.to_jaxb_json_hash unless iterointi.nil?
      _h['pysyva'] = pysyva.to_jaxb_json_hash unless pysyva.nil?
      _h['tarvittaessa'] = tarvittaessa.to_jaxb_json_hash unless tarvittaessa.nil?
      _h['perusteluVaaditaan'] = perusteluVaaditaan.to_jaxb_json_hash unless perusteluVaaditaan.nil?
      _h['antoreitit'] = antoreitit.to_jaxb_json_hash unless antoreitit.nil?
      _h['antopaikat'] = antopaikat.to_jaxb_json_hash unless antopaikat.nil?
      _h['antovalineet'] = antovalineet.to_jaxb_json_hash unless antovalineet.nil?
      _h['antotavat'] = antotavat.to_jaxb_json_hash unless antotavat.nil?
      _h['alkupera'] = alkupera.to_jaxb_json_hash unless alkupera.nil?
      _h['poistettu'] = poistettu.to_jaxb_json_hash unless poistettu.nil?
      _h['muutosaika'] = muutosaika.to_jaxb_json_hash unless muutosaika.nil?
      _h['muutospaikka'] = muutospaikka.to_jaxb_json_hash unless muutospaikka.nil?
      _h['kenen'] = kenen.to_jaxb_json_hash unless kenen.nil?
      _h['lyhyesti'] = lyhyesti.to_jaxb_json_hash unless lyhyesti.nil?
      _h['toisto'] = toisto.to_jaxb_json_hash unless toisto.nil?
      _h['toistokuvaus'] = toistokuvaus.to_jaxb_json_hash unless toistokuvaus.nil?
      _h['aikayksikko'] = aikayksikko.to_jaxb_json_hash unless aikayksikko.nil?
      return _h
    end

    #initializes this LaakeAnnostus with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @numero = Fixnum.from_json(_o['numero']) unless _o['numero'].nil?
      @selite = String.from_json(_o['selite']) unless _o['selite'].nil?
      @alaikaraja = Fixnum.from_json(_o['alaikaraja']) unless _o['alaikaraja'].nil?
      @ylaikaraja = Fixnum.from_json(_o['ylaikaraja']) unless _o['ylaikaraja'].nil?
      @alapainoraja = Fixnum.from_json(_o['alapainoraja']) unless _o['alapainoraja'].nil?
      @ylapainoraja = Fixnum.from_json(_o['ylapainoraja']) unless _o['ylapainoraja'].nil?
      @malli = String.from_json(_o['malli']) unless _o['malli'].nil?
      @desimaaleja = Fixnum.from_json(_o['desimaaleja']) unless _o['desimaaleja'].nil?
      @painokerroin = Fixnum.from_json(_o['painokerroin']) unless _o['painokerroin'].nil?
      @annettavaMaara = Float.from_json(_o['annettavaMaara']) unless _o['annettavaMaara'].nil?
      @annettavaMaksimi = Float.from_json(_o['annettavaMaksimi']) unless _o['annettavaMaksimi'].nil?
      @annettavaYksikko = String.from_json(_o['annettavaYksikko']) unless _o['annettavaYksikko'].nil?
      @antotahti = Float.from_json(_o['antotahti']) unless _o['antotahti'].nil?
      @antotahtiYksikko = String.from_json(_o['antotahtiYksikko']) unless _o['antotahtiYksikko'].nil?
      @kokonaiskesto = String.from_json(_o['kokonaiskesto']) unless _o['kokonaiskesto'].nil?
      @kokonaismaara = Float.from_json(_o['kokonaismaara']) unless _o['kokonaismaara'].nil?
      @kokonaismaaraYksikko = String.from_json(_o['kokonaismaaraYksikko']) unless _o['kokonaismaaraYksikko'].nil?
      @varmistus = Fixnum.from_json(_o['varmistus']) unless _o['varmistus'].nil?
      @kayttotarkoitus = String.from_json(_o['kayttotarkoitus']) unless _o['kayttotarkoitus'].nil?
      @ohjeet = String.from_json(_o['ohjeet']) unless _o['ohjeet'].nil?
      @iterointi = Fixnum.from_json(_o['iterointi']) unless _o['iterointi'].nil?
      @pysyva = Fixnum.from_json(_o['pysyva']) unless _o['pysyva'].nil?
      @tarvittaessa = Fixnum.from_json(_o['tarvittaessa']) unless _o['tarvittaessa'].nil?
      @perusteluVaaditaan = Fixnum.from_json(_o['perusteluVaaditaan']) unless _o['perusteluVaaditaan'].nil?
      @antoreitit = String.from_json(_o['antoreitit']) unless _o['antoreitit'].nil?
      @antopaikat = String.from_json(_o['antopaikat']) unless _o['antopaikat'].nil?
      @antovalineet = String.from_json(_o['antovalineet']) unless _o['antovalineet'].nil?
      @antotavat = String.from_json(_o['antotavat']) unless _o['antotavat'].nil?
      @alkupera = Fixnum.from_json(_o['alkupera']) unless _o['alkupera'].nil?
      @poistettu = Fixnum.from_json(_o['poistettu']) unless _o['poistettu'].nil?
      @muutosaika = Time.from_json(_o['muutosaika']) unless _o['muutosaika'].nil?
      @muutospaikka = Fixnum.from_json(_o['muutospaikka']) unless _o['muutospaikka'].nil?
      @kenen = Fixnum.from_json(_o['kenen']) unless _o['kenen'].nil?
      @lyhyesti = String.from_json(_o['lyhyesti']) unless _o['lyhyesti'].nil?
      @toisto = String.from_json(_o['toisto']) unless _o['toisto'].nil?
      @toistokuvaus = String.from_json(_o['toistokuvaus']) unless _o['toistokuvaus'].nil?
      @aikayksikko = String.from_json(_o['aikayksikko']) unless _o['aikayksikko'].nil?
    end

    # constructs a LaakeAnnostus from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Java

module Sql

  # (no documentation provided)
  class Date < Time 


    # the json hash for this Date
    def to_jaxb_json_hash
      _h = super
      return _h
    end

    #initializes this Date with a json hash
    def init_jaxb_json_hash(_o)
      super _o
    end

    # constructs a Date from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Laakitys

  # (no documentation provided)
  class LaakeAtc < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # (no documentation provided)
    attr_accessor :atc
    # (no documentation provided)
    attr_accessor :alkupera

    # the json hash for this LaakeAtc
    def to_jaxb_json_hash
      _h = super
      _h['atc'] = atc.to_jaxb_json_hash unless atc.nil?
      _h['alkupera'] = alkupera.to_jaxb_json_hash unless alkupera.nil?
      return _h
    end

    #initializes this LaakeAtc with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @atc = String.from_json(_o['atc']) unless _o['atc'].nil?
      @alkupera = Fixnum.from_json(_o['alkupera']) unless _o['alkupera'].nil?
    end

    # constructs a LaakeAtc from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Omistaja

  # (no documentation provided)
  class User < Fi::Mediconsult::Core::Client::Dto::Omistaja::GenericOmistaja 

    # (no documentation provided)
    attr_accessor :firstName
    # (no documentation provided)
    attr_accessor :lastName
    # (no documentation provided)
    attr_accessor :skills
    # (no documentation provided)
    attr_accessor :endTime
    # (no documentation provided)
    attr_accessor :userName
    # (no documentation provided)
    attr_accessor :startTime
    # (no documentation provided)
    attr_accessor :basicInfo

    # the json hash for this User
    def to_jaxb_json_hash
      _h = super
      _h['firstName'] = firstName.to_jaxb_json_hash unless firstName.nil?
      _h['lastName'] = lastName.to_jaxb_json_hash unless lastName.nil?
      _h['skills'] = skills.to_jaxb_json_hash unless skills.nil?
      _h['endTime'] = endTime.to_jaxb_json_hash unless endTime.nil?
      _h['userName'] = userName.to_jaxb_json_hash unless userName.nil?
      _h['startTime'] = startTime.to_jaxb_json_hash unless startTime.nil?
      _h['basicInfo'] = basicInfo.to_jaxb_json_hash unless basicInfo.nil?
      return _h
    end

    #initializes this User with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @firstName = String.from_json(_o['firstName']) unless _o['firstName'].nil?
      @lastName = String.from_json(_o['lastName']) unless _o['lastName'].nil?
      @skills = Fi::Mediconsult::Core::Client::Dto::Omistaja::SkillsInfo.from_json(_o['skills']) unless _o['skills'].nil?
      @endTime = Bignum.from_json(_o['endTime']) unless _o['endTime'].nil?
      @userName = String.from_json(_o['userName']) unless _o['userName'].nil?
      @startTime = Bignum.from_json(_o['startTime']) unless _o['startTime'].nil?
      @basicInfo = Fi::Mediconsult::Core::Client::Dto::Omistaja::BasicInfo.from_json(_o['basicInfo']) unless _o['basicInfo'].nil?
    end

    # constructs a User from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Laakitys

  # (no documentation provided)
  class LaakitysKuittaus < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # Returns the role of the user who has made an acknowledgement
    # -&quot;H&quot; if user is a nurse
    attr_accessor :rooli
    # Returns the time of the acknowledgement
    attr_accessor :kuitattu
    # Returns the user who made the acknowledgement
    attr_accessor :kuittaaja

    # the json hash for this LaakitysKuittaus
    def to_jaxb_json_hash
      _h = super
      _h['rooli'] = rooli.to_jaxb_json_hash unless rooli.nil?
      _h['kuitattu'] = kuitattu.to_jaxb_json_hash unless kuitattu.nil?
      _h['kuittaaja'] = kuittaaja.to_jaxb_json_hash unless kuittaaja.nil?
      return _h
    end

    #initializes this LaakitysKuittaus with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @rooli = Fixnum.from_json(_o['rooli']) unless _o['rooli'].nil?
      @kuitattu = Time.from_json(_o['kuitattu']) unless _o['kuitattu'].nil?
      @kuittaaja = Fixnum.from_json(_o['kuittaaja']) unless _o['kuittaaja'].nil?
    end

    # constructs a LaakitysKuittaus from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Event

  # (no documentation provided)
  class CalendarEventDto < Fi::Mediconsult::Mediplan::Dto::KuhaDtoBase 

    # (no documentation provided)
    attr_accessor :restricted
    # the startTime
    attr_accessor :startTime
    # the status
    attr_accessor :status
    # the description
    attr_accessor :description
    # the durationInMinutes
    attr_accessor :durationInMinutes
    # the serviceClass
    attr_accessor :serviceClass
    # the event
    attr_accessor :event
    # the workers
    attr_accessor :workers
    # the customers
    attr_accessor :customers
    # the rooms
    attr_accessor :rooms
    # the equipmentTypes
    attr_accessor :equipmentTypes
    # (no documentation provided)
    attr_accessor :coursePeriods
    # (no documentation provided)
    attr_accessor :locked
    # the lock
    attr_accessor :lock
    # the contentGroups
    attr_accessor :contentGroups
    # the actualStartTime
    attr_accessor :actualStartTime
    # the actualEndTime
    attr_accessor :actualEndTime
    # the missingResources
    attr_accessor :missingResources

    # the json hash for this CalendarEventDto
    def to_jaxb_json_hash
      _h = super
      _h['restricted'] = restricted.to_jaxb_json_hash unless restricted.nil?
      _h['startTime'] = startTime.to_jaxb_json_hash unless startTime.nil?
      _h['status'] = status.to_jaxb_json_hash unless status.nil?
      _h['description'] = description.to_jaxb_json_hash unless description.nil?
      _h['durationInMinutes'] = durationInMinutes.to_jaxb_json_hash unless durationInMinutes.nil?
      _h['serviceClass'] = serviceClass.to_jaxb_json_hash unless serviceClass.nil?
      _h['event'] = event.to_jaxb_json_hash unless event.nil?
      if !workers.nil?
        _ha = Array.new
        workers.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['workers'] = _ha
      end
      if !customers.nil?
        _ha = Array.new
        customers.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['customers'] = _ha
      end
      if !rooms.nil?
        _ha = Array.new
        rooms.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['rooms'] = _ha
      end
      if !equipmentTypes.nil?
        _ha = Array.new
        equipmentTypes.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['equipmentTypes'] = _ha
      end
      if !coursePeriods.nil?
        _ha = Array.new
        coursePeriods.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['coursePeriods'] = _ha
      end
      _h['locked'] = locked.to_jaxb_json_hash unless locked.nil?
      _h['lock'] = lock.to_jaxb_json_hash unless lock.nil?
      if !contentGroups.nil?
        _ha = Array.new
        contentGroups.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['contentGroups'] = _ha
      end
      _h['actualStartTime'] = actualStartTime.to_jaxb_json_hash unless actualStartTime.nil?
      _h['actualEndTime'] = actualEndTime.to_jaxb_json_hash unless actualEndTime.nil?
      _h['missingResources'] = missingResources.to_jaxb_json_hash unless missingResources.nil?
      return _h
    end

    #initializes this CalendarEventDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @restricted = Boolean.from_json(_o['restricted']) unless _o['restricted'].nil?
      @startTime = java.time::OffsetDateTime.from_json(_o['startTime']) unless _o['startTime'].nil?
      @status = String.from_json(_o['status']) unless _o['status'].nil?
      @description = String.from_json(_o['description']) unless _o['description'].nil?
      @durationInMinutes = Fixnum.from_json(_o['durationInMinutes']) unless _o['durationInMinutes'].nil?
      @serviceClass = String.from_json(_o['serviceClass']) unless _o['serviceClass'].nil?
      @event = Fi::Mediconsult::Mediplan::Dto::Event::EventDto.from_json(_o['event']) unless _o['event'].nil?
      if !_o['workers'].nil?
        @workers = Array.new
        _oa = _o['workers']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @workers.push Fi::Mediconsult::Mediplan::Dto::Event::EventWorkerDto.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @workers.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
      if !_o['customers'].nil?
        @customers = Array.new
        _oa = _o['customers']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @customers.push Fi::Mediconsult::Mediplan::Dto::Event::EventCustomerDto.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @customers.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
      if !_o['rooms'].nil?
        @rooms = Array.new
        _oa = _o['rooms']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @rooms.push Fi::Mediconsult::Mediplan::Dto::Event::EventResourceDto.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @rooms.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
      if !_o['equipmentTypes'].nil?
        @equipmentTypes = Array.new
        _oa = _o['equipmentTypes']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @equipmentTypes.push Fi::Mediconsult::Mediplan::Dto::Event::EventResourceDto.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @equipmentTypes.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
      if !_o['coursePeriods'].nil?
        @coursePeriods = Array.new
        _oa = _o['coursePeriods']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @coursePeriods.push Fi::Mediconsult::Mediplan::Dto::Event::EventCoursePeriodDto.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @coursePeriods.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
      @locked = Boolean.from_json(_o['locked']) unless _o['locked'].nil?
      @lock = Fi::Mediconsult::Mediplan::Dto::LockDto.from_json(_o['lock']) unless _o['lock'].nil?
      if !_o['contentGroups'].nil?
        @contentGroups = Array.new
        _oa = _o['contentGroups']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @contentGroups.push Fi::Mediconsult::Mediplan::Dto::Event::CalendarEventContentGroupDto.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @contentGroups.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
      @actualStartTime = java.time::OffsetDateTime.from_json(_o['actualStartTime']) unless _o['actualStartTime'].nil?
      @actualEndTime = java.time::OffsetDateTime.from_json(_o['actualEndTime']) unless _o['actualEndTime'].nil?
      @missingResources = Fi::Mediconsult::Mediplan::Dto::Event::EventMissingResourcesDto.from_json(_o['missingResources']) unless _o['missingResources'].nil?
    end

    # constructs a CalendarEventDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Laakitys

  # (no documentation provided)
  class LaakeAnnostusSoveltuvuus < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # Returns the vnr code of the medicine
    attr_accessor :laake
    # Returns the origin of the dosage
    # -&#39;O&#39; if current organization
    # -&#39;A&#39; or &#39;M&#39; otherwise
    attr_accessor :alkupera
    # 
    attr_accessor :annostus

    # the json hash for this LaakeAnnostusSoveltuvuus
    def to_jaxb_json_hash
      _h = super
      _h['laake'] = laake.to_jaxb_json_hash unless laake.nil?
      _h['alkupera'] = alkupera.to_jaxb_json_hash unless alkupera.nil?
      _h['annostus'] = annostus.to_jaxb_json_hash unless annostus.nil?
      return _h
    end

    #initializes this LaakeAnnostusSoveltuvuus with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @laake = String.from_json(_o['laake']) unless _o['laake'].nil?
      @alkupera = Fixnum.from_json(_o['alkupera']) unless _o['alkupera'].nil?
      @annostus = Fi::Mediconsult::Core::Client::Dto::Laakitys::LaakeAnnostus.from_json(_o['annostus']) unless _o['annostus'].nil?
    end

    # constructs a LaakeAnnostusSoveltuvuus from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Laakitys

  # (no documentation provided)
  class LaakeAine < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # Get medicine vnr code
    attr_accessor :laake
    # Get medicine ingredient
    attr_accessor :aine
    # Get ingredient amount
    attr_accessor :maara
    # Get ingredient amount unit
    attr_accessor :yksikko
    # Get the origin
    # -&#39;O&#39; if added by organization
    # -&#39;A&#39; or &#39;M&#39; otherwise
    attr_accessor :alkupera
    # Get the code for the ingredient (l��ketietokannasta)
    attr_accessor :ainekoodi
    # Get the ATC code, if available
    attr_accessor :atc
    # Get the order number for the ingredient, if available
    attr_accessor :jarjestys

    # the json hash for this LaakeAine
    def to_jaxb_json_hash
      _h = super
      _h['laake'] = laake.to_jaxb_json_hash unless laake.nil?
      _h['aine'] = aine.to_jaxb_json_hash unless aine.nil?
      _h['maara'] = maara.to_jaxb_json_hash unless maara.nil?
      _h['yksikko'] = yksikko.to_jaxb_json_hash unless yksikko.nil?
      _h['alkupera'] = alkupera.to_jaxb_json_hash unless alkupera.nil?
      _h['ainekoodi'] = ainekoodi.to_jaxb_json_hash unless ainekoodi.nil?
      _h['atc'] = atc.to_jaxb_json_hash unless atc.nil?
      _h['jarjestys'] = jarjestys.to_jaxb_json_hash unless jarjestys.nil?
      return _h
    end

    #initializes this LaakeAine with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @laake = String.from_json(_o['laake']) unless _o['laake'].nil?
      @aine = String.from_json(_o['aine']) unless _o['aine'].nil?
      @maara = Float.from_json(_o['maara']) unless _o['maara'].nil?
      @yksikko = String.from_json(_o['yksikko']) unless _o['yksikko'].nil?
      @alkupera = Fixnum.from_json(_o['alkupera']) unless _o['alkupera'].nil?
      @ainekoodi = String.from_json(_o['ainekoodi']) unless _o['ainekoodi'].nil?
      @atc = String.from_json(_o['atc']) unless _o['atc'].nil?
      @jarjestys = Fixnum.from_json(_o['jarjestys']) unless _o['jarjestys'].nil?
    end

    # constructs a LaakeAine from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Enums

  # (no documentation provided)
  class EquipmentRequirement

    # 
    FOR_EVERY_CUSTOMER = "FOR_EVERY_CUSTOMER"

    # 
    FOR_EVERY_CUSTOMER_AND_WORKER = "FOR_EVERY_CUSTOMER_AND_WORKER"

    # 
    FIXED_AMOUNT = "FIXED_AMOUNT"
  end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class Potilasryhma < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # (no documentation provided)
    attr_accessor :otsikko
    # (no documentation provided)
    attr_accessor :koodi
    # (no documentation provided)
    attr_accessor :selite

    # the json hash for this Potilasryhma
    def to_jaxb_json_hash
      _h = super
      _h['otsikko'] = otsikko.to_jaxb_json_hash unless otsikko.nil?
      _h['koodi'] = koodi.to_jaxb_json_hash unless koodi.nil?
      _h['selite'] = selite.to_jaxb_json_hash unless selite.nil?
      return _h
    end

    #initializes this Potilasryhma with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @otsikko = String.from_json(_o['otsikko']) unless _o['otsikko'].nil?
      @koodi = String.from_json(_o['koodi']) unless _o['koodi'].nil?
      @selite = String.from_json(_o['selite']) unless _o['selite'].nil?
    end

    # constructs a Potilasryhma from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Kertomus

  # (no documentation provided)
  class KertomuksetView < Fi::Mediconsult::Core::Client::Dto::BaseModel 

    # (no documentation provided)
    attr_accessor :entries
    # (no documentation provided)
    attr_accessor :updated
    # (no documentation provided)
    attr_accessor :currentRecord
    # (no documentation provided)
    attr_accessor :prevUrl
    # (no documentation provided)
    attr_accessor :nextUrl
    # (no documentation provided)
    attr_accessor :maxSize
    # (no documentation provided)
    attr_accessor :pageSize

    # the json hash for this KertomuksetView
    def to_jaxb_json_hash
      _h = super
      if !entries.nil?
        _ha = Array.new
        entries.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['entries'] = _ha
      end
      _h['updated'] = updated.to_jaxb_json_hash unless updated.nil?
      _h['currentRecord'] = currentRecord.to_jaxb_json_hash unless currentRecord.nil?
      _h['prevUrl'] = prevUrl.to_jaxb_json_hash unless prevUrl.nil?
      _h['nextUrl'] = nextUrl.to_jaxb_json_hash unless nextUrl.nil?
      _h['maxSize'] = maxSize.to_jaxb_json_hash unless maxSize.nil?
      _h['pageSize'] = pageSize.to_jaxb_json_hash unless pageSize.nil?
      return _h
    end

    #initializes this KertomuksetView with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      if !_o['entries'].nil?
        @entries = Array.new
        _oa = _o['entries']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @entries.push Fi::Mediconsult::Core::Client::Dto::Kertomus::KertomusEntryView.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @entries.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
      @updated = Boolean.from_json(_o['updated']) unless _o['updated'].nil?
      @currentRecord = Fixnum.from_json(_o['currentRecord']) unless _o['currentRecord'].nil?
      @prevUrl = String.from_json(_o['prevUrl']) unless _o['prevUrl'].nil?
      @nextUrl = String.from_json(_o['nextUrl']) unless _o['nextUrl'].nil?
      @maxSize = Fixnum.from_json(_o['maxSize']) unless _o['maxSize'].nil?
      @pageSize = Fixnum.from_json(_o['pageSize']) unless _o['pageSize'].nil?
    end

    # constructs a KertomuksetView from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class OsastolistaTilannekoodi < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # (no documentation provided)
    attr_accessor :koodi
    # (no documentation provided)
    attr_accessor :variRGB
    # (no documentation provided)
    attr_accessor :selitys
    # (no documentation provided)
    attr_accessor :vihje

    # the json hash for this OsastolistaTilannekoodi
    def to_jaxb_json_hash
      _h = super
      _h['koodi'] = koodi.to_jaxb_json_hash unless koodi.nil?
      _h['variRGB'] = variRGB.to_jaxb_json_hash unless variRGB.nil?
      _h['selitys'] = selitys.to_jaxb_json_hash unless selitys.nil?
      _h['vihje'] = vihje.to_jaxb_json_hash unless vihje.nil?
      return _h
    end

    #initializes this OsastolistaTilannekoodi with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @koodi = String.from_json(_o['koodi']) unless _o['koodi'].nil?
      @variRGB = String.from_json(_o['variRGB']) unless _o['variRGB'].nil?
      @selitys = String.from_json(_o['selitys']) unless _o['selitys'].nil?
      @vihje = String.from_json(_o['vihje']) unless _o['vihje'].nil?
    end

    # constructs a OsastolistaTilannekoodi from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class ExtendFormInfo < Fi::Mediconsult::Core::Client::Dto::FormInfo 

    # (no documentation provided)
    attr_accessor :lomakeId
    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :hoitosuhdevaatimus
    # (no documentation provided)
    attr_accessor :vastuuyksikko
    # (no documentation provided)
    attr_accessor :pohjavari

    # the json hash for this ExtendFormInfo
    def to_jaxb_json_hash
      _h = super
      _h['lomakeId'] = lomakeId.to_jaxb_json_hash unless lomakeId.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['hoitosuhdevaatimus'] = hoitosuhdevaatimus.to_jaxb_json_hash unless hoitosuhdevaatimus.nil?
      _h['vastuuyksikko'] = vastuuyksikko.to_jaxb_json_hash unless vastuuyksikko.nil?
      _h['pohjavari'] = pohjavari.to_jaxb_json_hash unless pohjavari.nil?
      return _h
    end

    #initializes this ExtendFormInfo with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @lomakeId = Fixnum.from_json(_o['lomakeId']) unless _o['lomakeId'].nil?
      @name = String.from_json(_o['name']) unless _o['name'].nil?
      @hoitosuhdevaatimus = String.from_json(_o['hoitosuhdevaatimus']) unless _o['hoitosuhdevaatimus'].nil?
      @vastuuyksikko = Fixnum.from_json(_o['vastuuyksikko']) unless _o['vastuuyksikko'].nil?
      @pohjavari = Fixnum.from_json(_o['pohjavari']) unless _o['pohjavari'].nil?
    end

    # constructs a ExtendFormInfo from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Laakitys

  # (no documentation provided)
  class LaakeSeloste < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # Returns the id of the medication description
    attr_accessor :seloste
    # Returns the name of the medication
    attr_accessor :nimi
    # Returns the preconditions for the medicine
    # (m��r�ys-/toimitusehto)
    attr_accessor :ehto
    # Returns the manufacturer of the medicine
    attr_accessor :valmistaja
    # Returns the code of the description removal. &#39;E&#39; - not removed, &#39;K&#39; = removed
    attr_accessor :poistettu
    # Returns the actual DB-change time of the desctription
    attr_accessor :muutosaika
    # Returns the organization in which the change has been made
    attr_accessor :muutospaikka
    # Returns a list of description texts
    attr_accessor :tekstit

    # the json hash for this LaakeSeloste
    def to_jaxb_json_hash
      _h = super
      _h['seloste'] = seloste.to_jaxb_json_hash unless seloste.nil?
      _h['nimi'] = nimi.to_jaxb_json_hash unless nimi.nil?
      _h['ehto'] = ehto.to_jaxb_json_hash unless ehto.nil?
      _h['valmistaja'] = valmistaja.to_jaxb_json_hash unless valmistaja.nil?
      _h['poistettu'] = poistettu.to_jaxb_json_hash unless poistettu.nil?
      _h['muutosaika'] = muutosaika.to_jaxb_json_hash unless muutosaika.nil?
      _h['muutospaikka'] = muutospaikka.to_jaxb_json_hash unless muutospaikka.nil?
      if !tekstit.nil?
        _ha = Array.new
        tekstit.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['tekstit'] = _ha
      end
      return _h
    end

    #initializes this LaakeSeloste with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @seloste = Fixnum.from_json(_o['seloste']) unless _o['seloste'].nil?
      @nimi = String.from_json(_o['nimi']) unless _o['nimi'].nil?
      @ehto = String.from_json(_o['ehto']) unless _o['ehto'].nil?
      @valmistaja = String.from_json(_o['valmistaja']) unless _o['valmistaja'].nil?
      @poistettu = Fixnum.from_json(_o['poistettu']) unless _o['poistettu'].nil?
      @muutosaika = Time.from_json(_o['muutosaika']) unless _o['muutosaika'].nil?
      @muutospaikka = Fixnum.from_json(_o['muutospaikka']) unless _o['muutospaikka'].nil?
      if !_o['tekstit'].nil?
        @tekstit = Array.new
        _oa = _o['tekstit']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @tekstit.push Fi::Mediconsult::Core::Client::Dto::Laakitys::LaakeSelosteTeksti.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @tekstit.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
    end

    # constructs a LaakeSeloste from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

  # (no documentation provided)
  class KuhaDtoNameBase < Fi::Mediconsult::Mediplan::Dto::KuhaDtoBase 

    # (no documentation provided)
    attr_accessor :name
    # abbreviation
    attr_accessor :abbr
    # (no documentation provided)
    attr_accessor :description

    # the json hash for this KuhaDtoNameBase
    def to_jaxb_json_hash
      _h = super
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['abbr'] = abbr.to_jaxb_json_hash unless abbr.nil?
      _h['description'] = description.to_jaxb_json_hash unless description.nil?
      return _h
    end

    #initializes this KuhaDtoNameBase with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @name = String.from_json(_o['name']) unless _o['name'].nil?
      @abbr = String.from_json(_o['abbr']) unless _o['abbr'].nil?
      @description = String.from_json(_o['description']) unless _o['description'].nil?
    end

    # constructs a KuhaDtoNameBase from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class Palvelutapahtumaluokitus

    # 
    VUODEOSASTOHOITOJAKSO = "VUODEOSASTOHOITOJAKSO"

    # 
    KAYNTI_VASTAANOTOLLA = "KAYNTI_VASTAANOTOLLA"

    # 
    AMMATTIHENKILON_KAYNTI_ASIKKAAN_LUONA = "AMMATTIHENKILON_KAYNTI_ASIKKAAN_LUONA"

    # 
    ASIAKASKONTAKTI_ILMAN_KAYNTIA = "ASIAKASKONTAKTI_ILMAN_KAYNTIA"

    # 
    KONSULTAATIO = "KONSULTAATIO"

    # 
    ASIAKKAAN_ASIOIDEN_HOITO_ILMAN_ASIAKASKONTAKTIA = "ASIAKKAAN_ASIOIDEN_HOITO_ILMAN_ASIAKASKONTAKTIA"

    # 
    MUU_LAITOSHOITOJAKSO = "MUU_LAITOSHOITOJAKSO"

    # 
    SARJAHOITO = "SARJAHOITO"
  end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Enums

  # (no documentation provided)
  class ContentGroupVisibility

    # 
    VISIBLE = "VISIBLE"

    # 
    COLLAPSED = "COLLAPSED"

    # 
    HIDDEN = "HIDDEN"

    # 
    EXCLUDED = "EXCLUDED"
  end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Palvelupaatos

  # (no documentation provided)
  class Tila

    # 
    KESKEN = "KESKEN"

    # 
    VALMIS = "VALMIS"

    # 
    MITATOITY = "MITATOITY"
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class LaakitysView < Fi::Mediconsult::Core::Client::Dto::BaseModel 

    # Returns the laakityskategoria. Map of laakitysKategorias. Laakityskategoria type as key
    attr_accessor :laakityskategoria
    # Returns the permissionDTO object.
    attr_accessor :permissionDTO

    # the json hash for this LaakitysView
    def to_jaxb_json_hash
      _h = super
      _h['laakityskategoria'] = laakityskategoria.to_jaxb_json_hash unless laakityskategoria.nil?
      _h['permissionDTO'] = permissionDTO.to_jaxb_json_hash unless permissionDTO.nil?
      return _h
    end

    #initializes this LaakitysView with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @laakityskategoria = Hash.from_json(_o['laakityskategoria']) unless _o['laakityskategoria'].nil?
      @permissionDTO = Fi::Mediconsult::Core::Client::Dto::Permission.from_json(_o['permissionDTO']) unless _o['permissionDTO'].nil?
    end

    # constructs a LaakitysView from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class Riskitieto < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # part number
    attr_accessor :osa
    # degree of the riski, could be either &quot;Kriittinen&quot; or &quot;Hoidossa huomioitava&quot;
    attr_accessor :aste
    # type of the riski, value could be something like: &quot;Allegia&quot;, &quot;Eristystarve&quot;, &quot;Immuunipuutostilat&quot;, &quot;Keinoelimet&quot; and so on
    attr_accessor :tyyppi
    # code, for example ICD-10 code
    attr_accessor :koodi
    # explanation
    attr_accessor :selite
    # koodisto
    attr_accessor :koodisto
    # version
    attr_accessor :versio
    # additional code
    attr_accessor :lisakoodi
    # additional explanation
    attr_accessor :lisaselite
    # additional koodisto
    attr_accessor :lisakoodisto
    # additional version info
    attr_accessor :lisaversio
    # description of the riski
    attr_accessor :kuvaus
    # notifications
    attr_accessor :huomiointi
    # permanence, &quot;Alustava&quot;, &quot;M��r�aikainen&quot;, &quot;Pysyv�isluonteinen&quot;
    attr_accessor :pysyvyys
    # certainty, &quot;Ep�ilty&quot;, &quot;Korjattu&quot;, &quot;Todenn�k�inen tai varma&quot;, &quot;Varma&quot;
    attr_accessor :varmuusaste
    # severity, &quot;Liev�&quot;, &quot;Keskivaikea&quot;, &quot;Vakava&quot;
    attr_accessor :vakavuus
    # link to some other health record
    attr_accessor :lomakelinkki
    # link to some other health record
    attr_accessor :osalinkki
    # type of the origin of the riski
    attr_accessor :lahdetyyppi
    # origin of the riski
    attr_accessor :lahde
    # start date
    attr_accessor :alkaa
    # user who has created this riski
    attr_accessor :aloittaja
    # unit in which the riski is created
    attr_accessor :aloitusyksikko
    # unit in which the riski is marked as ended
    attr_accessor :lopetusyksikko
    # end date
    attr_accessor :loppuu
    # user who has ended the riski
    attr_accessor :lopettaja
    # is the riski deleted, &quot;K&quot;, &quot;E&quot;
    attr_accessor :poistettu
    # change date
    attr_accessor :muutosaika
    # place of change
    attr_accessor :muutospaikka
    # reason for ending the riski
    attr_accessor :paattymissyy
    # additional information about ending the riski
    attr_accessor :paattymistarkenne
    # delay
    attr_accessor :viivastys
    # estimate for duration
    attr_accessor :kestoarvio
    # oid
    attr_accessor :oid
    # creator
    attr_accessor :kirjaaja
    # older version of the riski
    attr_accessor :vanha
    # unit in which the riski has been created in
    attr_accessor :kirjausyksikko
    # form
    attr_accessor :lomake
    # (no documentation provided)
    attr_accessor :tyyppiString
    # (no documentation provided)
    attr_accessor :kirjaajaNimi
    # (no documentation provided)
    attr_accessor :aloitusyksikkoNimi
    # (no documentation provided)
    attr_accessor :aloittajaNimi
    # (no documentation provided)
    attr_accessor :kirjausyksikkoNimi

    # the json hash for this Riskitieto
    def to_jaxb_json_hash
      _h = super
      _h['osa'] = osa.to_jaxb_json_hash unless osa.nil?
      _h['aste'] = aste.to_jaxb_json_hash unless aste.nil?
      _h['tyyppi'] = tyyppi.to_jaxb_json_hash unless tyyppi.nil?
      _h['koodi'] = koodi.to_jaxb_json_hash unless koodi.nil?
      _h['selite'] = selite.to_jaxb_json_hash unless selite.nil?
      _h['koodisto'] = koodisto.to_jaxb_json_hash unless koodisto.nil?
      _h['versio'] = versio.to_jaxb_json_hash unless versio.nil?
      _h['lisakoodi'] = lisakoodi.to_jaxb_json_hash unless lisakoodi.nil?
      _h['lisaselite'] = lisaselite.to_jaxb_json_hash unless lisaselite.nil?
      _h['lisakoodisto'] = lisakoodisto.to_jaxb_json_hash unless lisakoodisto.nil?
      _h['lisaversio'] = lisaversio.to_jaxb_json_hash unless lisaversio.nil?
      _h['kuvaus'] = kuvaus.to_jaxb_json_hash unless kuvaus.nil?
      _h['huomiointi'] = huomiointi.to_jaxb_json_hash unless huomiointi.nil?
      _h['pysyvyys'] = pysyvyys.to_jaxb_json_hash unless pysyvyys.nil?
      _h['varmuusaste'] = varmuusaste.to_jaxb_json_hash unless varmuusaste.nil?
      _h['vakavuus'] = vakavuus.to_jaxb_json_hash unless vakavuus.nil?
      _h['lomakelinkki'] = lomakelinkki.to_jaxb_json_hash unless lomakelinkki.nil?
      _h['osalinkki'] = osalinkki.to_jaxb_json_hash unless osalinkki.nil?
      _h['lahdetyyppi'] = lahdetyyppi.to_jaxb_json_hash unless lahdetyyppi.nil?
      _h['lahde'] = lahde.to_jaxb_json_hash unless lahde.nil?
      _h['alkaa'] = alkaa.to_jaxb_json_hash unless alkaa.nil?
      _h['aloittaja'] = aloittaja.to_jaxb_json_hash unless aloittaja.nil?
      _h['aloitusyksikko'] = aloitusyksikko.to_jaxb_json_hash unless aloitusyksikko.nil?
      _h['lopetusyksikko'] = lopetusyksikko.to_jaxb_json_hash unless lopetusyksikko.nil?
      _h['loppuu'] = loppuu.to_jaxb_json_hash unless loppuu.nil?
      _h['lopettaja'] = lopettaja.to_jaxb_json_hash unless lopettaja.nil?
      _h['poistettu'] = poistettu.to_jaxb_json_hash unless poistettu.nil?
      _h['muutosaika'] = muutosaika.to_jaxb_json_hash unless muutosaika.nil?
      _h['muutospaikka'] = muutospaikka.to_jaxb_json_hash unless muutospaikka.nil?
      _h['paattymissyy'] = paattymissyy.to_jaxb_json_hash unless paattymissyy.nil?
      _h['paattymistarkenne'] = paattymistarkenne.to_jaxb_json_hash unless paattymistarkenne.nil?
      _h['viivastys'] = viivastys.to_jaxb_json_hash unless viivastys.nil?
      _h['kestoarvio'] = kestoarvio.to_jaxb_json_hash unless kestoarvio.nil?
      _h['oid'] = oid.to_jaxb_json_hash unless oid.nil?
      _h['kirjaaja'] = kirjaaja.to_jaxb_json_hash unless kirjaaja.nil?
      _h['vanha'] = vanha.to_jaxb_json_hash unless vanha.nil?
      _h['kirjausyksikko'] = kirjausyksikko.to_jaxb_json_hash unless kirjausyksikko.nil?
      _h['lomake'] = lomake.to_jaxb_json_hash unless lomake.nil?
      _h['tyyppiString'] = tyyppiString.to_jaxb_json_hash unless tyyppiString.nil?
      _h['kirjaajaNimi'] = kirjaajaNimi.to_jaxb_json_hash unless kirjaajaNimi.nil?
      _h['aloitusyksikkoNimi'] = aloitusyksikkoNimi.to_jaxb_json_hash unless aloitusyksikkoNimi.nil?
      _h['aloittajaNimi'] = aloittajaNimi.to_jaxb_json_hash unless aloittajaNimi.nil?
      _h['kirjausyksikkoNimi'] = kirjausyksikkoNimi.to_jaxb_json_hash unless kirjausyksikkoNimi.nil?
      return _h
    end

    #initializes this Riskitieto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @osa = Fixnum.from_json(_o['osa']) unless _o['osa'].nil?
      @aste = String.from_json(_o['aste']) unless _o['aste'].nil?
      @tyyppi = String.from_json(_o['tyyppi']) unless _o['tyyppi'].nil?
      @koodi = String.from_json(_o['koodi']) unless _o['koodi'].nil?
      @selite = String.from_json(_o['selite']) unless _o['selite'].nil?
      @koodisto = String.from_json(_o['koodisto']) unless _o['koodisto'].nil?
      @versio = String.from_json(_o['versio']) unless _o['versio'].nil?
      @lisakoodi = String.from_json(_o['lisakoodi']) unless _o['lisakoodi'].nil?
      @lisaselite = String.from_json(_o['lisaselite']) unless _o['lisaselite'].nil?
      @lisakoodisto = String.from_json(_o['lisakoodisto']) unless _o['lisakoodisto'].nil?
      @lisaversio = String.from_json(_o['lisaversio']) unless _o['lisaversio'].nil?
      @kuvaus = String.from_json(_o['kuvaus']) unless _o['kuvaus'].nil?
      @huomiointi = String.from_json(_o['huomiointi']) unless _o['huomiointi'].nil?
      @pysyvyys = String.from_json(_o['pysyvyys']) unless _o['pysyvyys'].nil?
      @varmuusaste = String.from_json(_o['varmuusaste']) unless _o['varmuusaste'].nil?
      @vakavuus = String.from_json(_o['vakavuus']) unless _o['vakavuus'].nil?
      @lomakelinkki = Fixnum.from_json(_o['lomakelinkki']) unless _o['lomakelinkki'].nil?
      @osalinkki = Fixnum.from_json(_o['osalinkki']) unless _o['osalinkki'].nil?
      @lahdetyyppi = String.from_json(_o['lahdetyyppi']) unless _o['lahdetyyppi'].nil?
      @lahde = Fixnum.from_json(_o['lahde']) unless _o['lahde'].nil?
      @alkaa = Time.from_json(_o['alkaa']) unless _o['alkaa'].nil?
      @aloittaja = Fixnum.from_json(_o['aloittaja']) unless _o['aloittaja'].nil?
      @aloitusyksikko = Fixnum.from_json(_o['aloitusyksikko']) unless _o['aloitusyksikko'].nil?
      @lopetusyksikko = Fixnum.from_json(_o['lopetusyksikko']) unless _o['lopetusyksikko'].nil?
      @loppuu = Time.from_json(_o['loppuu']) unless _o['loppuu'].nil?
      @lopettaja = Fixnum.from_json(_o['lopettaja']) unless _o['lopettaja'].nil?
      @poistettu = String.from_json(_o['poistettu']) unless _o['poistettu'].nil?
      @muutosaika = Time.from_json(_o['muutosaika']) unless _o['muutosaika'].nil?
      @muutospaikka = Fixnum.from_json(_o['muutospaikka']) unless _o['muutospaikka'].nil?
      @paattymissyy = String.from_json(_o['paattymissyy']) unless _o['paattymissyy'].nil?
      @paattymistarkenne = String.from_json(_o['paattymistarkenne']) unless _o['paattymistarkenne'].nil?
      @viivastys = Java::Sql::Date.from_json(_o['viivastys']) unless _o['viivastys'].nil?
      @kestoarvio = Java::Sql::Date.from_json(_o['kestoarvio']) unless _o['kestoarvio'].nil?
      @oid = String.from_json(_o['oid']) unless _o['oid'].nil?
      @kirjaaja = Fixnum.from_json(_o['kirjaaja']) unless _o['kirjaaja'].nil?
      @vanha = Fixnum.from_json(_o['vanha']) unless _o['vanha'].nil?
      @kirjausyksikko = Fixnum.from_json(_o['kirjausyksikko']) unless _o['kirjausyksikko'].nil?
      @lomake = Fixnum.from_json(_o['lomake']) unless _o['lomake'].nil?
      @tyyppiString = String.from_json(_o['tyyppiString']) unless _o['tyyppiString'].nil?
      @kirjaajaNimi = String.from_json(_o['kirjaajaNimi']) unless _o['kirjaajaNimi'].nil?
      @aloitusyksikkoNimi = String.from_json(_o['aloitusyksikkoNimi']) unless _o['aloitusyksikkoNimi'].nil?
      @aloittajaNimi = String.from_json(_o['aloittajaNimi']) unless _o['aloittajaNimi'].nil?
      @kirjausyksikkoNimi = String.from_json(_o['kirjausyksikkoNimi']) unless _o['kirjausyksikkoNimi'].nil?
    end

    # constructs a Riskitieto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Course

  # (no documentation provided)
  class NamedGroupMemberDto < Fi::Mediconsult::Mediplan::Dto::KuhaDtoBase 

    # (no documentation provided)
    attr_accessor :skill
    # (no documentation provided)
    attr_accessor :role
    # (no documentation provided)
    attr_accessor :removed
    # the worker
    attr_accessor :worker

    # the json hash for this NamedGroupMemberDto
    def to_jaxb_json_hash
      _h = super
      _h['skill'] = skill.to_jaxb_json_hash unless skill.nil?
      _h['role'] = role.to_jaxb_json_hash unless role.nil?
      _h['removed'] = removed.to_jaxb_json_hash unless removed.nil?
      _h['worker'] = worker.to_jaxb_json_hash unless worker.nil?
      return _h
    end

    #initializes this NamedGroupMemberDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @skill = Fi::Mediconsult::Mediplan::Dto::IdNamePair.from_json(_o['skill']) unless _o['skill'].nil?
      @role = Fi::Mediconsult::Mediplan::Dto::IdNamePair.from_json(_o['role']) unless _o['role'].nil?
      @removed = Boolean.from_json(_o['removed']) unless _o['removed'].nil?
      @worker = Fi::Mediconsult::Mediplan::Dto::Employee.from_json(_o['worker']) unless _o['worker'].nil?
    end

    # constructs a NamedGroupMemberDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class TutkimuspyyntoTiedot < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # Returns the pyynto id
    attr_accessor :pyynto
    # Returns the row number
    attr_accessor :rivi
    # Returns the Tutkimus name
    attr_accessor :tutkimus
    # Returns the version
    attr_accessor :versio
    # Returns the char value for Hajautettu
    attr_accessor :hajautettu
    # Returns the Hoitojakso
    attr_accessor :hoitojakso
    # Returns the notifications
    attr_accessor :huomautuksia
    # Returns the possible control date
    attr_accessor :kontrolloitava
    # Returns the korvausluokka
    attr_accessor :korvausluokka
    # Returns the county council
    attr_accessor :kunta
    # Returns the Kustannuslinkki
    attr_accessor :kustannuslinkki
    # Return the info about if there is some extra information
    attr_accessor :lisatietoja
    # Return the Lomakelinkki
    attr_accessor :lomakelinkki
    # Return the payer
    attr_accessor :maksaja
    # Return the info about if there is Mikrobitietoja available
    attr_accessor :mikrobitietoja
    # Return the time of change
    attr_accessor :muutosaika
    # Return the place of change
    attr_accessor :muutospaikka
    # Return the sample
    attr_accessor :nayte
    # Return the info about if there is sample information
    attr_accessor :naytetietoja
    # Return the result in numeric format
    attr_accessor :numerotulos
    # Return the unit of the result
    attr_accessor :numeroyksikko
    # Return the Osalinkki
    attr_accessor :osalinkki
    # Return the department
    attr_accessor :osasto
    # Return the time when the lab examination is done
    attr_accessor :ottoaika
    # Return the package
    attr_accessor :paketti
    # Return the V�est�vastuupiiri
    attr_accessor :piiri
    # Return the info about if the result is removed
    attr_accessor :poistettu
    # 
    attr_accessor :pyydetty
    # Return the verbal result
    attr_accessor :sanallinenvastaus
    # Return the location (department)
    attr_accessor :sijaintiosasto
    # Return the location (place)
    attr_accessor :sijaintipaikka
    # Return the internal payer
    attr_accessor :sisainenMaksaja
    # Return the Suoritelinkki
    attr_accessor :suoritelinkki
    # Return the time when lab examination is done
    attr_accessor :tehty
    # Return the place where lab examination is done
    attr_accessor :tekopaikka
    # Return the result in textual format
    attr_accessor :tekstitulos
    # Return the SMS
    attr_accessor :tekstiviesti
    # Return the state
    attr_accessor :tila
    # Return the orderer
    attr_accessor :tilaaja
    # Return the name of the orderer
    attr_accessor :tilaajaNimi
    # Return the unit of the orderer
    attr_accessor :tilaajayksikko
    # Return the identifier of the order
    attr_accessor :tilaustunnus
    # Return the date when the repetition ends
    attr_accessor :toistoloppuu
    # Return the interval of the repetition
    attr_accessor :toistovali
    # Return the interpretation
    attr_accessor :tulkinta
    # Return the producer
    attr_accessor :tuottaja
    # Return the employer
    attr_accessor :tyonantaja
    # Return the info about if there is Vastaustietoja available
    attr_accessor :vastaustietoja
    # Return the Viitearvot, which contains min and max values for the
    # result. Result is normal, if the value is between the min and max values.
    attr_accessor :viitearvot
    # Return the recorder of the result
    attr_accessor :kirjaaja
    # (no documentation provided)
    attr_accessor :tilaKoodi
    # (no documentation provided)
    attr_accessor :poikkeava
    # (no documentation provided)
    attr_accessor :mikrobit

    # the json hash for this TutkimuspyyntoTiedot
    def to_jaxb_json_hash
      _h = super
      _h['pyynto'] = pyynto.to_jaxb_json_hash unless pyynto.nil?
      _h['rivi'] = rivi.to_jaxb_json_hash unless rivi.nil?
      _h['tutkimus'] = tutkimus.to_jaxb_json_hash unless tutkimus.nil?
      _h['versio'] = versio.to_jaxb_json_hash unless versio.nil?
      _h['hajautettu'] = hajautettu.to_jaxb_json_hash unless hajautettu.nil?
      _h['hoitojakso'] = hoitojakso.to_jaxb_json_hash unless hoitojakso.nil?
      _h['huomautuksia'] = huomautuksia.to_jaxb_json_hash unless huomautuksia.nil?
      _h['kontrolloitava'] = kontrolloitava.to_jaxb_json_hash unless kontrolloitava.nil?
      _h['korvausluokka'] = korvausluokka.to_jaxb_json_hash unless korvausluokka.nil?
      _h['kunta'] = kunta.to_jaxb_json_hash unless kunta.nil?
      _h['kustannuslinkki'] = kustannuslinkki.to_jaxb_json_hash unless kustannuslinkki.nil?
      _h['lisatietoja'] = lisatietoja.to_jaxb_json_hash unless lisatietoja.nil?
      _h['lomakelinkki'] = lomakelinkki.to_jaxb_json_hash unless lomakelinkki.nil?
      _h['maksaja'] = maksaja.to_jaxb_json_hash unless maksaja.nil?
      _h['mikrobitietoja'] = mikrobitietoja.to_jaxb_json_hash unless mikrobitietoja.nil?
      _h['muutosaika'] = muutosaika.to_jaxb_json_hash unless muutosaika.nil?
      _h['muutospaikka'] = muutospaikka.to_jaxb_json_hash unless muutospaikka.nil?
      _h['nayte'] = nayte.to_jaxb_json_hash unless nayte.nil?
      _h['naytetietoja'] = naytetietoja.to_jaxb_json_hash unless naytetietoja.nil?
      _h['numerotulos'] = numerotulos.to_jaxb_json_hash unless numerotulos.nil?
      _h['numeroyksikko'] = numeroyksikko.to_jaxb_json_hash unless numeroyksikko.nil?
      _h['osalinkki'] = osalinkki.to_jaxb_json_hash unless osalinkki.nil?
      _h['osasto'] = osasto.to_jaxb_json_hash unless osasto.nil?
      _h['ottoaika'] = ottoaika.to_jaxb_json_hash unless ottoaika.nil?
      _h['paketti'] = paketti.to_jaxb_json_hash unless paketti.nil?
      _h['piiri'] = piiri.to_jaxb_json_hash unless piiri.nil?
      _h['poistettu'] = poistettu.to_jaxb_json_hash unless poistettu.nil?
      _h['pyydetty'] = pyydetty.to_jaxb_json_hash unless pyydetty.nil?
      _h['sanallinenvastaus'] = sanallinenvastaus.to_jaxb_json_hash unless sanallinenvastaus.nil?
      _h['sijaintiosasto'] = sijaintiosasto.to_jaxb_json_hash unless sijaintiosasto.nil?
      _h['sijaintipaikka'] = sijaintipaikka.to_jaxb_json_hash unless sijaintipaikka.nil?
      _h['sisainenMaksaja'] = sisainenMaksaja.to_jaxb_json_hash unless sisainenMaksaja.nil?
      _h['suoritelinkki'] = suoritelinkki.to_jaxb_json_hash unless suoritelinkki.nil?
      _h['tehty'] = tehty.to_jaxb_json_hash unless tehty.nil?
      _h['tekopaikka'] = tekopaikka.to_jaxb_json_hash unless tekopaikka.nil?
      _h['tekstitulos'] = tekstitulos.to_jaxb_json_hash unless tekstitulos.nil?
      _h['tekstiviesti'] = tekstiviesti.to_jaxb_json_hash unless tekstiviesti.nil?
      _h['tila'] = tila.to_jaxb_json_hash unless tila.nil?
      _h['tilaaja'] = tilaaja.to_jaxb_json_hash unless tilaaja.nil?
      _h['tilaajaNimi'] = tilaajaNimi.to_jaxb_json_hash unless tilaajaNimi.nil?
      _h['tilaajayksikko'] = tilaajayksikko.to_jaxb_json_hash unless tilaajayksikko.nil?
      _h['tilaustunnus'] = tilaustunnus.to_jaxb_json_hash unless tilaustunnus.nil?
      _h['toistoloppuu'] = toistoloppuu.to_jaxb_json_hash unless toistoloppuu.nil?
      _h['toistovali'] = toistovali.to_jaxb_json_hash unless toistovali.nil?
      _h['tulkinta'] = tulkinta.to_jaxb_json_hash unless tulkinta.nil?
      _h['tuottaja'] = tuottaja.to_jaxb_json_hash unless tuottaja.nil?
      _h['tyonantaja'] = tyonantaja.to_jaxb_json_hash unless tyonantaja.nil?
      _h['vastaustietoja'] = vastaustietoja.to_jaxb_json_hash unless vastaustietoja.nil?
      _h['viitearvot'] = viitearvot.to_jaxb_json_hash unless viitearvot.nil?
      _h['kirjaaja'] = kirjaaja.to_jaxb_json_hash unless kirjaaja.nil?
      _h['tilaKoodi'] = tilaKoodi.to_jaxb_json_hash unless tilaKoodi.nil?
      _h['poikkeava'] = poikkeava.to_jaxb_json_hash unless poikkeava.nil?
      if !mikrobit.nil?
        _ha = Array.new
        mikrobit.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['mikrobit'] = _ha
      end
      return _h
    end

    #initializes this TutkimuspyyntoTiedot with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @pyynto = Fixnum.from_json(_o['pyynto']) unless _o['pyynto'].nil?
      @rivi = Fixnum.from_json(_o['rivi']) unless _o['rivi'].nil?
      @tutkimus = String.from_json(_o['tutkimus']) unless _o['tutkimus'].nil?
      @versio = String.from_json(_o['versio']) unless _o['versio'].nil?
      @hajautettu = Fixnum.from_json(_o['hajautettu']) unless _o['hajautettu'].nil?
      @hoitojakso = Fixnum.from_json(_o['hoitojakso']) unless _o['hoitojakso'].nil?
      @huomautuksia = String.from_json(_o['huomautuksia']) unless _o['huomautuksia'].nil?
      @kontrolloitava = Java::Sql::Date.from_json(_o['kontrolloitava']) unless _o['kontrolloitava'].nil?
      @korvausluokka = Fixnum.from_json(_o['korvausluokka']) unless _o['korvausluokka'].nil?
      @kunta = Fixnum.from_json(_o['kunta']) unless _o['kunta'].nil?
      @kustannuslinkki = Fixnum.from_json(_o['kustannuslinkki']) unless _o['kustannuslinkki'].nil?
      @lisatietoja = Fixnum.from_json(_o['lisatietoja']) unless _o['lisatietoja'].nil?
      @lomakelinkki = Fixnum.from_json(_o['lomakelinkki']) unless _o['lomakelinkki'].nil?
      @maksaja = Fixnum.from_json(_o['maksaja']) unless _o['maksaja'].nil?
      @mikrobitietoja = Fixnum.from_json(_o['mikrobitietoja']) unless _o['mikrobitietoja'].nil?
      @muutosaika = Time.from_json(_o['muutosaika']) unless _o['muutosaika'].nil?
      @muutospaikka = Fixnum.from_json(_o['muutospaikka']) unless _o['muutospaikka'].nil?
      @nayte = Fixnum.from_json(_o['nayte']) unless _o['nayte'].nil?
      @naytetietoja = Fixnum.from_json(_o['naytetietoja']) unless _o['naytetietoja'].nil?
      @numerotulos = Float.from_json(_o['numerotulos']) unless _o['numerotulos'].nil?
      @numeroyksikko = String.from_json(_o['numeroyksikko']) unless _o['numeroyksikko'].nil?
      @osalinkki = Fixnum.from_json(_o['osalinkki']) unless _o['osalinkki'].nil?
      @osasto = Fixnum.from_json(_o['osasto']) unless _o['osasto'].nil?
      @ottoaika = Time.from_json(_o['ottoaika']) unless _o['ottoaika'].nil?
      @paketti = String.from_json(_o['paketti']) unless _o['paketti'].nil?
      @piiri = Fixnum.from_json(_o['piiri']) unless _o['piiri'].nil?
      @poistettu = String.from_json(_o['poistettu']) unless _o['poistettu'].nil?
      @pyydetty = Time.from_json(_o['pyydetty']) unless _o['pyydetty'].nil?
      @sanallinenvastaus = String.from_json(_o['sanallinenvastaus']) unless _o['sanallinenvastaus'].nil?
      @sijaintiosasto = String.from_json(_o['sijaintiosasto']) unless _o['sijaintiosasto'].nil?
      @sijaintipaikka = String.from_json(_o['sijaintipaikka']) unless _o['sijaintipaikka'].nil?
      @sisainenMaksaja = String.from_json(_o['sisainenMaksaja']) unless _o['sisainenMaksaja'].nil?
      @suoritelinkki = Fixnum.from_json(_o['suoritelinkki']) unless _o['suoritelinkki'].nil?
      @tehty = Time.from_json(_o['tehty']) unless _o['tehty'].nil?
      @tekopaikka = Fixnum.from_json(_o['tekopaikka']) unless _o['tekopaikka'].nil?
      @tekstitulos = String.from_json(_o['tekstitulos']) unless _o['tekstitulos'].nil?
      @tekstiviesti = Fixnum.from_json(_o['tekstiviesti']) unless _o['tekstiviesti'].nil?
      @tila = Fixnum.from_json(_o['tila']) unless _o['tila'].nil?
      @tilaaja = Fixnum.from_json(_o['tilaaja']) unless _o['tilaaja'].nil?
      @tilaajaNimi = String.from_json(_o['tilaajaNimi']) unless _o['tilaajaNimi'].nil?
      @tilaajayksikko = Fixnum.from_json(_o['tilaajayksikko']) unless _o['tilaajayksikko'].nil?
      @tilaustunnus = String.from_json(_o['tilaustunnus']) unless _o['tilaustunnus'].nil?
      @toistoloppuu = Java::Sql::Date.from_json(_o['toistoloppuu']) unless _o['toistoloppuu'].nil?
      @toistovali = Fixnum.from_json(_o['toistovali']) unless _o['toistovali'].nil?
      @tulkinta = String.from_json(_o['tulkinta']) unless _o['tulkinta'].nil?
      @tuottaja = Fixnum.from_json(_o['tuottaja']) unless _o['tuottaja'].nil?
      @tyonantaja = Fixnum.from_json(_o['tyonantaja']) unless _o['tyonantaja'].nil?
      @vastaustietoja = Fixnum.from_json(_o['vastaustietoja']) unless _o['vastaustietoja'].nil?
      @viitearvot = String.from_json(_o['viitearvot']) unless _o['viitearvot'].nil?
      @kirjaaja = Fixnum.from_json(_o['kirjaaja']) unless _o['kirjaaja'].nil?
      @tilaKoodi = String.from_json(_o['tilaKoodi']) unless _o['tilaKoodi'].nil?
      @poikkeava = Fixnum.from_json(_o['poikkeava']) unless _o['poikkeava'].nil?
      if !_o['mikrobit'].nil?
        @mikrobit = Array.new
        _oa = _o['mikrobit']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @mikrobit.push Fi::Mediconsult::Core::Client::Dto::TutkimuspyyntoMikrobi.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @mikrobit.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
    end

    # constructs a TutkimuspyyntoTiedot from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Enums

  # (no documentation provided)
  class ContentGroupType

    # 
    USER_DEFINED = "USER_DEFINED"

    # 
    SYSTEM_DEFINED_GENERAL = "SYSTEM_DEFINED_GENERAL"

    # 
    SYSTEM_DEFINED_WORKERS = "SYSTEM_DEFINED_WORKERS"

    # 
    SYSTEM_DEFINED_CUSTOMERS = "SYSTEM_DEFINED_CUSTOMERS"

    # 
    SYSTEM_DEFINED_EQUIPMENT = "SYSTEM_DEFINED_EQUIPMENT"

    # 
    SYSTEM_DEFINED_ROOM = "SYSTEM_DEFINED_ROOM"

    # 
    SYSTEM_DEFINED_BASIC_INFORMATION = "SYSTEM_DEFINED_BASIC_INFORMATION"

    # 
    SYSTEM_DEFINED_SERVICE_CLASS = "SYSTEM_DEFINED_SERVICE_CLASS"
  end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Palvelupaatos

  # (no documentation provided)
  class Palvelukeskeytys < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # (no documentation provided)
    attr_accessor :alkaa
    # (no documentation provided)
    attr_accessor :paatos
    # (no documentation provided)
    attr_accessor :syy
    # (no documentation provided)
    attr_accessor :loppuu
    # (no documentation provided)
    attr_accessor :alkuaika
    # (no documentation provided)
    attr_accessor :loppuaika
    # (no documentation provided)
    attr_accessor :alusta
    # (no documentation provided)
    attr_accessor :laskutetaan
    # (no documentation provided)
    attr_accessor :huomautuksia
    # (no documentation provided)
    attr_accessor :muutosaika
    # (no documentation provided)
    attr_accessor :poistettu

    # the json hash for this Palvelukeskeytys
    def to_jaxb_json_hash
      _h = super
      _h['alkaa'] = alkaa.to_jaxb_json_hash unless alkaa.nil?
      _h['paatos'] = paatos.to_jaxb_json_hash unless paatos.nil?
      _h['syy'] = syy.to_jaxb_json_hash unless syy.nil?
      _h['loppuu'] = loppuu.to_jaxb_json_hash unless loppuu.nil?
      _h['alkuaika'] = alkuaika.to_jaxb_json_hash unless alkuaika.nil?
      _h['loppuaika'] = loppuaika.to_jaxb_json_hash unless loppuaika.nil?
      _h['alusta'] = alusta.to_jaxb_json_hash unless alusta.nil?
      _h['laskutetaan'] = laskutetaan.to_jaxb_json_hash unless laskutetaan.nil?
      _h['huomautuksia'] = huomautuksia.to_jaxb_json_hash unless huomautuksia.nil?
      _h['muutosaika'] = muutosaika.to_jaxb_json_hash unless muutosaika.nil?
      _h['poistettu'] = poistettu.to_jaxb_json_hash unless poistettu.nil?
      return _h
    end

    #initializes this Palvelukeskeytys with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @alkaa = Java::Sql::Date.from_json(_o['alkaa']) unless _o['alkaa'].nil?
      @paatos = Fixnum.from_json(_o['paatos']) unless _o['paatos'].nil?
      @syy = String.from_json(_o['syy']) unless _o['syy'].nil?
      @loppuu = Java::Sql::Date.from_json(_o['loppuu']) unless _o['loppuu'].nil?
      @alkuaika = Java::Sql::Time.from_json(_o['alkuaika']) unless _o['alkuaika'].nil?
      @loppuaika = Java::Sql::Time.from_json(_o['loppuaika']) unless _o['loppuaika'].nil?
      @alusta = Boolean.from_json(_o['alusta']) unless _o['alusta'].nil?
      @laskutetaan = Fixnum.from_json(_o['laskutetaan']) unless _o['laskutetaan'].nil?
      @huomautuksia = String.from_json(_o['huomautuksia']) unless _o['huomautuksia'].nil?
      @muutosaika = Time.from_json(_o['muutosaika']) unless _o['muutosaika'].nil?
      @poistettu = Boolean.from_json(_o['poistettu']) unless _o['poistettu'].nil?
    end

    # constructs a Palvelukeskeytys from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class Tapahtumalaji

    # 
    JONO = "JONO"

    # 
    PALVELUJEN_OSTO = "PALVELUJEN_OSTO"

    # 
    KOTIHOITO = "KOTIHOITO"

    # 
    PALVELUASUMINEN = "PALVELUASUMINEN"

    # 
    LAHETE_JA_HOITOPALAUTE = "LAHETE_JA_HOITOPALAUTE"

    # 
    YHTEYDENOTTO_HOIDON_TARPEEN_ARVIOIMISEKSI = "YHTEYDENOTTO_HOIDON_TARPEEN_ARVIOIMISEKSI"

    # 
    LAAKEMAARAYKSEN_UUSITAMISPYYNTO = "LAAKEMAARAYKSEN_UUSITAMISPYYNTO"

    # 
    ERITYINEN_SYY = "ERITYINEN_SYY"

    # 
    AJANVARAUS = "AJANVARAUS"

    # 
    AVOHOITO = "AVOHOITO"

    # 
    OSASTOHOITO = "OSASTOHOITO"

    # 
    KONSULTAATIO = "KONSULTAATIO"

    # 
    TOIMENPIDE = "TOIMENPIDE"

    # 
    ANESTESIA = "ANESTESIA"

    # 
    LABORATORIO = "LABORATORIO"

    # 
    RADIOLOGIA = "RADIOLOGIA"
  end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

  # (no documentation provided)
  class LockDto < Fi::Mediconsult::Mediplan::Dto::KuhaDtoBase 

    # (no documentation provided)
    attr_accessor :user
    # (no documentation provided)
    attr_accessor :reason

    # the json hash for this LockDto
    def to_jaxb_json_hash
      _h = super
      _h['user'] = user.to_jaxb_json_hash unless user.nil?
      _h['reason'] = reason.to_jaxb_json_hash unless reason.nil?
      return _h
    end

    #initializes this LockDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @user = Fixnum.from_json(_o['user']) unless _o['user'].nil?
      @reason = String.from_json(_o['reason']) unless _o['reason'].nil?
    end

    # constructs a LockDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Laakitys

  # (no documentation provided)
  class LaakeTiivistelma < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # Returns the id of the summary
    attr_accessor :tiivistelma
    # Returns the name of the medicine the summary is about
    attr_accessor :nimi
    # Returns the preconditions for the medicine
    # (m��r�ys-/toimitusehto)
    attr_accessor :ehto
    # Returns the manufacturer
    attr_accessor :valmistaja
    # Returns the refundability
    attr_accessor :korvattavuus
    # Returns the code of the summary removal. &#39;E&#39; - not removed, &#39;K&#39; = removed
    attr_accessor :poistettu
    # Returns the actual DB-change time of the summary
    attr_accessor :muutosaika
    # Returns the organization in which the change has been made
    attr_accessor :muutospaikka
    # Returns a list of summary texts
    attr_accessor :tekstit

    # the json hash for this LaakeTiivistelma
    def to_jaxb_json_hash
      _h = super
      _h['tiivistelma'] = tiivistelma.to_jaxb_json_hash unless tiivistelma.nil?
      _h['nimi'] = nimi.to_jaxb_json_hash unless nimi.nil?
      _h['ehto'] = ehto.to_jaxb_json_hash unless ehto.nil?
      _h['valmistaja'] = valmistaja.to_jaxb_json_hash unless valmistaja.nil?
      _h['korvattavuus'] = korvattavuus.to_jaxb_json_hash unless korvattavuus.nil?
      _h['poistettu'] = poistettu.to_jaxb_json_hash unless poistettu.nil?
      _h['muutosaika'] = muutosaika.to_jaxb_json_hash unless muutosaika.nil?
      _h['muutospaikka'] = muutospaikka.to_jaxb_json_hash unless muutospaikka.nil?
      if !tekstit.nil?
        _ha = Array.new
        tekstit.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['tekstit'] = _ha
      end
      return _h
    end

    #initializes this LaakeTiivistelma with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @tiivistelma = Fixnum.from_json(_o['tiivistelma']) unless _o['tiivistelma'].nil?
      @nimi = String.from_json(_o['nimi']) unless _o['nimi'].nil?
      @ehto = String.from_json(_o['ehto']) unless _o['ehto'].nil?
      @valmistaja = String.from_json(_o['valmistaja']) unless _o['valmistaja'].nil?
      @korvattavuus = String.from_json(_o['korvattavuus']) unless _o['korvattavuus'].nil?
      @poistettu = Fixnum.from_json(_o['poistettu']) unless _o['poistettu'].nil?
      @muutosaika = Time.from_json(_o['muutosaika']) unless _o['muutosaika'].nil?
      @muutospaikka = Fixnum.from_json(_o['muutospaikka']) unless _o['muutospaikka'].nil?
      if !_o['tekstit'].nil?
        @tekstit = Array.new
        _oa = _o['tekstit']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @tekstit.push Fi::Mediconsult::Core::Client::Dto::Laakitys::LaakeTiivistelmaTeksti.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @tekstit.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
    end

    # constructs a LaakeTiivistelma from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Omistaja

  # (no documentation provided)
  class PatientList < Fi::Mediconsult::Core::Client::Dto::Omistaja::OmistajaList 

    # (no documentation provided)
    attr_accessor :patients

    # the json hash for this PatientList
    def to_jaxb_json_hash
      _h = super
      if !patients.nil?
        _ha = Array.new
        patients.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['patients'] = _ha
      end
      return _h
    end

    #initializes this PatientList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      if !_o['patients'].nil?
        @patients = Array.new
        _oa = _o['patients']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @patients.push Fi::Mediconsult::Core::Client::Dto::Omistaja::Patient.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @patients.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
    end

    # constructs a PatientList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Laakitys

  # (no documentation provided)
  class LaakeSelosteTeksti < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # Returns the part number of the description, can be used to order descriptions
    attr_accessor :osa
    # 
    attr_accessor :otsikko
    # Returns the text of the description
    attr_accessor :teksti

    # the json hash for this LaakeSelosteTeksti
    def to_jaxb_json_hash
      _h = super
      _h['osa'] = osa.to_jaxb_json_hash unless osa.nil?
      _h['otsikko'] = otsikko.to_jaxb_json_hash unless otsikko.nil?
      _h['teksti'] = teksti.to_jaxb_json_hash unless teksti.nil?
      return _h
    end

    #initializes this LaakeSelosteTeksti with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @osa = Fixnum.from_json(_o['osa']) unless _o['osa'].nil?
      @otsikko = Fixnum.from_json(_o['otsikko']) unless _o['otsikko'].nil?
      @teksti = String.from_json(_o['teksti']) unless _o['teksti'].nil?
    end

    # constructs a LaakeSelosteTeksti from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Laakitys

  # (no documentation provided)
  class LaakeKoostumus < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # Returns the part number of the medicine component
    attr_accessor :osa
    # Returns the type of the medicine component
    # -&#39;B&#39; if &quot;pohja-aine&quot;
    # -Perusaine, johon lis�aineet sekoitetaan
    # -&#39;A&#39; if &quot;lis�aine&quot;
    # -Lis�aineet ovat yleens� varsinaisia vaikuttavia aineita
    attr_accessor :tyyppi
    # Returns the component code (VNR code)
    attr_accessor :komponentinKoodi
    # Returns the component in text format
    attr_accessor :komponentti
    # Returns the amount of component
    attr_accessor :maara
    # Returns the unit of amount
    attr_accessor :yksikko
    # Returns the strength of the component
    attr_accessor :vahvuus
    # Returns the unit of strength
    attr_accessor :vahvuusyksikko

    # the json hash for this LaakeKoostumus
    def to_jaxb_json_hash
      _h = super
      _h['osa'] = osa.to_jaxb_json_hash unless osa.nil?
      _h['tyyppi'] = tyyppi.to_jaxb_json_hash unless tyyppi.nil?
      _h['komponentinKoodi'] = komponentinKoodi.to_jaxb_json_hash unless komponentinKoodi.nil?
      _h['komponentti'] = komponentti.to_jaxb_json_hash unless komponentti.nil?
      _h['maara'] = maara.to_jaxb_json_hash unless maara.nil?
      _h['yksikko'] = yksikko.to_jaxb_json_hash unless yksikko.nil?
      _h['vahvuus'] = vahvuus.to_jaxb_json_hash unless vahvuus.nil?
      _h['vahvuusyksikko'] = vahvuusyksikko.to_jaxb_json_hash unless vahvuusyksikko.nil?
      return _h
    end

    #initializes this LaakeKoostumus with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @osa = Fixnum.from_json(_o['osa']) unless _o['osa'].nil?
      @tyyppi = Fixnum.from_json(_o['tyyppi']) unless _o['tyyppi'].nil?
      @komponentinKoodi = String.from_json(_o['komponentinKoodi']) unless _o['komponentinKoodi'].nil?
      @komponentti = String.from_json(_o['komponentti']) unless _o['komponentti'].nil?
      @maara = Float.from_json(_o['maara']) unless _o['maara'].nil?
      @yksikko = String.from_json(_o['yksikko']) unless _o['yksikko'].nil?
      @vahvuus = Float.from_json(_o['vahvuus']) unless _o['vahvuus'].nil?
      @vahvuusyksikko = String.from_json(_o['vahvuusyksikko']) unless _o['vahvuusyksikko'].nil?
    end

    # constructs a LaakeKoostumus from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class TutkimuspyyntoHerkkyys < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # (no documentation provided)
    attr_accessor :rivi
    # (no documentation provided)
    attr_accessor :antibiootti
    # (no documentation provided)
    attr_accessor :kiekkoherkkyys
    # (no documentation provided)
    attr_accessor :micherkkyys
    # (no documentation provided)
    attr_accessor :lyhenne
    # (no documentation provided)
    attr_accessor :numero
    # (no documentation provided)
    attr_accessor :ryhma

    # the json hash for this TutkimuspyyntoHerkkyys
    def to_jaxb_json_hash
      _h = super
      _h['rivi'] = rivi.to_jaxb_json_hash unless rivi.nil?
      _h['antibiootti'] = antibiootti.to_jaxb_json_hash unless antibiootti.nil?
      _h['kiekkoherkkyys'] = kiekkoherkkyys.to_jaxb_json_hash unless kiekkoherkkyys.nil?
      _h['micherkkyys'] = micherkkyys.to_jaxb_json_hash unless micherkkyys.nil?
      _h['lyhenne'] = lyhenne.to_jaxb_json_hash unless lyhenne.nil?
      _h['numero'] = numero.to_jaxb_json_hash unless numero.nil?
      _h['ryhma'] = ryhma.to_jaxb_json_hash unless ryhma.nil?
      return _h
    end

    #initializes this TutkimuspyyntoHerkkyys with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @rivi = Fixnum.from_json(_o['rivi']) unless _o['rivi'].nil?
      @antibiootti = String.from_json(_o['antibiootti']) unless _o['antibiootti'].nil?
      @kiekkoherkkyys = Fixnum.from_json(_o['kiekkoherkkyys']) unless _o['kiekkoherkkyys'].nil?
      @micherkkyys = String.from_json(_o['micherkkyys']) unless _o['micherkkyys'].nil?
      @lyhenne = String.from_json(_o['lyhenne']) unless _o['lyhenne'].nil?
      @numero = String.from_json(_o['numero']) unless _o['numero'].nil?
      @ryhma = String.from_json(_o['ryhma']) unless _o['ryhma'].nil?
    end

    # constructs a TutkimuspyyntoHerkkyys from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Kuha

module Util

  # (no documentation provided)
  class TapahtumaLuonne

    # 
    ASSIGNED = "ASSIGNED"

    # 
    TEMPLATE = "TEMPLATE"

    # 
    COMMON = "COMMON"

    # 
    TRANSITION = "TRANSITION"
  end

end

end

end

end

module Java

module Sql

  # (no documentation provided)
  class Time < Time 


    # the json hash for this Time
    def to_jaxb_json_hash
      _h = super
      return _h
    end

    #initializes this Time with a json hash
    def init_jaxb_json_hash(_o)
      super _o
    end

    # constructs a Time from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Laakitys

  # (no documentation provided)
  class LaakitysLista < Fi::Mediconsult::Core::Client::Dto::BaseModel 

    # Returns the laakityskategoria. Map of laakitysKategorias. Laakityskategoria type as key
    attr_accessor :laakityskategoria
    # Returns the permissionDTO object.
    attr_accessor :permissionDTO

    # the json hash for this LaakitysLista
    def to_jaxb_json_hash
      _h = super
      _h['laakityskategoria'] = laakityskategoria.to_jaxb_json_hash unless laakityskategoria.nil?
      _h['permissionDTO'] = permissionDTO.to_jaxb_json_hash unless permissionDTO.nil?
      return _h
    end

    #initializes this LaakitysLista with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @laakityskategoria = Hash.from_json(_o['laakityskategoria']) unless _o['laakityskategoria'].nil?
      @permissionDTO = Fi::Mediconsult::Core::Client::Dto::Permission.from_json(_o['permissionDTO']) unless _o['permissionDTO'].nil?
    end

    # constructs a LaakitysLista from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class PoistettuStatus

    # 
    AKTIIVINEN = "AKTIIVINEN"

    # 
    POISTETTU = "POISTETTU"

    # 
    SIIRRETTY = "SIIRRETTY"
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Laakitys

  # (no documentation provided)
  class LaakeVastaAihe < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # Returns the id
    attr_accessor :vastaAihe
    # Returns the origin of the contraindication
    attr_accessor :vastaAiheAlkupera
    # Returns the name of the contraindication in plain language
    attr_accessor :selite
    # Returns the type of the contraindication
    # -&#39;Y&#39; age in years
    # -&#39;M&#39; age in months
    # -&#39;W&#39; age in weeks
    # -&#39;G&#39; weight
    # -&#39;P&#39; pregnancy
    # -&#39;B&#39; breastfeeding
    # -&#39;D&#39; diagnose
    # -&#39;1&#39; male
    # -&#39;2&#39; female
    attr_accessor :rajoite
    # Returns the lower limit of the contraindication
    attr_accessor :alaraja
    # Returns the upper limit of the contraindication
    attr_accessor :ylaraja
    # Returns the origin of the contraindication
    # -&#39;O&#39; if therapy group is linked in the current organization
    # -&#39;A&#39; or &#39;M&#39; otherwise
    attr_accessor :alkupera
    # Returns the code of the contraindication removal. &#39;E&#39; - not removed, &#39;K&#39; = removed
    attr_accessor :poistettu
    # Returns the actual DB-change time of the contraindication
    attr_accessor :muutosaika
    # Returns the organization in which the change has been made
    attr_accessor :muutospaikka

    # the json hash for this LaakeVastaAihe
    def to_jaxb_json_hash
      _h = super
      _h['vastaAihe'] = vastaAihe.to_jaxb_json_hash unless vastaAihe.nil?
      _h['vastaAiheAlkupera'] = vastaAiheAlkupera.to_jaxb_json_hash unless vastaAiheAlkupera.nil?
      _h['selite'] = selite.to_jaxb_json_hash unless selite.nil?
      _h['rajoite'] = rajoite.to_jaxb_json_hash unless rajoite.nil?
      _h['alaraja'] = alaraja.to_jaxb_json_hash unless alaraja.nil?
      _h['ylaraja'] = ylaraja.to_jaxb_json_hash unless ylaraja.nil?
      _h['alkupera'] = alkupera.to_jaxb_json_hash unless alkupera.nil?
      _h['poistettu'] = poistettu.to_jaxb_json_hash unless poistettu.nil?
      _h['muutosaika'] = muutosaika.to_jaxb_json_hash unless muutosaika.nil?
      _h['muutospaikka'] = muutospaikka.to_jaxb_json_hash unless muutospaikka.nil?
      return _h
    end

    #initializes this LaakeVastaAihe with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @vastaAihe = Fixnum.from_json(_o['vastaAihe']) unless _o['vastaAihe'].nil?
      @vastaAiheAlkupera = Fixnum.from_json(_o['vastaAiheAlkupera']) unless _o['vastaAiheAlkupera'].nil?
      @selite = String.from_json(_o['selite']) unless _o['selite'].nil?
      @rajoite = Fixnum.from_json(_o['rajoite']) unless _o['rajoite'].nil?
      @alaraja = Fixnum.from_json(_o['alaraja']) unless _o['alaraja'].nil?
      @ylaraja = Fixnum.from_json(_o['ylaraja']) unless _o['ylaraja'].nil?
      @alkupera = Fixnum.from_json(_o['alkupera']) unless _o['alkupera'].nil?
      @poistettu = Fixnum.from_json(_o['poistettu']) unless _o['poistettu'].nil?
      @muutosaika = Time.from_json(_o['muutosaika']) unless _o['muutosaika'].nil?
      @muutospaikka = Fixnum.from_json(_o['muutospaikka']) unless _o['muutospaikka'].nil?
    end

    # constructs a LaakeVastaAihe from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Seuranta

  # (no documentation provided)
  class SeurantaEntry < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # (no documentation provided)
    attr_accessor :kirjaaja
    # (no documentation provided)
    attr_accessor :unitId
    # (no documentation provided)
    attr_accessor :patientId
    # (no documentation provided)
    attr_accessor :titles
    # the formId
    attr_accessor :formId

    # the json hash for this SeurantaEntry
    def to_jaxb_json_hash
      _h = super
      _h['kirjaaja'] = kirjaaja.to_jaxb_json_hash unless kirjaaja.nil?
      _h['unitId'] = unitId.to_jaxb_json_hash unless unitId.nil?
      _h['patientId'] = patientId.to_jaxb_json_hash unless patientId.nil?
      if !titles.nil?
        _ha = Array.new
        titles.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['titles'] = _ha
      end
      _h['formId'] = formId.to_jaxb_json_hash unless formId.nil?
      return _h
    end

    #initializes this SeurantaEntry with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @kirjaaja = Fixnum.from_json(_o['kirjaaja']) unless _o['kirjaaja'].nil?
      @unitId = Fixnum.from_json(_o['unitId']) unless _o['unitId'].nil?
      @patientId = Fixnum.from_json(_o['patientId']) unless _o['patientId'].nil?
      if !_o['titles'].nil?
        @titles = Array.new
        _oa = _o['titles']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @titles.push Fi::Mediconsult::Core::Client::Dto::Title::Edit::EditTitleValue.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @titles.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
      @formId = Fixnum.from_json(_o['formId']) unless _o['formId'].nil?
    end

    # constructs a SeurantaEntry from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Laakitys

  # (no documentation provided)
  class LaakeTerapiaryhma < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # Returns the code of the therapy group
    attr_accessor :terapiaryhma
    # Returns the origin of the therapy group
    # -&#39;O&#39; if therapy group is linked in the current organization
    # -&#39;A&#39; or &#39;M&#39; otherwise
    attr_accessor :alkupera
    # Returns the name of the therapy group
    attr_accessor :nimi
    # Returns the level of the therapy group
    # -1 is the highest level, lower levels are &gt;1
    attr_accessor :taso
    # Returns the code of the therapy group removal. &#39;E&#39; - not removed, &#39;K&#39; = removed
    attr_accessor :poistettu

    # the json hash for this LaakeTerapiaryhma
    def to_jaxb_json_hash
      _h = super
      _h['terapiaryhma'] = terapiaryhma.to_jaxb_json_hash unless terapiaryhma.nil?
      _h['alkupera'] = alkupera.to_jaxb_json_hash unless alkupera.nil?
      _h['nimi'] = nimi.to_jaxb_json_hash unless nimi.nil?
      _h['taso'] = taso.to_jaxb_json_hash unless taso.nil?
      _h['poistettu'] = poistettu.to_jaxb_json_hash unless poistettu.nil?
      return _h
    end

    #initializes this LaakeTerapiaryhma with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @terapiaryhma = String.from_json(_o['terapiaryhma']) unless _o['terapiaryhma'].nil?
      @alkupera = Fixnum.from_json(_o['alkupera']) unless _o['alkupera'].nil?
      @nimi = String.from_json(_o['nimi']) unless _o['nimi'].nil?
      @taso = Fixnum.from_json(_o['taso']) unless _o['taso'].nil?
      @poistettu = Fixnum.from_json(_o['poistettu']) unless _o['poistettu'].nil?
    end

    # constructs a LaakeTerapiaryhma from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Kertomus

  # (no documentation provided)
  class KertomusEntryEdit < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # (no documentation provided)
    attr_accessor :id
    # (no documentation provided)
    attr_accessor :mainTitle
    # (no documentation provided)
    attr_accessor :titles
    # (no documentation provided)
    attr_accessor :kirjaaja
    # (no documentation provided)
    attr_accessor :suorittaja
    # (no documentation provided)
    attr_accessor :status
    # (no documentation provided)
    attr_accessor :unitId
    # (no documentation provided)
    attr_accessor :lockTime
    # (no documentation provided)
    attr_accessor :kayttajaRyhmaId

    # the json hash for this KertomusEntryEdit
    def to_jaxb_json_hash
      _h = super
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['mainTitle'] = mainTitle.to_jaxb_json_hash unless mainTitle.nil?
      if !titles.nil?
        _ha = Array.new
        titles.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['titles'] = _ha
      end
      _h['kirjaaja'] = kirjaaja.to_jaxb_json_hash unless kirjaaja.nil?
      _h['suorittaja'] = suorittaja.to_jaxb_json_hash unless suorittaja.nil?
      _h['status'] = status.to_jaxb_json_hash unless status.nil?
      _h['unitId'] = unitId.to_jaxb_json_hash unless unitId.nil?
      _h['lockTime'] = lockTime.to_jaxb_json_hash unless lockTime.nil?
      _h['kayttajaRyhmaId'] = kayttajaRyhmaId.to_jaxb_json_hash unless kayttajaRyhmaId.nil?
      return _h
    end

    #initializes this KertomusEntryEdit with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @id = Fi::Mediconsult::Core::Client::Dto::Kertomus::KertomusID.from_json(_o['id']) unless _o['id'].nil?
      @mainTitle = String.from_json(_o['mainTitle']) unless _o['mainTitle'].nil?
      if !_o['titles'].nil?
        @titles = Array.new
        _oa = _o['titles']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @titles.push Fi::Mediconsult::Core::Client::Dto::Title::Edit::EditTitleValue.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @titles.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
      @kirjaaja = Fixnum.from_json(_o['kirjaaja']) unless _o['kirjaaja'].nil?
      @suorittaja = Fixnum.from_json(_o['suorittaja']) unless _o['suorittaja'].nil?
      @status = String.from_json(_o['status']) unless _o['status'].nil?
      @unitId = Fixnum.from_json(_o['unitId']) unless _o['unitId'].nil?
      @lockTime = Time.from_json(_o['lockTime']) unless _o['lockTime'].nil?
      @kayttajaRyhmaId = Fixnum.from_json(_o['kayttajaRyhmaId']) unless _o['kayttajaRyhmaId'].nil?
    end

    # constructs a KertomusEntryEdit from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Laakitys

  # (no documentation provided)
  class LaakitysTauko < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # Returns the starting time of the medication break
    attr_accessor :alkaa
    # Returns the ending time of the medication break
    attr_accessor :loppuu
    # Returns the notes about the medication break
    attr_accessor :huomautuksia
    # Returns the id of an user who started the medication break
    attr_accessor :aloittaja
    # Returns the id of an user who ended the medication break
    attr_accessor :lopettaja
    # Returns the code of the medication break removal. &#39;E&#39; - not removed, &#39;K&#39; = removed
    attr_accessor :poistettu
    # Returns the actual DB-change time of the medication break
    attr_accessor :muutosaika
    # Returns the organization in which the change has been made
    attr_accessor :muutospaikka

    # the json hash for this LaakitysTauko
    def to_jaxb_json_hash
      _h = super
      _h['alkaa'] = alkaa.to_jaxb_json_hash unless alkaa.nil?
      _h['loppuu'] = loppuu.to_jaxb_json_hash unless loppuu.nil?
      _h['huomautuksia'] = huomautuksia.to_jaxb_json_hash unless huomautuksia.nil?
      _h['aloittaja'] = aloittaja.to_jaxb_json_hash unless aloittaja.nil?
      _h['lopettaja'] = lopettaja.to_jaxb_json_hash unless lopettaja.nil?
      _h['poistettu'] = poistettu.to_jaxb_json_hash unless poistettu.nil?
      _h['muutosaika'] = muutosaika.to_jaxb_json_hash unless muutosaika.nil?
      _h['muutospaikka'] = muutospaikka.to_jaxb_json_hash unless muutospaikka.nil?
      return _h
    end

    #initializes this LaakitysTauko with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @alkaa = Time.from_json(_o['alkaa']) unless _o['alkaa'].nil?
      @loppuu = Time.from_json(_o['loppuu']) unless _o['loppuu'].nil?
      @huomautuksia = String.from_json(_o['huomautuksia']) unless _o['huomautuksia'].nil?
      @aloittaja = Fixnum.from_json(_o['aloittaja']) unless _o['aloittaja'].nil?
      @lopettaja = Fixnum.from_json(_o['lopettaja']) unless _o['lopettaja'].nil?
      @poistettu = Fixnum.from_json(_o['poistettu']) unless _o['poistettu'].nil?
      @muutosaika = Time.from_json(_o['muutosaika']) unless _o['muutosaika'].nil?
      @muutospaikka = Fixnum.from_json(_o['muutospaikka']) unless _o['muutospaikka'].nil?
    end

    # constructs a LaakitysTauko from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Palvelupaatos

  # (no documentation provided)
  class PaatosSeurantaTilaCodes

    # 
    SUUNNITELTU = "SUUNNITELTU"

    # 
    MUUTETTU = "MUUTETTU"

    # 
    KESKEYTETTY = "KESKEYTETTY"

    # 
    KESKEN = "KESKEN"

    # 
    TOTEUTUNUT = "TOTEUTUNUT"

    # 
    ITSE_PERUNUT = "ITSE_PERUNUT"

    # 
    PERUUTETTU = "PERUUTETTU"

    # 
    EI_TOTEUTUNUT = "EI_TOTEUTUNUT"
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class TutkimuspyyntoMikrobi < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # (no documentation provided)
    attr_accessor :rivi
    # (no documentation provided)
    attr_accessor :mikrobi
    # (no documentation provided)
    attr_accessor :tutkimustyyppi
    # (no documentation provided)
    attr_accessor :maara
    # (no documentation provided)
    attr_accessor :numero
    # (no documentation provided)
    attr_accessor :kommentti
    # (no documentation provided)
    attr_accessor :poistettu
    # (no documentation provided)
    attr_accessor :muutosaika
    # (no documentation provided)
    attr_accessor :muutospaikka
    # (no documentation provided)
    attr_accessor :herkkyydet

    # the json hash for this TutkimuspyyntoMikrobi
    def to_jaxb_json_hash
      _h = super
      _h['rivi'] = rivi.to_jaxb_json_hash unless rivi.nil?
      _h['mikrobi'] = mikrobi.to_jaxb_json_hash unless mikrobi.nil?
      _h['tutkimustyyppi'] = tutkimustyyppi.to_jaxb_json_hash unless tutkimustyyppi.nil?
      _h['maara'] = maara.to_jaxb_json_hash unless maara.nil?
      _h['numero'] = numero.to_jaxb_json_hash unless numero.nil?
      _h['kommentti'] = kommentti.to_jaxb_json_hash unless kommentti.nil?
      _h['poistettu'] = poistettu.to_jaxb_json_hash unless poistettu.nil?
      _h['muutosaika'] = muutosaika.to_jaxb_json_hash unless muutosaika.nil?
      _h['muutospaikka'] = muutospaikka.to_jaxb_json_hash unless muutospaikka.nil?
      if !herkkyydet.nil?
        _ha = Array.new
        herkkyydet.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['herkkyydet'] = _ha
      end
      return _h
    end

    #initializes this TutkimuspyyntoMikrobi with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @rivi = Fixnum.from_json(_o['rivi']) unless _o['rivi'].nil?
      @mikrobi = String.from_json(_o['mikrobi']) unless _o['mikrobi'].nil?
      @tutkimustyyppi = Fixnum.from_json(_o['tutkimustyyppi']) unless _o['tutkimustyyppi'].nil?
      @maara = String.from_json(_o['maara']) unless _o['maara'].nil?
      @numero = String.from_json(_o['numero']) unless _o['numero'].nil?
      @kommentti = String.from_json(_o['kommentti']) unless _o['kommentti'].nil?
      @poistettu = Fixnum.from_json(_o['poistettu']) unless _o['poistettu'].nil?
      @muutosaika = Time.from_json(_o['muutosaika']) unless _o['muutosaika'].nil?
      @muutospaikka = Fixnum.from_json(_o['muutospaikka']) unless _o['muutospaikka'].nil?
      if !_o['herkkyydet'].nil?
        @herkkyydet = Array.new
        _oa = _o['herkkyydet']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @herkkyydet.push Fi::Mediconsult::Core::Client::Dto::TutkimuspyyntoHerkkyys.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @herkkyydet.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
    end

    # constructs a TutkimuspyyntoMikrobi from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Event

  # (no documentation provided)
  class EventCustomerDto < Fi::Mediconsult::Mediplan::Dto::Event::EventParticipantDto 

    # the amount
    attr_accessor :amount
    # the coursePeriodId
    attr_accessor :coursePeriodId
    # the serviceDecision
    attr_accessor :serviceDecision

    # the json hash for this EventCustomerDto
    def to_jaxb_json_hash
      _h = super
      _h['amount'] = amount.to_jaxb_json_hash unless amount.nil?
      _h['coursePeriodId'] = coursePeriodId.to_jaxb_json_hash unless coursePeriodId.nil?
      _h['serviceDecision'] = serviceDecision.to_jaxb_json_hash unless serviceDecision.nil?
      return _h
    end

    #initializes this EventCustomerDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @amount = Fixnum.from_json(_o['amount']) unless _o['amount'].nil?
      @coursePeriodId = Bignum.from_json(_o['coursePeriodId']) unless _o['coursePeriodId'].nil?
      @serviceDecision = Fi::Mediconsult::Core::Client::Dto::Palvelupaatos::Palvelupaatos.from_json(_o['serviceDecision']) unless _o['serviceDecision'].nil?
    end

    # constructs a EventCustomerDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class PuutteellinenStatus

    # 
    UNDEFINED = "UNDEFINED"

    # 
    PUUTTEELLINEN = "PUUTTEELLINEN"

    # 
    OK = "OK"
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Laakitys

  # (no documentation provided)
  class LaakitysTapa < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # Returns the &quot;antoreitti&quot; in code
    attr_accessor :reittikoodi
    # Returns the &quot;antoreitti&quot; in text
    attr_accessor :reittiteksti
    # Returns the &quot;antopaikka&quot; in code
    attr_accessor :paikkakoodi
    # Returns the &quot;antopaikka&quot; in text
    attr_accessor :paikkateksti
    # Returns the &quot;antov�line&quot; in code
    attr_accessor :valinekoodi
    # Returns the &quot;antov�line&quot; in text
    attr_accessor :valineteksti
    # Returns the &quot;antotapa&quot; in code
    attr_accessor :tapakoodi
    # Returns the &quot;antotapa&quot; in text
    attr_accessor :tapateksti

    # the json hash for this LaakitysTapa
    def to_jaxb_json_hash
      _h = super
      _h['reittikoodi'] = reittikoodi.to_jaxb_json_hash unless reittikoodi.nil?
      _h['reittiteksti'] = reittiteksti.to_jaxb_json_hash unless reittiteksti.nil?
      _h['paikkakoodi'] = paikkakoodi.to_jaxb_json_hash unless paikkakoodi.nil?
      _h['paikkateksti'] = paikkateksti.to_jaxb_json_hash unless paikkateksti.nil?
      _h['valinekoodi'] = valinekoodi.to_jaxb_json_hash unless valinekoodi.nil?
      _h['valineteksti'] = valineteksti.to_jaxb_json_hash unless valineteksti.nil?
      _h['tapakoodi'] = tapakoodi.to_jaxb_json_hash unless tapakoodi.nil?
      _h['tapateksti'] = tapateksti.to_jaxb_json_hash unless tapateksti.nil?
      return _h
    end

    #initializes this LaakitysTapa with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @reittikoodi = String.from_json(_o['reittikoodi']) unless _o['reittikoodi'].nil?
      @reittiteksti = String.from_json(_o['reittiteksti']) unless _o['reittiteksti'].nil?
      @paikkakoodi = String.from_json(_o['paikkakoodi']) unless _o['paikkakoodi'].nil?
      @paikkateksti = String.from_json(_o['paikkateksti']) unless _o['paikkateksti'].nil?
      @valinekoodi = String.from_json(_o['valinekoodi']) unless _o['valinekoodi'].nil?
      @valineteksti = String.from_json(_o['valineteksti']) unless _o['valineteksti'].nil?
      @tapakoodi = String.from_json(_o['tapakoodi']) unless _o['tapakoodi'].nil?
      @tapateksti = String.from_json(_o['tapateksti']) unless _o['tapateksti'].nil?
    end

    # constructs a LaakitysTapa from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Laakitys

  # (no documentation provided)
  class LaakeYhteisvaikutus < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # Returns the ATC code or the name of the agent (atc tai vaikuttava aine)
    attr_accessor :aine
    # Returns the used code system
    # -If getAine returns an ATC code, getKoodisto returns &quot;ATC&quot;
    attr_accessor :koodisto
    # Returns the origin of interaction
    # -&#39;O&#39; if interaction is linked in the current organization
    # -&#39;A&#39; or &#39;M&#39; otherwise
    attr_accessor :alkupera

    # the json hash for this LaakeYhteisvaikutus
    def to_jaxb_json_hash
      _h = super
      _h['aine'] = aine.to_jaxb_json_hash unless aine.nil?
      _h['koodisto'] = koodisto.to_jaxb_json_hash unless koodisto.nil?
      _h['alkupera'] = alkupera.to_jaxb_json_hash unless alkupera.nil?
      return _h
    end

    #initializes this LaakeYhteisvaikutus with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @aine = String.from_json(_o['aine']) unless _o['aine'].nil?
      @koodisto = String.from_json(_o['koodisto']) unless _o['koodisto'].nil?
      @alkupera = Fixnum.from_json(_o['alkupera']) unless _o['alkupera'].nil?
    end

    # constructs a LaakeYhteisvaikutus from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Omistaja

  # (no documentation provided)
  class Unit < Fi::Mediconsult::Core::Client::Dto::Omistaja::GenericOmistaja 

    # the abbreviation
    attr_accessor :abbreviation
    # (no documentation provided)
    attr_accessor :basicInfo

    # the json hash for this Unit
    def to_jaxb_json_hash
      _h = super
      _h['abbreviation'] = abbreviation.to_jaxb_json_hash unless abbreviation.nil?
      _h['basicInfo'] = basicInfo.to_jaxb_json_hash unless basicInfo.nil?
      return _h
    end

    #initializes this Unit with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @abbreviation = String.from_json(_o['abbreviation']) unless _o['abbreviation'].nil?
      @basicInfo = Fi::Mediconsult::Core::Client::Dto::Omistaja::LazyLoadedDto.from_json(_o['basicInfo']) unless _o['basicInfo'].nil?
    end

    # constructs a Unit from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Setup

  # (no documentation provided)
  class FreeContentGroupItem < Fi::Mediconsult::Mediplan::Dto::KuhaDtoBase 

    # (no documentation provided)
    attr_accessor :title
    # (no documentation provided)
    attr_accessor :meaningId
    # (no documentation provided)
    attr_accessor :meaningChangeable
    # (no documentation provided)
    attr_accessor :ordering
    # (no documentation provided)
    attr_accessor :mandatory
    # (no documentation provided)
    attr_accessor :changeable

    # the json hash for this FreeContentGroupItem
    def to_jaxb_json_hash
      _h = super
      _h['title'] = title.to_jaxb_json_hash unless title.nil?
      _h['meaningId'] = meaningId.to_jaxb_json_hash unless meaningId.nil?
      _h['meaningChangeable'] = meaningChangeable.to_jaxb_json_hash unless meaningChangeable.nil?
      _h['ordering'] = ordering.to_jaxb_json_hash unless ordering.nil?
      _h['mandatory'] = mandatory.to_jaxb_json_hash unless mandatory.nil?
      _h['changeable'] = changeable.to_jaxb_json_hash unless changeable.nil?
      return _h
    end

    #initializes this FreeContentGroupItem with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @title = Fi::Mediconsult::Core::Client::Dto::Title::BaseTitleValue.from_json(_o['title']) unless _o['title'].nil?
      @meaningId = Fixnum.from_json(_o['meaningId']) unless _o['meaningId'].nil?
      @meaningChangeable = Boolean.from_json(_o['meaningChangeable']) unless _o['meaningChangeable'].nil?
      @ordering = Fixnum.from_json(_o['ordering']) unless _o['ordering'].nil?
      @mandatory = Boolean.from_json(_o['mandatory']) unless _o['mandatory'].nil?
      @changeable = Boolean.from_json(_o['changeable']) unless _o['changeable'].nil?
    end

    # constructs a FreeContentGroupItem from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Hoito

  # (no documentation provided)
  class Hoito < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # Returns the alkaa date
    attr_accessor :alkaa
    # Returns the loppuu date
    attr_accessor :loppuu
    # Returns the maaraaja id
    attr_accessor :maaraaja
    # Returns the tekija id
    attr_accessor :tekija
    # Returns the header (otsikko)
    attr_accessor :otsikko
    # Returns the constant string (vakio)
    attr_accessor :vakio
    # Returns the free string (vapaa)
    attr_accessor :vapaa
    # Returns the notifications (huomautuksia)
    attr_accessor :huomautuksia
    # Returns the times as a string
    attr_accessor :kellonajat
    # Returns the recorder (kirjaaja)
    attr_accessor :kirjaaja
    # Returns the ender (lopettaja)
    attr_accessor :lopettaja
    # Returns the time of ending (lopetettu)
    attr_accessor :lopetettu
    # 
    attr_accessor :kerta
    # Returns the time when Hoito is done
    attr_accessor :tehty
    # 
    attr_accessor :lomake
    # Returns the row number (rivi)
    attr_accessor :rivi
    # Returns the time of change
    attr_accessor :muutosaika
    # (no documentation provided)
    attr_accessor :maaraajaNimi
    # (no documentation provided)
    attr_accessor :kirjaajaNimi
    # (no documentation provided)
    attr_accessor :tekijaNimi
    # (no documentation provided)
    attr_accessor :lopettajaNimi
    # (no documentation provided)
    attr_accessor :lomakeNimi

    # the json hash for this Hoito
    def to_jaxb_json_hash
      _h = super
      _h['alkaa'] = alkaa.to_jaxb_json_hash unless alkaa.nil?
      _h['loppuu'] = loppuu.to_jaxb_json_hash unless loppuu.nil?
      _h['maaraaja'] = maaraaja.to_jaxb_json_hash unless maaraaja.nil?
      _h['tekija'] = tekija.to_jaxb_json_hash unless tekija.nil?
      _h['otsikko'] = otsikko.to_jaxb_json_hash unless otsikko.nil?
      _h['vakio'] = vakio.to_jaxb_json_hash unless vakio.nil?
      _h['vapaa'] = vapaa.to_jaxb_json_hash unless vapaa.nil?
      _h['huomautuksia'] = huomautuksia.to_jaxb_json_hash unless huomautuksia.nil?
      _h['kellonajat'] = kellonajat.to_jaxb_json_hash unless kellonajat.nil?
      _h['kirjaaja'] = kirjaaja.to_jaxb_json_hash unless kirjaaja.nil?
      _h['lopettaja'] = lopettaja.to_jaxb_json_hash unless lopettaja.nil?
      _h['lopetettu'] = lopetettu.to_jaxb_json_hash unless lopetettu.nil?
      _h['kerta'] = kerta.to_jaxb_json_hash unless kerta.nil?
      _h['tehty'] = tehty.to_jaxb_json_hash unless tehty.nil?
      _h['lomake'] = lomake.to_jaxb_json_hash unless lomake.nil?
      _h['rivi'] = rivi.to_jaxb_json_hash unless rivi.nil?
      _h['muutosaika'] = muutosaika.to_jaxb_json_hash unless muutosaika.nil?
      _h['maaraajaNimi'] = maaraajaNimi.to_jaxb_json_hash unless maaraajaNimi.nil?
      _h['kirjaajaNimi'] = kirjaajaNimi.to_jaxb_json_hash unless kirjaajaNimi.nil?
      _h['tekijaNimi'] = tekijaNimi.to_jaxb_json_hash unless tekijaNimi.nil?
      _h['lopettajaNimi'] = lopettajaNimi.to_jaxb_json_hash unless lopettajaNimi.nil?
      _h['lomakeNimi'] = lomakeNimi.to_jaxb_json_hash unless lomakeNimi.nil?
      return _h
    end

    #initializes this Hoito with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @alkaa = Java::Sql::Date.from_json(_o['alkaa']) unless _o['alkaa'].nil?
      @loppuu = Java::Sql::Date.from_json(_o['loppuu']) unless _o['loppuu'].nil?
      @maaraaja = Fixnum.from_json(_o['maaraaja']) unless _o['maaraaja'].nil?
      @tekija = Fixnum.from_json(_o['tekija']) unless _o['tekija'].nil?
      @otsikko = String.from_json(_o['otsikko']) unless _o['otsikko'].nil?
      @vakio = String.from_json(_o['vakio']) unless _o['vakio'].nil?
      @vapaa = String.from_json(_o['vapaa']) unless _o['vapaa'].nil?
      @huomautuksia = String.from_json(_o['huomautuksia']) unless _o['huomautuksia'].nil?
      @kellonajat = String.from_json(_o['kellonajat']) unless _o['kellonajat'].nil?
      @kirjaaja = Fixnum.from_json(_o['kirjaaja']) unless _o['kirjaaja'].nil?
      @lopettaja = Fixnum.from_json(_o['lopettaja']) unless _o['lopettaja'].nil?
      @lopetettu = Time.from_json(_o['lopetettu']) unless _o['lopetettu'].nil?
      @kerta = Fixnum.from_json(_o['kerta']) unless _o['kerta'].nil?
      @tehty = Time.from_json(_o['tehty']) unless _o['tehty'].nil?
      @lomake = Fixnum.from_json(_o['lomake']) unless _o['lomake'].nil?
      @rivi = Fixnum.from_json(_o['rivi']) unless _o['rivi'].nil?
      @muutosaika = Time.from_json(_o['muutosaika']) unless _o['muutosaika'].nil?
      @maaraajaNimi = String.from_json(_o['maaraajaNimi']) unless _o['maaraajaNimi'].nil?
      @kirjaajaNimi = String.from_json(_o['kirjaajaNimi']) unless _o['kirjaajaNimi'].nil?
      @tekijaNimi = String.from_json(_o['tekijaNimi']) unless _o['tekijaNimi'].nil?
      @lopettajaNimi = String.from_json(_o['lopettajaNimi']) unless _o['lopettajaNimi'].nil?
      @lomakeNimi = String.from_json(_o['lomakeNimi']) unless _o['lomakeNimi'].nil?
    end

    # constructs a Hoito from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Palvelupaatos

  # (no documentation provided)
  class Laatu

    # 
    KIELTEINEN = "KIELTEINEN"

    # 
    OSITTAIN_KIELTEINEN = "OSITTAIN_KIELTEINEN"

    # 
    MYONTEINEN = "MYONTEINEN"
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Title

  # (no documentation provided)
  class BaseTitleValue < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # (no documentation provided)
    attr_accessor :type
    # (no documentation provided)
    attr_accessor :vapaa
    # (no documentation provided)
    attr_accessor :editModel
    # (no documentation provided)
    attr_accessor :vakio
    # (no documentation provided)
    attr_accessor :name

    # the json hash for this BaseTitleValue
    def to_jaxb_json_hash
      _h = super
      _h['type'] = type.to_jaxb_json_hash unless type.nil?
      _h['vapaa'] = vapaa.to_jaxb_json_hash unless vapaa.nil?
      _h['editModel'] = editModel.to_jaxb_json_hash unless editModel.nil?
      _h['vakio'] = vakio.to_jaxb_json_hash unless vakio.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      return _h
    end

    #initializes this BaseTitleValue with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @type = Fixnum.from_json(_o['type']) unless _o['type'].nil?
      @vapaa = String.from_json(_o['vapaa']) unless _o['vapaa'].nil?
      @editModel = Boolean.from_json(_o['editModel']) unless _o['editModel'].nil?
      @vakio = String.from_json(_o['vakio']) unless _o['vakio'].nil?
      @name = String.from_json(_o['name']) unless _o['name'].nil?
    end

    # constructs a BaseTitleValue from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Course

  # (no documentation provided)
  class TagsForPeriodDto < Fi::Mediconsult::Mediplan::Dto::KuhaDtoBase 

    # Name of the tag
    attr_accessor :name
    # true if removed
    attr_accessor :removed
    # id of the Tag-Period association
    attr_accessor :periodTagId
    # (no documentation provided)
    attr_accessor :tagId

    # the json hash for this TagsForPeriodDto
    def to_jaxb_json_hash
      _h = super
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['removed'] = removed.to_jaxb_json_hash unless removed.nil?
      _h['periodTagId'] = periodTagId.to_jaxb_json_hash unless periodTagId.nil?
      _h['tagId'] = tagId.to_jaxb_json_hash unless tagId.nil?
      return _h
    end

    #initializes this TagsForPeriodDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @name = String.from_json(_o['name']) unless _o['name'].nil?
      @removed = Boolean.from_json(_o['removed']) unless _o['removed'].nil?
      @periodTagId = Bignum.from_json(_o['periodTagId']) unless _o['periodTagId'].nil?
      @tagId = Bignum.from_json(_o['tagId']) unless _o['tagId'].nil?
    end

    # constructs a TagsForPeriodDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

  # (no documentation provided)
  class LaakitysAnto < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # Returns the id of the medication giver
    attr_accessor :antaja
    # Returns the observetion comments related to the medication giving
    attr_accessor :huomautuksia
    # Returns the id of the actual person that fed this info to the DB/system
    attr_accessor :kirjaaja
    # Returns the laake VNR. VNR is a code that is used to identify the medication. @see http://www.laaketietokeskus.fi/vnr
    attr_accessor :laake
    # Returns the medication amount
    attr_accessor :maara
    # Returns the actual DB-change time of the medication giving
    attr_accessor :muutosAika
    # Returns the owner ie. patients mediatri id.
    attr_accessor :omistaja
    # Retuns the part number that is the id of the medication together with alku and omistaja
    attr_accessor :osa
    # Returns the code of the medication time removal. &#39;E&#39; - not removed, &#39;K&#39; = removed
    attr_accessor :poistettu
    # Returns the planned time for medication. Tells which time the medication should be given
    attr_accessor :suunniteltuAika
    # Returns the actual time of medication. Mapped from PK id ALKU
    attr_accessor :toteutunutAika
    # Returns the actual end time of medication. a.k.a. LOPPU
    attr_accessor :toteutunutAikaLoppu
    # Returns the type of LaakitysAnto object, 1 = planned and given, 2 = planned but not yet given, 3 = extra
    attr_accessor :tyyppi
    # Returns the used unit. ml, l, etc.
    attr_accessor :yksikko
    # Returns the name of the actual person that fed this info to the DB/system
    attr_accessor :kirjaajaName
    # Returns the name of the medication giver
    attr_accessor :antajaName
    # Returns the base amount that is given if swiped. Also the lower border of the amount.
    attr_accessor :annettavaMaara
    # Returns the base unit that is described by laakityshistoria.
    attr_accessor :annettavaYksikko
    # Returns the uuper border of the amount.
    attr_accessor :annettavaMaksimi
    # Original time of medication. mapped from PK id ALKU. This PK is modified so to find the modifiable row the old row must be also given.
    attr_accessor :toteutunutAikaOriginal

    # the json hash for this LaakitysAnto
    def to_jaxb_json_hash
      _h = super
      _h['antaja'] = antaja.to_jaxb_json_hash unless antaja.nil?
      _h['huomautuksia'] = huomautuksia.to_jaxb_json_hash unless huomautuksia.nil?
      _h['kirjaaja'] = kirjaaja.to_jaxb_json_hash unless kirjaaja.nil?
      _h['laake'] = laake.to_jaxb_json_hash unless laake.nil?
      _h['maara'] = maara.to_jaxb_json_hash unless maara.nil?
      _h['muutosAika'] = muutosAika.to_jaxb_json_hash unless muutosAika.nil?
      _h['omistaja'] = omistaja.to_jaxb_json_hash unless omistaja.nil?
      _h['osa'] = osa.to_jaxb_json_hash unless osa.nil?
      _h['poistettu'] = poistettu.to_jaxb_json_hash unless poistettu.nil?
      _h['suunniteltuAika'] = suunniteltuAika.to_jaxb_json_hash unless suunniteltuAika.nil?
      _h['toteutunutAika'] = toteutunutAika.to_jaxb_json_hash unless toteutunutAika.nil?
      _h['toteutunutAikaLoppu'] = toteutunutAikaLoppu.to_jaxb_json_hash unless toteutunutAikaLoppu.nil?
      _h['tyyppi'] = tyyppi.to_jaxb_json_hash unless tyyppi.nil?
      _h['yksikko'] = yksikko.to_jaxb_json_hash unless yksikko.nil?
      _h['kirjaajaName'] = kirjaajaName.to_jaxb_json_hash unless kirjaajaName.nil?
      _h['antajaName'] = antajaName.to_jaxb_json_hash unless antajaName.nil?
      _h['annettavaMaara'] = annettavaMaara.to_jaxb_json_hash unless annettavaMaara.nil?
      _h['annettavaYksikko'] = annettavaYksikko.to_jaxb_json_hash unless annettavaYksikko.nil?
      _h['annettavaMaksimi'] = annettavaMaksimi.to_jaxb_json_hash unless annettavaMaksimi.nil?
      _h['toteutunutAikaOriginal'] = toteutunutAikaOriginal.to_jaxb_json_hash unless toteutunutAikaOriginal.nil?
      return _h
    end

    #initializes this LaakitysAnto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @antaja = Fixnum.from_json(_o['antaja']) unless _o['antaja'].nil?
      @huomautuksia = String.from_json(_o['huomautuksia']) unless _o['huomautuksia'].nil?
      @kirjaaja = Fixnum.from_json(_o['kirjaaja']) unless _o['kirjaaja'].nil?
      @laake = String.from_json(_o['laake']) unless _o['laake'].nil?
      @maara = Float.from_json(_o['maara']) unless _o['maara'].nil?
      @muutosAika = Time.from_json(_o['muutosAika']) unless _o['muutosAika'].nil?
      @omistaja = Fixnum.from_json(_o['omistaja']) unless _o['omistaja'].nil?
      @osa = Fixnum.from_json(_o['osa']) unless _o['osa'].nil?
      @poistettu = Fixnum.from_json(_o['poistettu']) unless _o['poistettu'].nil?
      @suunniteltuAika = Time.from_json(_o['suunniteltuAika']) unless _o['suunniteltuAika'].nil?
      @toteutunutAika = Time.from_json(_o['toteutunutAika']) unless _o['toteutunutAika'].nil?
      @toteutunutAikaLoppu = Time.from_json(_o['toteutunutAikaLoppu']) unless _o['toteutunutAikaLoppu'].nil?
      @tyyppi = Fixnum.from_json(_o['tyyppi']) unless _o['tyyppi'].nil?
      @yksikko = String.from_json(_o['yksikko']) unless _o['yksikko'].nil?
      @kirjaajaName = String.from_json(_o['kirjaajaName']) unless _o['kirjaajaName'].nil?
      @antajaName = String.from_json(_o['antajaName']) unless _o['antajaName'].nil?
      @annettavaMaara = Float.from_json(_o['annettavaMaara']) unless _o['annettavaMaara'].nil?
      @annettavaYksikko = String.from_json(_o['annettavaYksikko']) unless _o['annettavaYksikko'].nil?
      @annettavaMaksimi = Float.from_json(_o['annettavaMaksimi']) unless _o['annettavaMaksimi'].nil?
      @toteutunutAikaOriginal = Time.from_json(_o['toteutunutAikaOriginal']) unless _o['toteutunutAikaOriginal'].nil?
    end

    # constructs a LaakitysAnto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Event

  # (no documentation provided)
  class EventDto < Fi::Mediconsult::Mediplan::Dto::KuhaDtoBase 

    # the startTime
    attr_accessor :startTime
    # the durationInMinutes
    attr_accessor :durationInMinutes
    # the recurrenceCode
    attr_accessor :recurrenceCode
    # the recurrenceEndDate
    attr_accessor :recurrenceEndDate
    # the name
    attr_accessor :name
    # the abbreviation
    attr_accessor :abbreviation
    # the character
    attr_accessor :character
    # the eventModel
    attr_accessor :eventModelId
    # the calendarContext
    attr_accessor :calendarContext
    # the excludedDays
    attr_accessor :excludedDays
    # (no documentation provided)
    attr_accessor :reportingGroup
    # the unitBasicInfoTitles
    attr_accessor :unitBasicInfoTitles

    # the json hash for this EventDto
    def to_jaxb_json_hash
      _h = super
      _h['startTime'] = startTime.to_jaxb_json_hash unless startTime.nil?
      _h['durationInMinutes'] = durationInMinutes.to_jaxb_json_hash unless durationInMinutes.nil?
      _h['recurrenceCode'] = recurrenceCode.to_jaxb_json_hash unless recurrenceCode.nil?
      _h['recurrenceEndDate'] = recurrenceEndDate.to_jaxb_json_hash unless recurrenceEndDate.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['abbreviation'] = abbreviation.to_jaxb_json_hash unless abbreviation.nil?
      _h['character'] = character.to_jaxb_json_hash unless character.nil?
      _h['eventModelId'] = eventModelId.to_jaxb_json_hash unless eventModelId.nil?
      _h['calendarContext'] = calendarContext.to_jaxb_json_hash unless calendarContext.nil?
      if !excludedDays.nil?
        _ha = Array.new
        excludedDays.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['excludedDays'] = _ha
      end
      _h['reportingGroup'] = reportingGroup.to_jaxb_json_hash unless reportingGroup.nil?
      if !unitBasicInfoTitles.nil?
        _ha = Array.new
        unitBasicInfoTitles.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['unitBasicInfoTitles'] = _ha
      end
      return _h
    end

    #initializes this EventDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @startTime = java.time::OffsetDateTime.from_json(_o['startTime']) unless _o['startTime'].nil?
      @durationInMinutes = Fixnum.from_json(_o['durationInMinutes']) unless _o['durationInMinutes'].nil?
      @recurrenceCode = String.from_json(_o['recurrenceCode']) unless _o['recurrenceCode'].nil?
      @recurrenceEndDate = java.time::LocalDate.from_json(_o['recurrenceEndDate']) unless _o['recurrenceEndDate'].nil?
      @name = String.from_json(_o['name']) unless _o['name'].nil?
      @abbreviation = String.from_json(_o['abbreviation']) unless _o['abbreviation'].nil?
      @character = String.from_json(_o['character']) unless _o['character'].nil?
      @eventModelId = Bignum.from_json(_o['eventModelId']) unless _o['eventModelId'].nil?
      @calendarContext = Fi::Mediconsult::Mediplan::Dto::CalendarContextDto.from_json(_o['calendarContext']) unless _o['calendarContext'].nil?
      if !_o['excludedDays'].nil?
        @excludedDays = Array.new
        _oa = _o['excludedDays']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @excludedDays.push java.time::LocalDate.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @excludedDays.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
      @reportingGroup = Fi::Mediconsult::Mediplan::Dto::Setup::ReportingGroupDto.from_json(_o['reportingGroup']) unless _o['reportingGroup'].nil?
      if !_o['unitBasicInfoTitles'].nil?
        @unitBasicInfoTitles = Array.new
        _oa = _o['unitBasicInfoTitles']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @unitBasicInfoTitles.push Fi::Mediconsult::Core::Client::Dto::Title::BaseTitleValue.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @unitBasicInfoTitles.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
    end

    # constructs a EventDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Kertomus

  # (no documentation provided)
  class KertomusTilaEnum

    # 
    KERTOMUS_LUONNOS = "KERTOMUS_LUONNOS"

    # 
    KERTOMUS_KESKEN = "KERTOMUS_KESKEN"

    # 
    KERTOMUS_VALMIS = "KERTOMUS_VALMIS"

    # 
    KERTOMUS_UNDEFIND = "KERTOMUS_UNDEFIND"
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Laakitys

  # (no documentation provided)
  class LaakitysKayttoaihe < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # Returns the row number, which arranges the LaakitysKayttoaihe entities in order of importance
    attr_accessor :rivi
    # Returns the unique id of Kayttoaihe
    attr_accessor :numero
    # Returns the name of the Kayttoaihe in plain languate
    attr_accessor :selite
    # Returns the name of the Kayttoaihe which is printed to the prescription
    attr_accessor :reseptiteksti
    # Returns the origin of the Kayttoaihe
    # -&quot;O&quot; if added by organization itself
    # -&quot;A&quot; or &quot;M&quot; otherwise
    attr_accessor :alkupera
    # Returns the type of the Kayttoaihe
    # -&quot;C&quot; if Kayttoaihe
    # -&quot;G&quot; if group
    # -&quot;D&quot; if deleted
    attr_accessor :tyyppi
    # Returns the code of the kayttoaihe removal. &#39;E&#39; - not removed, &#39;K&#39; = removed
    attr_accessor :poistettu
    # Returns the actual DB-change time of the Kayttoaihe
    attr_accessor :muutosaika
    # Returns the organization in which the change has been made
    attr_accessor :muutospaikka

    # the json hash for this LaakitysKayttoaihe
    def to_jaxb_json_hash
      _h = super
      _h['rivi'] = rivi.to_jaxb_json_hash unless rivi.nil?
      _h['numero'] = numero.to_jaxb_json_hash unless numero.nil?
      _h['selite'] = selite.to_jaxb_json_hash unless selite.nil?
      _h['reseptiteksti'] = reseptiteksti.to_jaxb_json_hash unless reseptiteksti.nil?
      _h['alkupera'] = alkupera.to_jaxb_json_hash unless alkupera.nil?
      _h['tyyppi'] = tyyppi.to_jaxb_json_hash unless tyyppi.nil?
      _h['poistettu'] = poistettu.to_jaxb_json_hash unless poistettu.nil?
      _h['muutosaika'] = muutosaika.to_jaxb_json_hash unless muutosaika.nil?
      _h['muutospaikka'] = muutospaikka.to_jaxb_json_hash unless muutospaikka.nil?
      return _h
    end

    #initializes this LaakitysKayttoaihe with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @rivi = Fixnum.from_json(_o['rivi']) unless _o['rivi'].nil?
      @numero = Fixnum.from_json(_o['numero']) unless _o['numero'].nil?
      @selite = String.from_json(_o['selite']) unless _o['selite'].nil?
      @reseptiteksti = String.from_json(_o['reseptiteksti']) unless _o['reseptiteksti'].nil?
      @alkupera = Fixnum.from_json(_o['alkupera']) unless _o['alkupera'].nil?
      @tyyppi = Fixnum.from_json(_o['tyyppi']) unless _o['tyyppi'].nil?
      @poistettu = Fixnum.from_json(_o['poistettu']) unless _o['poistettu'].nil?
      @muutosaika = Time.from_json(_o['muutosaika']) unless _o['muutosaika'].nil?
      @muutospaikka = Fixnum.from_json(_o['muutospaikka']) unless _o['muutospaikka'].nil?
    end

    # constructs a LaakitysKayttoaihe from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Kuha

module Util

  # (no documentation provided)
  class Meaning

    # 
    AVAILABLE = "AVAILABLE"

    # 
    BUSY_MANDATORY = "BUSY_MANDATORY"

    # 
    BUSY_OPTIONAL = "BUSY_OPTIONAL"
  end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Event

  # (no documentation provided)
  class EventWorkerDto < Fi::Mediconsult::Mediplan::Dto::Event::EventParticipantDto 

    # the skillid
    attr_accessor :skillid
    # the workingHoursConflict
    attr_accessor :workingHoursConflict
    # the required
    attr_accessor :required

    # the json hash for this EventWorkerDto
    def to_jaxb_json_hash
      _h = super
      _h['skillid'] = skillid.to_jaxb_json_hash unless skillid.nil?
      _h['workingHoursConflict'] = workingHoursConflict.to_jaxb_json_hash unless workingHoursConflict.nil?
      _h['required'] = required.to_jaxb_json_hash unless required.nil?
      return _h
    end

    #initializes this EventWorkerDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @skillid = Bignum.from_json(_o['skillid']) unless _o['skillid'].nil?
      @workingHoursConflict = Boolean.from_json(_o['workingHoursConflict']) unless _o['workingHoursConflict'].nil?
      @required = Boolean.from_json(_o['required']) unless _o['required'].nil?
    end

    # constructs a EventWorkerDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Course

  # (no documentation provided)
  class CourseCustomerDto < Fi::Mediconsult::Mediplan::Dto::KuhaDtoBase 

    # (no documentation provided)
    attr_accessor :customerId
    # (no documentation provided)
    attr_accessor :removed
    # true if canceled
    attr_accessor :canceled
    # the assignedCoach
    attr_accessor :assignedCoach

    # the json hash for this CourseCustomerDto
    def to_jaxb_json_hash
      _h = super
      _h['customerId'] = customerId.to_jaxb_json_hash unless customerId.nil?
      _h['removed'] = removed.to_jaxb_json_hash unless removed.nil?
      _h['canceled'] = canceled.to_jaxb_json_hash unless canceled.nil?
      _h['assignedCoach'] = assignedCoach.to_jaxb_json_hash unless assignedCoach.nil?
      return _h
    end

    #initializes this CourseCustomerDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @customerId = Fixnum.from_json(_o['customerId']) unless _o['customerId'].nil?
      @removed = Boolean.from_json(_o['removed']) unless _o['removed'].nil?
      @canceled = Boolean.from_json(_o['canceled']) unless _o['canceled'].nil?
      @assignedCoach = Fi::Mediconsult::Mediplan::Dto::Employee.from_json(_o['assignedCoach']) unless _o['assignedCoach'].nil?
    end

    # constructs a CourseCustomerDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Course

  # (no documentation provided)
  class TagsForCourseDto < Fi::Mediconsult::Mediplan::Dto::KuhaDtoBase 

    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :removed
    # id of the KurssiTunniste
    attr_accessor :courseTagId
    # (no documentation provided)
    attr_accessor :tagId

    # the json hash for this TagsForCourseDto
    def to_jaxb_json_hash
      _h = super
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['removed'] = removed.to_jaxb_json_hash unless removed.nil?
      _h['courseTagId'] = courseTagId.to_jaxb_json_hash unless courseTagId.nil?
      _h['tagId'] = tagId.to_jaxb_json_hash unless tagId.nil?
      return _h
    end

    #initializes this TagsForCourseDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @name = String.from_json(_o['name']) unless _o['name'].nil?
      @removed = Boolean.from_json(_o['removed']) unless _o['removed'].nil?
      @courseTagId = Bignum.from_json(_o['courseTagId']) unless _o['courseTagId'].nil?
      @tagId = Bignum.from_json(_o['tagId']) unless _o['tagId'].nil?
    end

    # constructs a TagsForCourseDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Worker

  # (no documentation provided)
  class SkillDto < Fi::Mediconsult::Mediplan::Dto::KuhaDtoBase 

    # the name
    attr_accessor :name
    # the abbr
    attr_accessor :abbr
    # (no documentation provided)
    attr_accessor :removed
    # True if skill can be changed in event.
    attr_accessor :changeable

    # the json hash for this SkillDto
    def to_jaxb_json_hash
      _h = super
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['abbr'] = abbr.to_jaxb_json_hash unless abbr.nil?
      _h['removed'] = removed.to_jaxb_json_hash unless removed.nil?
      _h['changeable'] = changeable.to_jaxb_json_hash unless changeable.nil?
      return _h
    end

    #initializes this SkillDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @name = String.from_json(_o['name']) unless _o['name'].nil?
      @abbr = String.from_json(_o['abbr']) unless _o['abbr'].nil?
      @removed = Boolean.from_json(_o['removed']) unless _o['removed'].nil?
      @changeable = Boolean.from_json(_o['changeable']) unless _o['changeable'].nil?
    end

    # constructs a SkillDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Status

  # (no documentation provided)
  class EventStatus

    # 
    DRAFT = "DRAFT"

    # 
    PLANNED = "PLANNED"

    # 
    CONFIRMED = "CONFIRMED"

    # 
    ONGOING = "ONGOING"

    # 
    DONE = "DONE"

    # 
    CANCELED = "CANCELED"

    # 
    CANCELED_BY_PARTICIPANT = "CANCELED_BY_PARTICIPANT"

    # 
    CANCELED_BY_PROVIDER = "CANCELED_BY_PROVIDER"

    # 
    NOT_REALIZED = "NOT_REALIZED"

    # 
    INTERRUPTED = "INTERRUPTED"
  end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Worker

  # (no documentation provided)
  class TimeRuleDto < Fi::Mediconsult::Mediplan::Dto::KuhaDtoBase 

    # the start
    attr_accessor :start
    # the duration
    attr_accessor :durationInMinutes
    # the recurrenceEnd, null if not given or if the rule has no recurrence
    attr_accessor :recurrenceEnd
    # the recurrenceCode or null if there is no recurrence
    attr_accessor :recurrenceCode
    # the calendarContext
    attr_accessor :calendarContext
    # the calendarEventIds
    attr_accessor :calendarEventIds
    # the eventModelId
    attr_accessor :eventModelId

    # the json hash for this TimeRuleDto
    def to_jaxb_json_hash
      _h = super
      _h['start'] = start.to_jaxb_json_hash unless start.nil?
      _h['durationInMinutes'] = durationInMinutes.to_jaxb_json_hash unless durationInMinutes.nil?
      _h['recurrenceEnd'] = recurrenceEnd.to_jaxb_json_hash unless recurrenceEnd.nil?
      _h['recurrenceCode'] = recurrenceCode.to_jaxb_json_hash unless recurrenceCode.nil?
      _h['calendarContext'] = calendarContext.to_jaxb_json_hash unless calendarContext.nil?
      if !calendarEventIds.nil?
        _ha = Array.new
        calendarEventIds.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['calendarEventIds'] = _ha
      end
      _h['eventModelId'] = eventModelId.to_jaxb_json_hash unless eventModelId.nil?
      return _h
    end

    #initializes this TimeRuleDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @start = Time.from_json(_o['start']) unless _o['start'].nil?
      @durationInMinutes = Fixnum.from_json(_o['durationInMinutes']) unless _o['durationInMinutes'].nil?
      @recurrenceEnd = Time.from_json(_o['recurrenceEnd']) unless _o['recurrenceEnd'].nil?
      @recurrenceCode = String.from_json(_o['recurrenceCode']) unless _o['recurrenceCode'].nil?
      @calendarContext = Fi::Mediconsult::Mediplan::Dto::CalendarContextDto.from_json(_o['calendarContext']) unless _o['calendarContext'].nil?
      if !_o['calendarEventIds'].nil?
        @calendarEventIds = Array.new
        _oa = _o['calendarEventIds']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @calendarEventIds.push Bignum.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @calendarEventIds.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
      @eventModelId = Bignum.from_json(_o['eventModelId']) unless _o['eventModelId'].nil?
    end

    # constructs a TimeRuleDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Laakitys

  # (no documentation provided)
  class Laake < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # (no documentation provided)
    attr_accessor :koodi
    # (no documentation provided)
    attr_accessor :nimi
    # (no documentation provided)
    attr_accessor :valmistaja
    # (no documentation provided)
    attr_accessor :ehto
    # (no documentation provided)
    attr_accessor :varoituksia
    # (no documentation provided)
    attr_accessor :erityispiirre
    # (no documentation provided)
    attr_accessor :erityisluvallinen
    # (no documentation provided)
    attr_accessor :laakemuoto
    # (no documentation provided)
    attr_accessor :vahvuus
    # (no documentation provided)
    attr_accessor :vahvuusarvo
    # (no documentation provided)
    attr_accessor :vahvuusyksikko
    # (no documentation provided)
    attr_accessor :pakkaus
    # (no documentation provided)
    attr_accessor :pakkauskerroin
    # (no documentation provided)
    attr_accessor :pakkausarvo
    # (no documentation provided)
    attr_accessor :pakkausyksikko
    # (no documentation provided)
    attr_accessor :pakkaustyyppi
    # (no documentation provided)
    attr_accessor :laite
    # (no documentation provided)
    attr_accessor :hinta
    # (no documentation provided)
    attr_accessor :reseptiteksti
    # (no documentation provided)
    attr_accessor :korvattavuus
    # (no documentation provided)
    attr_accessor :substituutioryhma
    # (no documentation provided)
    attr_accessor :alkupera
    # (no documentation provided)
    attr_accessor :tila
    # (no documentation provided)
    attr_accessor :halytys
    # (no documentation provided)
    attr_accessor :erityislupaVanhenee
    # (no documentation provided)
    attr_accessor :vero
    # (no documentation provided)
    attr_accessor :peruslaakevalikoima
    # (no documentation provided)
    attr_accessor :kelpoisuusaika
    # (no documentation provided)
    attr_accessor :sailytys
    # (no documentation provided)
    attr_accessor :velvoitevarasto
    # (no documentation provided)
    attr_accessor :varoitusraja
    # (no documentation provided)
    attr_accessor :kappalevarasto
    # (no documentation provided)
    attr_accessor :tukkuhinta
    # (no documentation provided)
    attr_accessor :tarjoushinta
    # (no documentation provided)
    attr_accessor :sopimustoimittaja
    # (no documentation provided)
    attr_accessor :huomautuksia
    # (no documentation provided)
    attr_accessor :suoritelinkki
    # (no documentation provided)
    attr_accessor :kustannuslinkki
    # (no documentation provided)
    attr_accessor :poistettu
    # (no documentation provided)
    attr_accessor :muutosaika
    # (no documentation provided)
    attr_accessor :muutospaikka
    # (no documentation provided)
    attr_accessor :tilasto1
    # (no documentation provided)
    attr_accessor :tilasto2
    # (no documentation provided)
    attr_accessor :tilasto3
    # (no documentation provided)
    attr_accessor :laaketietokantaversio
    # (no documentation provided)
    attr_accessor :koodityyppi
    # (no documentation provided)
    attr_accessor :tukkunumero
    # (no documentation provided)
    attr_accessor :laji
    # (no documentation provided)
    attr_accessor :myyntiluvanHaltija
    # (no documentation provided)
    attr_accessor :myyntilupanumero
    # (no documentation provided)
    attr_accessor :rinnakkaisvalmiste
    # (no documentation provided)
    attr_accessor :laakemuototunnus
    # (no documentation provided)
    attr_accessor :substituutiokoodi
    # (no documentation provided)
    attr_accessor :laakevaihto
    # (no documentation provided)
    attr_accessor :viitehinta
    # (no documentation provided)
    attr_accessor :hintaputki
    # (no documentation provided)
    attr_accessor :reseptivalmiste
    # (no documentation provided)
    attr_accessor :maaraamisehto
    # (no documentation provided)
    attr_accessor :huume
    # (no documentation provided)
    attr_accessor :liikennevaara
    # (no documentation provided)
    attr_accessor :lapsille
    # (no documentation provided)
    attr_accessor :annosjakelu
    # (no documentation provided)
    attr_accessor :jakouurre
    # (no documentation provided)
    attr_accessor :hintamuutos
    # (no documentation provided)
    attr_accessor :suorakorvauskoodi
    # (no documentation provided)
    attr_accessor :pkv
    # (no documentation provided)
    attr_accessor :valmistusohje
    # (no documentation provided)
    attr_accessor :lisatiedot
    # (no documentation provided)
    attr_accessor :atc
    # (no documentation provided)
    attr_accessor :annostusSoveltuvuus
    # (no documentation provided)
    attr_accessor :yhteisvaikutus
    # (no documentation provided)
    attr_accessor :vastaAihe
    # (no documentation provided)
    attr_accessor :terapiaryhma
    # (no documentation provided)
    attr_accessor :koostumus
    # (no documentation provided)
    attr_accessor :tiivistelma
    # (no documentation provided)
    attr_accessor :seloste
    # (no documentation provided)
    attr_accessor :laakeaineet

    # the json hash for this Laake
    def to_jaxb_json_hash
      _h = super
      _h['koodi'] = koodi.to_jaxb_json_hash unless koodi.nil?
      _h['nimi'] = nimi.to_jaxb_json_hash unless nimi.nil?
      _h['valmistaja'] = valmistaja.to_jaxb_json_hash unless valmistaja.nil?
      _h['ehto'] = ehto.to_jaxb_json_hash unless ehto.nil?
      _h['varoituksia'] = varoituksia.to_jaxb_json_hash unless varoituksia.nil?
      _h['erityispiirre'] = erityispiirre.to_jaxb_json_hash unless erityispiirre.nil?
      _h['erityisluvallinen'] = erityisluvallinen.to_jaxb_json_hash unless erityisluvallinen.nil?
      _h['laakemuoto'] = laakemuoto.to_jaxb_json_hash unless laakemuoto.nil?
      _h['vahvuus'] = vahvuus.to_jaxb_json_hash unless vahvuus.nil?
      _h['vahvuusarvo'] = vahvuusarvo.to_jaxb_json_hash unless vahvuusarvo.nil?
      _h['vahvuusyksikko'] = vahvuusyksikko.to_jaxb_json_hash unless vahvuusyksikko.nil?
      _h['pakkaus'] = pakkaus.to_jaxb_json_hash unless pakkaus.nil?
      _h['pakkauskerroin'] = pakkauskerroin.to_jaxb_json_hash unless pakkauskerroin.nil?
      _h['pakkausarvo'] = pakkausarvo.to_jaxb_json_hash unless pakkausarvo.nil?
      _h['pakkausyksikko'] = pakkausyksikko.to_jaxb_json_hash unless pakkausyksikko.nil?
      _h['pakkaustyyppi'] = pakkaustyyppi.to_jaxb_json_hash unless pakkaustyyppi.nil?
      _h['laite'] = laite.to_jaxb_json_hash unless laite.nil?
      _h['hinta'] = hinta.to_jaxb_json_hash unless hinta.nil?
      _h['reseptiteksti'] = reseptiteksti.to_jaxb_json_hash unless reseptiteksti.nil?
      _h['korvattavuus'] = korvattavuus.to_jaxb_json_hash unless korvattavuus.nil?
      _h['substituutioryhma'] = substituutioryhma.to_jaxb_json_hash unless substituutioryhma.nil?
      _h['alkupera'] = alkupera.to_jaxb_json_hash unless alkupera.nil?
      _h['tila'] = tila.to_jaxb_json_hash unless tila.nil?
      _h['halytys'] = halytys.to_jaxb_json_hash unless halytys.nil?
      _h['erityislupaVanhenee'] = erityislupaVanhenee.to_jaxb_json_hash unless erityislupaVanhenee.nil?
      _h['vero'] = vero.to_jaxb_json_hash unless vero.nil?
      _h['peruslaakevalikoima'] = peruslaakevalikoima.to_jaxb_json_hash unless peruslaakevalikoima.nil?
      _h['kelpoisuusaika'] = kelpoisuusaika.to_jaxb_json_hash unless kelpoisuusaika.nil?
      _h['sailytys'] = sailytys.to_jaxb_json_hash unless sailytys.nil?
      _h['velvoitevarasto'] = velvoitevarasto.to_jaxb_json_hash unless velvoitevarasto.nil?
      _h['varoitusraja'] = varoitusraja.to_jaxb_json_hash unless varoitusraja.nil?
      _h['kappalevarasto'] = kappalevarasto.to_jaxb_json_hash unless kappalevarasto.nil?
      _h['tukkuhinta'] = tukkuhinta.to_jaxb_json_hash unless tukkuhinta.nil?
      _h['tarjoushinta'] = tarjoushinta.to_jaxb_json_hash unless tarjoushinta.nil?
      _h['sopimustoimittaja'] = sopimustoimittaja.to_jaxb_json_hash unless sopimustoimittaja.nil?
      _h['huomautuksia'] = huomautuksia.to_jaxb_json_hash unless huomautuksia.nil?
      _h['suoritelinkki'] = suoritelinkki.to_jaxb_json_hash unless suoritelinkki.nil?
      _h['kustannuslinkki'] = kustannuslinkki.to_jaxb_json_hash unless kustannuslinkki.nil?
      _h['poistettu'] = poistettu.to_jaxb_json_hash unless poistettu.nil?
      _h['muutosaika'] = muutosaika.to_jaxb_json_hash unless muutosaika.nil?
      _h['muutospaikka'] = muutospaikka.to_jaxb_json_hash unless muutospaikka.nil?
      _h['tilasto1'] = tilasto1.to_jaxb_json_hash unless tilasto1.nil?
      _h['tilasto2'] = tilasto2.to_jaxb_json_hash unless tilasto2.nil?
      _h['tilasto3'] = tilasto3.to_jaxb_json_hash unless tilasto3.nil?
      _h['laaketietokantaversio'] = laaketietokantaversio.to_jaxb_json_hash unless laaketietokantaversio.nil?
      _h['koodityyppi'] = koodityyppi.to_jaxb_json_hash unless koodityyppi.nil?
      _h['tukkunumero'] = tukkunumero.to_jaxb_json_hash unless tukkunumero.nil?
      _h['laji'] = laji.to_jaxb_json_hash unless laji.nil?
      _h['myyntiluvanHaltija'] = myyntiluvanHaltija.to_jaxb_json_hash unless myyntiluvanHaltija.nil?
      _h['myyntilupanumero'] = myyntilupanumero.to_jaxb_json_hash unless myyntilupanumero.nil?
      _h['rinnakkaisvalmiste'] = rinnakkaisvalmiste.to_jaxb_json_hash unless rinnakkaisvalmiste.nil?
      _h['laakemuototunnus'] = laakemuototunnus.to_jaxb_json_hash unless laakemuototunnus.nil?
      _h['substituutiokoodi'] = substituutiokoodi.to_jaxb_json_hash unless substituutiokoodi.nil?
      _h['laakevaihto'] = laakevaihto.to_jaxb_json_hash unless laakevaihto.nil?
      _h['viitehinta'] = viitehinta.to_jaxb_json_hash unless viitehinta.nil?
      _h['hintaputki'] = hintaputki.to_jaxb_json_hash unless hintaputki.nil?
      _h['reseptivalmiste'] = reseptivalmiste.to_jaxb_json_hash unless reseptivalmiste.nil?
      _h['maaraamisehto'] = maaraamisehto.to_jaxb_json_hash unless maaraamisehto.nil?
      _h['huume'] = huume.to_jaxb_json_hash unless huume.nil?
      _h['liikennevaara'] = liikennevaara.to_jaxb_json_hash unless liikennevaara.nil?
      _h['lapsille'] = lapsille.to_jaxb_json_hash unless lapsille.nil?
      _h['annosjakelu'] = annosjakelu.to_jaxb_json_hash unless annosjakelu.nil?
      _h['jakouurre'] = jakouurre.to_jaxb_json_hash unless jakouurre.nil?
      _h['hintamuutos'] = hintamuutos.to_jaxb_json_hash unless hintamuutos.nil?
      _h['suorakorvauskoodi'] = suorakorvauskoodi.to_jaxb_json_hash unless suorakorvauskoodi.nil?
      _h['pkv'] = pkv.to_jaxb_json_hash unless pkv.nil?
      _h['valmistusohje'] = valmistusohje.to_jaxb_json_hash unless valmistusohje.nil?
      _h['lisatiedot'] = lisatiedot.to_jaxb_json_hash unless lisatiedot.nil?
      if !atc.nil?
        _ha = Array.new
        atc.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['atc'] = _ha
      end
      if !annostusSoveltuvuus.nil?
        _ha = Array.new
        annostusSoveltuvuus.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['annostusSoveltuvuus'] = _ha
      end
      if !yhteisvaikutus.nil?
        _ha = Array.new
        yhteisvaikutus.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['yhteisvaikutus'] = _ha
      end
      if !vastaAihe.nil?
        _ha = Array.new
        vastaAihe.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['vastaAihe'] = _ha
      end
      if !terapiaryhma.nil?
        _ha = Array.new
        terapiaryhma.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['terapiaryhma'] = _ha
      end
      if !koostumus.nil?
        _ha = Array.new
        koostumus.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['koostumus'] = _ha
      end
      if !tiivistelma.nil?
        _ha = Array.new
        tiivistelma.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['tiivistelma'] = _ha
      end
      if !seloste.nil?
        _ha = Array.new
        seloste.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['seloste'] = _ha
      end
      if !laakeaineet.nil?
        _ha = Array.new
        laakeaineet.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['laakeaineet'] = _ha
      end
      return _h
    end

    #initializes this Laake with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @koodi = String.from_json(_o['koodi']) unless _o['koodi'].nil?
      @nimi = String.from_json(_o['nimi']) unless _o['nimi'].nil?
      @valmistaja = Fixnum.from_json(_o['valmistaja']) unless _o['valmistaja'].nil?
      @ehto = String.from_json(_o['ehto']) unless _o['ehto'].nil?
      @varoituksia = String.from_json(_o['varoituksia']) unless _o['varoituksia'].nil?
      @erityispiirre = String.from_json(_o['erityispiirre']) unless _o['erityispiirre'].nil?
      @erityisluvallinen = Fixnum.from_json(_o['erityisluvallinen']) unless _o['erityisluvallinen'].nil?
      @laakemuoto = String.from_json(_o['laakemuoto']) unless _o['laakemuoto'].nil?
      @vahvuus = String.from_json(_o['vahvuus']) unless _o['vahvuus'].nil?
      @vahvuusarvo = Float.from_json(_o['vahvuusarvo']) unless _o['vahvuusarvo'].nil?
      @vahvuusyksikko = String.from_json(_o['vahvuusyksikko']) unless _o['vahvuusyksikko'].nil?
      @pakkaus = String.from_json(_o['pakkaus']) unless _o['pakkaus'].nil?
      @pakkauskerroin = Float.from_json(_o['pakkauskerroin']) unless _o['pakkauskerroin'].nil?
      @pakkausarvo = Float.from_json(_o['pakkausarvo']) unless _o['pakkausarvo'].nil?
      @pakkausyksikko = String.from_json(_o['pakkausyksikko']) unless _o['pakkausyksikko'].nil?
      @pakkaustyyppi = String.from_json(_o['pakkaustyyppi']) unless _o['pakkaustyyppi'].nil?
      @laite = String.from_json(_o['laite']) unless _o['laite'].nil?
      @hinta = Float.from_json(_o['hinta']) unless _o['hinta'].nil?
      @reseptiteksti = String.from_json(_o['reseptiteksti']) unless _o['reseptiteksti'].nil?
      @korvattavuus = String.from_json(_o['korvattavuus']) unless _o['korvattavuus'].nil?
      @substituutioryhma = String.from_json(_o['substituutioryhma']) unless _o['substituutioryhma'].nil?
      @alkupera = Fixnum.from_json(_o['alkupera']) unless _o['alkupera'].nil?
      @tila = Fixnum.from_json(_o['tila']) unless _o['tila'].nil?
      @halytys = String.from_json(_o['halytys']) unless _o['halytys'].nil?
      @erityislupaVanhenee = Time.from_json(_o['erityislupaVanhenee']) unless _o['erityislupaVanhenee'].nil?
      @vero = String.from_json(_o['vero']) unless _o['vero'].nil?
      @peruslaakevalikoima = Fixnum.from_json(_o['peruslaakevalikoima']) unless _o['peruslaakevalikoima'].nil?
      @kelpoisuusaika = String.from_json(_o['kelpoisuusaika']) unless _o['kelpoisuusaika'].nil?
      @sailytys = String.from_json(_o['sailytys']) unless _o['sailytys'].nil?
      @velvoitevarasto = Fixnum.from_json(_o['velvoitevarasto']) unless _o['velvoitevarasto'].nil?
      @varoitusraja = Fixnum.from_json(_o['varoitusraja']) unless _o['varoitusraja'].nil?
      @kappalevarasto = Fixnum.from_json(_o['kappalevarasto']) unless _o['kappalevarasto'].nil?
      @tukkuhinta = Float.from_json(_o['tukkuhinta']) unless _o['tukkuhinta'].nil?
      @tarjoushinta = Float.from_json(_o['tarjoushinta']) unless _o['tarjoushinta'].nil?
      @sopimustoimittaja = Fixnum.from_json(_o['sopimustoimittaja']) unless _o['sopimustoimittaja'].nil?
      @huomautuksia = String.from_json(_o['huomautuksia']) unless _o['huomautuksia'].nil?
      @suoritelinkki = Fixnum.from_json(_o['suoritelinkki']) unless _o['suoritelinkki'].nil?
      @kustannuslinkki = Fixnum.from_json(_o['kustannuslinkki']) unless _o['kustannuslinkki'].nil?
      @poistettu = Fixnum.from_json(_o['poistettu']) unless _o['poistettu'].nil?
      @muutosaika = Time.from_json(_o['muutosaika']) unless _o['muutosaika'].nil?
      @muutospaikka = Fixnum.from_json(_o['muutospaikka']) unless _o['muutospaikka'].nil?
      @tilasto1 = String.from_json(_o['tilasto1']) unless _o['tilasto1'].nil?
      @tilasto2 = String.from_json(_o['tilasto2']) unless _o['tilasto2'].nil?
      @tilasto3 = String.from_json(_o['tilasto3']) unless _o['tilasto3'].nil?
      @laaketietokantaversio = String.from_json(_o['laaketietokantaversio']) unless _o['laaketietokantaversio'].nil?
      @koodityyppi = String.from_json(_o['koodityyppi']) unless _o['koodityyppi'].nil?
      @tukkunumero = String.from_json(_o['tukkunumero']) unless _o['tukkunumero'].nil?
      @laji = String.from_json(_o['laji']) unless _o['laji'].nil?
      @myyntiluvanHaltija = String.from_json(_o['myyntiluvanHaltija']) unless _o['myyntiluvanHaltija'].nil?
      @myyntilupanumero = String.from_json(_o['myyntilupanumero']) unless _o['myyntilupanumero'].nil?
      @rinnakkaisvalmiste = Fixnum.from_json(_o['rinnakkaisvalmiste']) unless _o['rinnakkaisvalmiste'].nil?
      @laakemuototunnus = String.from_json(_o['laakemuototunnus']) unless _o['laakemuototunnus'].nil?
      @substituutiokoodi = String.from_json(_o['substituutiokoodi']) unless _o['substituutiokoodi'].nil?
      @laakevaihto = Fixnum.from_json(_o['laakevaihto']) unless _o['laakevaihto'].nil?
      @viitehinta = Float.from_json(_o['viitehinta']) unless _o['viitehinta'].nil?
      @hintaputki = Float.from_json(_o['hintaputki']) unless _o['hintaputki'].nil?
      @reseptivalmiste = Fixnum.from_json(_o['reseptivalmiste']) unless _o['reseptivalmiste'].nil?
      @maaraamisehto = String.from_json(_o['maaraamisehto']) unless _o['maaraamisehto'].nil?
      @huume = Fixnum.from_json(_o['huume']) unless _o['huume'].nil?
      @liikennevaara = Fixnum.from_json(_o['liikennevaara']) unless _o['liikennevaara'].nil?
      @lapsille = Fixnum.from_json(_o['lapsille']) unless _o['lapsille'].nil?
      @annosjakelu = Fixnum.from_json(_o['annosjakelu']) unless _o['annosjakelu'].nil?
      @jakouurre = Fixnum.from_json(_o['jakouurre']) unless _o['jakouurre'].nil?
      @hintamuutos = String.from_json(_o['hintamuutos']) unless _o['hintamuutos'].nil?
      @suorakorvauskoodi = String.from_json(_o['suorakorvauskoodi']) unless _o['suorakorvauskoodi'].nil?
      @pkv = String.from_json(_o['pkv']) unless _o['pkv'].nil?
      @valmistusohje = String.from_json(_o['valmistusohje']) unless _o['valmistusohje'].nil?
      @lisatiedot = String.from_json(_o['lisatiedot']) unless _o['lisatiedot'].nil?
      if !_o['atc'].nil?
        @atc = Array.new
        _oa = _o['atc']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @atc.push Fi::Mediconsult::Core::Client::Dto::Laakitys::LaakeAtc.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @atc.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
      if !_o['annostusSoveltuvuus'].nil?
        @annostusSoveltuvuus = Array.new
        _oa = _o['annostusSoveltuvuus']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @annostusSoveltuvuus.push Fi::Mediconsult::Core::Client::Dto::Laakitys::LaakeAnnostusSoveltuvuus.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @annostusSoveltuvuus.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
      if !_o['yhteisvaikutus'].nil?
        @yhteisvaikutus = Array.new
        _oa = _o['yhteisvaikutus']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @yhteisvaikutus.push Fi::Mediconsult::Core::Client::Dto::Laakitys::LaakeYhteisvaikutus.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @yhteisvaikutus.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
      if !_o['vastaAihe'].nil?
        @vastaAihe = Array.new
        _oa = _o['vastaAihe']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @vastaAihe.push Fi::Mediconsult::Core::Client::Dto::Laakitys::LaakeVastaAihe.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @vastaAihe.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
      if !_o['terapiaryhma'].nil?
        @terapiaryhma = Array.new
        _oa = _o['terapiaryhma']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @terapiaryhma.push Fi::Mediconsult::Core::Client::Dto::Laakitys::LaakeTerapiaryhma.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @terapiaryhma.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
      if !_o['koostumus'].nil?
        @koostumus = Array.new
        _oa = _o['koostumus']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @koostumus.push Fi::Mediconsult::Core::Client::Dto::Laakitys::LaakeKoostumus.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @koostumus.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
      if !_o['tiivistelma'].nil?
        @tiivistelma = Array.new
        _oa = _o['tiivistelma']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @tiivistelma.push Fi::Mediconsult::Core::Client::Dto::Laakitys::LaakeTiivistelma.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @tiivistelma.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
      if !_o['seloste'].nil?
        @seloste = Array.new
        _oa = _o['seloste']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @seloste.push Fi::Mediconsult::Core::Client::Dto::Laakitys::LaakeSeloste.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @seloste.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
      if !_o['laakeaineet'].nil?
        @laakeaineet = Array.new
        _oa = _o['laakeaineet']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @laakeaineet.push Fi::Mediconsult::Core::Client::Dto::Laakitys::LaakeAine.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @laakeaineet.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
    end

    # constructs a Laake from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Event

  # (no documentation provided)
  class CalendarEventContentGroupItemDto < Fi::Mediconsult::Mediplan::Dto::KuhaDtoBase 

    # the title
    attr_accessor :title
    # the meaning
    attr_accessor :meaning
    # the ordering
    attr_accessor :ordering
    # the removed
    attr_accessor :removed

    # the json hash for this CalendarEventContentGroupItemDto
    def to_jaxb_json_hash
      _h = super
      _h['title'] = title.to_jaxb_json_hash unless title.nil?
      _h['meaning'] = meaning.to_jaxb_json_hash unless meaning.nil?
      _h['ordering'] = ordering.to_jaxb_json_hash unless ordering.nil?
      _h['removed'] = removed.to_jaxb_json_hash unless removed.nil?
      return _h
    end

    #initializes this CalendarEventContentGroupItemDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @title = Fi::Mediconsult::Core::Client::Dto::Title::BaseTitleValue.from_json(_o['title']) unless _o['title'].nil?
      @meaning = Fixnum.from_json(_o['meaning']) unless _o['meaning'].nil?
      @ordering = Fixnum.from_json(_o['ordering']) unless _o['ordering'].nil?
      @removed = Boolean.from_json(_o['removed']) unless _o['removed'].nil?
    end

    # constructs a CalendarEventContentGroupItemDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Rights

  # (no documentation provided)
  class ACLPerm

    # 
    VIEW = "VIEW"

    # 
    ADD = "ADD"

    # 
    CHANGE = "CHANGE"

    # 
    REMOVE = "REMOVE"
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Laakitys

  # (no documentation provided)
  class LaakeTiivistelmaTeksti < Fi::Mediconsult::Core::Client::Dto::AbstractDTO 

    # Returns the part number of the summary text, can be used to order summaries
    attr_accessor :osa
    # Returns the header of the
    attr_accessor :otsikko
    # Returns the summary text
    attr_accessor :teksti

    # the json hash for this LaakeTiivistelmaTeksti
    def to_jaxb_json_hash
      _h = super
      _h['osa'] = osa.to_jaxb_json_hash unless osa.nil?
      _h['otsikko'] = otsikko.to_jaxb_json_hash unless otsikko.nil?
      _h['teksti'] = teksti.to_jaxb_json_hash unless teksti.nil?
      return _h
    end

    #initializes this LaakeTiivistelmaTeksti with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @osa = Fixnum.from_json(_o['osa']) unless _o['osa'].nil?
      @otsikko = Fixnum.from_json(_o['otsikko']) unless _o['otsikko'].nil?
      @teksti = String.from_json(_o['teksti']) unless _o['teksti'].nil?
    end

    # constructs a LaakeTiivistelmaTeksti from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Riski

  # (no documentation provided)
  class RiskitietoStatus

    # 
    STATUS_EI_TIEDOSSA = "STATUS_EI_TIEDOSSA"

    # 
    EI_RISKEJA = "EI_RISKEJA"

    # 
    HUOMIOITAVIA_RISKEJA = "HUOMIOITAVIA_RISKEJA"

    # 
    KRIITTISIA_RISKEJA = "KRIITTISIA_RISKEJA"

    # 
    KRIITTISIA_JA_HUOMIOITAVIA_RISKEJA = "KRIITTISIA_JA_HUOMIOITAVIA_RISKEJA"
  end

end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Setup

  # (no documentation provided)
  class ReportingGroupDto < Fi::Mediconsult::Mediplan::Dto::KuhaDtoNameBase 

    # (no documentation provided)
    attr_accessor :version
    # color
    attr_accessor :color
    # meaning, cab be AVAILABLE, BYSY_MANDAROTY or BUSY_OPTIONAL
    attr_accessor :meaning
    # lomake id
    attr_accessor :calendarModelFormId
    # Either WORK or TIME
    attr_accessor :category
    # (no documentation provided)
    attr_accessor :eventModels

    # the json hash for this ReportingGroupDto
    def to_jaxb_json_hash
      _h = super
      _h['version'] = version.to_jaxb_json_hash unless version.nil?
      _h['color'] = color.to_jaxb_json_hash unless color.nil?
      _h['meaning'] = meaning.to_jaxb_json_hash unless meaning.nil?
      _h['calendarModelFormId'] = calendarModelFormId.to_jaxb_json_hash unless calendarModelFormId.nil?
      _h['category'] = category.to_jaxb_json_hash unless category.nil?
      if !eventModels.nil?
        _ha = Array.new
        eventModels.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['eventModels'] = _ha
      end
      return _h
    end

    #initializes this ReportingGroupDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @version = Fixnum.from_json(_o['version']) unless _o['version'].nil?
      @color = String.from_json(_o['color']) unless _o['color'].nil?
      @meaning = String.from_json(_o['meaning']) unless _o['meaning'].nil?
      @calendarModelFormId = Fixnum.from_json(_o['calendarModelFormId']) unless _o['calendarModelFormId'].nil?
      @category = String.from_json(_o['category']) unless _o['category'].nil?
      if !_o['eventModels'].nil?
        @eventModels = Array.new
        _oa = _o['eventModels']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @eventModels.push Fi::Mediconsult::Mediplan::Dto::Event::EventModelDto.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @eventModels.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
    end

    # constructs a ReportingGroupDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Event

  # (no documentation provided)
  class CalendarEventContentGroupDto < Fi::Mediconsult::Mediplan::Dto::KuhaDtoNameBase 

    # the items
    attr_accessor :items

    # the json hash for this CalendarEventContentGroupDto
    def to_jaxb_json_hash
      _h = super
      if !items.nil?
        _ha = Array.new
        items.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['items'] = _ha
      end
      return _h
    end

    #initializes this CalendarEventContentGroupDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      if !_o['items'].nil?
        @items = Array.new
        _oa = _o['items']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @items.push Fi::Mediconsult::Mediplan::Dto::Event::CalendarEventContentGroupItemDto.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @items.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
    end

    # constructs a CalendarEventContentGroupDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Event

  # (no documentation provided)
  class RequiredEquipmentTypeDto < Fi::Mediconsult::Mediplan::Dto::KuhaDtoNameBase 

    # (no documentation provided)
    attr_accessor :requirement
    # (no documentation provided)
    attr_accessor :amount

    # the json hash for this RequiredEquipmentTypeDto
    def to_jaxb_json_hash
      _h = super
      _h['requirement'] = requirement.to_jaxb_json_hash unless requirement.nil?
      _h['amount'] = amount.to_jaxb_json_hash unless amount.nil?
      return _h
    end

    #initializes this RequiredEquipmentTypeDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @requirement = String.from_json(_o['requirement']) unless _o['requirement'].nil?
      @amount = Fixnum.from_json(_o['amount']) unless _o['amount'].nil?
    end

    # constructs a RequiredEquipmentTypeDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Title

module Edit

  # (no documentation provided)
  class EditTitleValue < Fi::Mediconsult::Core::Client::Dto::Title::BaseTitleValue 


    # the json hash for this EditTitleValue
    def to_jaxb_json_hash
      _h = super
      return _h
    end

    #initializes this EditTitleValue with a json hash
    def init_jaxb_json_hash(_o)
      super _o
    end

    # constructs a EditTitleValue from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Event

  # (no documentation provided)
  class EventModelDto < Fi::Mediconsult::Mediplan::Dto::KuhaDtoNameBase 

    # (no documentation provided)
    attr_accessor :basicData
    # the reportingGroupId
    attr_accessor :reportingGroupId
    # the calendarModelFormId
    attr_accessor :calendarModelFormId
    # (no documentation provided)
    attr_accessor :defaultUnit
    # (no documentation provided)
    attr_accessor :internalNote
    # the defaultDurationInMins
    attr_accessor :defaultDurationInMins
    # the startTimeLimit
    attr_accessor :startTimeLimit
    # the endTimeLimit
    attr_accessor :endTimeLimit
    # the requiredSkills
    attr_accessor :requiredSkills
    # the requiredRoomGroups
    attr_accessor :requiredRoomGroups
    # the requiredEquipmentTypes
    attr_accessor :requiredEquipmentTypes
    # (no documentation provided)
    attr_accessor :contentGroups
    # the minParticipants
    attr_accessor :minParticipants
    # the maxParticipants
    attr_accessor :maxParticipants
    # (no documentation provided)
    attr_accessor :waitingRoom
    # (no documentation provided)
    attr_accessor :serviceClass
    # (no documentation provided)
    attr_accessor :serviceClassChangeable

    # the json hash for this EventModelDto
    def to_jaxb_json_hash
      _h = super
      _h['basicData'] = basicData.to_jaxb_json_hash unless basicData.nil?
      _h['reportingGroupId'] = reportingGroupId.to_jaxb_json_hash unless reportingGroupId.nil?
      _h['calendarModelFormId'] = calendarModelFormId.to_jaxb_json_hash unless calendarModelFormId.nil?
      _h['defaultUnit'] = defaultUnit.to_jaxb_json_hash unless defaultUnit.nil?
      _h['internalNote'] = internalNote.to_jaxb_json_hash unless internalNote.nil?
      _h['defaultDurationInMins'] = defaultDurationInMins.to_jaxb_json_hash unless defaultDurationInMins.nil?
      _h['startTimeLimit'] = startTimeLimit.to_jaxb_json_hash unless startTimeLimit.nil?
      _h['endTimeLimit'] = endTimeLimit.to_jaxb_json_hash unless endTimeLimit.nil?
      if !requiredSkills.nil?
        _ha = Array.new
        requiredSkills.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['requiredSkills'] = _ha
      end
      if !requiredRoomGroups.nil?
        _ha = Array.new
        requiredRoomGroups.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['requiredRoomGroups'] = _ha
      end
      if !requiredEquipmentTypes.nil?
        _ha = Array.new
        requiredEquipmentTypes.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['requiredEquipmentTypes'] = _ha
      end
      if !contentGroups.nil?
        _ha = Array.new
        contentGroups.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['contentGroups'] = _ha
      end
      _h['minParticipants'] = minParticipants.to_jaxb_json_hash unless minParticipants.nil?
      _h['maxParticipants'] = maxParticipants.to_jaxb_json_hash unless maxParticipants.nil?
      _h['waitingRoom'] = waitingRoom.to_jaxb_json_hash unless waitingRoom.nil?
      _h['serviceClass'] = serviceClass.to_jaxb_json_hash unless serviceClass.nil?
      _h['serviceClassChangeable'] = serviceClassChangeable.to_jaxb_json_hash unless serviceClassChangeable.nil?
      return _h
    end

    #initializes this EventModelDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @basicData = Hash.from_json(_o['basicData']) unless _o['basicData'].nil?
      @reportingGroupId = Bignum.from_json(_o['reportingGroupId']) unless _o['reportingGroupId'].nil?
      @calendarModelFormId = Fixnum.from_json(_o['calendarModelFormId']) unless _o['calendarModelFormId'].nil?
      @defaultUnit = Fixnum.from_json(_o['defaultUnit']) unless _o['defaultUnit'].nil?
      @internalNote = String.from_json(_o['internalNote']) unless _o['internalNote'].nil?
      @defaultDurationInMins = Fixnum.from_json(_o['defaultDurationInMins']) unless _o['defaultDurationInMins'].nil?
      @startTimeLimit = java.time::LocalTime.from_json(_o['startTimeLimit']) unless _o['startTimeLimit'].nil?
      @endTimeLimit = java.time::LocalTime.from_json(_o['endTimeLimit']) unless _o['endTimeLimit'].nil?
      if !_o['requiredSkills'].nil?
        @requiredSkills = Array.new
        _oa = _o['requiredSkills']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @requiredSkills.push Fi::Mediconsult::Mediplan::Dto::Worker::SkillDto.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @requiredSkills.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
      if !_o['requiredRoomGroups'].nil?
        @requiredRoomGroups = Array.new
        _oa = _o['requiredRoomGroups']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @requiredRoomGroups.push Fi::Mediconsult::Mediplan::Dto::Setup::RoomGroupDto.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @requiredRoomGroups.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
      if !_o['requiredEquipmentTypes'].nil?
        @requiredEquipmentTypes = Array.new
        _oa = _o['requiredEquipmentTypes']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @requiredEquipmentTypes.push Fi::Mediconsult::Mediplan::Dto::Event::RequiredEquipmentTypeDto.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @requiredEquipmentTypes.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
      if !_o['contentGroups'].nil?
        @contentGroups = Array.new
        _oa = _o['contentGroups']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @contentGroups.push Fi::Mediconsult::Mediplan::Dto::Setup::ContentGroupDto.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @contentGroups.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
      @minParticipants = Fixnum.from_json(_o['minParticipants']) unless _o['minParticipants'].nil?
      @maxParticipants = Fixnum.from_json(_o['maxParticipants']) unless _o['maxParticipants'].nil?
      @waitingRoom = String.from_json(_o['waitingRoom']) unless _o['waitingRoom'].nil?
      @serviceClass = String.from_json(_o['serviceClass']) unless _o['serviceClass'].nil?
      @serviceClassChangeable = Boolean.from_json(_o['serviceClassChangeable']) unless _o['serviceClassChangeable'].nil?
    end

    # constructs a EventModelDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Course

  # (no documentation provided)
  class CoursePeriodDto < Fi::Mediconsult::Mediplan::Dto::KuhaDtoNameBase 

    # (no documentation provided)
    attr_accessor :status
    # (no documentation provided)
    attr_accessor :minAttendees
    # (no documentation provided)
    attr_accessor :maxAttendees
    # (no documentation provided)
    attr_accessor :startTime
    # end date
    attr_accessor :endTime
    # customers
    attr_accessor :customers
    # Period tags connnected to this course period
    attr_accessor :periodTags

    # the json hash for this CoursePeriodDto
    def to_jaxb_json_hash
      _h = super
      _h['status'] = status.to_jaxb_json_hash unless status.nil?
      _h['minAttendees'] = minAttendees.to_jaxb_json_hash unless minAttendees.nil?
      _h['maxAttendees'] = maxAttendees.to_jaxb_json_hash unless maxAttendees.nil?
      _h['startTime'] = startTime.to_jaxb_json_hash unless startTime.nil?
      _h['endTime'] = endTime.to_jaxb_json_hash unless endTime.nil?
      if !customers.nil?
        _ha = Array.new
        customers.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['customers'] = _ha
      end
      if !periodTags.nil?
        _ha = Array.new
        periodTags.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['periodTags'] = _ha
      end
      return _h
    end

    #initializes this CoursePeriodDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @status = String.from_json(_o['status']) unless _o['status'].nil?
      @minAttendees = Fixnum.from_json(_o['minAttendees']) unless _o['minAttendees'].nil?
      @maxAttendees = Fixnum.from_json(_o['maxAttendees']) unless _o['maxAttendees'].nil?
      @startTime = Bignum.from_json(_o['startTime']) unless _o['startTime'].nil?
      @endTime = Bignum.from_json(_o['endTime']) unless _o['endTime'].nil?
      if !_o['customers'].nil?
        @customers = Array.new
        _oa = _o['customers']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @customers.push Fi::Mediconsult::Mediplan::Dto::Course::CourseCustomerDto.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @customers.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
      if !_o['periodTags'].nil?
        @periodTags = Array.new
        _oa = _o['periodTags']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @periodTags.push Fi::Mediconsult::Mediplan::Dto::Course::TagsForPeriodDto.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @periodTags.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
    end

    # constructs a CoursePeriodDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Course

  # (no documentation provided)
  class CourseNamedGroupDto < Fi::Mediconsult::Mediplan::Dto::KuhaDtoNameBase 

    # (no documentation provided)
    attr_accessor :removed
    # (no documentation provided)
    attr_accessor :members
    # (no documentation provided)
    attr_accessor :newNameGroupId

    # the json hash for this CourseNamedGroupDto
    def to_jaxb_json_hash
      _h = super
      _h['removed'] = removed.to_jaxb_json_hash unless removed.nil?
      if !members.nil?
        _ha = Array.new
        members.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['members'] = _ha
      end
      _h['newNameGroupId'] = newNameGroupId.to_jaxb_json_hash unless newNameGroupId.nil?
      return _h
    end

    #initializes this CourseNamedGroupDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @removed = Boolean.from_json(_o['removed']) unless _o['removed'].nil?
      if !_o['members'].nil?
        @members = Array.new
        _oa = _o['members']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @members.push Fi::Mediconsult::Mediplan::Dto::Course::NamedGroupMemberDto.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @members.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
      @newNameGroupId = Bignum.from_json(_o['newNameGroupId']) unless _o['newNameGroupId'].nil?
    end

    # constructs a CourseNamedGroupDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Setup

  # (no documentation provided)
  class ContentGroupDto < Fi::Mediconsult::Mediplan::Dto::KuhaDtoNameBase 

    # (no documentation provided)
    attr_accessor :type
    # (no documentation provided)
    attr_accessor :visibility
    # (no documentation provided)
    attr_accessor :order
    # (no documentation provided)
    attr_accessor :removed
    # (no documentation provided)
    attr_accessor :freeItems

    # the json hash for this ContentGroupDto
    def to_jaxb_json_hash
      _h = super
      _h['type'] = type.to_jaxb_json_hash unless type.nil?
      _h['visibility'] = visibility.to_jaxb_json_hash unless visibility.nil?
      _h['order'] = order.to_jaxb_json_hash unless order.nil?
      _h['removed'] = removed.to_jaxb_json_hash unless removed.nil?
      if !freeItems.nil?
        _ha = Array.new
        freeItems.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['freeItems'] = _ha
      end
      return _h
    end

    #initializes this ContentGroupDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @type = String.from_json(_o['type']) unless _o['type'].nil?
      @visibility = String.from_json(_o['visibility']) unless _o['visibility'].nil?
      @order = Fixnum.from_json(_o['order']) unless _o['order'].nil?
      @removed = Boolean.from_json(_o['removed']) unless _o['removed'].nil?
      if !_o['freeItems'].nil?
        @freeItems = Array.new
        _oa = _o['freeItems']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @freeItems.push Fi::Mediconsult::Mediplan::Dto::Setup::FreeContentGroupItem.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @freeItems.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
    end

    # constructs a ContentGroupDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Setup

  # (no documentation provided)
  class RoomGroupDto < Fi::Mediconsult::Mediplan::Dto::KuhaDtoNameBase 

    # (no documentation provided)
    attr_accessor :roomDtos

    # the json hash for this RoomGroupDto
    def to_jaxb_json_hash
      _h = super
      if !roomDtos.nil?
        _ha = Array.new
        roomDtos.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['roomDtos'] = _ha
      end
      return _h
    end

    #initializes this RoomGroupDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      if !_o['roomDtos'].nil?
        @roomDtos = Array.new
        _oa = _o['roomDtos']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @roomDtos.push Fi::Mediconsult::Mediplan::Dto::Setup::RoomDto.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @roomDtos.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
    end

    # constructs a RoomGroupDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Title

module View

  # (no documentation provided)
  class ViewTitleValue < Fi::Mediconsult::Core::Client::Dto::Title::BaseTitleValue 

    # String presentation of the value
    attr_accessor :presentation
    # true if value is empty, otherwise false
    attr_accessor :empty

    # the json hash for this ViewTitleValue
    def to_jaxb_json_hash
      _h = super
      _h['presentation'] = presentation.to_jaxb_json_hash unless presentation.nil?
      _h['empty'] = empty.to_jaxb_json_hash unless empty.nil?
      return _h
    end

    #initializes this ViewTitleValue with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @presentation = String.from_json(_o['presentation']) unless _o['presentation'].nil?
      @empty = Boolean.from_json(_o['empty']) unless _o['empty'].nil?
    end

    # constructs a ViewTitleValue from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Setup

  # (no documentation provided)
  class RoomDto < Fi::Mediconsult::Mediplan::Dto::KuhaDtoNameBase 

    # the startTime
    attr_accessor :startTime
    # the endTime
    attr_accessor :endTime
    # the roomGroupId
    attr_accessor :roomGroupId
    # the capacity
    attr_accessor :capacity
    # the waitingRoom
    attr_accessor :waitingRoom

    # the json hash for this RoomDto
    def to_jaxb_json_hash
      _h = super
      _h['startTime'] = startTime.to_jaxb_json_hash unless startTime.nil?
      _h['endTime'] = endTime.to_jaxb_json_hash unless endTime.nil?
      _h['roomGroupId'] = roomGroupId.to_jaxb_json_hash unless roomGroupId.nil?
      _h['capacity'] = capacity.to_jaxb_json_hash unless capacity.nil?
      _h['waitingRoom'] = waitingRoom.to_jaxb_json_hash unless waitingRoom.nil?
      return _h
    end

    #initializes this RoomDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @startTime = Java::Sql::Time.from_json(_o['startTime']) unless _o['startTime'].nil?
      @endTime = Java::Sql::Time.from_json(_o['endTime']) unless _o['endTime'].nil?
      @roomGroupId = Bignum.from_json(_o['roomGroupId']) unless _o['roomGroupId'].nil?
      @capacity = Fixnum.from_json(_o['capacity']) unless _o['capacity'].nil?
      @waitingRoom = String.from_json(_o['waitingRoom']) unless _o['waitingRoom'].nil?
    end

    # constructs a RoomDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Mediplan

module Dto

module Course

  # (no documentation provided)
  class CourseDto < Fi::Mediconsult::Mediplan::Dto::KuhaDtoNameBase 

    # (no documentation provided)
    attr_accessor :kelaID
    # (no documentation provided)
    attr_accessor :dayPrice
    # status
    attr_accessor :status
    # Start time
    attr_accessor :startTime
    # End time
    attr_accessor :endTime
    # List of course periods
    attr_accessor :periods
    # (no documentation provided)
    attr_accessor :namedGroups
    # (no documentation provided)
    attr_accessor :tags
    # (no documentation provided)
    attr_accessor :calendarContext

    # the json hash for this CourseDto
    def to_jaxb_json_hash
      _h = super
      _h['kelaID'] = kelaID.to_jaxb_json_hash unless kelaID.nil?
      _h['dayPrice'] = dayPrice.to_jaxb_json_hash unless dayPrice.nil?
      _h['status'] = status.to_jaxb_json_hash unless status.nil?
      _h['startTime'] = startTime.to_jaxb_json_hash unless startTime.nil?
      _h['endTime'] = endTime.to_jaxb_json_hash unless endTime.nil?
      if !periods.nil?
        _ha = Array.new
        periods.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['periods'] = _ha
      end
      if !namedGroups.nil?
        _ha = Array.new
        namedGroups.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['namedGroups'] = _ha
      end
      if !tags.nil?
        _ha = Array.new
        tags.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['tags'] = _ha
      end
      _h['calendarContext'] = calendarContext.to_jaxb_json_hash unless calendarContext.nil?
      return _h
    end

    #initializes this CourseDto with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @kelaID = String.from_json(_o['kelaID']) unless _o['kelaID'].nil?
      @dayPrice = Float.from_json(_o['dayPrice']) unless _o['dayPrice'].nil?
      @status = String.from_json(_o['status']) unless _o['status'].nil?
      @startTime = Bignum.from_json(_o['startTime']) unless _o['startTime'].nil?
      @endTime = Bignum.from_json(_o['endTime']) unless _o['endTime'].nil?
      if !_o['periods'].nil?
        @periods = Array.new
        _oa = _o['periods']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @periods.push Fi::Mediconsult::Mediplan::Dto::Course::CoursePeriodDto.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @periods.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
      if !_o['namedGroups'].nil?
        @namedGroups = Array.new
        _oa = _o['namedGroups']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @namedGroups.push Fi::Mediconsult::Mediplan::Dto::Course::CourseNamedGroupDto.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @namedGroups.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
      if !_o['tags'].nil?
        @tags = Array.new
        _oa = _o['tags']
        _oa.each { | _item | 
           if (_item['@class'].nil?)
             @tags.push Fi::Mediconsult::Mediplan::Dto::Course::TagsForCourseDto.from_json(_item)
           else
             clazz_array_parts = _item['@class'].split('.')
             short_clazz = clazz_array_parts.pop
             clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
             clazz = clazz_package + "::" + short_clazz
             @tags.push Object.const_get(clazz).send(:from_json, _item)
          end
         }
      end
      @calendarContext = Fi::Mediconsult::Mediplan::Dto::CalendarContextDto.from_json(_o['calendarContext']) unless _o['calendarContext'].nil?
    end

    # constructs a CourseDto from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Fi

module Mediconsult

module Core

module Client

module Dto

module Title

module View

  # (no documentation provided)
  class MittausBase < Fi::Mediconsult::Core::Client::Dto::Title::View::ViewTitleValue 

    # (no documentation provided)
    attr_accessor :reportId
    # (no documentation provided)
    attr_accessor :id
    # (no documentation provided)
    attr_accessor :owner
    # (no documentation provided)
    attr_accessor :normal
    # (no documentation provided)
    attr_accessor :formId
    # (no documentation provided)
    attr_accessor :editable
    # (no documentation provided)
    attr_accessor :comment
    # (no documentation provided)
    attr_accessor :datetime

    # the json hash for this MittausBase
    def to_jaxb_json_hash
      _h = super
      _h['reportId'] = reportId.to_jaxb_json_hash unless reportId.nil?
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['owner'] = owner.to_jaxb_json_hash unless owner.nil?
      _h['normal'] = normal.to_jaxb_json_hash unless normal.nil?
      _h['formId'] = formId.to_jaxb_json_hash unless formId.nil?
      _h['editable'] = editable.to_jaxb_json_hash unless editable.nil?
      _h['comment'] = comment.to_jaxb_json_hash unless comment.nil?
      _h['datetime'] = datetime.to_jaxb_json_hash unless datetime.nil?
      return _h
    end

    #initializes this MittausBase with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @reportId = Fixnum.from_json(_o['reportId']) unless _o['reportId'].nil?
      @id = Fixnum.from_json(_o['id']) unless _o['id'].nil?
      @owner = Fixnum.from_json(_o['owner']) unless _o['owner'].nil?
      @normal = Boolean.from_json(_o['normal']) unless _o['normal'].nil?
      @formId = Fixnum.from_json(_o['formId']) unless _o['formId'].nil?
      @editable = Boolean.from_json(_o['editable']) unless _o['editable'].nil?
      @comment = String.from_json(_o['comment']) unless _o['comment'].nil?
      @datetime = Bignum.from_json(_o['datetime']) unless _o['datetime'].nil?
    end

    # constructs a MittausBase from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end
